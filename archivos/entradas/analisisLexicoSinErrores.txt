program {
	<<CASOS DE PRUEBA
	f32 x,y,z,w;
	i32 i;
	<< Punto flotante en el limite del rango superior, funciona correctamente
	x =: 3.40282347F38; 
 

	<< Punto flotante en el limite del rango inferior, funciona correctamente
	z =: 1.17549435F-38; 



	<< maximo entero positivo
	i =: 2147483647; 



	<< maximo entero negativo
	i =: -2147483648;  



	<< Testeo numeros flotantes y sus alternativas.
	f32 e;
	e =: .08;
	e =: 3.00;
	e =: 3.00F2;
	e =: 3.00F-2;

	<< Identificadores de mas y menos de 25 caracteres
	i32 pruebadeidentificadordemasdeveinticincocaracteres;
	i32 identificador;

	<< Identificadores con letras, digitos y -
	f32 hola;
	i32 hola123;
	i32 hola_prueba;

	<< SENTENCIAS DECLARATIVAS
	
	<<declaracion de variables de tipo enteras
	i32 xa;
	i32 a, b,c;

	<<declaracion de variables de tipo flotantes
	f32 ya,ws,de;
	f32 jk;

	<< declaracion de funcion con retorno de tipo entero
	fun cumple(i32 a,i32 b): i32 {
		i32 z;
		z=: a + b;
		return (z);
	};

	<< declaracion de funcion con retorno de tipo flotante
	fun cumple1(f32 a, f32 b): f32 {
		f32 z;
		z=: a + b;
		return (z);
	};

      << funcion con varios retornos
	fun cumple2 (i32 a, i32 b): i32 {
		if (a < b) then { 
			return (a);
		}
		else {
			return (3);
		}
		end_if;
	};

	<< declaracion de constantes
    const ab =: 3, ba =:2;

	<<funcion con varios retornos y continue con etiquetado
	fun cumple3 (i32 a,i32 b): i32 {
		if (a < b) then { 
			i32 j;
			outer: while ( i < 10 ) : (i =: i + 1 ) {
			while ( j < 5 ) : (j =: j + 1 ) {
				continue :outer;
					return (a);    
				};           
			};
		}
		else {
			return (3);
		}
		end_if;
	};

	<< SENTENCIAS EJECUTABLES
	
	<< asignacion
	a =: 3 + 1;

	<<funcion como expresion asignada a una variable
	a =: cumple (a,b);
	

	<<sentencia when
	const c1=:3, c2=:4;
	when( c1<c2 ) then 
      { 
      	a =: 3 ;
      };
	
	<< sentencia while
	while ( i < 10 ) : (i =: i + 1 ) {
          
     	};


	<< continue con etiquetado
	i32 a1,a2;
	outer: while ( a1 < 10 ) : (a1 =: a1 + 1 ) {
      		while ( a2 < 5 ) : (a2 =: a2 + 1 ) {
            		continue :outer;     
            	};           
            };
	

	<< ERRORES

	<< las sentencias declarativas no pueden aparecer dentro de sentencias ejecutables
	while (i < 10 ) : (i =: i + 1 ) {
		<<i32 a;
	};

	<<Palabras reservadas escritas en minúsculas y mayúsculas
	if (hola123 < 3) then {
	} end_if;

	<< cadena de una linea
	out(`hola`);

	<< cadena multilinea
	out( `prueba de cadena/
	multilinea`);

}