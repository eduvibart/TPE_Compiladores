//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramaticaFeli.y"
package Principal;
import java.io.IOException;
import AnalizadorLexico.AnalizadorLexico;
import AnalizadorLexico.Token;
import GeneracionCodigoIntermedio.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

//#line 28 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IF=257;
public final static short THEN=258;
public final static short ELSE=259;
public final static short END_IF=260;
public final static short OUT=261;
public final static short FUN=262;
public final static short RETURN=263;
public final static short BREAK=264;
public final static short WHEN=265;
public final static short WHILE=266;
public final static short FOR=267;
public final static short CONTINUE=268;
public final static short ID=269;
public final static short I32=270;
public final static short F32=271;
public final static short PUNTO=272;
public final static short PARENT_A=273;
public final static short PARENT_C=274;
public final static short COMILLA=275;
public final static short COMA=276;
public final static short DOSPUNTOS=277;
public final static short PUNTOCOMA=278;
public final static short IGUAL=279;
public final static short MAYOR=280;
public final static short MENOR=281;
public final static short MENORIGUAL=282;
public final static short MAYORIGUAL=283;
public final static short LLAVE_A=284;
public final static short LLAVE_C=285;
public final static short EXCL=286;
public final static short DIST=287;
public final static short ASIG=288;
public final static short CADENA=289;
public final static short COMENT=290;
public final static short CONST=291;
public final static short SUMA=292;
public final static short RESTA=293;
public final static short MULT=294;
public final static short DIV=295;
public final static short ENTERO=296;
public final static short FLOAT=297;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    1,    2,    2,    2,    3,    3,
    4,    4,    4,    9,    9,    6,    6,   10,   10,   11,
   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
   11,   11,   11,   11,    7,    7,    7,   13,   13,   13,
   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
   14,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   19,   19,   19,   19,
   19,   19,   19,   19,   24,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   25,   25,   25,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   26,   31,   31,   31,   31,   31,   31,
   31,   31,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   22,   22,   22,
   22,   12,   12,    8,   33,   33,   34,   34,   34,    5,
    5,    5,    5,    5,    5,    5,   15,   15,   15,   28,
   28,   28,   28,   28,   28,   28,   28,   28,   39,   39,
   39,   39,   39,   40,   40,   40,   29,   29,   29,   29,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   23,   23,   23,   27,   27,
   27,   27,   27,   41,   41,   41,   18,   18,   18,   18,
   36,   36,   36,   36,   36,   36,   36,   36,   38,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   42,   42,   42,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   32,   32,   32,   45,   45,   45,   45,
   45,   45,   45,   45,   44,   44,   44,   44,   44,   44,
   44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
   44,   44,   44,   44,   44,   44,   44,   44,   44,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   46,   46,   16,   16,   16,   16,   16,
   16,   16,
};
final static short yylen[] = {                            2,
    4,    4,    4,    4,    1,    0,    3,    3,    1,    1,
    1,    1,    1,    1,    1,    2,    2,    3,    1,    9,
    7,    6,    9,    7,    6,    8,    6,    5,    7,    5,
    4,    6,    3,    2,    4,    4,    2,    0,    3,    3,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,   11,   13,   13,    8,   13,    9,   13,   12,   10,
    9,    8,   12,   11,    9,    8,    7,    6,    5,    4,
    3,    2,   11,   10,   12,   11,    8,    6,    8,    6,
    5,    4,    3,    2,    2,   12,   10,   11,    9,   12,
   10,    9,    8,    7,    6,    5,    4,    3,   11,    9,
    8,    7,    6,    5,    4,    3,    2,   17,   17,   15,
   15,   16,   16,   14,   14,   17,   17,   15,   15,   14,
   14,   13,   13,   12,   11,   10,    9,    8,    7,    6,
    5,    4,    3,   16,   16,   14,   14,   13,   13,   12,
   12,   11,   10,    9,    8,    7,    6,    5,    4,    3,
    2,    0,    3,    3,    1,    1,    1,    1,    1,    1,
    2,    1,    2,    1,    8,    6,    8,    6,    5,    4,
    3,    2,   11,   12,   12,    8,   13,    9,   13,   12,
   10,    9,    8,   12,   11,    9,    8,    7,   12,   11,
   11,   10,    6,    5,    4,    3,    2,    4,    4,    3,
    2,    2,    2,    2,    3,    1,    3,    3,    2,    1,
    1,    1,    1,    1,    1,    1,    3,    2,    3,    3,
    3,    1,    3,    3,    3,    3,    3,    3,    3,    3,
    1,    3,    3,    1,    1,    1,    1,    1,    2,    2,
   12,   12,   11,    8,   13,    9,   13,   12,   10,    9,
    8,   12,   11,    9,    8,    7,   11,   10,   12,   11,
    6,    5,    4,    3,    2,    3,    3,    2,    1,    1,
    1,    1,    1,    0,    3,    2,    4,    4,    3,    2,
    8,    6,    8,    6,    5,    4,    3,    2,   12,   10,
   11,    9,   11,    9,    8,    7,    6,    5,    4,    3,
    2,    0,    3,    2,    1,    1,    1,    1,    1,    1,
    2,    1,    2,    0,    2,    2,    8,    6,    8,    6,
    5,    4,    3,    2,   12,   12,   11,    8,   13,    9,
   13,   12,   10,    9,    8,   12,   11,    9,    8,    7,
   11,   10,   12,   11,    6,    5,    4,    3,    2,   17,
   17,   15,   15,   16,   16,   14,   14,   17,   15,   14,
   17,   15,   14,   13,   13,   12,   11,   10,    9,    8,
    7,    6,    5,    4,    3,   16,   14,   13,   16,   14,
   13,   12,   12,   11,   10,    9,    8,    7,    6,    5,
    4,    3,    2,    1,    1,    6,    4,    3,    6,    4,
    3,    5,
};
final static short yydefred[] = {                         0,
    0,    5,    0,    0,    6,    6,    6,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   14,   15,    4,
    0,    0,    9,   10,   11,   12,   13,    0,    0,  210,
  216,  212,    0,  211,  213,  214,  215,    3,    2,    1,
  265,    0,  280,    0,   34,    0,  288,    0,  301,    0,
  393,    0,  218,    0,   85,    0,    0,    0,  206,    8,
    7,   17,   19,    0,   37,   38,    0,    0,  264,    0,
    0,  237,  238,  236,    0,    0,  235,    0,    0,    0,
  231,  279,    0,   33,    0,  287,    0,  300,    0,  392,
    0,  401,  395,  398,  394,    0,  219,    0,  209,    0,
    0,    0,    0,    0,  375,    0,  239,  240,  263,    0,
  268,  269,  270,  271,  272,  273,    0,    0,    0,    0,
    0,    0,    0,  278,  277,   31,    0,    0,    0,  286,
    0,  299,    0,  391,    0,  400,  397,    0,  208,  207,
  205,   18,   36,    0,    0,    0,    0,    0,   35,   41,
   42,   43,    0,   44,   45,   46,   47,   48,   49,   50,
   51,    0,    0,  374,    0,  262,    0,  225,    0,    0,
  226,    0,  267,    0,  227,  223,  228,  224,  232,  229,
  233,  230,   28,    0,  203,  202,   30,    0,    0,  285,
    0,  298,    0,  390,    0,  402,    0,   72,    0,  201,
    0,   84,    0,  107,    0,  151,    0,   40,   39,    0,
    0,    0,  373,    0,  261,  274,    0,   25,   22,   27,
    0,   32,    0,  284,  274,  282,  297,    0,  389,    0,
  399,  396,   71,    0,  200,    0,   83,    0,  106,    0,
  150,    0,   98,    0,  133,    0,    0,  372,    0,    0,
  256,    0,   24,   21,   29,    0,    0,  296,    0,    0,
  388,    0,   70,    0,  199,  198,   82,    0,  105,    0,
  149,    0,   97,    0,  132,    0,    0,  371,    0,  251,
    0,    0,  255,    0,  244,   26,    0,  283,  281,  295,
    0,  387,    0,   69,    0,   81,    0,  104,    0,  148,
    0,   96,    0,  131,    0,    0,  370,    0,  250,    0,
  246,  275,  254,  274,    0,   23,   20,  294,    0,    0,
    0,    0,    0,  302,  305,  307,  310,  309,  292,  306,
  308,  386,    0,   68,   38,    0,   80,   38,   78,  103,
    0,  147,    0,   95,    0,  130,    0,    0,  369,    0,
  249,  274,    0,    0,  258,    0,  349,    0,  313,  324,
    0,    0,  311,    0,  385,    0,    0,   67,    0,    0,
  102,    0,  146,    0,   94,    0,  129,    0,  302,  290,
  368,    0,    0,  260,    0,  253,    0,  257,  243,  348,
    0,  323,    0,  316,  315,  293,  291,    0,  384,    0,
    0,   62,    0,   66,    0,   55,   79,   77,  101,    0,
  145,    0,   93,    0,  128,    0,    0,  367,    0,  248,
    0,  259,  242,  252,  241,  347,    0,  322,    0,  303,
  382,    0,  383,    0,   61,    0,   57,    0,   65,   38,
    0,  100,    0,    0,    0,    0,  152,  155,  157,  160,
  159,  164,   89,  156,  158,  144,    0,   92,    0,  127,
    0,  289,  366,    0,    0,  247,  245,  346,    0,  321,
    0,  381,    0,  378,    0,   60,   38,    0,    0,    0,
   74,    0,  197,    0,  163,  172,    0,  161,    0,  143,
    0,   91,  152,   87,  126,    0,  364,    0,  365,    0,
  345,  302,    0,  320,  302,  318,  380,  302,  357,  377,
  302,  356,    0,   76,    0,    0,   64,    0,   73,   52,
  196,    0,  171,    0,   99,   88,    0,  142,    0,    0,
    0,  125,    0,  363,    0,  360,    0,    0,  340,    0,
    0,    0,    0,   59,    0,   75,    0,   63,    0,  195,
    0,  170,    0,  154,  153,  140,    0,  141,    0,   90,
   86,  124,    0,    0,  362,  302,  352,  359,  302,  353,
  335,    0,  339,    0,  328,  319,  317,  379,  354,  376,
  355,   58,   56,   53,   54,  194,    0,  169,    0,  138,
    0,  139,    0,  122,    0,  123,    0,    0,    0,  334,
    0,  330,  338,  302,    0,  193,  152,    0,  168,  152,
  166,  136,  152,  114,  137,  152,  115,  120,    0,  121,
    0,  361,  350,  358,  351,  333,  302,    0,    0,  342,
    0,    0,  188,    0,    0,    0,    0,  118,  152,  110,
  119,  152,  111,    0,  344,    0,  337,    0,  341,  327,
  183,    0,  187,    0,  176,  167,  165,  134,  112,  135,
  113,    0,    0,  332,    0,  343,  326,  336,  325,  182,
    0,  178,  186,  152,    0,  116,  108,  117,  109,  331,
  329,  181,  152,    0,    0,  192,    0,    0,  190,    0,
  185,    0,  191,  173,  180,    0,  189,  174,  184,  175,
  179,  177,
};
final static short yydgoto[] = {                          3,
    4,    8,   22,   23,  282,  150,  151,  152,   28,   64,
   29,  129,  103,  153,  325,   74,  156,  326,  158,  450,
  451,  452,   75,   33,  489,  527,  119,   76,   77,  454,
  455,  363,   58,   59,   34,   35,  327,  328,   80,   81,
  250,  364,  398,  330,  331,   96,
};
final static short yysindex[] = {                      -167,
 -251,    0,    0,  -49,    0,    0,    0,  971,  998,  960,
 -220, -100,  150,    9,   97,   99,  -50,    0,    0,    0,
 -186, -174,    0,    0,    0,    0,    0,  289,  -17,    0,
    0,    0,   61,    0,    0,    0,    0,    0,    0,    0,
    0, -224,    0, -219,    0,  183,    0, -218,    0, -212,
    0,  346,    0, -235,    0, -176, -221, -190,    0,    0,
    0,    0,    0, -145,    0,    0, -123,  386,    0,  -25,
  148,    0,    0,    0, -215,  510,    0,  -74,  -67,  354,
    0,    0,   56,    0,  301,    0,  152,    0,  180,    0,
 -162,    0,    0,    0,    0,  -16,    0,  730,    0,  -52,
 -186,  -72,  792,  246,    0,  440,    0,    0,    0,  688,
    0,    0,    0,    0,    0,    0, -169, -151, -144,   29,
   38,  -78,   47,    0,    0,    0, -185,  474,   39,    0,
  817,    0,   -6,    0, -246,    0,    0,   95,    0,    0,
    0,    0,    0,  479,  495,  515,  541,  543,    0,    0,
    0,    0, -143,    0,    0,    0,    0,    0,    0,    0,
    0,  799,  -66,    0, -155,    0, 1821,    0,  -40,  354,
    0,  354,    0,  730,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  351,    0,    0,    0,    7,  430,    0,
 1835,    0,  555,    0, -117,    0,  236,    0,   12,    0,
  138,    0,  192,    0,  201,    0,  539,    0,    0,  557,
  567,  -21,    0, -240,    0,    0, -102,    0,    0,    0,
  650,    0,  326,    0,    0,    0,    0,  551,    0,  625,
    0,    0,    0,  338,    0, -227,    0,  345,    0,  352,
    0, -147,    0,  235,    0,  640,   -3,    0, -101, 1015,
    0,  434,    0,    0,    0,  226, 1449,    0, -140,  378,
    0,  478,    0,  918,    0,    0,    0,  988,    0,  273,
    0, -236,    0,  379,    0,  -99,   88,    0,  654,    0,
  559,   89,    0, 1842,    0,    0,  672,    0,    0,    0,
 1665,    0,  258,    0,  668,    0,  824,    0,  570,    0,
  -62,    0,  296,    0, -188,  136,    0,  575,    0, 1856,
    0,    0,    0,    0,  -47,    0,    0,    0,  610,  680,
  611,  176, -109,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -182,    0,    0,  -35,    0,    0,    0,    0,
  685,    0,  692,    0,  612,    0,  -27, 1863,    0,  293,
    0,    0,   -1, 1463,    0,  109,    0,  364,    0,    0,
  415,  694,    0, 1274,    0, -127,  840,    0,  768,  857,
    0,  382,    0,  856,    0,  695,    0,  716,    0,    0,
    0, -118, 1470,    0,  143,    0,  332,    0,    0,    0,
  388,    0,  394,    0,    0,    0,    0,  195,    0,   93,
  127,    0,  240,    0,  884,    0,    0,    0,    0,  608,
    0,  449,    0,  409,    0,  932,  803,    0,  -19,    0,
  442,    0,    0,    0,    0,    0,  991,    0,  992,    0,
    0,  413,    0,  414,    0,  900,    0,  221,    0,    0,
   40,    0,  614,  680,  624,  176,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  120,    0, 1507,    0,
  457,    0,    0,  169,  181,    0,    0,    0, 1686,    0,
 1700,    0, 1721,    0, 1735,    0,    0,   67,  734,  916,
    0,  476,    0,  508,    0,    0,  513,    0, 1090,    0,
   44,    0,    0,    0,    0,  255,    0,  417,    0,  423,
    0,    0,   76,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  933,    0,  231,  244,    0,   82,    0,    0,
    0,  429,    0,  451,    0,    0,   83,    0,  223,  270,
 1104,    0,   55,    0, 1756,    0, 1770, 1288,    0,  780,
 1310, 1324, 1346,    0,  484,    0,  286,    0,  308,    0,
  996,    0, 1017,    0,    0,    0,  454,    0,  481,    0,
    0,    0,  313,  321,    0,    0,    0,    0,    0,    0,
    0,  782,    0, 1791,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1521,    0, 1543,    0,
 1557,    0, 1579,    0,  493,    0,  507, 1360, 1382,    0,
 1805,    0,    0,    0,  137,    0,    0,  144,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1593,    0,
 1615,    0,    0,    0,    0,    0,    0,  155, 1396,    0,
  662, 1127,    0,  787, 1141, 1164, 1178,    0,    0,    0,
    0,    0,    0, 1418,    0,  676,    0,  732,    0,    0,
    0,  873,    0, 1629,    0,    0,    0,    0,    0,    0,
    0, 1201, 1215,    0,  742,    0,    0,    0,    0,    0,
 1651,    0,    0,    0,  171,    0,    0,    0,    0,    0,
    0,    0,    0,  182, 1238,    0,  750, 1252,    0,  818,
    0,  844,    0,    0,    0,  861,    0,    0,    0,    0,
    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  191,    0,    0,
    0,    0,    0,  208,    0,    0,    0,    0,    0,  568,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  634,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1029,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  568,  701,
    0,  752,    0,  509,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1484,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1052,
    0, 1067,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1432,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  252,    0,  278,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,
};
final static short yygindex[] = {                         0,
    0, 1092,    0,    0,   14, 1042, 1150, 1200,  -70,    0,
    0,  372, -308, -269,   -8,   -4,    0,    4,    0,  -95,
  -84,  -63,  -41,   85, -417, -407, -244,  -31,  -23,    0,
    0,  107,    0,  486,    0,    0,  528,  595, 1026, 1070,
 -208, -368, -245,    0,    0,  458,
};
final static int YYTABLESIZE=2147;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         30,
   30,   30,  453,   31,   31,   31,   87,  159,   89,  194,
  417,   32,   32,   32,  128,  248,  257,  293,  160,  300,
   92,   24,   24,   24,   98,  336,  367,  339,  265,  370,
   95,   69,    5,   93,   99,   41,   82,   86,   94,  161,
  109,   15,   16,   88,   70,  329,  266,   15,   16,  195,
   70,  494,   42,   15,   16,  249,   70,   71,  110,  301,
   72,   73,  163,  350,  117,  118,  100,  346,   71,   83,
  183,   72,   73,  365,   71,  531,  140,   72,   73,   97,
   71,   60,   57,   72,   73,  101,  168,  174,    1,   15,
   16,  184,   70,  134,  154,  366,  176,  178,  155,  169,
  213,    2,  380,   61,  171,  354,  157,  347,  271,  117,
  118,  173,  208,  219,   95,   53,   71,  169,  128,   72,
   73,   15,   16,   71,   70,  135,   72,   73,  399,  412,
  102,  480,  214,  538,  209,  441,  541,  418,  229,  542,
  272,   71,  543,  383,   72,   73,   53,   56,   71,  104,
  254,   72,   73,  251,  278,   43,  304,  234,   30,  419,
  230,  238,   31,  240,  400,  401,  478,   55,  513,  236,
   32,  461,   44,  117,  118,  252,  279,  179,   56,  608,
  217,  611,   30,  614,  120,  617,   31,  162,  305,  632,
  169,  121,  635,  342,   32,  636,  142,  598,  637,  159,
  599,  159,  274,  139,  226,   53,    6,  212,  355,  516,
  160,  640,  160,  643,   71,  343,  317,   72,   73,  260,
  368,  662,   54,  503,  663,  506,   55,  509,  377,  512,
  356,  161,   54,  161,    7,  629,  463,   56,   65,  136,
   71,   30,  369,   72,   73,   31,  675,   54,   30,  192,
  378,   55,   31,   32,  384,  247,  685,  137,  644,  138,
   32,  333,  220,  684,   47,  688,   66,  233,  306,  277,
  193,  159,  464,  465,  159,   30,  385,   15,   16,   31,
   70,   48,  160,  221,  175,  160,  154,   32,  154,  567,
  155,  570,  155,  177,  187,  481,  359,  315,  157,  528,
  157,   30,  181,  161,   71,   31,  161,   72,   73,  159,
  562,  124,  188,   32,  189,  169,  391,  482,  382,  393,
  160,   71,  514,  353,   72,   73,   67,   68,  605,  125,
   71,  539,  372,   72,   73,  529,  530,  548,  554,   71,
  159,  161,   72,   73,  515,   30,  563,  564,  431,   31,
  196,  160,   49,  540,   51,  628,  259,   32,  154,  549,
  555,  154,  155,   93,  388,  155,  312,  414,  389,   50,
  157,   52,  161,  157,   30,  490,  432,  434,   31,  162,
  457,  162,  433,  159,  159,   71,   32,   71,   72,   73,
   72,   73,  630,  235,  160,  160,  154,  491,  422,  633,
  155,  448,  423,   15,   16,   45,   70,  130,  157,  348,
  645,  117,  118,  449,  631,  161,  161,  159,   46,   71,
  485,  634,   72,   73,  497,  131,  686,  154,  160,  496,
   71,  155,  646,   72,   73,  132,  499,  689,   84,  157,
  498,  500,  522,  107,  108,  524,  204,  237,  687,  161,
  448,  162,  362,  133,  162,   85,  239,   15,   16,  690,
   70,   71,  449,   16,   72,   73,   15,   16,  204,   70,
  154,  154,  430,   71,  155,  155,   72,   73,  556,  479,
  448,  286,  157,  157,   71,   16,  546,   72,   73,  162,
  273,  231,  449,   71,  162,  435,   72,   73,  436,  437,
   15,   16,  287,   70,  154,  557,  559,  162,  155,  232,
  532,   15,   16,  332,   70,   71,  157,  438,   72,   73,
  162,  547,  448,   15,   16,  558,   70,   71,  298,  162,
   72,   73,  533,  314,  449,   36,   36,   36,   71,  595,
  597,   72,   73,  162,   62,  584,  117,  118,  381,  299,
   71,  344,  488,   72,   73,  314,  126,   63,   15,   16,
  223,   70,   71,  162,  162,   72,   73,  585,  594,   78,
   18,   19,  345,  162,  127,   78,  596,   78,  448,    0,
  448,  255,  448,   78,  448,   71,  141,  424,   72,   73,
  449,  425,  449,  263,  449,  197,  449,  162,    0,  256,
  267,   90,   37,   37,   37,   71,  218,  269,   72,   73,
  448,  264,  448,   71,   91,  162,   72,   73,  268,  390,
   18,   19,  449,  448,  449,  270,  448,  448,  448,   15,
   16,   78,   70,  290,  302,  449,   79,  409,  449,  449,
  449,  105,   79,  426,   79,  448,   78,  122,  123,  428,
   79,  291,  303,  448,  448,  410,   71,  449,  106,   72,
   73,  427,  448,    0,  458,  449,  449,  429,  472,  474,
  392,  162,  534,  162,  449,  162,  448,  162,  536,  448,
   15,   16,  459,   70,  550,  222,  473,  475,  449,  283,
  535,  449,  284,  285,   36,  164,  537,  466,   79,   18,
   19,  467,  551,  162,  456,  162,  552,   71,  165,  590,
   72,   73,  495,   79,   15,   16,  162,   70,   36,  162,
  162,  162,   15,   16,  553,   70,   78,  591,   78,  185,
   78,  519,   78,  292,  198,  520,  592,    0,  162,  582,
    0,   71,  186,  583,   72,   73,  162,  162,  618,   71,
  200,  199,   72,   73,  593,  162,  112,  113,  114,  115,
  116,   37,  620,  521,  266,  111,  619,  201,  523,  162,
  202,   78,  162,   15,   16,    0,   70,   36,   15,   16,
  621,   70,  266,    0,   36,   37,    0,  203,  112,  113,
  114,  115,  116,   79,  241,   79,  204,   79,  206,   79,
   71,  117,  118,   72,   73,   71,  258,  242,   72,   73,
  227,   36,  243,  205,  309,  207,    0,  310,  311,  259,
   78,    0,  245,  234,  234,  340,  234,  228,  234,  244,
  349,  234,  234,  234,  234,  234,  234,   36,   79,  246,
    0,  234,  341,    0,   37,  234,  234,  234,  234,  234,
  234,   37,  234,  112,  113,  114,  115,  116,    0,  234,
  234,  234,  234,  442,  443,  357,  360,  375,   12,  483,
  145,  444,  445,  147,  148,  446,  323,   78,   37,  486,
  261,   36,  358,  361,  376,   78,  484,   79,   78,  222,
  222,  447,  222,  262,  222,  275,  487,  222,  222,  222,
  222,  222,  222,    0,   37,  253,    0,  222,  276,  307,
   36,  222,  222,  222,  222,  222,  222,  649,  222,   18,
   19,  650,  308,  334,  144,  222,  222,  316,   12,   13,
  145,  666,  146,  147,  148,  667,   17,   18,   19,   78,
  371,   18,   19,  166,   79,  167,    0,  373,   37,  394,
  413,  335,   79,  259,    0,   79,  220,  220,   21,  220,
  374,  220,  395,  259,  220,  220,  220,  220,  220,  220,
    0,  415,   71,    0,  220,   72,   73,   37,  220,  220,
  220,  220,  220,  220,  416,  220,    0,  668,   78,    0,
  144,  669,  220,  220,   12,   13,  145,  680,  146,  147,
  148,  681,   17,   18,   19,  693,   79,  221,  221,  694,
  221,   78,  221,    0,   78,  221,  221,  221,  221,  221,
  221,  117,  118,  404,   21,  221,  405,  406,    0,  221,
  221,  221,  221,  221,  221,  573,  221,  600,  574,  575,
  601,  602,  653,  221,  221,  654,  655,  143,  144,   25,
   25,   25,   12,   13,  145,   79,  146,  147,  148,  319,
   17,   18,   19,   12,  210,  211,  320,  321,   15,   16,
  322,  323,  190,  697,  191,    0,  149,  698,   79,  337,
  144,   79,   21,    0,   12,   13,  145,  462,  146,  147,
  148,    0,   17,   18,   19,  402,  144,    9,   10,  699,
   12,   13,  145,  700,  146,  147,  148,  338,   17,   18,
   19,  411,  407,  144,   21,    0,  701,   12,   13,  145,
  702,  146,  147,  148,  403,   17,   18,   19,  670,    0,
   21,  671,  672,    0,  112,  113,  114,  115,  116,  439,
  144,  408,  170,  172,   12,   13,  145,   21,  146,  147,
  148,    0,   17,   18,   19,  476,  144,   26,   26,   26,
   12,   13,  145,    0,  146,  147,  148,  440,   17,   18,
   19,  517,  144,  294,   21,  295,   12,   13,  145,    0,
  146,  147,  148,  477,   17,   18,   19,  460,  544,  144,
   21,  180,  182,   12,   13,  145,    0,  146,  147,  148,
  518,   17,   18,   19,    0,    0,   21,   27,   27,   27,
  112,  113,  114,  115,  116,   39,   11,  545,    0,    0,
   12,   13,    0,   21,   14,   15,   16,   11,   17,   18,
   19,   12,   13,    0,    0,   14,   15,   16,    0,   17,
   18,   19,    0,  296,   40,  297,  468,  470,  469,  471,
   21,  586,    0,  587,   11,   20,    0,    0,   12,   13,
    0,   21,   14,   15,   16,    0,   17,   18,   19,    0,
  280,   11,  588,    0,  589,   12,    0,    0,    0,   14,
   15,   16,   38,   17,  217,  217,    0,  217,   21,  217,
    0,    0,  217,  217,  217,  217,  217,  217,    0,  281,
    0,    0,  217,    0,    0,    0,  217,  312,  312,    0,
  312,    0,  312,  217,    0,  312,  312,  312,  312,  312,
  312,    0,  314,  314,    0,  314,    0,  314,    0,  312,
  314,  314,  314,  314,  314,  314,  312,    0,    0,    0,
    0,    0,    0,    0,  314,  525,  443,    0,    0,    0,
   12,  314,  145,  444,  445,  147,  148,  446,  323,  560,
  443,    0,    0,    0,   12,    0,  145,  444,  445,  147,
  148,  446,  323,    0,  526,    0,    0,    0,    0,    0,
    0,    0,  651,  443,    0,    0,    0,   12,  561,  145,
  444,  445,  147,  148,  446,  323,  656,  443,    0,    0,
    0,   12,    0,  145,  444,  445,  147,  148,  446,  323,
    0,  652,    0,    0,    0,    0,    0,    0,    0,  658,
  443,    0,    0,    0,   12,  657,  145,  444,  445,  147,
  148,  446,  323,  660,  443,    0,    0,    0,   12,    0,
  145,  444,  445,  147,  148,  446,  323,    0,  659,    0,
    0,    0,    0,    0,    0,    0,  676,  443,    0,    0,
    0,   12,  661,  145,  444,  445,  147,  148,  446,  323,
  678,  443,    0,    0,    0,   12,    0,  145,  444,  445,
  147,  148,  446,  323,    0,  677,    0,    0,    0,    0,
    0,    0,    0,  691,  443,    0,    0,    0,   12,  679,
  145,  444,  445,  147,  148,  446,  323,  695,  443,    0,
    0,    0,   12,    0,  145,  444,  445,  147,  148,  446,
  323,    0,  692,    0,    0,    0,    0,    0,    0,  396,
  319,    0,    0,    0,   12,    0,  696,  320,  321,   15,
   16,  322,  323,  571,  319,    0,    0,    0,   12,    0,
    0,  320,  321,   15,   16,  322,  323,    0,  397,    0,
    0,    0,    0,    0,    0,  576,  319,    0,    0,    0,
   12,    0,  572,  320,  321,   15,   16,  322,  323,  578,
  319,    0,    0,    0,   12,    0,    0,  320,  321,   15,
   16,  322,  323,    0,  577,    0,    0,    0,    0,    0,
    0,  580,  319,    0,    0,    0,   12,    0,  579,  320,
  321,   15,   16,  322,  323,  622,  319,    0,    0,    0,
   12,    0,    0,  320,  321,   15,   16,  322,  323,    0,
  581,    0,    0,    0,    0,    0,    0,  624,  319,    0,
    0,    0,   12,    0,  623,  320,  321,   15,   16,  322,
  323,  647,  319,    0,    0,    0,   12,    0,    0,  320,
  321,   15,   16,  322,  323,    0,  625,    0,    0,    0,
    0,    0,    0,  664,  319,    0,    0,    0,   12,    0,
  648,  320,  321,   15,   16,  322,  323,  304,  304,    0,
    0,    0,  304,    0,    0,  304,  304,  304,  304,  304,
  304,    0,  665,    0,  288,   11,    0,    0,    0,   12,
    0,    0,    0,   14,   15,   16,  304,   17,  386,   11,
    0,    0,    0,   12,    0,  420,   11,   14,   15,   16,
   12,   17,    0,  289,   14,   15,   16,    0,   17,  276,
  276,    0,    0,    0,  276,    0,    0,  387,  276,  276,
  276,    0,  276,    0,  421,    0,    0,    0,    0,    0,
    0,    0,  492,  443,    0,    0,    0,   12,  276,  145,
  444,  445,  147,  148,  446,  323,  606,  443,    0,    0,
    0,   12,    0,  145,  444,  445,  147,  148,  446,  323,
  493,    0,    0,    0,    0,    0,    0,    0,  609,  443,
    0,    0,    0,   12,  607,  145,  444,  445,  147,  148,
  446,  323,  612,  443,    0,    0,    0,   12,    0,  145,
  444,  445,  147,  148,  446,  323,  610,    0,    0,    0,
    0,    0,    0,    0,  615,  443,    0,    0,    0,   12,
  613,  145,  444,  445,  147,  148,  446,  323,  638,  443,
    0,    0,    0,   12,    0,  145,  444,  445,  147,  148,
  446,  323,  616,    0,    0,    0,    0,    0,    0,    0,
  641,  443,    0,    0,    0,   12,  639,  145,  444,  445,
  147,  148,  446,  323,  673,  443,    0,    0,    0,   12,
    0,  145,  444,  445,  147,  148,  446,  323,  642,    0,
    0,    0,    0,    0,    0,    0,  682,  443,    0,    0,
    0,   12,  674,  145,  444,  445,  147,  148,  446,  323,
  318,  319,    0,    0,    0,   12,    0,    0,  320,  321,
   15,   16,  322,  323,  683,    0,    0,    0,    0,    0,
    0,  501,  319,    0,    0,    0,   12,    0,  324,  320,
  321,   15,   16,  322,  323,  504,  319,    0,    0,    0,
   12,    0,    0,  320,  321,   15,   16,  322,  323,  502,
    0,    0,    0,    0,    0,    0,  507,  319,    0,    0,
    0,   12,    0,  505,  320,  321,   15,   16,  322,  323,
  510,  319,    0,    0,    0,   12,    0,    0,  320,  321,
   15,   16,  322,  323,  508,    0,    0,    0,    0,    0,
    0,  565,  319,    0,    0,    0,   12,    0,  511,  320,
  321,   15,   16,  322,  323,  568,  319,    0,    0,    0,
   12,    0,    0,  320,  321,   15,   16,  322,  323,  566,
    0,    0,    0,    0,    0,    0,  603,  319,    0,    0,
    0,   12,    0,  569,  320,  321,   15,   16,  322,  323,
  626,  319,    0,    0,    0,   12,    0,    0,  320,  321,
   15,   16,  322,  323,  604,    0,  215,   11,    0,    0,
    0,   12,    0,    0,    0,   14,   15,   16,  627,   17,
  224,   11,    0,    0,    0,   12,    0,  313,   11,   14,
   15,   16,   12,   17,  216,    0,   14,   15,   16,    0,
   17,  351,   11,    0,    0,    0,   12,    0,  225,  319,
   14,   15,   16,   12,   17,  314,  320,  321,   15,   16,
  322,  323,    0,    0,    0,    0,    0,    0,    0,  352,
    0,    0,    0,    0,    0,    0,  379,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          8,
    9,   10,  410,    8,    9,   10,   48,  103,   50,  256,
  379,    8,    9,   10,   85,  256,  225,  262,  103,  256,
  256,    8,    9,   10,   56,  295,  335,  297,  256,  338,
   54,  256,  284,  269,  256,  256,  256,  256,  274,  103,
  256,  266,  267,  256,  269,  291,  274,  266,  267,  296,
  269,  459,  273,  266,  267,  296,  269,  293,  274,  296,
  296,  297,  104,  308,  292,  293,  288,  256,  293,  289,
  256,  296,  297,  256,  293,  493,  100,  296,  297,  256,
  293,  256,  269,  296,  297,  276,  256,  119,  256,  266,
  267,  277,  269,  256,  103,  278,  120,  121,  103,  269,
  256,  269,  348,  278,  256,  314,  103,  296,  256,  292,
  293,  256,  256,  184,  138,  256,  293,  269,  189,  296,
  297,  266,  267,  293,  269,  288,  296,  297,  256,  374,
  276,  440,  288,  502,  278,  405,  505,  256,  256,  508,
  288,  293,  511,  352,  296,  297,  256,  288,  293,  273,
  221,  296,  297,  256,  256,  256,  256,  199,  167,  278,
  278,  203,  167,  205,  292,  293,  436,  277,  477,  201,
  167,  416,  273,  292,  293,  278,  278,  256,  288,  587,
  167,  589,  191,  591,  259,  593,  191,  103,  288,  607,
  269,  259,  610,  256,  191,  613,  269,  566,  616,  295,
  569,  297,  244,  256,  191,  256,  256,  274,  256,  479,
  295,  619,  297,  621,  293,  278,  287,  296,  297,  228,
  256,  639,  273,  469,  642,  471,  277,  473,  256,  475,
  278,  295,  273,  297,  284,  604,  256,  288,  256,  256,
  293,  250,  278,  296,  297,  250,  654,  273,  257,  256,
  278,  277,  257,  250,  256,  277,  674,  274,  627,  276,
  257,  293,  256,  671,  256,  683,  284,  256,  277,  273,
  277,  367,  292,  293,  370,  284,  278,  266,  267,  284,
  269,  273,  367,  277,  256,  370,  295,  284,  297,  535,
  295,  537,  297,  256,  256,  256,  320,  284,  295,  256,
  297,  310,  256,  367,  293,  310,  370,  296,  297,  405,
  256,  256,  274,  310,  276,  269,  358,  278,  350,  361,
  405,  293,  256,  310,  296,  297,  266,  267,  574,  274,
  293,  256,  341,  296,  297,  292,  293,  256,  256,  293,
  436,  405,  296,  297,  278,  354,  292,  293,  256,  354,
  256,  436,  256,  278,  256,  601,  269,  354,  367,  278,
  278,  370,  367,  269,  256,  370,  278,  376,  260,  273,
  367,  273,  436,  370,  383,  256,  400,  401,  383,  295,
  412,  297,  256,  479,  480,  293,  383,  293,  296,  297,
  296,  297,  256,  256,  479,  480,  405,  278,  256,  256,
  405,  410,  260,  266,  267,  256,  269,  256,  405,  274,
  256,  292,  293,  410,  278,  479,  480,  513,  269,  293,
  444,  278,  296,  297,  256,  274,  256,  436,  513,  461,
  293,  436,  278,  296,  297,  256,  256,  256,  256,  436,
  464,  465,  484,  296,  297,  487,  256,  256,  278,  513,
  459,  367,  277,  274,  370,  273,  256,  266,  267,  278,
  269,  293,  459,  256,  296,  297,  266,  267,  278,  269,
  479,  480,  278,  293,  479,  480,  296,  297,  256,  259,
  489,  256,  479,  480,  293,  278,  256,  296,  297,  405,
  256,  256,  489,  293,  410,  256,  296,  297,  259,  260,
  266,  267,  277,  269,  513,  529,  530,  256,  513,  274,
  256,  266,  267,  256,  269,  293,  513,  278,  296,  297,
  436,  278,  531,  266,  267,  256,  269,  293,  256,  278,
  296,  297,  278,  256,  531,    8,    9,   10,  293,  563,
  564,  296,  297,  459,  256,  260,  292,  293,  256,  277,
  293,  256,  446,  296,  297,  278,  256,  269,  266,  267,
  189,  269,  293,  479,  480,  296,  297,  260,  256,   42,
  270,  271,  277,  489,  274,   48,  256,   50,  587,   -1,
  589,  256,  591,   56,  593,  293,  101,  256,  296,  297,
  587,  260,  589,  256,  591,  138,  593,  513,   -1,  274,
  256,  256,    8,    9,   10,  293,  256,  256,  296,  297,
  619,  274,  621,  293,  269,  531,  296,  297,  274,  256,
  270,  271,  619,  632,  621,  274,  635,  636,  637,  266,
  267,  104,  269,  256,  256,  632,   42,  256,  635,  636,
  637,  256,   48,  256,   50,  654,  119,  294,  295,  256,
   56,  274,  274,  662,  663,  274,  293,  654,  273,  296,
  297,  274,  671,   -1,  256,  662,  663,  274,  256,  256,
  256,  587,  256,  589,  671,  591,  685,  593,  256,  688,
  266,  267,  274,  269,  256,  256,  274,  274,  685,  256,
  274,  688,  259,  260,  167,  256,  274,  256,  104,  270,
  271,  260,  274,  619,  256,  621,  256,  293,  269,  256,
  296,  297,  256,  119,  266,  267,  632,  269,  191,  635,
  636,  637,  266,  267,  274,  269,  199,  274,  201,  256,
  203,  256,  205,  256,  256,  260,  256,   -1,  654,  256,
   -1,  293,  269,  260,  296,  297,  662,  663,  256,  293,
  256,  273,  296,  297,  274,  671,  279,  280,  281,  282,
  283,  167,  256,  256,  256,  256,  274,  273,  256,  685,
  256,  244,  688,  266,  267,   -1,  269,  250,  266,  267,
  274,  269,  274,   -1,  257,  191,   -1,  273,  279,  280,
  281,  282,  283,  199,  256,  201,  256,  203,  256,  205,
  293,  292,  293,  296,  297,  293,  256,  269,  296,  297,
  256,  284,  256,  273,  256,  273,   -1,  259,  260,  269,
  293,   -1,  256,  256,  257,  256,  259,  273,  261,  273,
  256,  264,  265,  266,  267,  268,  269,  310,  244,  273,
   -1,  274,  273,   -1,  250,  278,  279,  280,  281,  282,
  283,  257,  285,  279,  280,  281,  282,  283,   -1,  292,
  293,  294,  295,  256,  257,  256,  256,  256,  261,  256,
  263,  264,  265,  266,  267,  268,  269,  350,  284,  256,
  256,  354,  273,  273,  273,  358,  273,  293,  361,  256,
  257,  284,  259,  269,  261,  256,  273,  264,  265,  266,
  267,  268,  269,   -1,  310,  256,   -1,  274,  269,  256,
  383,  278,  279,  280,  281,  282,  283,  256,  285,  270,
  271,  260,  269,  256,  257,  292,  293,  256,  261,  262,
  263,  256,  265,  266,  267,  260,  269,  270,  271,  412,
  256,  270,  271,  256,  350,  258,   -1,  256,  354,  256,
  256,  284,  358,  269,   -1,  361,  256,  257,  291,  259,
  269,  261,  269,  269,  264,  265,  266,  267,  268,  269,
   -1,  256,  293,   -1,  274,  296,  297,  383,  278,  279,
  280,  281,  282,  283,  269,  285,   -1,  256,  461,   -1,
  257,  260,  292,  293,  261,  262,  263,  256,  265,  266,
  267,  260,  269,  270,  271,  256,  412,  256,  257,  260,
  259,  484,  261,   -1,  487,  264,  265,  266,  267,  268,
  269,  292,  293,  256,  291,  274,  259,  260,   -1,  278,
  279,  280,  281,  282,  283,  256,  285,  256,  259,  260,
  259,  260,  256,  292,  293,  259,  260,  256,  257,    8,
    9,   10,  261,  262,  263,  461,  265,  266,  267,  257,
  269,  270,  271,  261,  266,  267,  264,  265,  266,  267,
  268,  269,  256,  256,  258,   -1,  285,  260,  484,  256,
  257,  487,  291,   -1,  261,  262,  263,  285,  265,  266,
  267,   -1,  269,  270,  271,  256,  257,    6,    7,  256,
  261,  262,  263,  260,  265,  266,  267,  284,  269,  270,
  271,  256,  256,  257,  291,   -1,  256,  261,  262,  263,
  260,  265,  266,  267,  285,  269,  270,  271,  256,   -1,
  291,  259,  260,   -1,  279,  280,  281,  282,  283,  256,
  257,  285,  117,  118,  261,  262,  263,  291,  265,  266,
  267,   -1,  269,  270,  271,  256,  257,    8,    9,   10,
  261,  262,  263,   -1,  265,  266,  267,  284,  269,  270,
  271,  256,  257,  256,  291,  258,  261,  262,  263,   -1,
  265,  266,  267,  284,  269,  270,  271,  256,  256,  257,
  291,  122,  123,  261,  262,  263,   -1,  265,  266,  267,
  285,  269,  270,  271,   -1,   -1,  291,    8,    9,   10,
  279,  280,  281,  282,  283,  256,  257,  285,   -1,   -1,
  261,  262,   -1,  291,  265,  266,  267,  257,  269,  270,
  271,  261,  262,   -1,   -1,  265,  266,  267,   -1,  269,
  270,  271,   -1,  256,  285,  258,  256,  256,  258,  258,
  291,  256,   -1,  258,  257,  285,   -1,   -1,  261,  262,
   -1,  291,  265,  266,  267,   -1,  269,  270,  271,   -1,
  256,  257,  256,   -1,  258,  261,   -1,   -1,   -1,  265,
  266,  267,  285,  269,  256,  257,   -1,  259,  291,  261,
   -1,   -1,  264,  265,  266,  267,  268,  269,   -1,  285,
   -1,   -1,  274,   -1,   -1,   -1,  278,  256,  257,   -1,
  259,   -1,  261,  285,   -1,  264,  265,  266,  267,  268,
  269,   -1,  256,  257,   -1,  259,   -1,  261,   -1,  278,
  264,  265,  266,  267,  268,  269,  285,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  278,  256,  257,   -1,   -1,   -1,
  261,  285,  263,  264,  265,  266,  267,  268,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,
  267,  268,  269,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,  285,  263,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,  263,  264,  265,  266,  267,  268,  269,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  257,   -1,   -1,   -1,  261,  285,  263,  264,  265,  266,
  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
  263,  264,  265,  266,  267,  268,  269,   -1,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,  285,  263,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,
  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,  285,
  263,  264,  265,  266,  267,  268,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,  268,
  269,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  257,   -1,   -1,   -1,  261,   -1,  285,  264,  265,  266,
  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
   -1,  264,  265,  266,  267,  268,  269,   -1,  285,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,  285,  264,  265,  266,  267,  268,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,  266,
  267,  268,  269,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  285,  264,
  265,  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,   -1,
  285,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,  285,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,
  285,  264,  265,  266,  267,  268,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,
  269,   -1,  285,   -1,  256,  257,   -1,   -1,   -1,  261,
   -1,   -1,   -1,  265,  266,  267,  285,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,  256,  257,  265,  266,  267,
  261,  269,   -1,  285,  265,  266,  267,   -1,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,   -1,  285,  265,  266,
  267,   -1,  269,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,  285,  263,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,  263,  264,  265,  266,  267,  268,  269,
  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,  284,  263,  264,  265,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,  263,
  264,  265,  266,  267,  268,  269,  284,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
  284,  263,  264,  265,  266,  267,  268,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,
  268,  269,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,  284,  263,  264,  265,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,  263,  264,  265,  266,  267,  268,  269,  284,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,  284,  263,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  284,  264,
  265,  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,  284,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,   -1,  284,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  284,  264,
  265,  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,  284,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,   -1,  284,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,  284,   -1,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,   -1,  265,  266,  267,  284,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,  256,  257,  265,
  266,  267,  261,  269,  284,   -1,  265,  266,  267,   -1,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,  284,  257,
  265,  266,  267,  261,  269,  284,  264,  265,  266,  267,
  268,  269,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,
   -1,   -1,   -1,   -1,   -1,   -1,  284,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=297;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"IF","THEN","ELSE","END_IF","OUT","FUN","RETURN","BREAK","WHEN",
"WHILE","FOR","CONTINUE","ID","I32","F32","PUNTO","PARENT_A","PARENT_C",
"COMILLA","COMA","DOSPUNTOS","PUNTOCOMA","IGUAL","MAYOR","MENOR","MENORIGUAL",
"MAYORIGUAL","LLAVE_A","LLAVE_C","EXCL","DIST","ASIG","CADENA","COMENT","CONST",
"SUMA","RESTA","MULT","DIV","ENTERO","FLOAT",
};
final static String yyrule[] = {
"$accept : program",
"program : nombre_program LLAVE_A bloque_sentencias LLAVE_C",
"program : nombre_program LLAVE_A bloque_sentencias error",
"program : nombre_program error bloque_sentencias LLAVE_C",
"program : error LLAVE_A bloque_sentencias LLAVE_C",
"nombre_program : ID",
"bloque_sentencias :",
"bloque_sentencias : bloque_sentencias sentencia PUNTOCOMA",
"bloque_sentencias : bloque_sentencias sentencia error",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_decl_datos",
"sentencia_declarativa : sentencia_decl_fun",
"sentencia_declarativa : lista_const",
"tipo : I32",
"tipo : F32",
"sentencia_decl_datos : tipo list_var",
"sentencia_decl_datos : tipo error",
"list_var : list_var COMA ID",
"list_var : ID",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro error",
"encabezado_fun : FUN ID PARENT_A parametro error",
"encabezado_fun : FUN ID PARENT_A error",
"encabezado_fun : FUN ID PARENT_A parametro COMA error",
"encabezado_fun : FUN ID error",
"encabezado_fun : FUN error",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun error",
"sentencia_decl_fun : encabezado_fun error",
"cuerpo_fun :",
"cuerpo_fun : cuerpo_fun sentencias_fun PUNTOCOMA",
"cuerpo_fun : cuerpo_fun sentencias_fun error",
"sentencias_fun : sentencia_decl_datos",
"sentencias_fun : sentencia_decl_fun",
"sentencias_fun : lista_const",
"sentencias_fun : asignacion",
"sentencias_fun : llamado_func",
"sentencias_fun : sentencia_if_fun",
"sentencias_fun : sentencia_out",
"sentencias_fun : sentencia_when_fun",
"sentencias_fun : sentencia_for_fun",
"sentencias_fun : sentencia_while_fun",
"sentencias_fun : retorno",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_fun : IF PARENT_A condicion error",
"sentencia_if_fun : IF PARENT_A error",
"sentencia_if_fun : IF error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE sentencias_fun error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_fun : WHEN PARENT_A condicion error",
"sentencia_when_fun : WHEN PARENT_A error",
"sentencia_when_fun : WHEN error",
"etiqueta : ID DOSPUNTOS",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion error",
"sentencia_while_fun : etiqueta WHILE PARENT_A error",
"sentencia_while_fun : etiqueta WHILE error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion error",
"sentencia_while_fun : WHILE PARENT_A error",
"sentencia_while_fun : WHILE error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID error",
"sentencia_for_fun : etiqueta FOR PARENT_A error",
"sentencia_for_fun : etiqueta FOR error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO error",
"sentencia_for_fun : FOR PARENT_A ID ASIG error",
"sentencia_for_fun : FOR PARENT_A ID error",
"sentencia_for_fun : FOR PARENT_A error",
"sentencia_for_fun : FOR error",
"cuerpo_fun_break :",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break PUNTOCOMA",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break error",
"sentencias_fun_break : asignacion",
"sentencias_fun_break : sentencia_if_break_fun",
"sentencias_fun_break : sentencia_out",
"sentencias_fun_break : sentencia_when_break_fun",
"sentencias_fun_break : sentencia_while_fun",
"sentencias_fun_break : sentencia_for_fun",
"sentencias_fun_break : CONTINUE tag",
"sentencias_fun_break : BREAK",
"sentencias_fun_break : BREAK cte",
"sentencias_fun_break : retorno",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun_break",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_break_fun : WHEN PARENT_A condicion error",
"sentencia_when_break_fun : WHEN PARENT_A error",
"sentencia_when_break_fun : WHEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break_fun : IF PARENT_A condicion error",
"sentencia_if_break_fun : IF PARENT_A error",
"sentencia_if_break_fun : IF error",
"retorno : RETURN PARENT_A expresion PARENT_C",
"retorno : RETURN PARENT_A expresion error",
"retorno : RETURN PARENT_A error",
"retorno : RETURN error",
"parametro : tipo ID",
"parametro : tipo error",
"lista_const : CONST lista_asignacion",
"lista_asignacion : lista_asignacion COMA asignacion_const",
"lista_asignacion : asignacion_const",
"asignacion_const : ID ASIG cte",
"asignacion_const : ID ASIG error",
"asignacion_const : ID error",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : sentencia_if",
"sentencia_ejecutable : sentencia_out",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : sentencia_for",
"sentencia_ejecutable : sentencia_while",
"sentencia_ejecutable : llamado_func",
"asignacion : ID ASIG expresion",
"asignacion : ID error",
"asignacion : ID ASIG error",
"expresion : expresion SUMA termino",
"expresion : expresion RESTA termino",
"expresion : termino",
"expresion : sentencia_for ELSE cte",
"expresion : sentencia_while ELSE cte",
"expresion : expresion SUMA error",
"expresion : expresion RESTA error",
"expresion : sentencia_for ELSE error",
"expresion : sentencia_while ELSE error",
"termino : termino MULT factor",
"termino : termino DIV factor",
"termino : factor",
"termino : termino MULT error",
"termino : termino DIV error",
"factor : ID",
"factor : cte",
"factor : llamado_func",
"cte : ENTERO",
"cte : FLOAT",
"cte : RESTA ENTERO",
"cte : RESTA FLOAT",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if : IF PARENT_A condicion PARENT_C error",
"sentencia_if : IF PARENT_A condicion error",
"sentencia_if : IF PARENT_A error",
"sentencia_if : IF error",
"condicion : expresion comparacion expresion",
"condicion : expresion comparacion error",
"condicion : expresion error",
"comparacion : IGUAL",
"comparacion : MAYOR",
"comparacion : MENOR",
"comparacion : MENORIGUAL",
"comparacion : MAYORIGUAL",
"bloque_ejecutable :",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable PUNTOCOMA",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"sentencia_out : OUT PARENT_A CADENA PARENT_C",
"sentencia_out : OUT PARENT_A CADENA error",
"sentencia_out : OUT PARENT_A error",
"sentencia_out : OUT error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN sentencia_ejecutable",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when : WHEN PARENT_A condicion error",
"sentencia_when : WHEN PARENT_A error",
"sentencia_when : WHEN error",
"sentencia_while : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion error",
"sentencia_while : WHILE PARENT_A error",
"sentencia_while : WHILE error",
"bloque_break_continue :",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue PUNTOCOMA",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue",
"ejecutables_break_continue : asignacion",
"ejecutables_break_continue : sentencia_if_break",
"ejecutables_break_continue : sentencia_out",
"ejecutables_break_continue : sentencia_when_break",
"ejecutables_break_continue : sentencia_while",
"ejecutables_break_continue : sentencia_for",
"ejecutables_break_continue : CONTINUE tag",
"ejecutables_break_continue : BREAK",
"ejecutables_break_continue : BREAK cte",
"tag :",
"tag : DOSPUNTOS ID",
"tag : DOSPUNTOS error",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN ejecutables_break_continue",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_break : WHEN PARENT_A condicion error",
"sentencia_when_break : WHEN PARENT_A error",
"sentencia_when_break : WHEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion error",
"sentencia_if_break : IF PARENT_A error",
"sentencia_if_break : IF error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C ejecutables_break_continue",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C ejecutables_break_continue",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG error",
"sentencia_for : etiqueta FOR PARENT_A ID error",
"sentencia_for : etiqueta FOR PARENT_A error",
"sentencia_for : etiqueta FOR error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO error",
"sentencia_for : FOR PARENT_A ID ASIG error",
"sentencia_for : FOR PARENT_A ID error",
"sentencia_for : FOR PARENT_A error",
"sentencia_for : FOR error",
"param_real : cte",
"param_real : ID",
"llamado_func : ID PARENT_A param_real COMA param_real PARENT_C",
"llamado_func : ID PARENT_A param_real PARENT_C",
"llamado_func : ID PARENT_A PARENT_C",
"llamado_func : ID PARENT_A param_real COMA param_real error",
"llamado_func : ID PARENT_A param_real error",
"llamado_func : ID PARENT_A error",
"llamado_func : ID PARENT_A param_real COMA error",
};

//#line 1470 ".\gramaticaFeli.y"
private NodoControl raiz;
private Map<String,ArbolSintactico> funciones = new HashMap<String,ArbolSintactico>();
private static HashMap<Integer,ArrayList<String>> erroresSintacticos = new HashMap<Integer,ArrayList<String>>();
public String ambitoActual = "Global";
private List<String> tipoActual = new ArrayList<String>();


void yyerror(String mensaje){
        if (erroresSintacticos.get(AnalizadorLexico.getLineaAct())== null){
                ArrayList<String> mnsj = new ArrayList<String>();
                mnsj.add(mensaje); 
                erroresSintacticos.put(AnalizadorLexico.getLineaAct(), mnsj);
        }
        else{
                erroresSintacticos.get(AnalizadorLexico.getLineaAct()).add(mensaje);
        }
}

static HashMap<Integer,ArrayList<String>> getErroresSintacticos(){
        return erroresSintacticos;
}
void chequearRangoI32(String sval){
  String s = "2147483647";
  long l = Long.valueOf(s);
  if(Long.valueOf(sval) > l){
    yyerror("La constante esta fuera de rango");
  }
}

void chequearRangoI32Neg(String sval){
       String s = "2147483648";
        long l = Long.valueOf(s);
        if(Long.valueOf(sval) > l){
                yyerror("La constante esta fuera de rango");
  } 
}

int yylex() throws IOException{
        Token t = AnalizadorLexico.getToken();
        this.yylval = new ParserVal(t.getLexema());
        //if(t.getId() != -1){
        //  System.out.println("Id: " + t.getId()+" Lexema: " + t.getLexema());
        //}else
        //  System.out.println("TERMINO LA EJECUCION");
        return t.getId();
}
public NodoControl getRaiz(){
	return raiz;
}
public Map<String,ArbolSintactico> getFuncion(){
        return funciones;
}

void actualizarAmbito(String lex, String amb){
        TablaSimbolos.addAtributo(lex,"Ambito",amb);
}
public String getTipoActual(){
        if(!this.tipoActual.isEmpty()){
                return (this.tipoActual.get(tipoActual.size()-1));
        }
        return null;
}
public void cambiarTipoActual(String f){
        tipoActual.add(f);
}
public void removeTipoActual(){
        if(!this.tipoActual.isEmpty()){
                this.tipoActual.remove(tipoActual.size()-1);
        }
}
public String buscarAmbito(String ambitoActual,String lexema){
        String ambito = ambitoActual;
        while(!TablaSimbolos.existeSimbolo(lexema+":"+ambito)){
                if(ambito.equals("Global")){
                        yyerror("La variable " + lexema + " no se encuentra declarada en el ambito " + ambitoActual);
                        ambito = "";
                        break;
                }else{
                        char [] a = ambito.toCharArray();
                        for (int i = a.length;i>=0;i--){
                                if(a[i-1] == ':'){
                                        ambito = ambito.substring(0,i-1);
                                        break;
                                }
                        }
                }
        }
        return ambito;
}
//#line 1422 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse() throws IOException
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 22 ".\gramaticaFeli.y"
{
                                                                raiz = new NodoControl("PROGRAMA",(ArbolSintactico)val_peek(1));  
                                                                TablaSimbolos.removeAtributo(val_peek(3).sval);
                                                        }
break;
case 2:
//#line 27 ".\gramaticaFeli.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba }");}
break;
case 3:
//#line 30 ".\gramaticaFeli.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba {");}
break;
case 4:
//#line 33 ".\gramaticaFeli.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba el nombre del programa");}
break;
case 6:
//#line 39 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Fin");}
break;
case 7:
//#line 40 ".\gramaticaFeli.y"
{
                                                        yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                                                        }
break;
case 8:
//#line 43 ".\gramaticaFeli.y"
{
                                yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba ;");
                        }
break;
case 9:
//#line 48 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Sentencia Declarativa");}
break;
case 10:
//#line 49 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 12:
//#line 52 ".\gramaticaFeli.y"
{funciones.put((String)((ArbolSintactico)val_peek(0)).getLex(),(ArbolSintactico)val_peek(0));}
break;
case 14:
//#line 55 ".\gramaticaFeli.y"
{
            yyval = new NodoHoja("Entero");
            ((NodoHoja)yyval).setTipo("Entero");
           }
break;
case 15:
//#line 59 ".\gramaticaFeli.y"
{
            yyval = new NodoHoja("Float");
            ((NodoHoja)yyval).setTipo("Float");
           }
break;
case 16:
//#line 64 ".\gramaticaFeli.y"
{  System.out.println("Declaracion de datos");
                                        for (String s : ((NodoTipos)val_peek(0)).getList()){
                                                String ambito = ambitoActual;
                                                while(TablaSimbolos.existeSimbolo(s+":"+ambito)){
                                                        if(ambito.equals("Global")){
                                                                yyerror("La variable " + s + " ya se encuentra declarada en el ambito " + ambitoActual);
                                                                ambito = "";
                                                                break;
                                                        }else{
                                                                char [] a = ambito.toCharArray();
                                                                for (int i = a.length;i>=0;i--){
                                                                        if(a[i-1] == ':'){
                                                                        ambito = ambito.substring(0,i-1);
                                                                        break;
                                                                }
                                                        }
                                                }
                                        }  
                                        if(ambito.equals(ambitoActual)){
                                                TablaSimbolos.addNuevoSimbolo(s+":"+ambito);
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Id",TablaSimbolos.getAtributo(s,"Id"));
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Tipo",((ArbolSintactico) val_peek(1)).getTipo());
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Linea",AnalizadorLexico.getLineaAct());
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Uso","Variable");
                                                TablaSimbolos.removeAtributo(s);
                                        }
                                        

                                        }
                                        yyval = val_peek(0);
                                }
break;
case 17:
//#line 95 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("se esperaba lista de identificadores entre comas");}
break;
case 18:
//#line 98 ".\gramaticaFeli.y"
{
                            yyval=val_peek(2);
                            ((NodoTipos)yyval).add((String)val_peek(0).sval);
                            }
break;
case 19:
//#line 102 ".\gramaticaFeli.y"
{
               yyval=new NodoTipos((String)val_peek(0).sval);
              }
break;
case 20:
//#line 106 ".\gramaticaFeli.y"
{       

                                if(!TablaSimbolos.existeSimbolo(val_peek(7).sval+ ":" + ambitoActual)){
                                        yyval = new ParserVal(val_peek(7).sval);
                                        TablaSimbolos.addNuevoSimbolo(val_peek(7).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(7).sval+ ":" + ambitoActual,"Uso","Funcion");
                                        TablaSimbolos.addAtributo(val_peek(7).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(7).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(7).sval);
                                        TablaSimbolos.addAtributo(val_peek(7).sval+":"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                        TablaSimbolos.addAtributo(val_peek(7).sval +":"+ambitoActual,"Parametro1",((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual +":"+ val_peek(7).sval);
                                        TablaSimbolos.addAtributo(val_peek(7).sval +":"+ambitoActual,"Parametro2",((ArbolSintactico)val_peek(3)).getLex()+ ":"+ ambitoActual +":"+ val_peek(7).sval);
                                        ambitoActual += ":"+val_peek(7).sval;
                                        cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                        /*Agrego los parametros en la tabla de simbolos*/
                                        TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual);
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(5)).getTipo());
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual,"Uso","Variable");
                                        TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual);
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Uso","Variable");

                                }else{
                                        yyerror("La funcion " + val_peek(7).sval + " ya existe en el ambito " + ambitoActual);
                                        ambitoActual += ":"+val_peek(7).sval;
                                }
                        
                        }
break;
case 21:
//#line 133 ".\gramaticaFeli.y"
{
                        if(!TablaSimbolos.existeSimbolo(val_peek(5).sval+ ":" + ambitoActual)){
                                yyval = new ParserVal(val_peek(5).sval);
                                TablaSimbolos.addNuevoSimbolo(val_peek(5).sval+ ":" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(5).sval+ ":" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(5).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(5).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(5).sval);
                                TablaSimbolos.addAtributo(val_peek(5).sval+":"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addAtributo(val_peek(5).sval +":"+ambitoActual,"Parametro1", ((ArbolSintactico)val_peek(3)).getLex()+ ":"+ ambitoActual +":"+ val_peek(5).sval);
                                ambitoActual += ":"+val_peek(5).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                /*Agrego el parametro en la tabla de simbolos*/
                                TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual);
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Uso","Variable");

                        }else{
                                yyerror("La funcion " + val_peek(5).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += ":"+val_peek(5).sval;
                        }
                }
break;
case 22:
//#line 154 ".\gramaticaFeli.y"
{
                        if(!TablaSimbolos.existeSimbolo(val_peek(4).sval+ ":" + ambitoActual)){
                                yyval = new ParserVal(val_peek(4).sval);
                                TablaSimbolos.addNuevoSimbolo(val_peek(4).sval+ ":" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(4).sval+ ":" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(4).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(4).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(4).sval);
                                TablaSimbolos.addAtributo(val_peek(4).sval+":"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                ambitoActual += ":"+val_peek(4).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());

                        }else{
                                yyerror("La funcion " + val_peek(4).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += ":"+val_peek(4).sval;
                        }
                }
break;
case 23:
//#line 171 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 24:
//#line 174 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 25:
//#line 177 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 26:
//#line 180 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba :");}
break;
case 27:
//#line 183 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba :");}
break;
case 28:
//#line 186 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba :");}
break;
case 29:
//#line 189 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba )");}
break;
case 30:
//#line 192 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba )");}
break;
case 31:
//#line 195 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba )");}
break;
case 32:
//#line 198 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba otro parametro");}
break;
case 33:
//#line 201 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba (");}
break;
case 34:
//#line 204 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba un nombre de funcion");}
break;
case 35:
//#line 209 ".\gramaticaFeli.y"
{
                                System.out.println("Declaracion de Funcion");
                                yyval = new NodoControl("Funcion:"+val_peek(3).sval,(ArbolSintactico)val_peek(1));
                                char [] a = ambitoActual.toCharArray();
                                for (int i = a.length;i>=0;i--){
                                        if(a[i-1] == ':'){
                                                ambitoActual = ambitoActual.substring(0,i-1);
                                                break;
                                        }
                                }
                                removeTipoActual();
                        }
break;
case 36:
//#line 221 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 37:
//#line 223 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 38:
//#line 226 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Fin");}
break;
case 39:
//#line 227 ".\gramaticaFeli.y"
{yyval=new NodoComun("Sentencia_Funcion", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));}
break;
case 40:
//#line 228 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 41:
//#line 231 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Sentencia Declarativa Datos");}
break;
case 42:
//#line 232 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Sentencia Declarativa Funcion");}
break;
case 43:
//#line 233 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 44:
//#line 234 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 45:
//#line 235 ".\gramaticaFeli.y"
{yyval=val_peek(0);}
break;
case 46:
//#line 236 ".\gramaticaFeli.y"
{yyval=val_peek(0);}
break;
case 47:
//#line 237 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 48:
//#line 238 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 49:
//#line 239 ".\gramaticaFeli.y"
{yyval=val_peek(0);}
break;
case 50:
//#line 240 ".\gramaticaFeli.y"
{yyval=val_peek(0);}
break;
case 51:
//#line 241 ".\gramaticaFeli.y"
{yyval=val_peek(0);}
break;
case 52:
//#line 243 ".\gramaticaFeli.y"
{System.out.println("Sentencia IF");
                                yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(8),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(5)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));
                        }
break;
case 53:
//#line 246 ".\gramaticaFeli.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(6)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));}
break;
case 54:
//#line 248 ".\gramaticaFeli.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(7)),new NodoControl("else fun", (ArbolSintactico)val_peek(3))));}
break;
case 55:
//#line 251 ".\gramaticaFeli.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF FUN", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        }
break;
case 56:
//#line 254 ".\gramaticaFeli.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(6)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));}
break;
case 57:
//#line 257 ".\gramaticaFeli.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF FUN", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );}
break;
case 58:
//#line 259 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 59:
//#line 261 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 60:
//#line 263 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 61:
//#line 265 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 62:
//#line 267 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 63:
//#line 269 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 64:
//#line 271 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 65:
//#line 273 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 66:
//#line 275 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 67:
//#line 277 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 68:
//#line 280 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 69:
//#line 282 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 70:
//#line 284 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 71:
//#line 286 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 72:
//#line 288 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 73:
//#line 291 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 74:
//#line 293 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 75:
//#line 296 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 76:
//#line 298 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 77:
//#line 303 ".\gramaticaFeli.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 78:
//#line 306 ".\gramaticaFeli.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 79:
//#line 309 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 80:
//#line 311 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 81:
//#line 313 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 82:
//#line 315 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 83:
//#line 317 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion");}
break;
case 84:
//#line 319 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 85:
//#line 322 ".\gramaticaFeli.y"
{
                                yyval = new ParserVal(val_peek(1).sval);
                                if(!TablaSimbolos.existeSimbolo(val_peek(1).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(1).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(1).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(1).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(1).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(1).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(1).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 86:
//#line 335 ".\gramaticaFeli.y"
{
                                yyval = new NodoComun("While con Etiqueta Funcion",new NodoControl("Etiqueta", new NodoHoja(val_peek(11).sval)) , new NodoComun("While", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                                System.out.println("Sentencia WHILE con etiqueta y con llaves");
                        
                                
                        }
break;
case 87:
//#line 342 ".\gramaticaFeli.y"
{
                                System.out.println("Sentencia WHILE con etiqueta y sin llaves");
                                yyval = new NodoComun("While con Etiqueta Funcion",new NodoControl("Etiqueta", new NodoHoja(val_peek(9).sval)) , new NodoComun("While", (ArbolSintactico) val_peek(6), new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );
                        
                        }
break;
case 88:
//#line 347 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 89:
//#line 350 ".\gramaticaFeli.y"
{
                    yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");
                }
break;
case 90:
//#line 354 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 91:
//#line 356 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 92:
//#line 358 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 93:
//#line 360 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 94:
//#line 362 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 95:
//#line 364 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 96:
//#line 366 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 97:
//#line 368 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 98:
//#line 370 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 99:
//#line 372 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 100:
//#line 374 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 101:
//#line 376 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 102:
//#line 378 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 103:
//#line 380 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 104:
//#line 382 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 105:
//#line 384 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 106:
//#line 386 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 107:
//#line 388 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 108:
//#line 394 ".\gramaticaFeli.y"
{ yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval,new NodoHoja(val_peek(13).sval), new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,new NodoHoja(val_peek(9).sval), (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), new NodoHoja(val_peek(5).sval + val_peek(4).sval) ))) );
                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                }
                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                }
                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                }
                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                        yyerror("La constante '" + val_peek(5).sval + "' debe ser de tipo entero");
                }
                                
        }
break;
case 109:
//#line 409 ".\gramaticaFeli.y"
{
                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval,new NodoHoja(val_peek(13).sval), new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,new NodoHoja(val_peek(9).sval), (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), new NodoHoja(val_peek(5).sval + val_peek(4).sval) ))) );
                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                }
                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                }
                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                }
                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                        yyerror("La constante '" + val_peek(5).sval + "' debe ser de tipo entero");
                }   
                        }
break;
case 110:
//#line 424 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,new NodoHoja(val_peek(11).sval), new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,new NodoHoja(val_peek(7).sval), (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), new NodoHoja(val_peek(3).sval + val_peek(2).sval) ))) );
                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                }
                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                }
                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                }
                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                        yyerror("La constante '" + val_peek(3).sval + "' debe ser de tipo entero");
                }        
                        }
break;
case 111:
//#line 440 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,new NodoHoja(val_peek(11).sval), new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,new NodoHoja(val_peek(7).sval), (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), new NodoHoja(val_peek(3).sval + val_peek(2).sval) ))) );
                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                }
                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                }
                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                }
                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                        yyerror("La constante '" + val_peek(3).sval + "' debe ser de tipo entero");
                }        
                        }
break;
case 112:
//#line 456 ".\gramaticaFeli.y"
{
			yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,new NodoHoja(val_peek(13).sval),new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,new NodoHoja(val_peek(9).sval),(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), new NodoHoja(val_peek(5).sval + val_peek(4).sval) )) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(4).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 113:
//#line 471 ".\gramaticaFeli.y"
{
			yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,new NodoHoja(val_peek(13).sval),new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,new NodoHoja(val_peek(9).sval),(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), new NodoHoja(val_peek(5).sval + val_peek(4).sval) )) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(4).sval + "' debe ser de tipo entero");
                                }
                                                                                             }
break;
case 114:
//#line 486 ".\gramaticaFeli.y"
{
					yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,new NodoHoja(val_peek(11).sval),new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,new NodoHoja(val_peek(7).sval),(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), new NodoHoja(val_peek(3).sval + val_peek(2).sval) )) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(2).sval + "' debe ser de tipo entero");
                                }
                                                                                  }
break;
case 115:
//#line 501 ".\gramaticaFeli.y"
{
					yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,new NodoHoja(val_peek(11).sval),new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,new NodoHoja(val_peek(7).sval),(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), new NodoHoja(val_peek(3).sval + val_peek(2).sval) )) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(2).sval + "' debe ser de tipo entero");
                                }
                                                                                  }
break;
case 116:
//#line 517 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 117:
//#line 519 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 118:
//#line 522 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 119:
//#line 524 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 120:
//#line 527 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 121:
//#line 529 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 122:
//#line 532 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una constante");}
break;
case 123:
//#line 534 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una constante");}
break;
case 124:
//#line 537 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 125:
//#line 540 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; despues de la ID comparacion expresion");}
break;
case 126:
//#line 542 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion");}
break;
case 127:
//#line 544 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 128:
//#line 546 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba identificador");}
break;
case 129:
//#line 549 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; despues de la ID ASIG ENTERO");}
break;
case 130:
//#line 551 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero");}
break;
case 131:
//#line 553 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 132:
//#line 555 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba identificador");}
break;
case 133:
//#line 558 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 134:
//#line 561 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 135:
//#line 563 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 136:
//#line 566 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 137:
//#line 568 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 138:
//#line 571 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 139:
//#line 573 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 140:
//#line 576 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una constante");}
break;
case 141:
//#line 578 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una constante");}
break;
case 142:
//#line 581 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 143:
//#line 584 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; despues de la ID comparacion expresion");}
break;
case 144:
//#line 587 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba expresion");}
break;
case 145:
//#line 589 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba operador de comparacion");}
break;
case 146:
//#line 591 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba identificador");}
break;
case 147:
//#line 595 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; despues de la ID ASIG ENTERO");}
break;
case 148:
//#line 597 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba numero entero");}
break;
case 149:
//#line 599 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba =:");}
break;
case 150:
//#line 603 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ID ASIG ENTERO");}
break;
case 151:
//#line 606 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 152:
//#line 609 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Fin");}
break;
case 153:
//#line 610 ".\gramaticaFeli.y"
{yyval=new NodoComun("Sentencia_Funcion_Break", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));}
break;
case 154:
//#line 611 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 155:
//#line 614 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 156:
//#line 615 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 157:
//#line 616 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 158:
//#line 617 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 159:
//#line 618 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 160:
//#line 619 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 161:
//#line 620 ".\gramaticaFeli.y"
{yyval = new NodoControl("Continue",(ArbolSintactico)val_peek(0));}
break;
case 162:
//#line 621 ".\gramaticaFeli.y"
{yyval = new NodoHoja("Break");}
break;
case 163:
//#line 622 ".\gramaticaFeli.y"
{yyval = new NodoControl("Break", new NodoHoja(val_peek(0).sval));}
break;
case 164:
//#line 623 ".\gramaticaFeli.y"
{yyval=val_peek(0);}
break;
case 165:
//#line 626 ".\gramaticaFeli.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 166:
//#line 629 ".\gramaticaFeli.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 167:
//#line 632 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 168:
//#line 634 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 169:
//#line 636 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 170:
//#line 638 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 171:
//#line 640 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion");}
break;
case 172:
//#line 642 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 173:
//#line 646 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 174:
//#line 651 ".\gramaticaFeli.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 175:
//#line 656 ".\gramaticaFeli.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 176:
//#line 661 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 177:
//#line 666 ".\gramaticaFeli.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 178:
//#line 671 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 179:
//#line 675 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 180:
//#line 677 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 181:
//#line 679 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 182:
//#line 681 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 183:
//#line 683 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 184:
//#line 686 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 185:
//#line 688 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 186:
//#line 690 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 187:
//#line 692 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 188:
//#line 694 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 189:
//#line 697 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 190:
//#line 699 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 191:
//#line 702 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 192:
//#line 704 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 193:
//#line 707 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 194:
//#line 709 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 195:
//#line 711 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 196:
//#line 713 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 197:
//#line 715 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 198:
//#line 718 ".\gramaticaFeli.y"
{yyval = new NodoControl("Retorno", (ArbolSintactico)val_peek(1));
                                                String tipoRet = ((ArbolSintactico)val_peek(1)).getTipo();
                                                if(!ambitoActual.equals("Global")){
                                                        String tipoFun = getTipoActual();
                                                        if(!tipoRet.equals(tipoFun)){
                                                                yyerror("El retorno debe ser del mismo tipo que el retorno de la funcion.");
                                                        }
                                                }else{
                                                        yyerror("El retorno puede estar solo dentro de una funcion.");
                                                }
                                        }
break;
case 199:
//#line 729 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba )");}
break;
case 200:
//#line 731 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion");}
break;
case 201:
//#line 733 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion entre ( )");}
break;
case 202:
//#line 737 ".\gramaticaFeli.y"
{    yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(1)).getTipo());
}
break;
case 203:
//#line 740 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba identificador");}
break;
case 204:
//#line 744 ".\gramaticaFeli.y"
{System.out.println("Declaracion de Constante/s");}
break;
case 207:
//#line 750 ".\gramaticaFeli.y"
{ 
                                String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                                if(ambito.equals(ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(2).sval+":"+ambito);
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambito,"Id",TablaSimbolos.getAtributo(val_peek(2).sval,"Id"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambito,"Tipo",TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambito,"Linea",AnalizadorLexico.getLineaAct());
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambito,"Uso","Variable");
                                }
                        }
break;
case 208:
//#line 760 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba una constante");}
break;
case 209:
//#line 762 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba una asignacion =:");}
break;
case 210:
//#line 765 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 211:
//#line 766 ".\gramaticaFeli.y"
{yyval = val_peek(0); }
break;
case 212:
//#line 767 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 213:
//#line 768 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 214:
//#line 769 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 215:
//#line 770 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 216:
//#line 771 ".\gramaticaFeli.y"
{yyval=val_peek(0);}
break;
case 217:
//#line 773 ".\gramaticaFeli.y"
{
                                        System.out.println("Asignacion");
                                        String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                                        NodoHoja hoja = new NodoHoja(val_peek(2).sval+":"+ambito);
                                        hoja.setUso((String)TablaSimbolos.getAtributo(val_peek(2).sval+":"+ambito, "Uso"));
                                        hoja.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval, hoja , (ArbolSintactico) val_peek(0));

                                        String tipoS1 = "";
                                        if(!ambito.equals("")){
                                                if(((String)TablaSimbolos.getAtributo(val_peek(2).sval+":"+ambito, "Uso")).equals("Variable")){
                                                        tipoS1 = (String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo");
                                                        ((ArbolSintactico)yyval).setTipo(tipoS1);
                                                }
                                                else {
                                                        yyerror(val_peek(2).sval+" no es una variable.");
                                                }
                                        }
                                        String tipoS3 = ((ArbolSintactico)val_peek(0)).getTipo();
                                        if(!(tipoS1.equals(tipoS3))){
                                                yyerror("No se puede realizar una asignacion con tipos diferentes.");
                                        }
                                        
                                }
break;
case 218:
//#line 797 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba =:");}
break;
case 219:
//#line 799 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion");}
break;
case 220:
//#line 802 ".\gramaticaFeli.y"
{     
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));

                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una suma con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                        
                                 }
break;
case 221:
//#line 812 ".\gramaticaFeli.y"
{
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una resta con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                 }
break;
case 222:
//#line 821 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 223:
//#line 822 ".\gramaticaFeli.y"
{yyval = new NodoComun("For como expresion",(ArbolSintactico)val_peek(2),new NodoHoja(val_peek(0).sval));
                                   ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));     
                                        }
break;
case 224:
//#line 825 ".\gramaticaFeli.y"
{    yyval = new NodoComun("While como expresion",(ArbolSintactico)val_peek(2),new NodoHoja(val_peek(0).sval));
                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo")); 
                                        }
break;
case 225:
//#line 828 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un termino");}
break;
case 226:
//#line 830 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un termino");}
break;
case 227:
//#line 832 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un constante");}
break;
case 228:
//#line 834 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un constante");}
break;
case 229:
//#line 838 ".\gramaticaFeli.y"
{ 
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una multiplicacion con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 230:
//#line 847 ".\gramaticaFeli.y"
{
                                        yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una division con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 231:
//#line 856 ".\gramaticaFeli.y"
{
                  yyval = val_peek(0);
                 }
break;
case 232:
//#line 859 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un factor");}
break;
case 233:
//#line 861 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un factor");}
break;
case 234:
//#line 864 ".\gramaticaFeli.y"
{
                String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                if((!ambito.equals(""))){
                        if(((String)TablaSimbolos.getAtributo(val_peek(0).sval+":"+ambito, "Uso")).equals("Variable")){
                                yyval = new NodoHoja(val_peek(0).sval+":"+ambito);
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +":"+ ambito,"Tipo"));
                                ((ArbolSintactico)yyval).setUso("Variable");
                        }
                        else{
                                yyerror(val_peek(0).sval+" no es una variable");
                        }
                }
           }
break;
case 235:
//#line 878 ".\gramaticaFeli.y"
{
                yyval = new NodoHoja(val_peek(0).sval);
                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                ((ArbolSintactico)yyval).setUso("Constante");
              }
break;
case 236:
//#line 884 ".\gramaticaFeli.y"
{yyval=val_peek(0);}
break;
case 237:
//#line 886 ".\gramaticaFeli.y"
{  chequearRangoI32(val_peek(0).sval);}
break;
case 238:
//#line 887 ".\gramaticaFeli.y"
{}
break;
case 241:
//#line 892 ".\gramaticaFeli.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                                                                                                                                }
break;
case 242:
//#line 896 ".\gramaticaFeli.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");}
break;
case 243:
//#line 899 ".\gramaticaFeli.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                                                                                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");}
break;
case 244:
//#line 901 ".\gramaticaFeli.y"
{yyval = new NodoComun("IF",new NodoControl("Condicion", (ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                                                                                        System.out.println("Sentencia IF sin corchetes y sin else");}
break;
case 245:
//#line 903 ".\gramaticaFeli.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF con corchetes y else");}
break;
case 246:
//#line 906 ".\gramaticaFeli.y"
{
                                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                                        System.out.println("Sentencia IF con corchetes y sin else");}
break;
case 247:
//#line 909 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 248:
//#line 911 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 249:
//#line 913 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 250:
//#line 915 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 251:
//#line 917 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 252:
//#line 920 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 253:
//#line 922 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 254:
//#line 924 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 255:
//#line 926 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 256:
//#line 928 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 257:
//#line 931 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 258:
//#line 933 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 259:
//#line 936 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 260:
//#line 938 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 261:
//#line 941 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 262:
//#line 943 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 263:
//#line 945 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 264:
//#line 947 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 265:
//#line 949 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 266:
//#line 955 ".\gramaticaFeli.y"
{
                        yyval= new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                        ((ArbolSintactico)yyval).setUso("Condicion");
                        if (!((((ArbolSintactico)val_peek(2)).getTipo()).equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                               yyerror("error en la comparacion entre expresiones de distintos tipos");
                        }
                }
break;
case 267:
//#line 963 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba otra expresion para comparar.");}
break;
case 268:
//#line 965 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un tipo de comparacion.");}
break;
case 269:
//#line 968 ".\gramaticaFeli.y"
{yyval= val_peek(0);}
break;
case 270:
//#line 969 ".\gramaticaFeli.y"
{yyval= val_peek(0);}
break;
case 271:
//#line 970 ".\gramaticaFeli.y"
{yyval= val_peek(0);}
break;
case 272:
//#line 971 ".\gramaticaFeli.y"
{yyval= val_peek(0);}
break;
case 273:
//#line 972 ".\gramaticaFeli.y"
{yyval= val_peek(0);}
break;
case 274:
//#line 974 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Fin");}
break;
case 275:
//#line 975 ".\gramaticaFeli.y"
{
                                                                yyval=new NodoComun("Bloque Ejecutable", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                                                                }
break;
case 276:
//#line 978 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 277:
//#line 981 ".\gramaticaFeli.y"
{
                        yyval = new NodoControl(val_peek(3).sval, (ArbolSintactico) new NodoHoja(val_peek(1).sval));
                        System.out.println("Sentencia OUT");}
break;
case 278:
//#line 984 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 279:
//#line 986 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una CADENA");}
break;
case 280:
//#line 988 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 281:
//#line 991 ".\gramaticaFeli.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 282:
//#line 994 ".\gramaticaFeli.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 283:
//#line 997 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } en el when");}
break;
case 284:
//#line 999 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { en el when");}
break;
case 285:
//#line 1001 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then en el when");}
break;
case 286:
//#line 1003 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) en el when");}
break;
case 287:
//#line 1005 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion en el when");}
break;
case 288:
//#line 1007 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( en el when");}
break;
case 289:
//#line 1011 ".\gramaticaFeli.y"
{
                                yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(11).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                        
                        }
break;
case 290:
//#line 1015 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(9).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );
                        
                        }
break;
case 291:
//#line 1019 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 292:
//#line 1022 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");}
break;
case 293:
//#line 1025 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 294:
//#line 1027 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 295:
//#line 1029 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 296:
//#line 1031 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 297:
//#line 1033 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 298:
//#line 1035 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 299:
//#line 1037 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 300:
//#line 1039 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 301:
//#line 1041 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 302:
//#line 1044 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Fin");}
break;
case 303:
//#line 1045 ".\gramaticaFeli.y"
{
                yyval = new NodoComun("Bloque Break con Continue",(ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                }
break;
case 304:
//#line 1048 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba ;");}
break;
case 305:
//#line 1052 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 306:
//#line 1053 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 307:
//#line 1054 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 308:
//#line 1055 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 309:
//#line 1056 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 310:
//#line 1057 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 311:
//#line 1058 ".\gramaticaFeli.y"
{yyval = new NodoControl("Continue",(ArbolSintactico)val_peek(0));}
break;
case 312:
//#line 1059 ".\gramaticaFeli.y"
{yyval = new NodoHoja("Break");}
break;
case 313:
//#line 1060 ".\gramaticaFeli.y"
{yyval = new NodoControl("Break", new NodoHoja(val_peek(0).sval));}
break;
case 314:
//#line 1062 ".\gramaticaFeli.y"
{yyval = new NodoHoja("Fin");}
break;
case 315:
//#line 1063 ".\gramaticaFeli.y"
{String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        yyval = new NodoControl("Tag", new NodoHoja(val_peek(0).sval) );
                        if(!ambito.equals("")){
                                if(!TablaSimbolos.getAtributo(val_peek(0).sval +":"+ ambito,"Uso").equals("Etiqueta")){
                                        yyerror(val_peek(0).sval + " no es una etiqueta.");
                                }
                        }else{
                                yyerror("La etiqueta " + val_peek(0).sval + " no esta declarada.");
                        }
                        }
break;
case 316:
//#line 1073 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un identificador");}
break;
case 317:
//#line 1077 ".\gramaticaFeli.y"
{System.out.println("Sentencia WHEN");}
break;
case 318:
//#line 1078 ".\gramaticaFeli.y"
{System.out.println("Sentencia WHEN");}
break;
case 319:
//#line 1079 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } en el when");}
break;
case 320:
//#line 1081 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { en el when");}
break;
case 321:
//#line 1083 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then en el when");}
break;
case 322:
//#line 1085 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) en el when");}
break;
case 323:
//#line 1087 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion en el when");}
break;
case 324:
//#line 1089 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( en el when");}
break;
case 325:
//#line 1093 ".\gramaticaFeli.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 326:
//#line 1098 ".\gramaticaFeli.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 327:
//#line 1103 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 328:
//#line 1108 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 329:
//#line 1113 ".\gramaticaFeli.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 330:
//#line 1118 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 331:
//#line 1122 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 332:
//#line 1124 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 333:
//#line 1126 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 334:
//#line 1128 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 335:
//#line 1130 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 336:
//#line 1133 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 337:
//#line 1135 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 338:
//#line 1137 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 339:
//#line 1139 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 340:
//#line 1141 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 341:
//#line 1144 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 342:
//#line 1146 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 343:
//#line 1149 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 344:
//#line 1151 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 345:
//#line 1154 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 346:
//#line 1156 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 347:
//#line 1158 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 348:
//#line 1160 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 349:
//#line 1162 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 350:
//#line 1166 ".\gramaticaFeli.y"
{
                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval,new NodoHoja(val_peek(13).sval), new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,new NodoHoja(val_peek(9).sval), (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), new NodoHoja(val_peek(5).sval + val_peek(4).sval) ))) );
                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                }
                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                }
                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                }
                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                        yyerror("La constante '" + val_peek(5).sval + "' debe ser de tipo entero");
                }
        }
break;
case 351:
//#line 1182 ".\gramaticaFeli.y"
{
                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval,new NodoHoja(val_peek(13).sval), new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,new NodoHoja(val_peek(9).sval), (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), new NodoHoja(val_peek(5).sval + val_peek(4).sval) ))) );
                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                }
                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                }
                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                }
                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                        yyerror("La constante '" + val_peek(5).sval + "' debe ser de tipo entero");
                }        
        }
break;
case 352:
//#line 1198 ".\gramaticaFeli.y"
{
                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,new NodoHoja(val_peek(11).sval), new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,new NodoHoja(val_peek(7).sval), (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), new NodoHoja(val_peek(3).sval + val_peek(2).sval) ))) );
                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                }
                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                }
                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                }
                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                        yyerror("La constante '" + val_peek(3).sval + "' debe ser de tipo entero");
                }
        }
break;
case 353:
//#line 1214 ".\gramaticaFeli.y"
{
                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,new NodoHoja(val_peek(11).sval), new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,new NodoHoja(val_peek(7).sval), (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), new NodoHoja(val_peek(3).sval + val_peek(2).sval) ))) );
                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                }
                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                }
                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                }
                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                        yyerror("La constante '" + val_peek(3).sval + "' debe ser de tipo entero");
                }
        }
break;
case 354:
//#line 1231 ".\gramaticaFeli.y"
{System.out.println("Sentencia FOR");
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,new NodoHoja(val_peek(13).sval),new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,new NodoHoja(val_peek(9).sval),(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), new NodoHoja(val_peek(5).sval + val_peek(4).sval) )) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(4).sval + "' debe ser de tipo entero");
                                }
                }
break;
case 355:
//#line 1247 ".\gramaticaFeli.y"
{System.out.println("Sentencia FOR");
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,new NodoHoja(val_peek(13).sval),new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,new NodoHoja(val_peek(9).sval),(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), new NodoHoja(val_peek(5).sval + val_peek(4).sval) )) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(4).sval + "' debe ser de tipo entero");
                                }
                }
break;
case 356:
//#line 1262 ".\gramaticaFeli.y"
{System.out.println("Sentencia FOR");
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,new NodoHoja(val_peek(11).sval),new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,new NodoHoja(val_peek(7).sval),(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), new NodoHoja(val_peek(3).sval + val_peek(2).sval) )) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(2).sval + "' debe ser de tipo entero");
                                }
                }
break;
case 357:
//#line 1277 ".\gramaticaFeli.y"
{System.out.println("Sentencia FOR");
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,new NodoHoja(val_peek(11).sval),new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,new NodoHoja(val_peek(7).sval),(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), new NodoHoja(val_peek(3).sval + val_peek(2).sval) )) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(2).sval + "' debe ser de tipo entero");
                                }
                }
break;
case 358:
//#line 1292 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 359:
//#line 1294 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 360:
//#line 1296 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 361:
//#line 1299 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 362:
//#line 1301 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 363:
//#line 1303 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 364:
//#line 1305 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 365:
//#line 1307 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 366:
//#line 1310 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 367:
//#line 1312 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 368:
//#line 1314 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 369:
//#line 1316 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 370:
//#line 1318 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 371:
//#line 1320 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 372:
//#line 1322 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 373:
//#line 1324 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 374:
//#line 1326 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 375:
//#line 1328 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 376:
//#line 1330 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 377:
//#line 1332 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 378:
//#line 1334 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 379:
//#line 1337 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 380:
//#line 1339 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 381:
//#line 1341 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 382:
//#line 1343 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 383:
//#line 1345 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 384:
//#line 1348 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 385:
//#line 1350 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 386:
//#line 1352 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 387:
//#line 1354 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 388:
//#line 1356 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 389:
//#line 1358 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 390:
//#line 1360 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 391:
//#line 1362 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 392:
//#line 1364 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 393:
//#line 1366 ".\gramaticaFeli.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 394:
//#line 1370 ".\gramaticaFeli.y"
{
                        yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                }
break;
case 395:
//#line 1375 ".\gramaticaFeli.y"
{yyval=new NodoHoja(val_peek(0).sval);
                        String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        if(!ambito.equals("")){
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +":"+ ambito,"Tipo"));
                        }
                     }
break;
case 396:
//#line 1382 ".\gramaticaFeli.y"
{
                                                        yyval=new NodoComun("llamado funcion",(ArbolSintactico)val_peek(3),(ArbolSintactico)val_peek(1));
                                                        String ambito = buscarAmbito(ambitoActual,val_peek(5).sval);
                                                        if (!ambito.equals("") ){
                                                                if( !TablaSimbolos.getAtributo(val_peek(5).sval+":"+ambito,"Uso").equals("Funcion") ){
                                                                        yyerror("La funcion "+val_peek(5).sval+" no fue declarada");
                                                                }else{
                                                                        String par1 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +":"+ ambito,"Parametro1");
                                                                        String par2 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +":"+ ambito,"Parametro2");
                                                                        if(par1 != null)
                                                                                if(par2 != null){
                                                                                        String tipoS3 = (String) ((ArbolSintactico) val_peek(3) ).getTipo();
                                                                                        if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") ) )){
                                                                                                String nombreS3 = ((ArbolSintactico) val_peek(3)).getLex();
                                                                                                yyerror("El tipo del parametro "+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                                                                        }
                                                                                        String tipoS5 = (String) ((ArbolSintactico) val_peek(1)).getTipo();
                                                                                        if( !(tipoS5.equals((String)TablaSimbolos.getAtributo(par2,"Tipo") ))){
                                                                                                String nombreS5 = ((ArbolSintactico) val_peek(1)).getLex();
                                                                                                yyerror("El tipo del parametro "+ nombreS5+" no coincide con el tipo declarado en la funcion.");
                                                                                        }
                                                                                }else{
                                                                                        yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                                }
                                                                        else{
                                                                                yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                        }
                                                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(5).sval +":"+ ambito,"Tipo"));
                                                                }
                                                        }
                                                }
break;
case 397:
//#line 1413 ".\gramaticaFeli.y"
{System.out.println("Llamado fun 1 parametro");
                yyval=new NodoComun("llamado funcion",(ArbolSintactico)val_peek(1),new NodoHoja("Un solo parametro"));
            String ambito = buscarAmbito(ambitoActual,val_peek(3).sval);
            if (!ambito.equals("")){
                if (!TablaSimbolos.getAtributo(val_peek(3).sval+":"+ambito,"Uso").equals("Funcion")){
                        yyerror("La funcion "+val_peek(3).sval+" no fue declarada");
                }else{
                        String par1 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +":"+ ambito,"Parametro1");
                        String par2 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +":"+ ambito,"Parametro2");
                        if(par2 ==null){
                                if(par1!=null){
                                        String tipoS3 = (String) ((ArbolSintactico) val_peek(1) ).getTipo();
                                        if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") )) ){
                                                String nombreS3 = ((ArbolSintactico) val_peek(1)).getLex();
                                                yyerror("El tipo del parametro "+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                        }
                                }else{
                                        yyerror("La funcion esta declarada sin parametros.");
                                }
                        }else{
                                yyerror("La funcion esta declarada con dos parametros.");
                        }
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(3).sval +":"+ ambito,"Tipo"));
                }
            }
        }
break;
case 398:
//#line 1439 ".\gramaticaFeli.y"
{yyval=new NodoHoja("llamado funcion sin parametros");
                String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                if (!ambito.equals("") ){
                        if (!TablaSimbolos.getAtributo(val_peek(2).sval+":"+ambito,"Uso").equals("Funcion")){
                                yyerror("La funcion "+val_peek(2).sval+" no fue declarada");
                                
                        }else{
                                String par1 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Parametro1");
                                String par2 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Parametro2");
                                if(par2 == null){
                                        if(par1 != null){
                                                yyerror("La funcion esta declarada con un parametro.");
                                        }
                                }else{
                                        yyerror("La funcion esta declarada con dos parametros.");
                                }
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                        }
                }       
        }
break;
case 399:
//#line 1459 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 400:
//#line 1461 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 401:
//#line 1463 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 402:
//#line 1465 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba otro parametro");}
break;
//#line 4057 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 * @throws IOException
 */
public void run() throws IOException
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
