//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramaticaTomi.y"
package Principal;
import java.io.IOException;
import AnalizadorLexico.AnalizadorLexico;
import AnalizadorLexico.Token;
import GeneracionCodigoIntermedio.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

//#line 28 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IF=257;
public final static short THEN=258;
public final static short ELSE=259;
public final static short END_IF=260;
public final static short OUT=261;
public final static short FUN=262;
public final static short RETURN=263;
public final static short BREAK=264;
public final static short WHEN=265;
public final static short WHILE=266;
public final static short FOR=267;
public final static short CONTINUE=268;
public final static short ID=269;
public final static short I32=270;
public final static short F32=271;
public final static short PUNTO=272;
public final static short PARENT_A=273;
public final static short PARENT_C=274;
public final static short COMILLA=275;
public final static short COMA=276;
public final static short DOSPUNTOS=277;
public final static short PUNTOCOMA=278;
public final static short IGUAL=279;
public final static short MAYOR=280;
public final static short MENOR=281;
public final static short MENORIGUAL=282;
public final static short MAYORIGUAL=283;
public final static short LLAVE_A=284;
public final static short LLAVE_C=285;
public final static short EXCL=286;
public final static short DIST=287;
public final static short ASIG=288;
public final static short CADENA=289;
public final static short COMENT=290;
public final static short CONST=291;
public final static short SUMA=292;
public final static short RESTA=293;
public final static short MULT=294;
public final static short DIV=295;
public final static short ENTERO=296;
public final static short FLOAT=297;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    1,    2,    2,    2,    3,    3,    4,    4,
    4,    9,    9,    6,    6,   10,   10,   11,   11,   11,
   11,   11,   11,   11,   11,   11,    7,    7,    7,   13,
   13,   13,   14,   14,   14,   14,   14,   14,   14,   14,
   14,   14,   14,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   19,   19,
   19,   19,   19,   19,   19,   19,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   24,   24,   24,   25,   25,   25,   25,   25,   25,
   25,   25,   25,   25,   28,   28,   28,   28,   28,   28,
   28,   28,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   27,   22,   12,
   12,    8,   31,   31,   32,    5,    5,    5,    5,    5,
    5,    5,   15,   30,   30,   30,   30,   30,   30,   37,
   37,   37,   38,   38,   26,   26,   26,   26,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   23,   23,   23,   40,   40,   40,
   40,   40,   39,   39,   39,   18,   18,   18,   18,   34,
   34,   34,   34,   34,   34,   34,   34,   34,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   41,   41,   41,   42,   42,   42,   42,   42,   42,
   42,   42,   42,   29,   29,   44,   44,   44,   44,   44,
   44,   44,   44,   44,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   45,   45,   16,   16,   16,   16,   16,   16,
};
final static short yylen[] = {                            2,
    4,    1,    1,    0,    3,    2,    1,    1,    1,    1,
    1,    1,    1,    2,    2,    3,    1,    9,    7,    6,
    9,    8,    7,    5,    3,    2,    4,    4,    2,    0,
    3,    3,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,   11,   13,   13,    8,   13,    9,   13,
   12,   10,    9,    8,    6,    5,    4,    3,    8,    6,
    8,    6,    5,    4,    3,    8,   13,   11,   11,    9,
   11,    9,    8,    7,    6,    5,    4,    3,    2,   14,
   14,   12,   12,   14,   14,   12,   12,   11,   11,    3,
   12,   12,   10,   10,   12,   12,   10,   10,    9,    9,
    2,    0,    3,    3,    1,    1,    1,    1,    1,    1,
    2,    1,    2,    1,    8,    6,    8,    6,    5,    4,
    3,    8,   11,   12,   12,    8,   13,    9,   13,   12,
   10,    9,    8,    6,    5,    4,    3,    2,    4,    2,
    2,    2,    3,    1,    3,    1,    1,    1,    1,    1,
    1,    1,    3,    3,    3,    1,    1,    3,    3,    3,
    3,    1,    1,    1,    1,    1,    2,    2,   12,   12,
   11,    8,   13,    9,   13,   12,   10,    9,    8,    6,
    5,    4,    3,    2,    3,    3,    3,    1,    1,    1,
    1,    1,    0,    3,    2,    4,    4,    3,    2,    8,
    6,    8,    8,    8,    8,    8,    7,    5,   13,   11,
   11,    9,   11,    9,    8,    7,    6,    5,    4,    3,
    2,    0,    3,    2,    1,    1,    1,    1,    1,    1,
    2,    1,    2,    0,    2,    8,    6,    8,    8,    8,
    8,    8,    7,    5,   12,   12,   11,    8,   13,    9,
   13,   12,   10,    9,    8,    6,    5,    4,    3,    2,
   14,   14,   12,   12,   14,   14,   12,   12,   11,   11,
    3,   12,   12,   10,   10,   12,   12,   10,   10,    9,
    9,    2,    1,    1,    6,    4,    3,    6,    4,    3,
};
final static short yydefred[] = {                         0,
    2,    3,    0,    0,    4,    0,    0,    0,    0,    0,
    0,    0,    0,   12,   13,    1,    0,    0,    7,    8,
    9,   10,   11,    0,    0,  146,  152,  148,  147,  149,
  150,  151,  184,    0,  199,    0,   26,    0,    0,    0,
  221,    0,  282,    0,   17,    0,    0,    0,    0,    0,
    0,  144,    5,    0,   29,   30,  183,    0,    0,  165,
  166,  157,    0,  164,    0,    0,    0,    0,  162,  198,
    0,   25,    0,    0,    0,    0,  220,    0,    0,    0,
  290,  284,  287,  283,    0,  271,    0,    0,    0,    0,
    0,    0,    0,  167,  168,  182,    0,    0,  188,  189,
  190,  191,  192,    0,    0,    0,    0,    0,    0,    0,
  197,  196,    0,    0,    0,    0,    0,    0,    0,    0,
  219,    0,    0,  289,  286,    0,    0,    0,   16,  145,
  143,   28,    0,    0,    0,    0,    0,    0,   27,   33,
   34,   35,    0,   36,   37,   38,   39,   40,   41,   42,
   43,  181,    0,    0,  163,    0,    0,  186,    0,  158,
  159,  160,  161,  141,    0,  140,   24,    0,    0,    0,
    0,  193,    0,    0,  218,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   79,    0,  101,    0,    0,   32,
   31,  180,    0,  193,    0,   20,    0,    0,  193,  193,
    0,  193,  193,  193,  201,  217,    0,    0,  288,  285,
    0,    0,   58,    0,    0,    0,   65,    0,   78,    0,
    0,   90,    0,    0,    0,    0,   19,   23,    0,    0,
    0,  207,    0,    0,    0,    0,  216,    0,    0,    0,
    0,    0,   57,    0,  139,    0,   64,    0,   77,    0,
    0,    0,    0,  179,    0,    0,  172,   22,    0,  206,
  205,  194,  204,  203,  202,  200,  215,    0,    0,    0,
    0,    0,   56,    0,    0,   63,    0,   76,    0,    0,
    0,    0,  178,    0,  174,  193,    0,   21,   18,  214,
    0,    0,    0,    0,    0,  222,  225,  227,  230,  229,
  212,  226,  228,  280,    0,  281,    0,    0,    0,    0,
   55,   30,    0,   30,   62,   30,   60,   75,    0,    0,
    0,    0,  177,  193,    0,    0,    0,  260,    0,  233,
    0,    0,    0,  231,    0,  278,  222,  274,  279,  222,
  275,    0,    0,    0,    0,    0,    0,    0,   74,    0,
    0,    0,    0,    0,    0,    0,    0,  171,  259,    0,
    0,    0,    0,  235,  213,  211,    0,    0,    0,  222,
  210,  269,    0,  270,    0,   54,    0,    0,   47,   66,
   61,   59,   73,    0,    0,    0,    0,    0,  176,    0,
  170,  169,  258,    0,    0,    0,    0,    0,  223,  276,
  272,  277,  273,    0,  267,  222,  263,  268,  222,  264,
   53,    0,   49,    0,   30,    0,   72,    0,    0,    0,
    0,    0,  102,  105,  107,  110,  109,  114,   70,  106,
  108,   99,    0,  100,    0,    0,    0,    0,  175,  173,
  257,    0,    0,    0,  222,    0,    0,  209,    0,    0,
   52,   30,    0,    0,    0,  138,    0,  113,    0,    0,
  111,    0,   97,  102,   93,   98,  102,   94,    0,    0,
    0,  256,  222,    0,  222,  222,    0,  222,  222,  222,
  237,  265,  261,  266,  262,    0,    0,    0,   44,  137,
    0,    0,  121,    0,   71,   69,    0,    0,    0,  102,
   68,   88,    0,   89,    0,    0,    0,    0,    0,  243,
    0,    0,    0,   51,    0,    0,    0,  136,    0,    0,
  120,    0,  104,  103,   95,   91,   96,   92,    0,   86,
  102,   82,   87,  102,   83,  255,    0,    0,  248,  242,
  241,  240,  239,  238,  236,   50,   48,   45,   46,  135,
    0,    0,  119,    0,   67,    0,    0,  254,    0,  250,
  222,    0,  134,  102,    0,  102,  118,  102,  116,   84,
   80,   85,   81,  253,  222,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  247,  133,    0,    0,  126,
  122,  117,  115,  252,    0,  246,  245,  132,    0,  128,
  102,    0,  251,  249,  131,  102,    0,    0,    0,    0,
    0,    0,  123,  130,    0,  124,  125,  129,  127,
};
final static short yydgoto[] = {                          3,
    4,    6,   18,   19,  233,  140,  141,  142,   24,   49,
   25,  116,   93,  143,  297,   62,  146,  298,  148,  426,
  427,  428,   63,  462,  497,   64,  430,  431,  334,   65,
   51,   52,   29,   30,  299,  300,   68,   69,  201,  106,
  335,  367,  302,  303,   85,
};
final static short yysindex[] = {                         8,
    0,    0,    0, -278,    0, 1086, -117,  -63,   17,  -35,
  -24,  -13, -184,    0,    0,    0, -261, -258,    0,    0,
    0,    0,    0, -246, -255,    0,    0,    0,    0,    0,
    0,    0,    0, -220,    0, -247,    0,   67,  273, -215,
    0,  -93,    0, -169,    0,   97,  168,  273, -223, -227,
 -156,    0,    0, -223,    0,    0,    0, -210, -126,    0,
    0,    0, -145,    0, -249,  -98,  -82,  -11,    0,    0,
  -84,    0,  337, -132,  -88, -146,    0,  -75,  -90,  -61,
    0,    0,    0,    0,  -62,    0,  -32,  -16,  330,    7,
  275, -261,  509,    0,    0,    0,  280,  273,    0,    0,
    0,    0,    0, -190, -190,  -51,  275,  275, -190, -190,
    0,    0,   29,   30,   41,  -23,   61,  109,   86,  395,
    0, -181,  273,    0,    0, -118,  273, -169,    0,    0,
    0,    0,  116,  119,  176,  189,  203,  177,    0,    0,
    0,    0, -228,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1888,  330,    0,  -11,  -11,    0,  330,    0,
    0,    0,    0,    0,  187,    0,    0,  135,  316,  149,
  152,    0,  220, 1895,    0,  208,  193,   -4,  238,  218,
   58,  273,  273,  113,    0,  129,    0, -169,  264,    0,
    0,    0,  244,    0,  250,    0,  187,   18,    0,    0,
 -148,    0,    0,    0,    0,    0,   52,  387,    0,    0,
  245,  273,    0,   31,  -26,  259,    0,   43,    0,   55,
  263,    0,  271,  276,  334,  434,    0,    0, -151,  -30,
 1916,    0,  274, 1923, 1930, 1430,    0,   62,  275,  275,
  282,  296,    0,  396,    0,  321,    0,  414,    0, -141,
  273,  273, -169,    0,  338,  241,    0,    0,  307,    0,
    0,    0,    0,    0,    0,    0,    0, 1617,   74,   82,
 -169,  409,    0,  477,  308,    0,  552,    0,  210,  353,
  360,  370,    0, 1909,    0,    0,  380,    0,    0,    0,
  212,  275,  213,  335, -191,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1631,    0, 1652,  392,  275,  275,
    0,    0,  393,    0,    0,    0,    0,    0,   91,  412,
  350,  273,    0,    0,  447, 1937,  416,    0,  147,    0,
  273,  222,  438,    0,  372,    0,    0,    0,    0,    0,
    0, 1986,   94,  103,  873,  451, 1042,  890,    0,  117,
  275,  275,  457,  453, 1444,  460,  472,    0,    0,  128,
  467,  475, -124,    0,    0,    0,  458, 1291, 1305,    0,
    0,    0, 1666,    0, 1687,    0, -176, 1053,    0,    0,
    0,    0,    0, 1474,  143,  144, -169,  422,    0,   75,
    0,    0,    0,  419,  493,  494,  469,  429,    0,    0,
    0,    0,    0, 1796,    0,    0,    0,    0,    0,    0,
    0, -239,    0,  495,    0,  478,    0,  214,  275,  221,
  335,  202,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1488,    0, 1510,  481,  275,  275,    0,    0,
    0, 1701,  479,  480,    0,  483, 1722,    0, 1327, 1341,
    0,    0,  398, 1069,  513,    0,  260,    0,  273,  268,
    0, 1144,    0,    0,    0,    0,    0,    0, 1960,  163,
  165,    0,    0,  491,    0,    0, 1809,    0,    0,    0,
    0,    0,    0,    0,    0,  917,  503,  504,    0,    0,
  167,  510,    0,  199,    0,    0, -219, 1158, 1181,    0,
    0,    0, 1524,    0, 1546, 1363,  459, 1822, 1835,    0,
 1848, 1861, 1377,    0,  287,  525,  526,    0,  432,  531,
    0,  442,    0,    0,    0,    0,    0,    0, 1735,    0,
    0,    0,    0,    0,    0,    0,  361, 1999,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1560,  507,    0, 1582,    0, 1195, 1218,    0, 1757,    0,
    0,  517,    0,    0,  518,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  519, 1874,  538, 1232,  462,
 1770, 1255, 1399,  539,  542,    0,    0,  390, 1973,    0,
    0,    0,    0,    0,  298,    0,    0,    0, 1596,    0,
    0,  527,    0,    0,    0,    0,  546, 1783,  543, 1269,
  544,  560,    0,    0,  349,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1113,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  934,    0,
  961,    0,    0,  988,    0,    0,    0,  583,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  668,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  625,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -94,    0,  706,  746,    0,   48,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1015,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1451,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  784,    0,  815,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1413,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -216,    0,
 -208,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  846,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,    0,    0,    0,   13,  819,  820,  823,  -70,  806,
    0,  662, -256, -262,   -6,   60,    0,  127,    0,  -89,
  -66,   -2,  -29, -399, -345,   23,    0,    0,  413,  -34,
    0,  741,    0,    0,  461,  576,  619,  618, -178,    0,
 -335, -250,    0,    0,  709,
};
final static int YYTABLESIZE=2283;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         26,
   55,  368,  115,  149,  369,    5,   98,   50,   70,   74,
   76,  313,   78,   89,  317,  225,  451,  301,   20,   53,
  230,  231,   45,  234,  235,  236,  150,  190,   56,   99,
  100,  101,  102,  103,  404,   57,  523,   80,  429,  112,
   75,   71,  104,  105,  452,   11,   12,  234,   58,  191,
   11,   12,   90,   58,  338,  345,  341,  347,  524,  348,
   91,  112,   46,  154,  498,   27,   47,  499,   84,  234,
  449,  159,   59,  450,  175,   60,   61,   59,  155,  411,
   60,   61,  412,  413,   45,   47,  144,  465,   46,  468,
  151,  371,   47,  177,  196,  176,   48,  179,  115,   79,
  529,  414,   59,   48,  258,   60,   61,  326,    7,  477,
   96,  119,    8,  130,  278,  416,   10,   11,   12,   92,
  193,  180,  407,  501,  410,  259,  227,  120,   97,  160,
  161,  556,   28,  397,  557,  279,  232,  506,   33,  508,
  509,  117,  511,  512,  513,  355,   26,  215,   84,  398,
   82,  214,  145,  216,  218,   34,  220,  532,  454,  535,
  107,  187,   77,  187,  579,  195,  581,   26,  582,   94,
   95,  111,   11,   12,   59,   58,  108,   60,   61,  187,
  121,  221,  242,  187,  149,  118,  205,  149,  289,  112,
  487,  474,   35,  124,   26,  486,  481,   48,  122,   59,
  238,  608,   60,   61,  158,  565,  610,  150,  569,   36,
  150,  125,   27,  126,   11,   12,  123,   58,   26,  147,
   39,  280,  281,   26,   26,  577,    7,   26,   26,   26,
    8,   41,  167,   27,   10,   11,   12,   40,  193,  583,
  127,   59,   43,  602,   60,   61,  282,  245,   42,   26,
  168,  209,  169,  607,  260,  149,  128,  149,  149,   44,
   27,  269,  270,    1,  308,  104,  105,  144,  287,  210,
  144,  151,   37,  228,  151,  129,    2,   26,  150,   28,
  150,  150,  109,  110,   27,   38,  243,  562,  149,   27,
   27,  229,  354,   27,   27,   27,  325,  164,  247,  360,
   28,  361,  363,  185,  244,  185,  165,  237,  576,  166,
  249,  150,  350,  213,  330,   27,  248,  267,  170,   26,
   79,  185,   72,   11,   12,  185,   58,   28,  250,  304,
  439,  343,  344,  145,  440,  268,  145,  306,  144,   73,
  144,  144,  151,   27,  151,  151,  349,  305,   26,  372,
   59,   28,   81,   60,   61,  307,   28,   28,  374,   79,
   28,   28,   28,  149,  149,   82,  171,  373,  217,  172,
   83,  144,  383,  385,  386,  151,  375,  424,   11,   12,
  436,   58,   28,  393,  219,   27,  150,  150,  181,   59,
  384,  182,   60,   61,   11,   12,  149,   58,  432,  434,
  147,  394,  359,  147,  145,   59,  145,  145,   60,   61,
   28,  197,   11,   12,   27,   58,  433,  435,  502,  150,
  504,   59,  518,   86,   60,   61,  424,  491,  424,  492,
  494,  183,  199,   87,   88,  200,  503,  145,  505,   59,
  519,  458,   60,   61,  185,   45,  144,  144,  184,   46,
  151,  151,   28,  189,  521,  424,   14,   15,  187,  470,
  471,  186,  424,  206,   48,  318,   31,  328,  331,  456,
  208,  147,  522,  147,  147,  188,  459,  362,  189,  144,
  207,   28,  319,  151,  329,  332,  457,   11,   12,   48,
   58,  424,  424,  460,   66,  212,  424,    7,  424,   66,
   66,    8,   66,  202,  147,   10,   11,   12,   66,  193,
  425,  211,  145,  145,   59,  490,   46,   60,   61,  222,
   47,  241,  424,  493,  286,   11,   12,  226,   58,  223,
  224,   48,  246,   11,   12,  152,   58,  153,   11,   12,
  251,   58,  546,  252,  424,  145,  547,  424,  253,  424,
  424,  262,   59,  603,  271,   60,   61,  604,   66,  425,
   59,  425,  288,   60,   61,   59,   66,   59,   60,   61,
   60,   61,  424,  272,  424,  424,   14,   15,  275,  147,
  147,   32,  424,   66,  113,   14,   15,   66,  425,  254,
    7,  314,  424,  283,    8,  425,  284,  285,   10,   11,
   12,  424,  193,  424,  618,  113,   14,   15,  619,   67,
  114,  333,  147,   31,   67,   67,  558,   67,  255,  559,
  560,  104,  105,   67,  425,  425,  353,  365,  291,  425,
  320,  425,    8,  321,   31,  292,  293,   11,   12,  294,
  295,   66,   66,   66,   66,  598,   66,  322,  599,  600,
  173,  273,  174,  274,  133,  425,  366,  327,    8,    9,
  134,   31,  135,  136,  137,  342,  138,   14,   15,  276,
  346,  277,   66,   67,  441,  358,  442,  425,  239,  240,
  425,   67,  425,  425,  446,   31,  447,  550,   17,  551,
   31,   31,  256,  257,   31,   31,   31,  553,   67,  554,
  309,  310,   67,  351,  352,  425,  364,  425,  425,  378,
  379,   66,   66,  437,  438,  425,   31,  538,  539,  391,
  589,  590,  156,  157,  356,  425,  162,  163,   32,  387,
  388,  392,  311,  133,  425,  399,  425,    8,    9,  134,
  395,  135,  136,  137,   31,  138,   14,   15,  396,   32,
  443,  444,  445,  453,  469,  455,   67,   67,   67,   67,
  312,   67,  475,  476,  132,  133,  478,   17,  507,    8,
    9,  134,  489,  135,  136,  137,   32,  138,   14,   15,
  516,  517,   66,  520,  548,  549,   31,   67,  552,   66,
  566,   66,   66,  139,  578,  580,  584,  586,  596,   17,
   32,  597,  613,  616,  609,   32,   32,  315,  133,   32,
   32,   32,    8,    9,  134,   31,  135,  136,  137,  617,
  138,   14,   15,  611,   21,   22,   67,   67,   23,   54,
  198,   32,  131,  461,  178,  316,    0,    0,  163,  163,
  163,  163,   17,  163,  163,    0,  163,  163,  163,  163,
  163,  163,  163,  163,    0,    0,  163,    0,    0,   32,
  163,  163,  163,  163,  163,  163,    0,  163,    0,    0,
    0,    0,    0,  163,  163,  163,  163,  163,    0,    0,
  153,  153,    0,  153,    0,  153,  153,    0,  153,  153,
  153,  153,  153,  153,  153,  153,    0,   67,  153,    0,
    0,   32,  153,    0,   67,    0,   67,   67,    0,  153,
    0,    0,    0,    0,    0,  153,    0,   66,    0,   66,
   66,    0,    0,  156,  156,  156,  156,    0,  156,  156,
   32,  156,  156,  156,  156,  156,  156,  156,  156,    0,
    0,  156,    0,    0,    0,  156,  156,  156,  156,  156,
  156,    0,  156,    0,    0,    0,    0,    0,  156,  156,
  156,  154,  154,  154,  154,    0,  154,  154,    0,  154,
  154,  154,  154,  154,  154,  154,  154,    0,    0,  154,
    0,    0,    0,  154,  154,  154,  154,  154,  154,    0,
  154,    0,    0,    0,    0,    0,  154,  154,  154,    0,
    0,  155,  155,  155,  155,    0,  155,  155,    0,  155,
  155,  155,  155,  155,  155,  155,  155,    0,    0,  155,
    0,    0,    0,  155,  155,  155,  155,  155,  155,    0,
  155,    0,   67,    0,   67,   67,  155,  155,  155,  232,
  232,    0,  232,    0,  232,  232,    0,  232,  232,  232,
  232,  232,  232,  232,  232,    0,    0,    0,    0,    0,
    0,  232,    0,    0,    0,    0,    0,    0,  232,    0,
  234,  234,    0,  234,  232,  234,  234,    0,  234,  234,
  234,  234,  234,  234,  234,  234,    0,    0,    0,    0,
    0,    0,  234,    0,    0,    0,    0,    0,    0,  234,
    0,  244,  244,    0,  244,  234,  244,  244,    0,  244,
  244,  244,  244,  244,  244,  244,  244,    0,    0,    0,
    0,    0,    0,  244,    0,    0,    0,    0,  376,  133,
  244,    0,    0,    8,    9,  134,  244,  135,  136,  137,
    0,  138,   14,   15,    0,  381,  133,    0,    0,    0,
    8,    9,  134,    0,  135,  136,  137,  377,  138,   14,
   15,    0,    0,   17,    0,    0,    0,    0,    0,    0,
    0,    0,  514,  133,  382,    0,    0,    8,    9,  134,
   17,  135,  136,  137,    0,  138,   14,   15,    0,   15,
   15,    0,    0,    0,   15,   15,    0,    0,   15,   15,
   15,  515,   15,   15,   15,    0,    0,   17,    0,    0,
    0,   15,    0,    0,    0,    0,  142,  142,   15,    0,
    0,  142,  142,    0,   15,  142,  142,  142,    0,  142,
  142,  142,    0,    0,    0,    0,    0,    0,  142,    0,
    0,    0,    0,   14,   14,  142,    0,    0,   14,   14,
    0,  142,   14,   14,   14,    0,   14,   14,   14,    0,
    0,    0,    0,    0,    0,   14,    0,    0,    0,    0,
  208,  208,   14,    0,    0,  208,  208,    0,   14,  208,
  208,  208,    0,  208,  208,  208,    0,    0,    0,    0,
    0,    0,  208,    0,    0,    0,    0,    0,  133,  208,
    0,    0,    8,    9,  134,  208,  135,  136,  137,  133,
  138,   14,   15,    8,    9,  134,    0,  135,  136,  137,
    0,  138,   14,   15,    0,  133,  380,    0,    0,    8,
    9,  134,   17,  135,  136,  137,  415,  138,   14,   15,
    0,    0,    7,   17,    0,    0,    8,    9,    0,    0,
   10,   11,   12,  488,   13,   14,   15,    0,    0,   17,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    6,
   16,    0,    0,    6,    6,    0,   17,    6,    6,    6,
    0,    6,    6,    6,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    6,    0,  495,
  418,    0,    0,    6,    8,    0,  134,  419,  420,  136,
  137,  421,  422,  525,  418,    0,    0,    0,    8,    0,
  134,  419,  420,  136,  137,  421,  422,    0,  496,    0,
    0,    0,    0,    0,    0,    0,  527,  418,    0,    0,
    0,    8,  526,  134,  419,  420,  136,  137,  421,  422,
  570,  418,    0,    0,    0,    8,    0,  134,  419,  420,
  136,  137,  421,  422,    0,  528,    0,    0,    0,    0,
    0,    0,    0,  572,  418,    0,    0,    0,    8,  571,
  134,  419,  420,  136,  137,  421,  422,  587,  418,    0,
    0,    0,    8,    0,  134,  419,  420,  136,  137,  421,
  422,    0,  573,    0,    0,    0,    0,    0,    0,    0,
  592,  418,    0,    0,    0,    8,  588,  134,  419,  420,
  136,  137,  421,  422,  614,  418,    0,    0,    0,    8,
    0,  134,  419,  420,  136,  137,  421,  422,    0,  593,
    0,    0,    0,    0,    0,    0,  400,  291,    0,    0,
    0,    8,    0,  615,  292,  293,   11,   12,  294,  295,
  402,  291,    0,    0,    0,    8,    0,    0,  292,  293,
   11,   12,  294,  295,    0,  401,    0,    0,    0,    0,
    0,    0,  482,  291,    0,    0,    0,    8,    0,  403,
  292,  293,   11,   12,  294,  295,  484,  291,    0,    0,
    0,    8,    0,    0,  292,  293,   11,   12,  294,  295,
    0,  483,    0,    0,    0,    0,    0,    0,  536,  291,
    0,    0,    0,    8,    0,  485,  292,  293,   11,   12,
  294,  295,  544,  291,    0,    0,    0,    8,    0,    0,
  292,  293,   11,   12,  294,  295,    0,  537,    0,    0,
    0,    0,    0,    0,  594,  291,    0,    0,    0,    8,
    0,  545,  292,  293,   11,   12,  294,  295,  224,  224,
    0,    0,    0,  224,    0,    0,  224,  224,  224,  224,
  224,  224,    0,  595,    0,  265,    7,    0,    0,    0,
    8,    0,    0,    0,   10,   11,   12,  224,  193,  389,
    7,    0,    0,    0,    8,    0,  195,  195,   10,   11,
   12,  195,  193,    0,  266,  195,  195,  195,    0,  195,
    0,    0,    0,    0,    0,    0,    0,    0,  390,  417,
  418,    0,    0,    0,    8,  195,  134,  419,  420,  136,
  137,  421,  422,  463,  418,    0,    0,    0,    8,    0,
  134,  419,  420,  136,  137,  421,  422,  423,    0,    0,
    0,    0,    0,    0,    0,  466,  418,    0,    0,    0,
    8,  464,  134,  419,  420,  136,  137,  421,  422,  530,
  418,    0,    0,    0,    8,    0,  134,  419,  420,  136,
  137,  421,  422,  467,    0,    0,    0,    0,    0,    0,
    0,  533,  418,    0,    0,    0,    8,  531,  134,  419,
  420,  136,  137,  421,  422,  563,  418,    0,    0,    0,
    8,    0,  134,  419,  420,  136,  137,  421,  422,  534,
    0,    0,    0,    0,    0,    0,    0,  567,  418,    0,
    0,    0,    8,  564,  134,  419,  420,  136,  137,  421,
  422,  605,  418,    0,    0,    0,    8,    0,  134,  419,
  420,  136,  137,  421,  422,  568,    0,    0,    0,    0,
    0,    0,  290,  291,    0,    0,    0,    8,    0,  606,
  292,  293,   11,   12,  294,  295,  336,  291,    0,    0,
    0,    8,    0,    0,  292,  293,   11,   12,  294,  295,
  296,    0,    0,    0,    0,    0,    0,  339,  291,    0,
    0,    0,    8,    0,  337,  292,  293,   11,   12,  294,
  295,  405,  291,    0,    0,    0,    8,    0,    0,  292,
  293,   11,   12,  294,  295,  340,    0,    0,    0,    0,
    0,    0,  408,  291,    0,    0,    0,    8,    0,  406,
  292,  293,   11,   12,  294,  295,  472,  291,    0,    0,
    0,    8,    0,    0,  292,  293,   11,   12,  294,  295,
  409,    0,    0,    0,    0,    0,    0,  479,  291,    0,
    0,    0,    8,    0,  473,  292,  293,   11,   12,  294,
  295,  418,    0,    0,    0,    8,    0,  134,  419,  420,
  136,  137,  421,  422,    0,  480,    0,    0,    0,    0,
    0,    0,  574,  291,    0,    0,    0,    8,    0,  555,
  292,  293,   11,   12,  294,  295,  418,    0,    0,    0,
    8,    0,  134,  419,  420,  136,  137,  421,  422,  418,
  575,    0,    0,    8,    0,  134,  419,  420,  136,  137,
  421,  422,  291,    0,  591,    0,    8,    0,    0,  292,
  293,   11,   12,  294,  295,  291,    0,  612,    0,    8,
    0,    0,  292,  293,   11,   12,  294,  295,  291,    0,
  448,    0,    8,    0,    0,  292,  293,   11,   12,  294,
  295,  291,    0,  510,    0,    8,    0,    0,  292,  293,
   11,   12,  294,  295,  291,    0,  540,    0,    8,    0,
    0,  292,  293,   11,   12,  294,  295,  291,    0,  541,
    0,    8,    0,    0,  292,  293,   11,   12,  294,  295,
  291,    0,  542,    0,    8,    0,    0,  292,  293,   11,
   12,  294,  295,  192,    7,  543,    0,    0,    8,    0,
  203,    7,   10,   11,   12,    8,  193,    0,  585,   10,
   11,   12,    0,  193,  323,    7,    0,    0,    0,    8,
    0,  194,    7,   10,   11,   12,    8,  193,  204,    7,
   10,   11,   12,    8,  193,    0,    7,   10,   11,   12,
    8,  193,  324,    7,   10,   11,   12,    8,  193,    0,
  261,   10,   11,   12,    0,  193,    0,  263,    0,    0,
    0,    0,    0,    0,  264,    0,  418,    0,    0,    0,
    8,  357,  134,  419,  420,  136,  137,  421,  422,  418,
    0,    0,    0,    8,    0,  134,  419,  420,  136,  137,
  421,  422,  291,  500,    0,    0,    8,    0,    0,  292,
  293,   11,   12,  294,  295,  291,  601,    0,    0,    8,
    0,    0,  292,  293,   11,   12,  294,  295,    0,  370,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  561,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          6,
  256,  337,   73,   93,  340,  284,  256,  269,  256,   39,
   40,  274,   42,   48,  277,  194,  256,  268,    6,  278,
  199,  200,  269,  202,  203,  204,   93,  256,  284,  279,
  280,  281,  282,  283,  370,  256,  256,   44,  384,  256,
  256,  289,  292,  293,  284,  266,  267,  256,  269,  278,
  266,  267,  276,  269,  305,  312,  307,  314,  278,  316,
  288,  278,  273,   98,  464,    6,  277,  467,   46,  278,
  406,  106,  293,  409,  256,  296,  297,  293,  269,  256,
  296,  297,  259,  260,  269,  277,   93,  433,  273,  435,
   93,  342,  277,  123,  165,  277,  288,  127,  169,  269,
  500,  278,  293,  288,  256,  296,  297,  286,  257,  445,
  256,  258,  261,   91,  256,  378,  265,  266,  267,  276,
  269,  128,  373,  469,  375,  277,  197,  274,  274,  107,
  108,  531,    6,  258,  534,  277,  285,  473,  256,  475,
  476,  274,  478,  479,  480,  324,  153,  182,  126,  274,
  269,  181,   93,  183,  184,  273,  186,  503,  415,  505,
  259,  256,  256,  258,  564,  153,  566,  174,  568,  296,
  297,  256,  266,  267,  293,  269,  259,  296,  297,  274,
  256,  188,  212,  278,  274,  274,  174,  277,  259,  274,
  453,  442,  256,  256,  201,  452,  447,  288,  274,  293,
  207,  601,  296,  297,  256,  551,  606,  274,  554,  273,
  277,  274,  153,  276,  266,  267,  278,  269,  225,   93,
  256,  251,  252,  230,  231,  561,  257,  234,  235,  236,
  261,  256,  256,  174,  265,  266,  267,  273,  269,  575,
  273,  293,  256,  589,  296,  297,  253,  274,  273,  256,
  274,  256,  276,  599,  285,  345,  273,  347,  348,  273,
  201,  239,  240,  256,  271,  292,  293,  274,  256,  274,
  277,  274,  256,  256,  277,  269,  269,  284,  345,  153,
  347,  348,  294,  295,  225,  269,  256,  538,  378,  230,
  231,  274,  322,  234,  235,  236,  284,  269,  256,  329,
  174,  331,  332,  256,  274,  258,  277,  256,  559,  269,
  256,  378,  319,  256,  292,  256,  274,  256,  258,  326,
  269,  274,  256,  266,  267,  278,  269,  201,  274,  256,
  256,  309,  310,  274,  260,  274,  277,  256,  345,  273,
  347,  348,  345,  284,  347,  348,  256,  274,  355,  256,
  293,  225,  256,  296,  297,  274,  230,  231,  256,  269,
  234,  235,  236,  453,  454,  269,  258,  274,  256,  284,
  274,  378,  256,  351,  352,  378,  274,  384,  266,  267,
  387,  269,  256,  256,  256,  326,  453,  454,  273,  293,
  274,  273,  296,  297,  266,  267,  486,  269,  256,  256,
  274,  274,  256,  277,  345,  293,  347,  348,  296,  297,
  284,  277,  266,  267,  355,  269,  274,  274,  256,  486,
  256,  293,  256,  256,  296,  297,  433,  457,  435,  459,
  460,  256,  284,  266,  267,  284,  274,  378,  274,  293,
  274,  419,  296,  297,  256,  269,  453,  454,  273,  273,
  453,  454,  326,  277,  256,  462,  270,  271,  256,  437,
  438,  273,  469,  256,  288,  256,    6,  256,  256,  256,
  278,  345,  274,  347,  348,  273,  256,  256,  277,  486,
  273,  355,  273,  486,  273,  273,  273,  266,  267,  288,
  269,  498,  499,  273,   34,  278,  503,  257,  505,   39,
   40,  261,   42,  284,  378,  265,  266,  267,   48,  269,
  384,  274,  453,  454,  293,  256,  273,  296,  297,  256,
  277,  277,  529,  256,  284,  266,  267,  278,  269,  266,
  267,  288,  274,  266,  267,  256,  269,  258,  266,  267,
  278,  269,  256,  273,  551,  486,  260,  554,  273,  556,
  557,  278,  293,  256,  273,  296,  297,  260,   98,  433,
  293,  435,  256,  296,  297,  293,  106,  293,  296,  297,
  296,  297,  579,  278,  581,  582,  270,  271,  258,  453,
  454,    6,  589,  123,  269,  270,  271,  127,  462,  256,
  257,  284,  599,  256,  261,  469,  259,  260,  265,  266,
  267,  608,  269,  610,  256,  269,  270,  271,  260,   34,
  274,  277,  486,  153,   39,   40,  256,   42,  285,  259,
  260,  292,  293,   48,  498,  499,  277,  256,  257,  503,
  278,  505,  261,  274,  174,  264,  265,  266,  267,  268,
  269,  181,  182,  183,  184,  256,  186,  278,  259,  260,
  256,  256,  258,  258,  257,  529,  285,  278,  261,  262,
  263,  201,  265,  266,  267,  274,  269,  270,  271,  256,
  278,  258,  212,   98,  256,  260,  258,  551,  292,  293,
  554,  106,  556,  557,  256,  225,  258,  256,  291,  258,
  230,  231,  259,  260,  234,  235,  236,  256,  123,  258,
  292,  293,  127,  292,  293,  579,  269,  581,  582,  259,
  260,  251,  252,  292,  293,  589,  256,  259,  260,  260,
  259,  260,  104,  105,  278,  599,  109,  110,  153,  273,
  278,  260,  256,  257,  608,  278,  610,  261,  262,  263,
  274,  265,  266,  267,  284,  269,  270,  271,  274,  174,
  258,  258,  284,  259,  274,  278,  181,  182,  183,  184,
  284,  186,  284,  284,  256,  257,  284,  291,  278,  261,
  262,  263,  260,  265,  266,  267,  201,  269,  270,  271,
  278,  278,  322,  274,  260,  260,  326,  212,  258,  329,
  284,  331,  332,  285,  278,  278,  278,  260,  260,  291,
  225,  260,  260,  260,  278,  230,  231,  256,  257,  234,
  235,  236,  261,  262,  263,  355,  265,  266,  267,  260,
  269,  270,  271,  278,    6,    6,  251,  252,    6,   24,
  169,  256,   92,  421,  126,  284,   -1,   -1,  256,  257,
  258,  259,  291,  261,  262,   -1,  264,  265,  266,  267,
  268,  269,  270,  271,   -1,   -1,  274,   -1,   -1,  284,
  278,  279,  280,  281,  282,  283,   -1,  285,   -1,   -1,
   -1,   -1,   -1,  291,  292,  293,  294,  295,   -1,   -1,
  256,  257,   -1,  259,   -1,  261,  262,   -1,  264,  265,
  266,  267,  268,  269,  270,  271,   -1,  322,  274,   -1,
   -1,  326,  278,   -1,  329,   -1,  331,  332,   -1,  285,
   -1,   -1,   -1,   -1,   -1,  291,   -1,  457,   -1,  459,
  460,   -1,   -1,  256,  257,  258,  259,   -1,  261,  262,
  355,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
   -1,  274,   -1,   -1,   -1,  278,  279,  280,  281,  282,
  283,   -1,  285,   -1,   -1,   -1,   -1,   -1,  291,  292,
  293,  256,  257,  258,  259,   -1,  261,  262,   -1,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,   -1,  274,
   -1,   -1,   -1,  278,  279,  280,  281,  282,  283,   -1,
  285,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,   -1,
   -1,  256,  257,  258,  259,   -1,  261,  262,   -1,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,   -1,  274,
   -1,   -1,   -1,  278,  279,  280,  281,  282,  283,   -1,
  285,   -1,  457,   -1,  459,  460,  291,  292,  293,  256,
  257,   -1,  259,   -1,  261,  262,   -1,  264,  265,  266,
  267,  268,  269,  270,  271,   -1,   -1,   -1,   -1,   -1,
   -1,  278,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,
  256,  257,   -1,  259,  291,  261,  262,   -1,  264,  265,
  266,  267,  268,  269,  270,  271,   -1,   -1,   -1,   -1,
   -1,   -1,  278,   -1,   -1,   -1,   -1,   -1,   -1,  285,
   -1,  256,  257,   -1,  259,  291,  261,  262,   -1,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,   -1,   -1,
   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,  256,  257,
  285,   -1,   -1,  261,  262,  263,  291,  265,  266,  267,
   -1,  269,  270,  271,   -1,  256,  257,   -1,   -1,   -1,
  261,  262,  263,   -1,  265,  266,  267,  285,  269,  270,
  271,   -1,   -1,  291,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,  285,   -1,   -1,  261,  262,  263,
  291,  265,  266,  267,   -1,  269,  270,  271,   -1,  256,
  257,   -1,   -1,   -1,  261,  262,   -1,   -1,  265,  266,
  267,  285,  269,  270,  271,   -1,   -1,  291,   -1,   -1,
   -1,  278,   -1,   -1,   -1,   -1,  256,  257,  285,   -1,
   -1,  261,  262,   -1,  291,  265,  266,  267,   -1,  269,
  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,  278,   -1,
   -1,   -1,   -1,  256,  257,  285,   -1,   -1,  261,  262,
   -1,  291,  265,  266,  267,   -1,  269,  270,  271,   -1,
   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,
  256,  257,  285,   -1,   -1,  261,  262,   -1,  291,  265,
  266,  267,   -1,  269,  270,  271,   -1,   -1,   -1,   -1,
   -1,   -1,  278,   -1,   -1,   -1,   -1,   -1,  257,  285,
   -1,   -1,  261,  262,  263,  291,  265,  266,  267,  257,
  269,  270,  271,  261,  262,  263,   -1,  265,  266,  267,
   -1,  269,  270,  271,   -1,  257,  285,   -1,   -1,  261,
  262,  263,  291,  265,  266,  267,  284,  269,  270,  271,
   -1,   -1,  257,  291,   -1,   -1,  261,  262,   -1,   -1,
  265,  266,  267,  285,  269,  270,  271,   -1,   -1,  291,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
  285,   -1,   -1,  261,  262,   -1,  291,  265,  266,  267,
   -1,  269,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,  256,
  257,   -1,   -1,  291,  261,   -1,  263,  264,  265,  266,
  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
  263,  264,  265,  266,  267,  268,  269,   -1,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,  285,  263,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,
  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,  285,
  263,  264,  265,  266,  267,  268,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,  268,
  269,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,  285,  263,  264,  265,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,  263,  264,  265,  266,  267,  268,  269,   -1,  285,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,   -1,  285,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  285,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,   -1,  285,  264,  265,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  264,  265,  266,  267,  268,  269,   -1,  285,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
   -1,  285,  264,  265,  266,  267,  268,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,   -1,  264,  265,  266,  267,
  268,  269,   -1,  285,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,   -1,  265,  266,  267,  285,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,  256,  257,  265,  266,
  267,  261,  269,   -1,  285,  265,  266,  267,   -1,  269,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,  256,
  257,   -1,   -1,   -1,  261,  285,  263,  264,  265,  266,
  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
  263,  264,  265,  266,  267,  268,  269,  284,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
  261,  284,  263,  264,  265,  266,  267,  268,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,
  267,  268,  269,  284,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,  284,  263,  264,
  265,  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,  263,  264,  265,  266,  267,  268,  269,  284,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,  284,  263,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,
  265,  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  284,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
  284,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,  284,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  284,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
  284,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,  284,  264,  265,  266,  267,  268,
  269,  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,
  266,  267,  268,  269,   -1,  284,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  285,
  264,  265,  266,  267,  268,  269,  257,   -1,   -1,   -1,
  261,   -1,  263,  264,  265,  266,  267,  268,  269,  257,
  284,   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,
  268,  269,  257,   -1,  285,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  257,   -1,  285,   -1,  261,
   -1,   -1,  264,  265,  266,  267,  268,  269,  257,   -1,
  285,   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,
  269,  257,   -1,  285,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,  257,   -1,  285,   -1,  261,   -1,
   -1,  264,  265,  266,  267,  268,  269,  257,   -1,  285,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
  257,   -1,  285,   -1,  261,   -1,   -1,  264,  265,  266,
  267,  268,  269,  256,  257,  285,   -1,   -1,  261,   -1,
  256,  257,  265,  266,  267,  261,  269,   -1,  285,  265,
  266,  267,   -1,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,  284,  257,  265,  266,  267,  261,  269,  284,  257,
  265,  266,  267,  261,  269,   -1,  257,  265,  266,  267,
  261,  269,  284,  257,  265,  266,  267,  261,  269,   -1,
  285,  265,  266,  267,   -1,  269,   -1,  285,   -1,   -1,
   -1,   -1,   -1,   -1,  285,   -1,  257,   -1,   -1,   -1,
  261,  285,  263,  264,  265,  266,  267,  268,  269,  257,
   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,
  268,  269,  257,  284,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  257,  284,   -1,   -1,  261,
   -1,   -1,  264,  265,  266,  267,  268,  269,   -1,  284,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  284,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=297;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"IF","THEN","ELSE","END_IF","OUT","FUN","RETURN","BREAK","WHEN",
"WHILE","FOR","CONTINUE","ID","I32","F32","PUNTO","PARENT_A","PARENT_C",
"COMILLA","COMA","DOSPUNTOS","PUNTOCOMA","IGUAL","MAYOR","MENOR","MENORIGUAL",
"MAYORIGUAL","LLAVE_A","LLAVE_C","EXCL","DIST","ASIG","CADENA","COMENT","CONST",
"SUMA","RESTA","MULT","DIV","ENTERO","FLOAT",
};
final static String yyrule[] = {
"$accept : program",
"program : nombre_program LLAVE_A bloque_sentencias LLAVE_C",
"program : error",
"nombre_program : ID",
"bloque_sentencias :",
"bloque_sentencias : bloque_sentencias sentencia PUNTOCOMA",
"bloque_sentencias : bloque_sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_decl_datos",
"sentencia_declarativa : sentencia_decl_fun",
"sentencia_declarativa : lista_const",
"tipo : I32",
"tipo : F32",
"sentencia_decl_datos : tipo list_var",
"sentencia_decl_datos : ID list_var",
"list_var : list_var COMA ID",
"list_var : ID",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro error",
"encabezado_fun : FUN ID PARENT_A parametro error",
"encabezado_fun : FUN ID error",
"encabezado_fun : FUN error",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun error",
"sentencia_decl_fun : encabezado_fun error",
"cuerpo_fun :",
"cuerpo_fun : cuerpo_fun sentencias_fun PUNTOCOMA",
"cuerpo_fun : cuerpo_fun sentencias_fun error",
"sentencias_fun : sentencia_decl_datos",
"sentencias_fun : sentencia_decl_fun",
"sentencias_fun : lista_const",
"sentencias_fun : asignacion",
"sentencias_fun : llamado_func",
"sentencias_fun : sentencia_if_fun",
"sentencias_fun : sentencia_out",
"sentencias_fun : sentencia_when_fun",
"sentencias_fun : sentencia_for_fun",
"sentencias_fun : sentencia_while_fun",
"sentencias_fun : retorno",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_fun : IF PARENT_A condicion error",
"sentencia_if_fun : IF PARENT_A error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_fun : WHEN PARENT_A condicion error",
"sentencia_when_fun : WHEN PARENT_A error",
"sentencia_when_fun : WHEN error condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion error",
"sentencia_while_fun : WHILE PARENT_A error",
"sentencia_while_fun : WHILE error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for_fun : ID DOSPUNTOS error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for_fun : FOR error",
"cuerpo_fun_break :",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break PUNTOCOMA",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break error",
"sentencias_fun_break : asignacion",
"sentencias_fun_break : sentencia_if_break_fun",
"sentencias_fun_break : sentencia_out",
"sentencias_fun_break : sentencia_when_break_fun",
"sentencias_fun_break : sentencia_while_fun",
"sentencias_fun_break : sentencia_for_fun",
"sentencias_fun_break : CONTINUE tag",
"sentencias_fun_break : BREAK",
"sentencias_fun_break : BREAK cte",
"sentencias_fun_break : retorno",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun_break",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_break_fun : WHEN PARENT_A condicion error",
"sentencia_when_break_fun : WHEN PARENT_A error",
"sentencia_when_break_fun : WHEN error condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break_fun : IF PARENT_A condicion error",
"sentencia_if_break_fun : IF PARENT_A error",
"sentencia_if_break_fun : IF error",
"retorno : RETURN PARENT_A expresion PARENT_C",
"parametro : tipo ID",
"parametro : ID ID",
"lista_const : CONST lista_asignacion",
"lista_asignacion : lista_asignacion COMA asignacion_const",
"lista_asignacion : asignacion_const",
"asignacion_const : ID ASIG cte",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : sentencia_if",
"sentencia_ejecutable : sentencia_out",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : sentencia_for",
"sentencia_ejecutable : sentencia_while",
"sentencia_ejecutable : llamado_func",
"asignacion : ID ASIG expresion",
"expresion : expresion SUMA termino",
"expresion : expresion RESTA termino",
"expresion : termino",
"expresion : llamado_func",
"expresion : sentencia_for ELSE cte",
"expresion : sentencia_while ELSE cte",
"termino : termino MULT factor",
"termino : termino DIV factor",
"termino : factor",
"factor : ID",
"factor : cte",
"cte : ENTERO",
"cte : FLOAT",
"cte : RESTA ENTERO",
"cte : RESTA FLOAT",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if : IF PARENT_A condicion PARENT_C error",
"sentencia_if : IF PARENT_A condicion error",
"sentencia_if : IF PARENT_A error",
"sentencia_if : IF error",
"condicion : expresion comparacion expresion",
"condicion : expresion comparacion error",
"condicion : expresion error expresion",
"comparacion : IGUAL",
"comparacion : MAYOR",
"comparacion : MENOR",
"comparacion : MENORIGUAL",
"comparacion : MAYORIGUAL",
"bloque_ejecutable :",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable PUNTOCOMA",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"sentencia_out : OUT PARENT_A CADENA PARENT_C",
"sentencia_out : OUT PARENT_A CADENA error",
"sentencia_out : OUT PARENT_A error",
"sentencia_out : OUT error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN sentencia_ejecutable",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN error bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C error LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A error PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN error condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C error",
"sentencia_while : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion error",
"sentencia_while : WHILE PARENT_A error",
"sentencia_while : WHILE error",
"bloque_break_continue :",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue PUNTOCOMA",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue",
"ejecutables_break_continue : asignacion",
"ejecutables_break_continue : sentencia_if_break",
"ejecutables_break_continue : sentencia_out",
"ejecutables_break_continue : sentencia_when_break",
"ejecutables_break_continue : sentencia_while",
"ejecutables_break_continue : sentencia_for",
"ejecutables_break_continue : CONTINUE tag",
"ejecutables_break_continue : BREAK",
"ejecutables_break_continue : BREAK cte",
"tag :",
"tag : DOSPUNTOS ID",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN ejecutables_break_continue",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN error bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C error LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A error PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN error condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion error",
"sentencia_if_break : IF PARENT_A error",
"sentencia_if_break : IF error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C ejecutables_break_continue",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C ejecutables_break_continue",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for : ID DOSPUNTOS error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for : FOR error",
"param_real : cte",
"param_real : ID",
"llamado_func : ID PARENT_A param_real COMA param_real PARENT_C",
"llamado_func : ID PARENT_A param_real PARENT_C",
"llamado_func : ID PARENT_A PARENT_C",
"llamado_func : ID PARENT_A param_real COMA param_real error",
"llamado_func : ID PARENT_A param_real error",
"llamado_func : ID PARENT_A error",
};

//#line 942 "gramaticaTomi.y"
private NodoControl raiz;
private Map<String,ArbolSintactico> funciones = new HashMap<String,ArbolSintactico>();
private static HashMap<Integer,ArrayList<String>> erroresSintacticos = new HashMap<Integer,ArrayList<String>>();
public String ambitoActual = "Global";
private List<String> tipoActual = new ArrayList<String>();


void yyerror(String mensaje){
        if (erroresSintacticos.get(AnalizadorLexico.getLineaAct())== null){
                ArrayList<String> mnsj = new ArrayList<String>();
                mnsj.add(mensaje); 
                erroresSintacticos.put(AnalizadorLexico.getLineaAct(), mnsj);
        }
        else{
                erroresSintacticos.get(AnalizadorLexico.getLineaAct()).add(mensaje);
        }
}

static HashMap<Integer,ArrayList<String>> getErroresSintacticos(){
        return erroresSintacticos;
}
void chequearRangoI32(String sval){
  String s = "2147483647";
  long l = Long.valueOf(s);
  if(Long.valueOf(sval) > l){
    yyerror("La constante esta fuera de rango");
  }
}

void chequearRangoI32Neg(String sval){
       String s = "2147483648";
        long l = Long.valueOf(s);
        if(Long.valueOf(sval) > l){
                yyerror("La constante esta fuera de rango");
  } 
}

int yylex() throws IOException{
        Token t = AnalizadorLexico.getToken();
        this.yylval = new ParserVal(t.getLexema());
        //if(t.getId() != -1){
        //  System.out.println("Id: " + t.getId()+" Lexema: " + t.getLexema());
        //}else
        //  System.out.println("TERMINO LA EJECUCION");
        return t.getId();
}
public NodoControl getRaiz(){
	return raiz;
}
public Map<String,ArbolSintactico> getFuncion(){
        return funciones;
}

void actualizarAmbito(String lex, String amb){
        TablaSimbolos.addAtributo(lex,"Ambito",amb);
}
public String getTipoActual(){
        if(!this.tipoActual.isEmpty()){
                return (this.tipoActual.get(tipoActual.size()-1));
        }
        return null;
}
public void cambiarTipoActual(String f){
        tipoActual.add(f);
}
public void removeTipoActual(){
        if(!this.tipoActual.isEmpty()){
                this.tipoActual.remove(tipoActual.size()-1);
        }
}
public String buscarAmbito(String ambitoActual,String lexema){
        String ambito = ambitoActual;
        while(!TablaSimbolos.existeSimbolo(lexema+":"+ambito)){
                if(ambito.equals("Global")){
                        yyerror("La variable " + lexema + " no se encuentra declarada en el ambito " + ambitoActual);
                        ambito = "";
                        break;
                }else{
                        char [] a = ambito.toCharArray();
                        for (int i = a.length;i>=0;i--){
                                if(a[i-1] == ':'){
                                        ambito = ambito.substring(0,i-1);
                                        break;
                                }
                        }
                }
        }
        return ambito;
}
//#line 1287 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse() throws IOException
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 22 "gramaticaTomi.y"
{
                                                                raiz = new NodoControl("PROGRAMA",(ArbolSintactico)val_peek(1));  
                                                                TablaSimbolos.removeAtributo(val_peek(3).sval);
                                                        }
break;
case 2:
//#line 28 "gramaticaTomi.y"
{yyerror("Hay un error sintactico en la entrada que arrastra errores");}
break;
case 4:
//#line 32 "gramaticaTomi.y"
{yyval=new NodoHoja("Fin");}
break;
case 5:
//#line 33 "gramaticaTomi.y"
{
                                                        yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                                                        }
break;
case 6:
//#line 36 "gramaticaTomi.y"
{
                                yyval = new NodoControl("Error",(ArbolSintactico)null);
                                yyerror("Se esperaba ;");
                        }
break;
case 7:
//#line 41 "gramaticaTomi.y"
{yyval=new NodoHoja("Sentencia Declarativa");}
break;
case 8:
//#line 42 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 10:
//#line 45 "gramaticaTomi.y"
{funciones.put((String)((ArbolSintactico)val_peek(0)).getLex(),(ArbolSintactico)val_peek(0));}
break;
case 12:
//#line 48 "gramaticaTomi.y"
{
            yyval = new NodoHoja("Entero");
            ((NodoHoja)yyval).setTipo("Entero");
           }
break;
case 13:
//#line 52 "gramaticaTomi.y"
{
            yyval = new NodoHoja("Float");
            ((NodoHoja)yyval).setTipo("Float");
           }
break;
case 14:
//#line 57 "gramaticaTomi.y"
{  System.out.println("Declaracion de datos");
                                        for (String s : ((NodoTipos)val_peek(0)).getList()){
                                                String ambito = ambitoActual;
                                                while(TablaSimbolos.existeSimbolo(s+":"+ambito)){
                                                        if(ambito.equals("Global")){
                                                                yyerror("La variable " + s + " ya se encuentra declarada en el ambito " + ambitoActual);
                                                                ambito = "";
                                                                break;
                                                        }else{
                                                                char [] a = ambito.toCharArray();
                                                                for (int i = a.length;i>=0;i--){
                                                                        if(a[i-1] == ':'){
                                                                        ambito = ambito.substring(0,i-1);
                                                                        break;
                                                                }
                                                        }
                                                }
                                        }  
                                        if(ambito.equals(ambitoActual)){
                                                TablaSimbolos.addNuevoSimbolo(s+":"+ambito);
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Id",TablaSimbolos.getAtributo(s,"Id"));
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Tipo",((ArbolSintactico) val_peek(1)).getTipo());
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Linea",AnalizadorLexico.getLineaAct());
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Uso","Variable");
                                                TablaSimbolos.removeAtributo(s);
                                        }
                                        

                                        }
                                        yyval = val_peek(0);
                                }
break;
case 15:
//#line 88 "gramaticaTomi.y"
{yyerror("No esta permitido el tipo declarado");}
break;
case 16:
//#line 90 "gramaticaTomi.y"
{
                            yyval=val_peek(2);
                            ((NodoTipos)yyval).add((String)val_peek(0).sval);
                            }
break;
case 17:
//#line 94 "gramaticaTomi.y"
{
               yyval=new NodoTipos((String)val_peek(0).sval);
              }
break;
case 18:
//#line 98 "gramaticaTomi.y"
{       

                        if(!TablaSimbolos.existeSimbolo(val_peek(7).sval+ ":" + ambitoActual)){
                                yyval = new ParserVal(val_peek(7).sval);
                                TablaSimbolos.addNuevoSimbolo(val_peek(7).sval+ ":" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(7).sval+ ":" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(7).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(7).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(7).sval);
                                TablaSimbolos.addAtributo(val_peek(7).sval+":"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addAtributo(val_peek(7).sval +":"+ambitoActual,"Parametro1",((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual +":"+ val_peek(7).sval);
                                TablaSimbolos.addAtributo(val_peek(7).sval +":"+ambitoActual,"Parametro2",((ArbolSintactico)val_peek(3)).getLex()+ ":"+ ambitoActual +":"+ val_peek(7).sval);
                                ambitoActual += ":"+val_peek(7).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                /*Agrego los parametros en la tabla de simbolos*/
                                TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual);
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(5)).getTipo());
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual,"Uso","Variable");
                                TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual);
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Uso","Variable");

                        }else{
                                yyerror("La funcion " + val_peek(7).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += ":"+val_peek(7).sval;
                        }
                        
}
break;
case 19:
//#line 125 "gramaticaTomi.y"
{
                        if(!TablaSimbolos.existeSimbolo(val_peek(5).sval+ ":" + ambitoActual)){
                                yyval = new ParserVal(val_peek(5).sval);
                                TablaSimbolos.addNuevoSimbolo(val_peek(5).sval+ ":" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(5).sval+ ":" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(5).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(5).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(5).sval);
                                TablaSimbolos.addAtributo(val_peek(5).sval+":"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addAtributo(val_peek(5).sval +":"+ambitoActual,"Parametro1", ((ArbolSintactico)val_peek(3)).getLex()+ ":"+ ambitoActual +":"+ val_peek(5).sval);
                                ambitoActual += ":"+val_peek(5).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                /*Agrego el parametro en la tabla de simbolos*/
                                TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual);
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Uso","Variable");

                        }else{
                                yyerror("La funcion " + val_peek(5).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += ":"+val_peek(5).sval;
                        }
                }
break;
case 20:
//#line 146 "gramaticaTomi.y"
{
                        if(!TablaSimbolos.existeSimbolo(val_peek(4).sval+ ":" + ambitoActual)){
                                yyval = new ParserVal(val_peek(4).sval);
                                TablaSimbolos.addNuevoSimbolo(val_peek(4).sval+ ":" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(4).sval+ ":" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(4).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(4).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(4).sval);
                                TablaSimbolos.addAtributo(val_peek(4).sval+":"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                ambitoActual += ":"+val_peek(4).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());

                        }else{
                                yyerror("La funcion " + val_peek(4).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += ":"+val_peek(4).sval;
                        }
                }
break;
case 21:
//#line 163 "gramaticaTomi.y"
{yyerror("El tipo declarado no esta permitido");}
break;
case 22:
//#line 164 "gramaticaTomi.y"
{yyerror("Se esperaba :");}
break;
case 23:
//#line 165 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 24:
//#line 166 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 25:
//#line 167 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 26:
//#line 168 "gramaticaTomi.y"
{yyerror("Se esperaba un nombre de funcion");}
break;
case 27:
//#line 172 "gramaticaTomi.y"
{
                                System.out.println("Declaracion de Funcion");
                                yyval = new NodoControl("Funcion:"+val_peek(3).sval,(ArbolSintactico)val_peek(1));
                                char [] a = ambitoActual.toCharArray();
                                for (int i = a.length;i>=0;i--){
                                        if(a[i-1] == ':'){
                                                ambitoActual = ambitoActual.substring(0,i-1);
                                                break;
                                        }
                                }
                                removeTipoActual();
                        }
break;
case 28:
//#line 184 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 29:
//#line 185 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 30:
//#line 187 "gramaticaTomi.y"
{yyval=new NodoHoja("Fin");}
break;
case 31:
//#line 188 "gramaticaTomi.y"
{yyval=new NodoComun("Sentencia_Funcion", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));}
break;
case 32:
//#line 189 "gramaticaTomi.y"
{yyerror("Se esperaba ;");}
break;
case 33:
//#line 191 "gramaticaTomi.y"
{yyval=new NodoHoja("Sentencia Declarativa Datos");}
break;
case 34:
//#line 192 "gramaticaTomi.y"
{yyval=new NodoHoja("Sentencia Declarativa Funcion");}
break;
case 35:
//#line 193 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 36:
//#line 194 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 37:
//#line 195 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 38:
//#line 196 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 39:
//#line 197 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 40:
//#line 198 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 41:
//#line 199 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 42:
//#line 200 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 43:
//#line 201 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 44:
//#line 203 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                                yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(8),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(5)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));
                        }
break;
case 45:
//#line 206 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(6)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));}
break;
case 46:
//#line 208 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(7)),new NodoControl("else fun", (ArbolSintactico)val_peek(3))));}
break;
case 47:
//#line 211 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF FUN", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                }
break;
case 48:
//#line 214 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(6)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));}
break;
case 49:
//#line 217 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF FUN", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );}
break;
case 50:
//#line 219 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 51:
//#line 220 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 52:
//#line 221 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 53:
//#line 222 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 54:
//#line 223 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 55:
//#line 224 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 56:
//#line 225 "gramaticaTomi.y"
{yyerror("Se esperaba then ");}
break;
case 57:
//#line 226 "gramaticaTomi.y"
{yyerror("Se esperaba ) ");}
break;
case 58:
//#line 227 "gramaticaTomi.y"
{yyerror("Se esperaba una condicion ");}
break;
case 59:
//#line 229 "gramaticaTomi.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 60:
//#line 232 "gramaticaTomi.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 61:
//#line 235 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 62:
//#line 236 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 63:
//#line 237 "gramaticaTomi.y"
{yyerror("Se esperaba then ");}
break;
case 64:
//#line 238 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 65:
//#line 239 "gramaticaTomi.y"
{yyerror("Se esperaba condicion");}
break;
case 66:
//#line 240 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 67:
//#line 243 "gramaticaTomi.y"
{
                                yyval = new NodoComun("While con Etiqueta Funcion",new NodoControl("Etiqueta", new NodoHoja(val_peek(12).sval)) , new NodoComun("While", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                                System.out.println("Sentencia WHILE con etiqueta y con llaves");
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(12).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(12).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(12).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(12).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(12).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(12).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(12).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 68:
//#line 257 "gramaticaTomi.y"
{
                                System.out.println("Sentencia WHILE con etiqueta y sin llaves");
                                yyval = new NodoComun("While con Etiqueta Funcion",new NodoControl("Etiqueta", new NodoHoja(val_peek(10).sval)) , new NodoComun("While", (ArbolSintactico) val_peek(6), new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(10).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(10).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(10).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(10).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(10).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(10).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(10).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 69:
//#line 270 "gramaticaTomi.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 70:
//#line 273 "gramaticaTomi.y"
{
                    yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");
                }
break;
case 71:
//#line 277 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 72:
//#line 278 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 73:
//#line 279 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 74:
//#line 280 "gramaticaTomi.y"
{yyerror("Se esperaba una asignacion");}
break;
case 75:
//#line 281 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 76:
//#line 282 "gramaticaTomi.y"
{yyerror("Se esperaba :");}
break;
case 77:
//#line 283 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 78:
//#line 284 "gramaticaTomi.y"
{yyerror("Se esperaba una condicion");}
break;
case 79:
//#line 285 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 80:
//#line 288 "gramaticaTomi.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(13).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(13).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(13).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(13).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 81:
//#line 302 "gramaticaTomi.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(13).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(13).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(13).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(13).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 82:
//#line 316 "gramaticaTomi.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(11).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(11).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(11).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(11).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 83:
//#line 330 "gramaticaTomi.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(11).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(11).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(11).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(11).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 84:
//#line 343 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 85:
//#line 344 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 86:
//#line 345 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 87:
//#line 346 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 88:
//#line 347 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 89:
//#line 348 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 90:
//#line 349 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 91:
//#line 350 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 92:
//#line 353 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 93:
//#line 356 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 94:
//#line 359 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 95:
//#line 362 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 96:
//#line 363 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 97:
//#line 364 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 98:
//#line 365 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 99:
//#line 366 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 100:
//#line 367 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 101:
//#line 368 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 102:
//#line 370 "gramaticaTomi.y"
{yyval=new NodoHoja("Fin");}
break;
case 103:
//#line 371 "gramaticaTomi.y"
{yyval=new NodoComun("Sentencia_Funcion_Break", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));}
break;
case 104:
//#line 372 "gramaticaTomi.y"
{yyerror("Se esperaba ;");}
break;
case 105:
//#line 374 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 106:
//#line 375 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 107:
//#line 376 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 108:
//#line 377 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 109:
//#line 378 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 110:
//#line 379 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 111:
//#line 380 "gramaticaTomi.y"
{yyval = new NodoControl("Continue",(ArbolSintactico)val_peek(0));}
break;
case 112:
//#line 381 "gramaticaTomi.y"
{yyval = new NodoHoja("Break");}
break;
case 113:
//#line 382 "gramaticaTomi.y"
{yyval = new NodoControl("Break", new NodoHoja(val_peek(0).sval));}
break;
case 114:
//#line 383 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 115:
//#line 386 "gramaticaTomi.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 116:
//#line 389 "gramaticaTomi.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 117:
//#line 392 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 118:
//#line 393 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 119:
//#line 394 "gramaticaTomi.y"
{yyerror("Se esperaba then ");}
break;
case 120:
//#line 395 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 121:
//#line 396 "gramaticaTomi.y"
{yyerror("Se esperaba condicion");}
break;
case 122:
//#line 397 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 123:
//#line 400 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 124:
//#line 405 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 125:
//#line 410 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 126:
//#line 415 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 127:
//#line 420 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 128:
//#line 425 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 129:
//#line 429 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 130:
//#line 430 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 131:
//#line 431 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 132:
//#line 432 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 133:
//#line 433 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 134:
//#line 434 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 135:
//#line 435 "gramaticaTomi.y"
{yyerror("Se esperaba then ");}
break;
case 136:
//#line 436 "gramaticaTomi.y"
{yyerror("Se esperaba ) ");}
break;
case 137:
//#line 437 "gramaticaTomi.y"
{yyerror("Se esperaba una condicion ");}
break;
case 138:
//#line 438 "gramaticaTomi.y"
{yyerror("Se esperaba ( ");}
break;
case 139:
//#line 440 "gramaticaTomi.y"
{yyval = new NodoControl("Retorno", (ArbolSintactico)val_peek(1));
                                                String tipoRet = ((ArbolSintactico)val_peek(1)).getTipo();
                                                if(!ambitoActual.equals("Global")){
                                                        String tipoFun = getTipoActual();
                                                        if(!tipoRet.equals(tipoFun)){
                                                                yyerror("El retorno debe ser del mismo tipo que el retorno de la funcion.");
                                                        }
                                                }else{
                                                        yyerror("El retorno puede estar solo dentro de una funcion.");
                                                }
                                        }
break;
case 140:
//#line 453 "gramaticaTomi.y"
{    yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(1)).getTipo());
}
break;
case 141:
//#line 456 "gramaticaTomi.y"
{yyerror("No esta permitido el tipo declarado");}
break;
case 142:
//#line 459 "gramaticaTomi.y"
{System.out.println("Declaracion de Constante/s");}
break;
case 145:
//#line 465 "gramaticaTomi.y"
{ 
                                String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                                if(ambito.equals(ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(2).sval+":"+ambito);
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambito,"Id",TablaSimbolos.getAtributo(val_peek(2).sval,"Id"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambito,"Tipo",((ArbolSintactico) val_peek(2)).getTipo());
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambito,"Linea",AnalizadorLexico.getLineaAct());
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambito,"Uso","Variable");
                                }
                        }
break;
case 146:
//#line 476 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 147:
//#line 477 "gramaticaTomi.y"
{yyval = val_peek(0); }
break;
case 148:
//#line 478 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 149:
//#line 479 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 150:
//#line 480 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 151:
//#line 481 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 152:
//#line 482 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 153:
//#line 484 "gramaticaTomi.y"
{
                                        System.out.println("Asignacion");
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,new NodoHoja(val_peek(2).sval), (ArbolSintactico) val_peek(0));
                                        String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                                        String tipoS1 = "";
                                        if(!ambito.equals("")){
                                                if(((String)TablaSimbolos.getAtributo(val_peek(2).sval+":"+ambito, "Uso")).equals("Variable")){
                                                        tipoS1 = (String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo");
                                                        ((ArbolSintactico)yyval).setTipo(tipoS1);
                                                }
                                                else {
                                                        yyerror(val_peek(2).sval+" no es una variable.");
                                                }
                                        }
                                        String tipoS3 = ((ArbolSintactico)val_peek(0)).getTipo();
                                        if(!(tipoS1.equals(tipoS3))){
                                                yyerror("No se puede realizar una asignacion con tipos diferentes.");
                                        }
                                        
                                }
break;
case 154:
//#line 505 "gramaticaTomi.y"
{     
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));

                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una suma con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                        
                                 }
break;
case 155:
//#line 515 "gramaticaTomi.y"
{yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una resta con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                 }
break;
case 156:
//#line 522 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 157:
//#line 523 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 160:
//#line 528 "gramaticaTomi.y"
{ 
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una multiplicacion con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 161:
//#line 537 "gramaticaTomi.y"
{
                                        yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una division con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 162:
//#line 546 "gramaticaTomi.y"
{
                  yyval = val_peek(0);
                 }
break;
case 163:
//#line 550 "gramaticaTomi.y"
{
                yyval = new NodoHoja(val_peek(0).sval);
                String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                if((!ambito.equals(""))){
                        if(((String)TablaSimbolos.getAtributo(val_peek(0).sval+":"+ambito, "Uso")).equals("Variable")){
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +":"+ ambito,"Tipo"));
                        }
                        else{
                                yyerror(val_peek(0).sval+" no es una variable");
                        }
                }
           }
break;
case 164:
//#line 563 "gramaticaTomi.y"
{
                yyval = new NodoHoja(val_peek(0).sval);
                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
              }
break;
case 165:
//#line 568 "gramaticaTomi.y"
{  chequearRangoI32(val_peek(0).sval);}
break;
case 166:
//#line 569 "gramaticaTomi.y"
{}
break;
case 167:
//#line 570 "gramaticaTomi.y"
{chequearRangoI32Neg(val_peek(0).sval);}
break;
case 169:
//#line 574 "gramaticaTomi.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                                                                                                                                }
break;
case 170:
//#line 578 "gramaticaTomi.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");}
break;
case 171:
//#line 581 "gramaticaTomi.y"
{yyval = new NodoComun("IF", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                                                                                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");}
break;
case 172:
//#line 583 "gramaticaTomi.y"
{yyval = new NodoComun("IF", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                                                                                        System.out.println("Sentencia IF sin corchetes y sin else");}
break;
case 173:
//#line 585 "gramaticaTomi.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF con corchetes y else");}
break;
case 174:
//#line 588 "gramaticaTomi.y"
{
                                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                                        System.out.println("Sentencia IF con corchetes y sin else");}
break;
case 175:
//#line 591 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 176:
//#line 592 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 177:
//#line 593 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 178:
//#line 594 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 179:
//#line 595 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 180:
//#line 596 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 181:
//#line 597 "gramaticaTomi.y"
{yyerror("Se esperaba then ");}
break;
case 182:
//#line 598 "gramaticaTomi.y"
{yyerror("Se esperaba ) ");}
break;
case 183:
//#line 599 "gramaticaTomi.y"
{yyerror("Se esperaba una condicion ");}
break;
case 184:
//#line 600 "gramaticaTomi.y"
{yyerror("Se esperaba ( ");}
break;
case 185:
//#line 605 "gramaticaTomi.y"
{
                        yyval= new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                        if (!((((ArbolSintactico)val_peek(2)).getTipo()).equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                               yyerror("error en la comparacion entre expresiones de distintos tipos");
                        }
                }
break;
case 186:
//#line 611 "gramaticaTomi.y"
{yyerror("Se esperaba otra expresion para comparar.");}
break;
case 187:
//#line 612 "gramaticaTomi.y"
{yyerror("Se esperaba un tipo de comparacion.");}
break;
case 188:
//#line 614 "gramaticaTomi.y"
{yyval= val_peek(0);}
break;
case 189:
//#line 615 "gramaticaTomi.y"
{yyval= val_peek(0);}
break;
case 190:
//#line 616 "gramaticaTomi.y"
{yyval= val_peek(0);}
break;
case 191:
//#line 617 "gramaticaTomi.y"
{yyval= val_peek(0);}
break;
case 192:
//#line 618 "gramaticaTomi.y"
{yyval= val_peek(0);}
break;
case 193:
//#line 620 "gramaticaTomi.y"
{yyval=new NodoHoja("Fin");}
break;
case 194:
//#line 621 "gramaticaTomi.y"
{
                                                                yyval=new NodoComun("Bloque Ejecutable", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                                                                }
break;
case 195:
//#line 624 "gramaticaTomi.y"
{yyerror("Se esperaba ;");}
break;
case 196:
//#line 626 "gramaticaTomi.y"
{
                        yyval = new NodoControl(val_peek(3).sval, (ArbolSintactico) new NodoHoja(val_peek(1).sval));
                        System.out.println("Sentencia OUT");}
break;
case 197:
//#line 629 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 198:
//#line 630 "gramaticaTomi.y"
{yyerror("Se esperaba una CADENA");}
break;
case 199:
//#line 631 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 200:
//#line 633 "gramaticaTomi.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 201:
//#line 636 "gramaticaTomi.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 202:
//#line 639 "gramaticaTomi.y"
{yyerror("Se esperaba } en el when");}
break;
case 203:
//#line 640 "gramaticaTomi.y"
{yyerror("Se esperaba { en el when");}
break;
case 204:
//#line 641 "gramaticaTomi.y"
{yyerror("Se esperaba then en el when");}
break;
case 205:
//#line 642 "gramaticaTomi.y"
{yyerror("Se esperaba condicion en el when");}
break;
case 206:
//#line 643 "gramaticaTomi.y"
{yyerror("Se esperaba ( en el when");}
break;
case 207:
//#line 644 "gramaticaTomi.y"
{yyerror("Se esperaba ) en el when");}
break;
case 208:
//#line 645 "gramaticaTomi.y"
{yyerror("Se esperaba then en el when");}
break;
case 209:
//#line 648 "gramaticaTomi.y"
{
                                yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(12).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(12).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(12).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(12).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(12).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(12).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(12).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(12).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        
                                System.out.println("Sentencia WHILE con etiqueta y con llaves");
                        }
break;
case 210:
//#line 662 "gramaticaTomi.y"
{
                        yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(10).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );
                        if(!TablaSimbolos.existeSimbolo(val_peek(10).sval+ ":" + ambitoActual)){
                                TablaSimbolos.addNuevoSimbolo(val_peek(10).sval+ ":" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(10).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                TablaSimbolos.addAtributo(val_peek(10).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(10).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(10).sval);
                        }else{
                                yyerror("La etiqueta '" + val_peek(10).sval + "' ya existe en el ambito " + ambitoActual);
                        }
                        
                        System.out.println("Sentencia WHILE con etiqueta y sin llaves");}
break;
case 211:
//#line 674 "gramaticaTomi.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 212:
//#line 677 "gramaticaTomi.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");}
break;
case 213:
//#line 680 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 214:
//#line 681 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 215:
//#line 682 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 216:
//#line 683 "gramaticaTomi.y"
{yyerror("Se esperaba una asignacion");}
break;
case 217:
//#line 684 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 218:
//#line 685 "gramaticaTomi.y"
{yyerror("Se esperaba :");}
break;
case 219:
//#line 686 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 220:
//#line 687 "gramaticaTomi.y"
{yyerror("Se esperaba una condicion");}
break;
case 221:
//#line 688 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 222:
//#line 690 "gramaticaTomi.y"
{yyval=new NodoHoja("Fin");}
break;
case 223:
//#line 691 "gramaticaTomi.y"
{
                yyval = new NodoComun("Bloque Break con Continue",(ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                }
break;
case 224:
//#line 694 "gramaticaTomi.y"
{yyerror("Se esperaba ;");}
break;
case 225:
//#line 697 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 226:
//#line 698 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 227:
//#line 699 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 228:
//#line 700 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 229:
//#line 701 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 230:
//#line 702 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 231:
//#line 703 "gramaticaTomi.y"
{yyval = new NodoControl("Continue",(ArbolSintactico)val_peek(0));}
break;
case 232:
//#line 704 "gramaticaTomi.y"
{yyval = new NodoHoja("Break");}
break;
case 233:
//#line 705 "gramaticaTomi.y"
{yyval = new NodoControl("Break", new NodoHoja(val_peek(0).sval));}
break;
case 234:
//#line 707 "gramaticaTomi.y"
{yyval = new NodoHoja("Fin");}
break;
case 235:
//#line 708 "gramaticaTomi.y"
{yyval = new NodoControl("Tag", new NodoHoja(val_peek(0).sval) );}
break;
case 236:
//#line 710 "gramaticaTomi.y"
{System.out.println("Sentencia WHEN");}
break;
case 237:
//#line 711 "gramaticaTomi.y"
{System.out.println("Sentencia WHEN");}
break;
case 238:
//#line 712 "gramaticaTomi.y"
{yyerror("Se esperaba } en el when");}
break;
case 239:
//#line 713 "gramaticaTomi.y"
{yyerror("Se esperaba { en el when");}
break;
case 240:
//#line 714 "gramaticaTomi.y"
{yyerror("Se esperaba then en el when");}
break;
case 241:
//#line 715 "gramaticaTomi.y"
{yyerror("Se esperaba condicion en el when");}
break;
case 242:
//#line 716 "gramaticaTomi.y"
{yyerror("Se esperaba ( en el when");}
break;
case 243:
//#line 717 "gramaticaTomi.y"
{yyerror("Se esperaba ) en el when");}
break;
case 244:
//#line 718 "gramaticaTomi.y"
{yyerror("Se esperaba then en el when");}
break;
case 245:
//#line 721 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 246:
//#line 726 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 247:
//#line 731 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 248:
//#line 736 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 249:
//#line 741 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 250:
//#line 746 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 251:
//#line 750 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 252:
//#line 751 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 253:
//#line 752 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 254:
//#line 753 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 255:
//#line 754 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 256:
//#line 755 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 257:
//#line 756 "gramaticaTomi.y"
{yyerror("Se esperaba then ");}
break;
case 258:
//#line 757 "gramaticaTomi.y"
{yyerror("Se esperaba ) ");}
break;
case 259:
//#line 758 "gramaticaTomi.y"
{yyerror("Se esperaba una condicion ");}
break;
case 260:
//#line 759 "gramaticaTomi.y"
{yyerror("Se esperaba ( ");}
break;
case 261:
//#line 763 "gramaticaTomi.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(13).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(13).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(13).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(13).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 262:
//#line 777 "gramaticaTomi.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(13).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(13).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(13).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(13).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 263:
//#line 791 "gramaticaTomi.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(11).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(11).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(11).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(11).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 264:
//#line 805 "gramaticaTomi.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(11).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(11).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(11).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(11).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 265:
//#line 818 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 266:
//#line 819 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 267:
//#line 820 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 268:
//#line 821 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 269:
//#line 822 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 270:
//#line 823 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 271:
//#line 824 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 272:
//#line 825 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 273:
//#line 828 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 274:
//#line 831 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 275:
//#line 834 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 276:
//#line 837 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 277:
//#line 838 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 278:
//#line 839 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 279:
//#line 840 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 280:
//#line 841 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 281:
//#line 842 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 282:
//#line 843 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 283:
//#line 846 "gramaticaTomi.y"
{
                        yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                }
break;
case 284:
//#line 851 "gramaticaTomi.y"
{yyval=new NodoHoja(val_peek(0).sval);
                        String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        if(!ambito.equals("")){
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +":"+ ambito,"Tipo"));
                        }
                     }
break;
case 285:
//#line 858 "gramaticaTomi.y"
{
                                                        yyval=new NodoComun("llamado funcion",(ArbolSintactico)val_peek(3),(ArbolSintactico)val_peek(1));
                                                        
                                                        String ambito = buscarAmbito(ambitoActual,val_peek(5).sval);
                                                        if (!ambito.equals("") ){
                                                                if( !TablaSimbolos.getAtributo(val_peek(5).sval+":"+ambito,"Uso").equals("Funcion") ){
                                                                        yyerror("La funcion "+val_peek(5).sval+" no fue declarada");
                                                                }else{
                                                                        String par1 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +":"+ ambito,"Parametro1");
                                                                        String par2 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +":"+ ambito,"Parametro2");
                                                                        if(par1 != null)
                                                                                if(par2 != null){
                                                                                        String tipoS3 = (String) ((ArbolSintactico) val_peek(3) ).getTipo();
                                                                                        if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") ) )){
                                                                                                String nombreS3 = ((ArbolSintactico) val_peek(3)).getLex();
                                                                                                yyerror("El tipo del parametro"+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                                                                        }
                                                                                        String tipoS5 = (String) ((ArbolSintactico) val_peek(1)).getTipo();
                                                                                        if( !(tipoS5.equals((String)TablaSimbolos.getAtributo(par2,"Tipo") ))){
                                                                                                String nombreS5 = ((ArbolSintactico) val_peek(1)).getLex();
                                                                                                yyerror("El tipo del parametro"+ nombreS5+" no coincide con el tipo declarado en la funcion.");
                                                                                        }
                                                                                }else{
                                                                                        yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                                }
                                                                        else{
                                                                                yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                        }
                                                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(5).sval +":"+ ambito,"Tipo"));
                                                                }
                                                        }
                                                }
break;
case 286:
//#line 890 "gramaticaTomi.y"
{System.out.println("Llamado fun 1 parametro");
                yyval=new NodoComun("llamado funcion",(ArbolSintactico)val_peek(1),new NodoHoja("Un solo parametro"));
            String ambito = buscarAmbito(ambitoActual,val_peek(3).sval);
            if (!ambito.equals("")){
                if (!TablaSimbolos.getAtributo(val_peek(3).sval+":"+ambito,"Uso").equals("Funcion")){
                        yyerror("La funcion "+val_peek(3).sval+" no fue declarada");
                }else{
                        String par1 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +":"+ ambito,"Parametro1");
                        String par2 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +":"+ ambito,"Parametro2");
                        if(par2 ==null){
                                if(par1!=null){
                                        String tipoS3 = (String) ((ArbolSintactico) val_peek(1) ).getTipo();
                                        if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") )) ){
                                                String nombreS3 = ((ArbolSintactico) val_peek(1)).getLex();
                                                yyerror("El tipo del parametro"+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                        }
                                }else{
                                        yyerror("La funcion esta declarada sin parametros.");
                                }
                        }else{
                                yyerror("La funcion esta declarada con dos parametros.");
                        }
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(3).sval +":"+ ambito,"Tipo"));
                }
            }
        }
break;
case 287:
//#line 916 "gramaticaTomi.y"
{yyval=new NodoHoja("llamado funcion sin parametros");
                String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                if (!ambito.equals("") ){
                        if (TablaSimbolos.getAtributo(val_peek(2).sval+":"+ambito,"Uso").equals("Funcion")){
                                yyerror("La funcion "+val_peek(2).sval+" no fue declarada");
                                
                        }else{
                                String par1 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Parametro1");
                                String par2 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Parametro2");
                                if(par2 != null){
                                        if(par1 == null){
                                                yyerror("La funcion esta declarada con un parametro.");
                                        }
                                }else{
                                        yyerror("La funcion esta declarada con dos parametros.");
                                }
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                        }
                }       
        }
break;
case 288:
//#line 936 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 289:
//#line 937 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 290:
//#line 938 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
//#line 3100 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 * @throws IOException
 */
public void run() throws IOException
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
