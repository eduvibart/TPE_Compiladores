//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package Principal;
import java.io.IOException;
import AnalizadorLexico.AnalizadorLexico;
import AnalizadorLexico.Token;
import GeneracionCodigoIntermedio.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Stack;

//#line 29 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IF=257;
public final static short THEN=258;
public final static short ELSE=259;
public final static short END_IF=260;
public final static short OUT=261;
public final static short FUN=262;
public final static short RETURN=263;
public final static short BREAK=264;
public final static short WHEN=265;
public final static short WHILE=266;
public final static short CONTINUE=267;
public final static short ID=268;
public final static short I32=269;
public final static short F32=270;
public final static short PARENT_A=271;
public final static short PARENT_C=272;
public final static short COMA=273;
public final static short DOSPUNTOS=274;
public final static short PUNTOCOMA=275;
public final static short IGUAL=276;
public final static short MAYOR=277;
public final static short MENOR=278;
public final static short MENORIGUAL=279;
public final static short MAYORIGUAL=280;
public final static short LLAVE_A=281;
public final static short LLAVE_C=282;
public final static short DIST=283;
public final static short ASIG=284;
public final static short CADENA=285;
public final static short CONST=286;
public final static short SUMA=287;
public final static short RESTA=288;
public final static short MULT=289;
public final static short DIV=290;
public final static short ENTERO=291;
public final static short FLOAT=292;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    1,    2,    2,    2,    3,    3,
    4,    4,    4,    4,   10,   10,    6,    6,   11,   11,
   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
   12,   12,   12,   12,   12,    7,    7,    7,   14,   14,
   14,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   18,   18,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   20,   20,   20,   20,
   20,   25,   21,   21,   21,   21,   27,   27,   27,   28,
   28,   28,   28,   28,   28,   28,   28,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   22,   22,   22,   22,   13,   13,    8,   34,
   34,   35,   35,   35,    5,    5,    5,    5,    5,   16,
   16,   16,   33,   33,   33,   33,   33,   33,   33,   38,
   38,   38,   38,   38,   40,   40,   40,   32,   32,   32,
   32,   39,   39,   39,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   43,   43,   43,   43,   43,   43,   41,
   41,   42,   42,   42,   42,   42,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   23,   23,   23,   45,   45,   45,   45,   45,   45,
   44,   44,   44,   19,   19,   19,   19,   24,   24,   24,
   24,    9,    9,    9,    9,    9,   26,   26,   26,   26,
   26,   26,   26,   26,   29,   29,   29,   29,   29,   29,
   29,   29,   37,   37,   37,   37,   37,   37,   46,   46,
   46,   47,   47,   47,   47,   47,   47,   31,   31,   31,
   48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
   48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
   48,   48,   48,   48,   48,   49,   49,   17,   17,   17,
   17,   17,   17,   17,
};
final static short yylen[] = {                            2,
    4,    4,    4,    4,    1,    0,    3,    3,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    2,    3,    1,
    9,    7,    6,    9,    7,    6,    8,    6,    5,    7,
    5,    4,    6,    3,    2,    4,    4,    2,    0,    3,
    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,   11,   13,   13,    8,   13,    9,   13,   12,   10,
    9,    8,   12,   11,    9,    8,    7,    6,    5,    4,
    3,    2,   11,   10,   12,   11,    5,    3,    5,    3,
    2,    2,    4,    2,    4,    2,    0,    3,    3,    1,
    1,    1,    1,    2,    1,    2,    1,   11,   12,   12,
    8,   13,    9,   13,   12,   10,    9,    8,   12,   11,
    9,    8,    7,   12,   11,   11,   10,    6,    5,    4,
    3,    2,    4,    4,    3,    2,    2,    2,    2,    3,
    1,    3,    3,    2,    1,    1,    1,    1,    1,    3,
    2,    3,    3,    3,    1,    3,    3,    3,    3,    3,
    3,    1,    3,    3,    1,    1,    1,    1,    1,    2,
    2,    4,    2,    4,   12,   12,   11,    8,   13,    9,
   13,   12,   10,    9,    8,   12,   11,    9,    8,    7,
   11,   10,   12,   11,    6,    5,    4,    3,    2,    0,
    3,    1,    1,    1,    1,    2,   12,   12,   11,    8,
   13,    9,   13,   12,   10,    9,    8,   12,   11,    9,
    8,    7,   11,   10,   12,   11,    6,    5,    4,    3,
    2,    3,    3,    2,    1,    1,    1,    1,    1,    1,
    0,    3,    2,    4,    4,    3,    2,    6,    6,    3,
    2,    5,    3,    5,    3,    2,    9,    9,    8,    7,
    6,    5,    4,    3,    8,    8,    7,    6,    5,    4,
    3,    2,    4,    2,    4,    2,    4,    2,    0,    3,
    2,    1,    1,    1,    1,    2,    1,    0,    2,    2,
   12,   12,   11,    8,   13,    9,   13,   12,   10,    9,
    8,   12,   11,    9,    8,    7,   11,   10,   12,   11,
    6,    5,    4,    3,    2,    1,    1,    6,    4,    3,
    6,    4,    3,    5,
};
final static short yydefred[] = {                         0,
    0,    5,    0,    0,    6,    6,    6,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   15,   16,    4,    0,
    0,    9,   10,   11,   12,   13,   14,    0,    0,  135,
  139,  137,    0,    0,    0,    0,  136,  138,    3,    2,
    1,  221,    0,  237,    0,   35,    0,  241,    0,  262,
    0,  141,    0,   82,    0,    0,    0,  131,    8,    7,
   18,   20,    0,   38,   39,  246,    0,    0,    0,  277,
    0,    0,  269,  272,  274,  275,  264,  273,  268,  269,
  266,  220,    0,    0,  158,  159,  157,    0,    0,  156,
    0,    0,    0,  152,  236,    0,   34,    0,  240,    0,
  261,    0,  313,  307,  310,  306,    0,  142,    0,  134,
    0,    0,    0,    0,  245,    6,  243,  254,    0,  305,
    0,    0,  276,    0,    0,  160,  161,  219,    0,    0,
    0,    0,  190,  192,  194,  195,  163,  193,  224,  225,
  226,  227,  228,  229,  230,    0,    0,    0,    0,    0,
    0,  235,  234,   32,    0,    0,    0,    0,  260,    0,
  312,  309,    0,  133,  132,  130,   19,   37,    0,    0,
   36,   42,   43,   44,    0,   45,   46,   47,   48,   49,
   50,   51,    0,    0,    0,    0,  253,    0,  304,    0,
  280,  279,  263,    0,  267,  265,  218,    0,  189,    0,
  196,    0,  147,    0,  148,    0,  223,    0,  153,  150,
  154,  151,  149,  146,   29,    0,  128,  127,   31,    0,
    0,    0,  259,    0,  314,    0,   72,    0,  126,    0,
   41,   40,   81,    0,    0,    0,    0,   87,   90,   92,
   93,   97,   84,   91,   87,   86,  244,  242,  252,    0,
  303,    0,  270,  217,  231,    0,  188,    0,  164,  162,
    0,   26,   23,   28,    0,   33,    0,  239,  238,  258,
    0,  311,  308,   71,    0,  125,    0,   80,   39,   78,
  122,    0,   96,   94,    0,    0,  251,    0,  302,    0,
    0,  212,    0,  187,    0,  191,   25,   22,   30,    0,
  257,    0,   70,    0,  124,  123,    0,  121,    0,   83,
    0,   85,  250,    0,  301,  269,    0,  207,    0,    0,
  211,    0,  200,  186,    0,   27,    0,  256,  255,   69,
    0,   79,   77,  120,    0,   89,   88,  249,    0,    0,
  296,    0,  206,    0,  202,  232,  210,  231,    0,  185,
  190,    0,   24,   21,   68,   39,    0,  119,    0,  248,
  247,  291,    0,  295,    0,  284,  205,  231,    0,    0,
  214,    0,    0,  180,    0,    0,   67,    0,  118,   87,
    0,  290,    0,  286,  294,  269,    0,    0,  216,    0,
  209,    0,  213,  199,  175,    0,  179,    0,  168,   62,
    0,   66,    0,   55,    0,  113,    0,  289,  269,    0,
    0,  298,    0,  204,    0,  215,  198,  208,  197,  174,
    0,  170,  178,  190,    0,   61,    0,   57,    0,   65,
   39,    0,  108,    0,  112,    0,  101,    0,  300,    0,
  293,    0,  297,  283,  203,  201,  173,  190,    0,    0,
  182,    0,   60,   39,    0,    0,    0,   74,    0,  107,
    0,  103,  111,   87,    0,  288,    0,  299,  282,  292,
  281,    0,  184,    0,  177,    0,  181,  167,    0,   76,
    0,    0,   64,    0,   73,   52,  106,   87,    0,    0,
  117,    0,  287,  285,  172,    0,  183,  166,  176,  165,
   59,    0,   75,    0,   63,    0,    0,  115,    0,  110,
    0,  116,   98,  171,  169,   58,   56,   53,   54,  105,
    0,  114,   99,  109,  100,  104,  102,
};
final static short yydgoto[] = {                          3,
    4,    8,   21,   22,   23,  172,  173,  174,   27,   28,
   63,   29,  157,  114,  175,   30,   87,  178,   32,  180,
  181,  182,   88,  183,   34,   35,  285,  311,   36,  244,
  123,   90,   91,   57,   58,   37,   38,   92,   93,   94,
  202,  261,  138,  291,  148,  124,  194,   78,  107,
};
final static short yysindex[] = {                        50,
 -257,    0,    0, -218,    0,    0,    0,  723,  745,  676,
 -163,   14,  172,   90,  161,   15,    0,    0,    0, -237,
 -153,    0,    0,    0,    0,    0,    0,  224, -189,    0,
    0,    0,  102, -198, 1217, 1043,    0,    0,    0,    0,
    0,    0, -207,    0, -238,    0,  175,    0, -129,    0,
 -135,    0, -108,    0, -122, -234, -215,    0,    0,    0,
    0,    0, -173,    0,    0,    0,  691,  235,  269,    0,
 -145, -132,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -120,  543,    0,    0,    0, -203,  428,    0,
 -205,  371,  -77,    0,    0, -131,    0,  206,    0,  573,
    0,  -98,    0,    0,    0,    0,  -75,    0,  628,    0,
 -236, -237,  -97,  386,    0,    0,    0,    0,  -64,    0,
   89,  245,    0, 1129,  839,    0,    0,    0,  349,  276,
  426, -208,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -49,   12,  177,  261,  270,
 -226,    0,    0,    0,  -48,  265,  163,  107,    0,  -33,
    0,    0,  275,    0,    0,    0,    0,    0,  294,  300,
    0,    0,    0,    0, -143,    0,    0,    0,    0,    0,
    0,    0,  364,  372, 1205,  713,    0,  -16,    0,  -10,
    0,    0,    0,  -90,    0,    0,    0,  420,    0,  198,
    0,  912,    0,  371,    0,  371,    0,  628,    0,    0,
    0,    0,    0,    0,    0,  218,    0,    0,    0,   17,
  299,   51,    0,  308,    0,   63,    0,  205,    0,  211,
    0,    0,    0,  401,  319,  426, -145,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   19,
    0,  369,    0,    0,    0, -102,    0,  148,    0,    0,
  -87,    0,    0,    0,  361,    0,  178,    0,    0,    0,
  318,    0,    0,    0,  228,    0, -168,    0,    0,    0,
    0,  254,    0,    0, 1055, 1068,    0,  338,    0, 1085,
 -121,    0,  479,    0,  469,    0,    0,    0,    0,   41,
    0,  239,    0,  622,    0,    0,  561,    0,  256,    0,
  -88,    0,    0,  342,    0,    0,  -70,    0,  490,  -28,
    0, 1186,    0,    0, 1144,    0,  376,    0,    0,    0,
  442,    0,    0,    0,  644,    0,    0,    0,  262,  852,
    0,  514,    0, 1189,    0,    0,    0,    0,  -61,    0,
    0,  -27,    0,    0,    0,    0,  -26,    0,  995,    0,
    0,    0,  525,    0, 1101,    0,    0,    0,  -23,  959,
    0, -196,  918,    0,  547,  576,    0,  613,    0,    0,
  -21,    0, 1117,    0,    0,    0,  -18,  965,    0,  -38,
    0,  182,    0,    0,    0,  615,    0, 1158,    0,    0,
  -44,    0,  598,    0,  779,    0,  635,    0,    0,    7,
  869,    0,  381,    0,  418,    0,    0,    0,    0,    0,
 1172,    0,    0,    0,   13,    0,  620,    0,   28,    0,
    0,   46,    0,  637,    0, 1011,    0,  882,    0,  437,
    0,  460,    0,    0,    0,    0,    0,    0,   52,  931,
    0,  502,    0,    0,   53,  315,  642,    0,  509,    0,
 1027,    0,    0,    0,   57,    0,  535,    0,    0,    0,
    0,  946,    0,  542,    0,  580,    0,    0,  657,    0,
  103,   20,    0,   64,    0,    0,    0,    0,   87,  792,
    0,  661,    0,    0,    0,  674,    0,    0,    0,    0,
    0,  675,    0,  123,    0,  130,  809,    0,  680,    0,
  694,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  695,    0,    0,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   97,    0,    0,    0,
    0,    0,  113,    0,    0,    0,    0,    0,    0,    0,
  822,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  465,    0,    0,    0,    0,    0,    0,    0,
    0,  336,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  762,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  899,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  500,    0,  533,    0,  267,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  141,  149,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  978,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,   39,  326,    0, -179,   24,   27,   31,    0,  -93,
    0,    0,  189, -254, -224,  -35,    3,    0,   -9,    0,
   99,  229,  -22,   34,    0,   80, -243, -169,  223,    0,
  212,  -25,  -34,    0,  382,    0,  -29,  817,  -72,  -40,
 -337,  -81,    0, -291,  419,  -57,  -32,    0,  388,
};
final static int YYTABLESIZE=1498;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         74,
   74,  286,   77,   81,  156,   76,   76,  137,  100,  280,
   31,   31,   31,  373,  243,  246,  136,   95,  256,  164,
  109,  110,  125,    5,  307,   75,   75,  106,  102,  213,
   56,   24,   24,   24,   25,   25,   25,    6,   26,   26,
   26,   33,   33,   33,    9,   10,   96,   52,   82,  111,
  139,   84,  128,  134,   85,   86,  370,  112,   15,  393,
   83,   84,    7,  394,   85,   86,   64,   68,  129,   31,
  140,  141,  142,  143,  144,   55,  388,  145,  176,  135,
   84,  146,  147,   85,   86,  165,  450,  305,   74,   74,
   24,   65,   42,   25,   76,   76,  188,   26,  190,  113,
   33,  376,   59,  306,  179,  201,  357,   43,  210,  212,
  472,  320,  231,  208,   75,   75,  177,  222,  146,  147,
  101,   60,  263,   52,  152,  214,   99,  156,  122,  136,
   15,  232,   83,  108,  318,   11,  405,  106,   83,   12,
  153,   54,  349,   15,   15,   83,   16,  103,  239,  239,
   53,   55,   84,  292,  186,   85,   86,  159,   84,  104,
  319,   85,   86,  105,  369,   84,  134,  336,   85,   86,
  167,  298,  293,  160,  240,  240,  457,  258,  432,   84,
  161,  151,   85,   86,  253,  341,  337,  296,   31,  381,
  320,  187,  135,  184,  371,  277,  162,  163,  176,  479,
   31,   15,  455,   83,  342,  275,  203,  215,  320,   24,
  283,  426,   25,  372,  427,  428,   26,  416,   83,   33,
  490,  417,  223,   84,  179,  216,   85,   86,  374,  377,
  429,  482,  389,  354,  406,  302,  177,  412,   84,  249,
  224,   85,   86,  352,  507,  251,  346,  375,  378,  239,
  239,  390,  136,  407,   74,  250,  413,  317,  340,  309,
   76,  252,  439,  184,  184,   89,  465,  205,  451,   44,
   52,  176,  264,   89,  287,  240,  240,   89,  339,   83,
   75,  440,  241,  241,   45,   53,  456,  452,   54,  134,
  265,  489,  288,   31,  504,  176,  326,  179,   55,   84,
  136,  458,   85,   86,   74,    1,  268,  473,  480,  177,
   76,   89,  491,  184,  327,  135,  425,    2,  272,  505,
  459,  179,  269,  239,   31,  136,  474,  481,  411,   74,
   75,  492,  387,  177,  273,   76,  185,  134,  506,  449,
  176,   89,  508,   89,  189,   48,   31,   74,  136,  240,
  410,  438,  129,   76,   15,   75,   83,   66,  503,   67,
   49,  509,  134,  135,  184,  184,  179,  176,   17,  239,
   89,  129,   31,   75,   83,   74,   84,  136,  177,   85,
   86,   76,  518,  241,  241,  134,  184,   17,  135,  519,
   31,  176,  117,  179,   84,  240,   95,   85,   86,  136,
  239,   75,   74,  294,  278,  177,  185,  185,   76,  267,
  184,  135,  242,  242,  134,   95,   50,  179,  219,  295,
  176,  176,   89,  278,   89,  239,  240,   46,   75,  177,
   97,   51,  207,  299,  220,  221,  134,  418,  184,   47,
  135,  419,   15,  176,   83,   98,  179,  179,  284,  300,
   89,  240,   89,  257,  239,  184,  185,  241,  177,  177,
  274,  154,  135,   15,   84,   83,  276,   85,   86,  179,
   15,  239,   83,  262,   17,   18,   15,  155,   83,   61,
  240,  177,  184,  303,  184,   84,   17,   18,   85,   86,
  118,   62,   84,  166,  328,   85,   86,  240,   84,  304,
  191,   85,   86,  241,   89,  119,  184,  185,  185,  308,
  329,  334,  192,  242,  242,  184,  209,  360,  158,   15,
  217,   83,  222,    0,  120,  211,    0,  335,   83,  185,
  225,  199,  218,  361,  241,  184,  184,   83,  222,  121,
  184,   84,  104,    0,   85,   86,  200,   89,   84,  227,
  226,   85,   86,  185,  266,  229,    0,   84,  184,  241,
   85,   86,   84,  270,  228,   85,   86,   17,   18,  184,
  230,  169,    0,  301,  281,   12,   13,  170,  271,   14,
   15,  185,   16,   17,   18,  132,  184,  242,  241,  282,
    0,  145,  145,  313,  145,   89,  145,  338,  185,  145,
   20,  145,  145,  145,  197,  241,  198,  145,  314,  132,
  145,  145,  145,  145,  145,  145,  297,  145,  145,  233,
   89,  234,  145,  145,  289,  185,  290,  185,  235,   17,
   18,  353,   12,  242,  170,  236,  443,   15,  237,   72,
  444,  168,  169,   89,   17,   18,   12,   13,  170,  185,
   14,   15,  238,   16,   17,   18,  278,  169,  185,  149,
  150,   12,   13,  170,  242,   14,   15,  171,   16,   17,
   18,   20,   89,  445,    0,  254,   11,  446,  185,  185,
   12,  279,    0,  185,  130,   15,   20,   16,   12,  242,
    0,  131,  468,   15,   89,  132,  469,  355,  169,    0,
  255,  185,   12,   13,  170,    0,   14,   15,  133,   16,
   17,   18,  185,   84,    0,  470,   85,   86,  242,  471,
  155,  155,  356,  155,  324,  155,  325,   20,  155,  185,
  155,  155,  155,    0,  321,  242,  155,  322,  323,  155,
  155,  155,  155,  155,  155,  343,  155,  155,  344,  345,
    0,  155,  155,  155,  155,  143,  143,  477,  143,    0,
  143,  478,    0,  143,  485,  143,  143,  143,  486,  364,
    0,  143,  365,  366,  143,  143,  143,  143,  143,  143,
  382,  143,  143,  383,  384,    0,  143,  143,  144,  144,
  493,  144,    0,  144,  494,    0,  144,  497,  144,  144,
  144,  498,  397,    0,  144,  398,  399,  144,  144,  144,
  144,  144,  144,    0,  144,  144,  332,  169,    0,  144,
  144,   12,   13,  170,    0,   14,   15,    0,   16,   17,
   18,  400,  169,  126,  127,  499,   12,   13,  170,  500,
   14,   15,  333,   16,   17,   18,   20,    0,  140,  141,
  142,  143,  144,  430,  169,  145,    0,  401,   12,   13,
  170,   20,   14,   15,    0,   16,   17,   18,  402,    0,
  420,  403,  404,  421,  422,  453,  169,  330,  431,  331,
   12,   13,  170,   20,   14,   15,    0,   16,   17,   18,
  435,    0,  460,  436,  437,  461,  462,  483,  169,  358,
  454,  359,   12,   13,  170,   20,   14,   15,    0,   16,
   17,   18,  501,  169,  146,  147,  512,   12,   13,  170,
  513,   14,   15,  484,   16,   17,   18,   20,    0,  514,
  516,   40,   11,  515,  517,  522,   12,   13,  502,  523,
   14,   15,   20,   16,   17,   18,  115,   11,    0,  524,
  526,   12,   13,  525,  527,   14,   15,   41,   16,   17,
   18,   20,  204,  206,    0,    0,    0,    0,  247,   11,
    0,  116,    0,   12,   13,    0,   20,   14,   15,   11,
   16,   17,   18,   12,   13,    0,    0,   14,   15,    0,
   16,   17,   18,    0,  248,    0,    0,    0,   20,    0,
    0,   11,    0,    0,   19,   12,   13,    0,   20,   14,
   15,    0,   16,   17,   18,    0,    0,  140,  140,    0,
  140,    0,  140,    0,    0,  140,   39,  140,  140,  140,
   20,    0,    0,  140,  433,  235,  140,    0,    0,   12,
    0,  170,  236,  140,   15,  237,   72,  510,  235,    0,
    0,    0,   12,    0,  170,  236,    0,   15,  237,   72,
  434,    0,    0,    0,  520,  235,    0,    0,    0,   12,
    0,  170,  236,  511,   15,  237,   72,  278,  278,    0,
    0,    0,  278,    0,    0,  278,    0,  278,  278,  278,
  521,    0,    0,    0,  195,   69,  278,    0,    0,   12,
    0,    0,   70,  278,   15,   71,   72,  362,   69,    0,
    0,    0,   12,    0,    0,   70,    0,   15,   71,   72,
  196,    0,    0,    0,  441,   69,    0,    0,    0,   12,
    0,    0,   70,  363,   15,   71,   72,  466,   69,    0,
    0,    0,   12,    0,    0,   70,    0,   15,   71,   72,
  442,    0,    0,    0,  271,  271,    0,    0,    0,  271,
    0,    0,  271,  467,  271,  271,  271,  259,  130,    0,
    0,    0,   12,  395,  130,  131,    0,   15,   12,  132,
  271,  131,    0,   15,    0,  132,  475,  130,    0,    0,
    0,   12,    0,  260,  131,    0,   15,    0,  132,  396,
    0,  495,  130,    0,    0,    0,   12,    0,    0,  131,
    0,   15,  476,  132,  391,   11,    0,    0,    0,   12,
  414,   11,    0,    0,   15,   12,   16,  496,    0,    0,
   15,    0,   16,  233,  233,    0,    0,    0,  233,    0,
  392,    0,    0,  233,    0,  233,  415,    0,    0,    0,
  379,  235,    0,    0,    0,   12,    0,  170,  236,  233,
   15,  237,   72,    0,    0,    0,  463,  235,    0,    0,
    0,   12,    0,  170,  236,  380,   15,  237,   72,    0,
    0,    0,  487,  235,    0,    0,    0,   12,    0,  170,
  236,  464,   15,  237,   72,    0,    0,    0,   79,   69,
    0,    0,    0,   12,    0,    0,   70,  488,   15,   71,
   72,  235,    0,    0,    0,   12,    0,  170,  236,    0,
   15,  237,   72,   80,  235,    0,    0,    0,   12,    0,
  170,  236,    0,   15,  237,   72,  310,    0,    0,    0,
  315,   69,    0,    0,    0,   12,    0,    0,   70,  312,
   15,   71,   72,    0,    0,    0,  385,   69,    0,    0,
    0,   12,    0,    0,   70,  316,   15,   71,   72,    0,
    0,    0,  408,   69,    0,    0,    0,   12,    0,    0,
   70,  386,   15,   71,   72,   69,    0,    0,    0,   12,
    0,    0,   70,    0,   15,   71,   72,  409,    0,  350,
  130,    0,    0,    0,   12,    0,    0,  131,    0,   15,
  193,  132,    0,  423,  130,    0,    0,    0,   12,    0,
    0,  131,    0,   15,  351,  132,    0,  447,  130,    0,
    0,    0,   12,    0,    0,  131,    0,   15,  424,  132,
    0,  347,   11,    0,  367,   11,   12,    0,    0,   12,
    0,   15,  448,   16,   15,    0,   16,    0,    0,    0,
    0,  235,    0,    0,    0,   12,  348,  170,  236,  368,
   15,  237,   72,   69,    0,    0,    0,   12,    0,    0,
   70,    0,   15,   71,   72,  245,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   73,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         35,
   36,  245,   35,   36,   98,   35,   36,   89,   49,  234,
    8,    9,   10,  351,  184,  185,   89,  256,  198,  256,
   55,  256,   80,  281,  279,   35,   36,   53,   51,  256,
  268,    8,    9,   10,    8,    9,   10,  256,    8,    9,
   10,    8,    9,   10,    6,    7,  285,  256,  256,  284,
  256,  288,  256,   89,  291,  292,  348,  273,  266,  256,
  268,  288,  281,  260,  291,  292,  256,  266,  272,   67,
  276,  277,  278,  279,  280,  284,  368,  283,  114,   89,
  288,  287,  288,  291,  292,  111,  424,  256,  124,  125,
   67,  281,  256,   67,  124,  125,  119,   67,  121,  273,
   67,  356,  256,  272,  114,  131,  331,  271,  149,  150,
  448,  291,  256,  148,  124,  125,  114,  158,  287,  288,
  256,  275,  216,  256,  256,  151,  256,  221,  274,  202,
  266,  275,  268,  256,  256,  257,  380,  163,  268,  261,
  272,  274,  322,  266,  266,  268,  268,  256,  184,  185,
  271,  284,  288,  256,  116,  291,  292,  256,  288,  268,
  282,  291,  292,  272,  344,  288,  202,  256,  291,  292,
  268,  265,  275,  272,  184,  185,  431,  200,  403,  288,
  256,  259,  291,  292,  275,  256,  275,  275,  186,  359,
  370,  256,  202,  114,  256,  230,  272,  273,  234,  454,
  198,  266,  427,  268,  275,  228,  256,  256,  388,  186,
  236,  256,  186,  275,  259,  260,  186,  256,  268,  186,
  464,  260,  256,  288,  234,  274,  291,  292,  256,  256,
  275,  456,  256,  327,  256,  271,  234,  256,  288,  256,
  274,  291,  292,  325,  488,  256,  275,  275,  275,  285,
  286,  275,  325,  275,  290,  272,  275,  290,  316,  282,
  290,  272,  256,  184,  185,   43,  436,  256,  256,  256,
  256,  307,  256,   51,  256,  285,  286,   55,  314,  268,
  290,  275,  184,  185,  271,  271,  259,  275,  274,  325,
  274,  461,  274,  291,  275,  331,  256,  307,  284,  288,
  373,  256,  291,  292,  340,  256,  256,  256,  256,  307,
  340,   89,  256,  234,  274,  325,  398,  268,  256,  256,
  275,  331,  272,  359,  322,  398,  275,  275,  386,  365,
  340,  275,  365,  331,  272,  365,  114,  373,  275,  421,
  376,  119,  256,  121,  256,  256,  344,  383,  421,  359,
  383,  409,  256,  383,  266,  365,  268,  256,  256,  258,
  271,  275,  398,  373,  285,  286,  376,  403,  256,  405,
  148,  275,  370,  383,  268,  411,  288,  450,  376,  291,
  292,  411,  260,  285,  286,  421,  307,  275,  398,  260,
  388,  427,   67,  403,  288,  405,  256,  291,  292,  472,
  436,  411,  438,  256,  256,  403,  184,  185,  438,  221,
  331,  421,  184,  185,  450,  275,  256,  427,  256,  272,
  456,  457,  200,  275,  202,  461,  436,  256,  438,  427,
  256,  271,  256,  256,  272,  273,  472,  256,  359,  268,
  450,  260,  266,  479,  268,  271,  456,  457,  237,  272,
  228,  461,  230,  256,  490,  376,  234,  359,  456,  457,
  256,  256,  472,  266,  288,  268,  256,  291,  292,  479,
  266,  507,  268,  256,  269,  270,  266,  272,  268,  256,
  490,  479,  403,  256,  405,  288,  269,  270,  291,  292,
  256,  268,  288,  112,  256,  291,  292,  507,  288,  272,
  256,  291,  292,  405,  282,  271,  427,  285,  286,  256,
  272,  256,  268,  285,  286,  436,  256,  256,  100,  266,
  256,  268,  256,   -1,  256,  256,   -1,  272,  268,  307,
  256,  256,  268,  272,  436,  456,  457,  268,  272,  271,
  461,  288,  268,   -1,  291,  292,  271,  325,  288,  256,
  163,  291,  292,  331,  256,  256,   -1,  288,  479,  461,
  291,  292,  288,  256,  271,  291,  292,  269,  270,  490,
  271,  257,   -1,  256,  256,  261,  262,  263,  271,  265,
  266,  359,  268,  269,  270,  268,  507,  359,  490,  271,
   -1,  256,  257,  256,  259,  373,  261,  256,  376,  264,
  286,  266,  267,  268,  256,  507,  258,  272,  271,  268,
  275,  276,  277,  278,  279,  280,  256,  282,  283,  256,
  398,  258,  287,  288,  256,  403,  258,  405,  257,  269,
  270,  256,  261,  405,  263,  264,  256,  266,  267,  268,
  260,  256,  257,  421,  269,  270,  261,  262,  263,  427,
  265,  266,  281,  268,  269,  270,  256,  257,  436,  289,
  290,  261,  262,  263,  436,  265,  266,  282,  268,  269,
  270,  286,  450,  256,   -1,  256,  257,  260,  456,  457,
  261,  281,   -1,  461,  257,  266,  286,  268,  261,  461,
   -1,  264,  256,  266,  472,  268,  260,  256,  257,   -1,
  281,  479,  261,  262,  263,   -1,  265,  266,  281,  268,
  269,  270,  490,  288,   -1,  256,  291,  292,  490,  260,
  256,  257,  281,  259,  256,  261,  258,  286,  264,  507,
  266,  267,  268,   -1,  256,  507,  272,  259,  260,  275,
  276,  277,  278,  279,  280,  256,  282,  283,  259,  260,
   -1,  287,  288,  289,  290,  256,  257,  256,  259,   -1,
  261,  260,   -1,  264,  256,  266,  267,  268,  260,  256,
   -1,  272,  259,  260,  275,  276,  277,  278,  279,  280,
  256,  282,  283,  259,  260,   -1,  287,  288,  256,  257,
  256,  259,   -1,  261,  260,   -1,  264,  256,  266,  267,
  268,  260,  256,   -1,  272,  259,  260,  275,  276,  277,
  278,  279,  280,   -1,  282,  283,  256,  257,   -1,  287,
  288,  261,  262,  263,   -1,  265,  266,   -1,  268,  269,
  270,  256,  257,  291,  292,  256,  261,  262,  263,  260,
  265,  266,  282,  268,  269,  270,  286,   -1,  276,  277,
  278,  279,  280,  256,  257,  283,   -1,  282,  261,  262,
  263,  286,  265,  266,   -1,  268,  269,  270,  256,   -1,
  256,  259,  260,  259,  260,  256,  257,  256,  281,  258,
  261,  262,  263,  286,  265,  266,   -1,  268,  269,  270,
  256,   -1,  256,  259,  260,  259,  260,  256,  257,  256,
  281,  258,  261,  262,  263,  286,  265,  266,   -1,  268,
  269,  270,  256,  257,  287,  288,  256,  261,  262,  263,
  260,  265,  266,  282,  268,  269,  270,  286,   -1,  256,
  256,  256,  257,  260,  260,  256,  261,  262,  282,  260,
  265,  266,  286,  268,  269,  270,  256,  257,   -1,  256,
  256,  261,  262,  260,  260,  265,  266,  282,  268,  269,
  270,  286,  146,  147,   -1,   -1,   -1,   -1,  256,  257,
   -1,  281,   -1,  261,  262,   -1,  286,  265,  266,  257,
  268,  269,  270,  261,  262,   -1,   -1,  265,  266,   -1,
  268,  269,  270,   -1,  282,   -1,   -1,   -1,  286,   -1,
   -1,  257,   -1,   -1,  282,  261,  262,   -1,  286,  265,
  266,   -1,  268,  269,  270,   -1,   -1,  256,  257,   -1,
  259,   -1,  261,   -1,   -1,  264,  282,  266,  267,  268,
  286,   -1,   -1,  272,  256,  257,  275,   -1,   -1,  261,
   -1,  263,  264,  282,  266,  267,  268,  256,  257,   -1,
   -1,   -1,  261,   -1,  263,  264,   -1,  266,  267,  268,
  282,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
   -1,  263,  264,  282,  266,  267,  268,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,  264,   -1,  266,  267,  268,
  282,   -1,   -1,   -1,  256,  257,  275,   -1,   -1,  261,
   -1,   -1,  264,  282,  266,  267,  268,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,  264,   -1,  266,  267,  268,
  282,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
   -1,   -1,  264,  282,  266,  267,  268,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,  264,   -1,  266,  267,  268,
  282,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
   -1,   -1,  264,  282,  266,  267,  268,  256,  257,   -1,
   -1,   -1,  261,  256,  257,  264,   -1,  266,  261,  268,
  282,  264,   -1,  266,   -1,  268,  256,  257,   -1,   -1,
   -1,  261,   -1,  282,  264,   -1,  266,   -1,  268,  282,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
   -1,  266,  282,  268,  256,  257,   -1,   -1,   -1,  261,
  256,  257,   -1,   -1,  266,  261,  268,  282,   -1,   -1,
  266,   -1,  268,  256,  257,   -1,   -1,   -1,  261,   -1,
  282,   -1,   -1,  266,   -1,  268,  282,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,  282,
  266,  267,  268,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,   -1,  263,  264,  281,  266,  267,  268,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  263,
  264,  281,  266,  267,  268,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,   -1,   -1,  264,  281,  266,  267,
  268,  257,   -1,   -1,   -1,  261,   -1,  263,  264,   -1,
  266,  267,  268,  281,  257,   -1,   -1,   -1,  261,   -1,
  263,  264,   -1,  266,  267,  268,  282,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  282,
  266,  267,  268,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  281,  266,  267,  268,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  264,  281,  266,  267,  268,  257,   -1,   -1,   -1,  261,
   -1,   -1,  264,   -1,  266,  267,  268,  281,   -1,  256,
  257,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,  266,
  282,  268,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,
   -1,  264,   -1,  266,  281,  268,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,  264,   -1,  266,  281,  268,
   -1,  256,  257,   -1,  256,  257,  261,   -1,   -1,  261,
   -1,  266,  281,  268,  266,   -1,  268,   -1,   -1,   -1,
   -1,  257,   -1,   -1,   -1,  261,  281,  263,  264,  281,
  266,  267,  268,  257,   -1,   -1,   -1,  261,   -1,   -1,
  264,   -1,  266,  267,  268,  281,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  281,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=292;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"IF","THEN","ELSE","END_IF","OUT","FUN","RETURN","BREAK","WHEN",
"WHILE","CONTINUE","ID","I32","F32","PARENT_A","PARENT_C","COMA","DOSPUNTOS",
"PUNTOCOMA","IGUAL","MAYOR","MENOR","MENORIGUAL","MAYORIGUAL","LLAVE_A",
"LLAVE_C","DIST","ASIG","CADENA","CONST","SUMA","RESTA","MULT","DIV","ENTERO",
"FLOAT",
};
final static String yyrule[] = {
"$accept : program",
"program : nombre_program LLAVE_A bloque_sentencias LLAVE_C",
"program : nombre_program LLAVE_A bloque_sentencias error",
"program : nombre_program error bloque_sentencias LLAVE_C",
"program : error LLAVE_A bloque_sentencias LLAVE_C",
"nombre_program : ID",
"bloque_sentencias :",
"bloque_sentencias : bloque_sentencias sentencia PUNTOCOMA",
"bloque_sentencias : bloque_sentencias sentencia error",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_decl_datos",
"sentencia_declarativa : sentencia_decl_fun",
"sentencia_declarativa : lista_const",
"sentencia_declarativa : sentencia_when",
"tipo : I32",
"tipo : F32",
"sentencia_decl_datos : tipo list_var",
"sentencia_decl_datos : tipo error",
"list_var : list_var COMA ID",
"list_var : ID",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro error",
"encabezado_fun : FUN ID PARENT_A parametro error",
"encabezado_fun : FUN ID PARENT_A error",
"encabezado_fun : FUN ID PARENT_A parametro COMA error",
"encabezado_fun : FUN ID error",
"encabezado_fun : FUN error",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun error",
"sentencia_decl_fun : encabezado_fun error",
"cuerpo_fun :",
"cuerpo_fun : cuerpo_fun sentencias_fun PUNTOCOMA",
"cuerpo_fun : cuerpo_fun sentencias_fun error",
"sentencias_fun : sentencia_decl_datos",
"sentencias_fun : sentencia_decl_fun",
"sentencias_fun : lista_const",
"sentencias_fun : asignacion",
"sentencias_fun : llamado_func",
"sentencias_fun : sentencia_if_fun",
"sentencias_fun : sentencia_out",
"sentencias_fun : sentencia_when_fun",
"sentencias_fun : sentencia_while_fun",
"sentencias_fun : retorno",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_fun : IF PARENT_A condicion error",
"sentencia_if_fun : IF PARENT_A error",
"sentencia_if_fun : IF error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE sentencias_fun error",
"sentencia_when_fun : encabezado_when THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_when_fun : encabezado_when THEN sentencias_fun",
"sentencia_when_fun : encabezado_when THEN LLAVE_A cuerpo_fun error",
"sentencia_when_fun : encabezado_when THEN error",
"sentencia_when_fun : encabezado_when error",
"etiqueta : ID DOSPUNTOS",
"sentencia_while_fun : encabezado_while_etiqueta LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : encabezado_while_etiqueta sentencias_fun_break",
"sentencia_while_fun : encabezado_while LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : encabezado_while sentencias_fun_break",
"cuerpo_fun_break :",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break PUNTOCOMA",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break error",
"sentencias_fun_break : asignacion",
"sentencias_fun_break : sentencia_if_break_fun",
"sentencias_fun_break : sentencia_out",
"sentencias_fun_break : sentencia_while_fun",
"sentencias_fun_break : CONTINUE tag",
"sentencias_fun_break : BREAK",
"sentencias_fun_break : BREAK cte",
"sentencias_fun_break : retorno",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break_fun : IF PARENT_A condicion error",
"sentencia_if_break_fun : IF PARENT_A error",
"sentencia_if_break_fun : IF error",
"retorno : RETURN PARENT_A expresion PARENT_C",
"retorno : RETURN PARENT_A expresion error",
"retorno : RETURN PARENT_A error",
"retorno : RETURN error",
"parametro : tipo ID",
"parametro : tipo error",
"lista_const : CONST lista_asignacion",
"lista_asignacion : lista_asignacion COMA asignacion_const",
"lista_asignacion : asignacion_const",
"asignacion_const : ID ASIG cte",
"asignacion_const : ID ASIG error",
"asignacion_const : ID error",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : sentencia_if",
"sentencia_ejecutable : sentencia_out",
"sentencia_ejecutable : sentencia_while",
"sentencia_ejecutable : llamado_func",
"asignacion : ID ASIG expresion",
"asignacion : ID error",
"asignacion : ID ASIG error",
"expresion : expresion SUMA termino",
"expresion : expresion RESTA termino",
"expresion : termino",
"expresion : sentencia_while_asig ELSE cte",
"expresion : expresion SUMA error",
"expresion : expresion RESTA error",
"expresion : sentencia_while_asig ELSE error",
"termino : termino MULT factor",
"termino : termino DIV factor",
"termino : factor",
"termino : termino MULT error",
"termino : termino DIV error",
"factor : ID",
"factor : cte",
"factor : llamado_func",
"cte : ENTERO",
"cte : FLOAT",
"cte : RESTA ENTERO",
"cte : RESTA FLOAT",
"sentencia_while_asig : encabezado_while LLAVE_A bloque_sent_eje_asig LLAVE_C",
"sentencia_while_asig : encabezado_while sent_eje_asig",
"sentencia_while_asig : encabezado_while LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C error",
"sentencia_if_asig : IF PARENT_A condicion error",
"sentencia_if_asig : IF PARENT_A error",
"sentencia_if_asig : IF error",
"bloque_sent_eje_asig :",
"bloque_sent_eje_asig : bloque_sent_eje_asig sent_eje_asig PUNTOCOMA",
"sent_eje_asig : asignacion",
"sent_eje_asig : sentencia_if_asig",
"sent_eje_asig : sentencia_out",
"sent_eje_asig : sentencia_while_asig",
"sent_eje_asig : BREAK cte",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if : IF PARENT_A condicion PARENT_C error",
"sentencia_if : IF PARENT_A condicion error",
"sentencia_if : IF PARENT_A error",
"sentencia_if : IF error",
"condicion : expresion comparacion expresion",
"condicion : expresion comparacion error",
"condicion : expresion error",
"comparacion : IGUAL",
"comparacion : MAYOR",
"comparacion : MENOR",
"comparacion : MENORIGUAL",
"comparacion : MAYORIGUAL",
"comparacion : DIST",
"bloque_ejecutable :",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable PUNTOCOMA",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"sentencia_out : OUT PARENT_A CADENA PARENT_C",
"sentencia_out : OUT PARENT_A CADENA error",
"sentencia_out : OUT PARENT_A error",
"sentencia_out : OUT error",
"encabezado_when : WHEN PARENT_A factor comparacion factor PARENT_C",
"encabezado_when : WHEN PARENT_A factor comparacion factor error",
"encabezado_when : WHEN PARENT_A error",
"encabezado_when : WHEN error",
"sentencia_when : encabezado_when THEN LLAVE_A bloque_sentencias LLAVE_C",
"sentencia_when : encabezado_when THEN sentencia",
"sentencia_when : encabezado_when THEN LLAVE_A bloque_sentencias error",
"sentencia_when : encabezado_when THEN error",
"sentencia_when : encabezado_when error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A error",
"encabezado_while_etiqueta : etiqueta WHILE error",
"encabezado_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C",
"encabezado_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"encabezado_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"encabezado_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"encabezado_while : WHILE PARENT_A condicion PARENT_C error",
"encabezado_while : WHILE PARENT_A condicion error",
"encabezado_while : WHILE PARENT_A error",
"encabezado_while : WHILE error",
"sentencia_while : encabezado_while_etiqueta LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : encabezado_while_etiqueta ejecutables_break_continue",
"sentencia_while : encabezado_while LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : encabezado_while ejecutables_break_continue",
"sentencia_while : encabezado_while LLAVE_A bloque_break_continue error",
"sentencia_while : encabezado_while error",
"bloque_break_continue :",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue PUNTOCOMA",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue",
"ejecutables_break_continue : asignacion",
"ejecutables_break_continue : sentencia_if_break",
"ejecutables_break_continue : sentencia_out",
"ejecutables_break_continue : sentencia_while",
"ejecutables_break_continue : CONTINUE tag",
"ejecutables_break_continue : BREAK",
"tag :",
"tag : DOSPUNTOS ID",
"tag : DOSPUNTOS error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion error",
"sentencia_if_break : IF PARENT_A error",
"sentencia_if_break : IF error",
"param_real : cte",
"param_real : ID",
"llamado_func : ID PARENT_A param_real COMA param_real PARENT_C",
"llamado_func : ID PARENT_A param_real PARENT_C",
"llamado_func : ID PARENT_A PARENT_C",
"llamado_func : ID PARENT_A param_real COMA param_real error",
"llamado_func : ID PARENT_A param_real error",
"llamado_func : ID PARENT_A error",
"llamado_func : ID PARENT_A param_real COMA error",
};

//#line 1190 ".\gramatica.y"
private NodoControl raiz;
private List<ArbolSintactico> funciones = new ArrayList<ArbolSintactico>();
private static HashMap<Integer,ArrayList<String>> erroresSintacticos = new HashMap<Integer,ArrayList<String>>();
public String ambitoActual = "Global";
private List<String> tipoActual = new ArrayList<String>();
private List<String> etiquetasAct = new ArrayList<String>();
private Stack<Boolean> hayReturn = new Stack<Boolean>();
private Map<String,List<ArbolSintactico>> mapEtiquetas = new HashMap<String,List<ArbolSintactico>>();
private Stack<List<String>> stackWhen = new Stack<List<String>>();

void yyerror(String mensaje){
        if (erroresSintacticos.get(AnalizadorLexico.getLineaAct())== null){
                ArrayList<String> mnsj = new ArrayList<String>();
                mnsj.add(mensaje); 
                erroresSintacticos.put(AnalizadorLexico.getLineaAct(), mnsj);
        }
        else{
                erroresSintacticos.get(AnalizadorLexico.getLineaAct()).add(mensaje);
        }
}
void yyerror(String mensaje,int linea){
        if (erroresSintacticos.get(linea)== null){
                ArrayList<String> mnsj = new ArrayList<String>();
                mnsj.add(mensaje); 
                erroresSintacticos.put(linea, mnsj);
        }
        else{
                erroresSintacticos.get(linea).add(mensaje);
        }
}
static HashMap<Integer,ArrayList<String>> getErroresSintacticos(){
        return erroresSintacticos;
}
void chequearRangoI32(String sval){
  String s = "2147483647";
  long l = Long.valueOf(s);
  if(Long.valueOf(sval) > l){
    yyerror("La constante esta fuera de rango");
  }
}

int yylex() throws IOException{
        Token t = AnalizadorLexico.getToken();
        this.yylval = new ParserVal(t.getLexema());
        return t.getId();
}
public NodoControl getRaiz(){
	return raiz;
}
public List<ArbolSintactico> getFuncion(){
        return funciones;
}

void actualizarAmbito(String lex, String amb){
        TablaSimbolos.addAtributo(lex,"Ambito",amb);
}
public String getTipoActual(){
        if(!this.tipoActual.isEmpty()){
                return (this.tipoActual.get(tipoActual.size()-1));
        }
        return null;
}
public void cambiarTipoActual(String f){
        tipoActual.add(f);
}
public void removeTipoActual(){
        if(!this.tipoActual.isEmpty()){
                this.tipoActual.remove(tipoActual.size()-1);
        }
}
public String buscarAmbito(String ambitoActual,String lexema){
        String ambito = ambitoActual;
        while(!TablaSimbolos.existeSimbolo(lexema+"@"+ambito)){
                if(ambito.equals("Global")){
                        //yyerror("La variable " + lexema + " no se encuentra declarada en el ambito " + ambitoActual);
                        ambito = "";
                        break;
                }else{
                        char [] a = ambito.toCharArray();
                        for (int i = a.length;i>=0;i--){
                                if(a[i-1] == '@'){
                                        ambito = ambito.substring(0,i-1);
                                        break;
                                }
                        }
                }
        }
        return ambito;
}
public String calcularFloat(String f){
        int i =0;
	char caracter=' ';
	String digito=""; //parte numerica
	String exponente=""; //parte exponencial	
	while (caracter != 'F') {
                if(i<f.length()){
                      caracter = f.charAt(i);
		        digito+= caracter;
		        i++; 
                }else{
                        return f;
                }
	}
        Double d = Double.parseDouble(digito);
	for (int j=i ; j < (f.length()); j++) {
		caracter = f.charAt(j);
		exponente += caracter;
	}
	Double e = Double.parseDouble(exponente);
	Double numero = Math.pow(d, e);
        return numero.toString();	
}
//#line 1151 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse() throws IOException
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 23 ".\gramatica.y"
{raiz = new NodoControl("PROGRAMA",(ArbolSintactico)val_peek(1));  TablaSimbolos.removeAtributo(val_peek(3).sval);}
break;
case 2:
//#line 24 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba }");}
break;
case 3:
//#line 25 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba {");}
break;
case 4:
//#line 26 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba el nombre del programa");}
break;
case 6:
//#line 30 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 7:
//#line 31 ".\gramatica.y"
{yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 8:
//#line 32 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ;"); }
break;
case 9:
//#line 34 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 10:
//#line 35 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 11:
//#line 37 ".\gramatica.y"
{yyval= new NodoHoja("Sentencia Declarativa");}
break;
case 12:
//#line 38 ".\gramatica.y"
{yyval= new NodoHoja("Sentencia Declarativa");}
break;
case 13:
//#line 39 ".\gramatica.y"
{yyval= new NodoHoja("Sentencia Declarativa");}
break;
case 14:
//#line 40 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 15:
//#line 42 ".\gramatica.y"
{yyval = new NodoHoja("Entero"); ((NodoHoja)yyval).setTipo("Entero");}
break;
case 16:
//#line 43 ".\gramatica.y"
{yyval = new NodoHoja("Float");((NodoHoja)yyval).setTipo("Float");}
break;
case 17:
//#line 46 ".\gramatica.y"
{ 
                                        for (String s : ((NodoTipos)val_peek(0)).getList()){
                                                String ambito = ambitoActual;
                                                while(TablaSimbolos.existeSimbolo(s+"@"+ambito)){
                                                        if(ambito.equals("Global")){
                                                                yyerror("La variable " + s + " ya se encuentra declarada en el ambito " + ambitoActual);
                                                                ambito = "";
                                                                break;
                                                        }else{
                                                                char [] a = ambito.toCharArray();
                                                                for (int i = a.length;i>=0;i--){
                                                                        if(a[i-1] == ':'){
                                                                        ambito = ambito.substring(0,i-1);
                                                                        break;
                                                                        }
                                                                }
                                                        }
                                                }  
                                                if(ambito.equals(ambitoActual)){
                                                        if (!stackWhen.empty()){
                                                                List<String> tope=stackWhen.pop();
                                                                tope.add(s+"@"+ambito);
                                                                tope.add(s);
                                                                stackWhen.push(tope);
                                                        }
                                                        TablaSimbolos.addNuevoSimbolo(s+"@"+ambito);
                                                        TablaSimbolos.addAtributo(s+"@"+ambito,"Id",TablaSimbolos.getAtributo(s,"Id"));
                                                        TablaSimbolos.addAtributo(s+"@"+ambito,"Tipo",((ArbolSintactico) val_peek(1)).getTipo());
                                                        TablaSimbolos.addAtributo(s+"@"+ambito,"Linea",AnalizadorLexico.getLineaAct());
                                                        TablaSimbolos.addAtributo(s+"@"+ambito,"Uso","Variable");
                                                        TablaSimbolos.removeAtributo(s);
                                                }
                                        }
                                        yyval = val_peek(0);
                                }
break;
case 18:
//#line 81 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("se esperaba lista de identificadores entre comas");}
break;
case 19:
//#line 83 ".\gramatica.y"
{yyval=val_peek(2);((NodoTipos)yyval).add((String)val_peek(0).sval);}
break;
case 20:
//#line 84 ".\gramatica.y"
{yyval=new NodoTipos((String)val_peek(0).sval);}
break;
case 21:
//#line 86 ".\gramatica.y"
{      
                                yyval = new NodoHoja(val_peek(7).sval);
                                if(!TablaSimbolos.existeSimbolo(val_peek(7).sval+ "@" + ambitoActual)){
                                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(0)).getTipo());
                                        TablaSimbolos.addNuevoSimbolo(val_peek(7).sval+ "@" + ambitoActual);
                                        if (!stackWhen.empty()){
                                                List<String> tope=stackWhen.pop();
                                                tope.add(val_peek(7).sval+ "@" + ambitoActual);
                                                stackWhen.push(tope);
                                        }   
                                        TablaSimbolos.addAtributo(val_peek(7).sval+ "@" + ambitoActual,"Uso","Funcion");
                                        TablaSimbolos.addAtributo(val_peek(7).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(7).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(7).sval);
                                        TablaSimbolos.addAtributo(val_peek(7).sval+"@"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                        TablaSimbolos.addAtributo(val_peek(7).sval +"@"+ambitoActual,"Parametro1",((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual +"@"+ val_peek(7).sval);
                                        TablaSimbolos.addAtributo(val_peek(7).sval +"@"+ambitoActual,"Parametro2",((ArbolSintactico)val_peek(3)).getLex()+ "@"+ ambitoActual +"@"+ val_peek(7).sval);
                                        ambitoActual += "@"+val_peek(7).sval;
                                        if (!stackWhen.empty()){
                                                List<String> tope=stackWhen.pop();
                                                tope.add(((ArbolSintactico)val_peek(5)).getLexemaWhen() + "@"+ ambitoActual);
                                                tope.add(((ArbolSintactico)val_peek(3)).getLexemaWhen() + "@"+ ambitoActual);
                                                stackWhen.push(tope);
                                        }
                                        cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                        /*Agrego los parametros en la tabla de simbolos*/
                                        TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual);
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(5)).getTipo());
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual,"Uso","Variable");
                                        TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual);
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Uso","Variable");
                                        hayReturn.push(false);
                                }else{
                                        yyerror("El identificador " + val_peek(7).sval + " ya esta usado en el ambito " + ambitoActual);
                                        ambitoActual += "@"+val_peek(7).sval;
                                }
                        }
break;
case 22:
//#line 123 ".\gramatica.y"
{
                        yyval = new NodoHoja(val_peek(5).sval);
                        if(!TablaSimbolos.existeSimbolo(val_peek(5).sval+ "@" + ambitoActual)){
                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addNuevoSimbolo(val_peek(5).sval+ "@" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(5).sval+ "@" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(5).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(5).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(5).sval);
                                TablaSimbolos.addAtributo(val_peek(5).sval+"@"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addAtributo(val_peek(5).sval +"@"+ambitoActual,"Parametro1", ((ArbolSintactico)val_peek(3)).getLex()+ "@"+ ambitoActual +"@"+ val_peek(5).sval);
                                if (!stackWhen.empty()){
                                        List<String> tope=stackWhen.pop();
                                        tope.add(val_peek(5).sval+ "@" + ambitoActual);
                                        stackWhen.push(tope);
                                }
                                ambitoActual += "@"+val_peek(5).sval;
                                if (!stackWhen.empty()){
                                        List<String> tope=stackWhen.pop();
                                        tope.add(((ArbolSintactico)val_peek(3)).getLexemaWhen() + "@"+ ambitoActual);
                                        stackWhen.push(tope);
                                }
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                /*Agrego el parametro en la tabla de simbolos*/
                                TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual);
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Uso","Variable");
                                hayReturn.push(false);

                        }else{
                                yyerror("El identificador " + val_peek(5).sval + " ya esta usado en el ambito " + ambitoActual);
                                ambitoActual += "@"+val_peek(5).sval;
                        }
                }
break;
case 23:
//#line 156 ".\gramatica.y"
{
                        yyval = new NodoHoja(val_peek(4).sval);
                        if(!TablaSimbolos.existeSimbolo(val_peek(4).sval+ "@" + ambitoActual)){
                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addNuevoSimbolo(val_peek(4).sval+ "@" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(4).sval+ "@" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(4).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(4).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(4).sval);
                                TablaSimbolos.addAtributo(val_peek(4).sval+"@"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                if (!stackWhen.empty()){
                                        List<String> tope=stackWhen.pop();
                                        tope.add(val_peek(4).sval+ "@" + ambitoActual);
                                        stackWhen.push(tope);
                                }
                                ambitoActual += "@"+val_peek(4).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                hayReturn.push(false);
                        }else{
                                yyerror("El identificador " + val_peek(4).sval + " ya esta usado en el ambito " + ambitoActual);
                                ambitoActual += "@"+val_peek(4).sval;
                        }
                }
break;
case 24:
//#line 178 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");  ambitoActual += "@"+"Error";yyerror("El tipo declarado no esta permitido");}
break;
case 25:
//#line 179 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  ambitoActual += "@"+"Error";yyerror("El tipo declarado no esta permitido");}
break;
case 26:
//#line 180 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");   ambitoActual += "@"+"Error"; yyerror("El tipo declarado no esta permitido");}
break;
case 27:
//#line 181 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  ambitoActual += "@"+"Error"; yyerror("Se esperaba :");}
break;
case 28:
//#line 182 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); ambitoActual += "@"+"Error";yyerror("Se esperaba :");}
break;
case 29:
//#line 183 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); ambitoActual += "@"+"Error";  yyerror("Se esperaba :");}
break;
case 30:
//#line 184 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); ambitoActual += "@"+"Error"; yyerror("Se esperaba )");}
break;
case 31:
//#line 185 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  ambitoActual += "@"+"Error"; yyerror("Se esperaba )");}
break;
case 32:
//#line 186 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  ambitoActual += "@"+"Error"; yyerror("Se esperaba )");}
break;
case 33:
//#line 187 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); ambitoActual += "@"+"Error";yyerror("Se esperaba otro parametro");}
break;
case 34:
//#line 188 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); ambitoActual += "@"+"Error"; yyerror("Se esperaba (");}
break;
case 35:
//#line 189 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba un nombre de funcion");}
break;
case 36:
//#line 191 ".\gramatica.y"
{
                                if(!hayReturn.empty() && hayReturn.pop() == true){
                                        char [] a = ambitoActual.toCharArray();
                                        for (int i = a.length;i>=0;i--){
                                                if(a[i-1] == '@'){
                                                        ambitoActual = ambitoActual.substring(0,i-1);
                                                        break;
                                                }
                                        }
                                        NodoControl n = new NodoControl(((ArbolSintactico)val_peek(3)).getLex()+"@"+ambitoActual,(ArbolSintactico)val_peek(1));
                                        n.setTipo(((ArbolSintactico)val_peek(3)).getTipo());
                                        yyval = new NodoControl("Funcion",n);
                                        removeTipoActual();
                                        funciones.add((ArbolSintactico)yyval);
                                        if (!stackWhen.empty()){
                                                List<String> tope=stackWhen.pop();
                                                tope.add("@aux@"+((ArbolSintactico)val_peek(3)).getLex()+"@"+ambitoActual);
                                                stackWhen.push(tope);
                                        }
                                        NodoHoja varAux = (new NodoHoja("@aux@"+((ArbolSintactico)val_peek(3)).getLex()+"@"+ambitoActual));
                                        varAux.setTipo(n.getTipo());
                                        varAux.setUso("variableAuxiliar");
                                }else{
                                        yyerror("La funcion " + ((ArbolSintactico)val_peek(3)).getLex() + " no cuenta con ningun retorno." );
                                }
}
break;
case 37:
//#line 217 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 38:
//#line 218 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba {");}
break;
case 39:
//#line 220 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 40:
//#line 221 ".\gramatica.y"
{yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 41:
//#line 222 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ;");}
break;
case 42:
//#line 224 ".\gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa Datos");}
break;
case 43:
//#line 225 ".\gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa Funcion");}
break;
case 44:
//#line 226 ".\gramatica.y"
{yyval= new NodoHoja("Sentencia Declarativa Constante");}
break;
case 45:
//#line 227 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 46:
//#line 228 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 47:
//#line 229 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 48:
//#line 230 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 49:
//#line 231 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 50:
//#line 232 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 51:
//#line 233 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 52:
//#line 235 ".\gramatica.y"
{ yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(8)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(5)),new NodoControl("Else", (ArbolSintactico)val_peek(2))));}
break;
case 53:
//#line 236 ".\gramatica.y"
{yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(6)),new NodoControl("Else", (ArbolSintactico)val_peek(2))));}
break;
case 54:
//#line 237 ".\gramatica.y"
{yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(7)),new NodoControl("Else", (ArbolSintactico)val_peek(3))));}
break;
case 55:
//#line 238 ".\gramatica.y"
{ yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));}
break;
case 56:
//#line 239 ".\gramatica.y"
{ yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(6)),new NodoControl("Else", (ArbolSintactico)val_peek(2))));}
break;
case 57:
//#line 240 ".\gramatica.y"
{ yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));}
break;
case 58:
//#line 241 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba end_if ");}
break;
case 59:
//#line 242 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 60:
//#line 243 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba { ");}
break;
case 61:
//#line 244 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba end_if ");}
break;
case 62:
//#line 245 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 63:
//#line 246 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if");}
break;
case 64:
//#line 247 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 65:
//#line 248 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba { ");}
break;
case 66:
//#line 249 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba end_if");}
break;
case 67:
//#line 250 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba ; luego de la sentencia");}
break;
case 68:
//#line 251 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba { ");}
break;
case 69:
//#line 252 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba then ");}
break;
case 70:
//#line 253 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba ) ");}
break;
case 71:
//#line 254 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba una condicion ");}
break;
case 72:
//#line 255 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba (");}
break;
case 73:
//#line 256 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba end_if");}
break;
case 74:
//#line 257 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ; luego de la sentencia");}
break;
case 75:
//#line 258 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if");}
break;
case 76:
//#line 259 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ; luego de la sentencia");}
break;
case 77:
//#line 261 ".\gramatica.y"
{
        yyval=val_peek(4);
        if (!((ArbolSintactico)val_peek(4)).getLex().equals("No cumple condicion when")){
                ((ArbolSintactico)val_peek(4)).setIzq((ArbolSintactico)val_peek(1));
                if (!stackWhen.empty()){
                        List<String> tope=stackWhen.pop();
                        if (!stackWhen.empty()){
                                List<String> whenSuperior=stackWhen.pop();
                                for(String cadena :tope){
                                        whenSuperior.add(cadena);
                                }
                                stackWhen.push(whenSuperior);
                        }
                }

        } else if (!((ArbolSintactico)val_peek(4)).getLex().equals("Error sintactico")){
                if (!stackWhen.empty()){
                        List<String> tope=stackWhen.pop();
                        for(String cadena :tope){
                                TablaSimbolos.removeAtributo(cadena);
                        }
                }
        }
}
break;
case 78:
//#line 286 ".\gramatica.y"
{
        yyval=val_peek(2);
        if (!((ArbolSintactico)val_peek(2)).getLex().equals("No cumple condicion when")){
                ((ArbolSintactico)val_peek(2)).setIzq((ArbolSintactico)val_peek(0));
                if (!stackWhen.empty()){
                        List<String> tope=stackWhen.pop();
                        if (!stackWhen.empty()){
                                List<String> whenSuperior=stackWhen.pop();
                                for(String cadena :tope){
                                        whenSuperior.add(cadena);
                                }
                                stackWhen.push(whenSuperior);
                        }
                }
        }else if (!((ArbolSintactico)val_peek(2)).getLex().equals("Error sintactico")){ 
                if (!stackWhen.empty()){
                        List<String> tope=stackWhen.pop();
                        for(String cadena :tope){
                                TablaSimbolos.removeAtributo(cadena);
                        }
                }
        }
}
break;
case 79:
//#line 309 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba }");}
break;
case 80:
//#line 310 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba {");}
break;
case 81:
//#line 311 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba then");}
break;
case 82:
//#line 313 ".\gramatica.y"
{
                                yyval = new ParserVal(val_peek(1).sval);
                                if(!TablaSimbolos.existeSimbolo(val_peek(1).sval+ "@" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(1).sval+ "@" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(1).sval+ "@" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(1).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(1).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(1).sval);
                                        etiquetasAct.add(val_peek(1).sval + "@" + ambitoActual);
                                }else{
                                        yyerror("El identificador " + val_peek(1).sval + " ya esta usado en el ambito " + ambitoActual);
                                }
                        }
break;
case 83:
//#line 326 ".\gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().setIzq((ArbolSintactico)val_peek(1));
                                String tag = ((ArbolSintactico)val_peek(3)).getIzq().getIzq().getLex();
                                List<ArbolSintactico> l = mapEtiquetas.get(tag);
                                if(l!=null){
                                        for(ArbolSintactico a : l){
                                                a.setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer());
                                        }
                                }
                        }
                        yyval = val_peek(3);
                }
break;
case 84:
//#line 339 ".\gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().setIzq((ArbolSintactico)val_peek(0));
                                String tag = ((ArbolSintactico)val_peek(1)).getIzq().getIzq().getLex();
                                List<ArbolSintactico> l = mapEtiquetas.get(tag);
                                if(l!=null){
                                        for(ArbolSintactico a : l){
                                                a.setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer());
                                        }
                                }
                        }
                        yyval = val_peek(1);
                        
                }
break;
case 85:
//#line 353 ".\gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().setIzq((ArbolSintactico)val_peek(1));
                        }
                        yyval = val_peek(3);
                }
break;
case 86:
//#line 359 ".\gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().setIzq((ArbolSintactico)val_peek(0));
                        }
                        yyval = val_peek(1);
                }
break;
case 87:
//#line 367 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 88:
//#line 368 ".\gramatica.y"
{yyval=new NodoComun("Sentencia_Break", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 89:
//#line 369 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ;");}
break;
case 90:
//#line 371 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 91:
//#line 372 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 92:
//#line 373 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 93:
//#line 374 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 94:
//#line 375 ".\gramatica.y"
{        boolean b = false;
                                        if(((ArbolSintactico)val_peek(0)).getIzq()!=null){
                                                String tag = ((ArbolSintactico)val_peek(0)).getIzq().getLex() + "@" + ambitoActual;
                                                for(String s : etiquetasAct){
                                                        if( tag.equals(s)){
                                                                b = true;
                                                                break;
                                                        }
                                                }
                                                if(!b){
                                                        yyerror("No se puede saltar al tag " + ((ArbolSintactico)val_peek(0)).getIzq().getLex());
                                                        yyval = new NodoHoja("Error");
                                                }else{
                                                        yyval = new NodoComun("Continue",new NodoHoja("Fin"),(ArbolSintactico)val_peek(0));
                                                        if(mapEtiquetas.containsKey(((ArbolSintactico)val_peek(0)).getIzq().getLex())){
                                                                mapEtiquetas.get(((ArbolSintactico)val_peek(0)).getIzq().getLex()).add((ArbolSintactico)yyval);
                                                        }
                                                }
                                        }else{
                                                yyval = new NodoComun("Continue",new NodoHoja("Fin"),(ArbolSintactico)val_peek(0));
                                        }
                                }
break;
case 95:
//#line 397 ".\gramatica.y"
{yyval = new NodoHoja("Break");}
break;
case 96:
//#line 398 ".\gramatica.y"
{yyval = new NodoControl("Break", new NodoHoja(val_peek(0).sval));}
break;
case 97:
//#line 399 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 98:
//#line 401 ".\gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));}
break;
case 99:
//#line 402 ".\gramatica.y"
{yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 100:
//#line 403 ".\gramatica.y"
{yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 101:
//#line 404 ".\gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );}
break;
case 102:
//#line 405 ".\gramatica.y"
{yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 103:
//#line 406 ".\gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));}
break;
case 104:
//#line 407 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 105:
//#line 408 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 106:
//#line 409 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba { ");}
break;
case 107:
//#line 410 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 108:
//#line 411 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba } ");}
break;
case 109:
//#line 412 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 110:
//#line 413 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 111:
//#line 414 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba { ");}
break;
case 112:
//#line 415 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 113:
//#line 416 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ; luego de la sentencia");}
break;
case 114:
//#line 417 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 115:
//#line 418 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ; luego de la sentencia");}
break;
case 116:
//#line 419 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 117:
//#line 420 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ; luego de la sentencia");}
break;
case 118:
//#line 421 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba { ");}
break;
case 119:
//#line 422 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba then ");}
break;
case 120:
//#line 423 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ) ");}
break;
case 121:
//#line 424 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba una condicion ");}
break;
case 122:
//#line 425 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ( ");}
break;
case 123:
//#line 427 ".\gramatica.y"
{yyval = new NodoControl("Retorno", (ArbolSintactico)val_peek(1));
                                                String tipoRet = ((ArbolSintactico)val_peek(1)).getTipo();
                                                if(!ambitoActual.equals("Global")){
                                                        String tipoFun = getTipoActual();
                                                        if(!tipoRet.equals(tipoFun)){
                                                                yyerror("El retorno debe ser del mismo tipo que el retorno de la funcion.");
                                                        }else{
                                                                if (!hayReturn.empty()){
                                                                        hayReturn.pop();
                                                                        hayReturn.push(true);
                                                                }
                                                        }
                                                }else{
                                                        yyerror("El retorno puede estar solo dentro de una funcion.");
                                                }
                                        }
break;
case 124:
//#line 443 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba )");}
break;
case 125:
//#line 444 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba expresion");}
break;
case 126:
//#line 445 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba expresion entre ( )");}
break;
case 127:
//#line 447 ".\gramatica.y"
{    yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(1)).getTipo());
                        TablaSimbolos.removeAtributo(val_peek(0).sval);}
break;
case 128:
//#line 450 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba identificador");}
break;
case 132:
//#line 457 ".\gramatica.y"
{ 
                                if(TablaSimbolos.existeSimbolo(val_peek(2).sval+"@"+ambitoActual)){
                                        yyerror("La variable " + val_peek(2).sval + " ya se encuentra declarada en el ambito " + ambitoActual);
                                }else{
                                        TablaSimbolos.addNuevoSimbolo(val_peek(2).sval+"@"+ambitoActual);
                                        if (!stackWhen.empty()){
                                                List<String> tope=stackWhen.pop();
                                                tope.add(val_peek(2).sval+ "@" + ambitoActual);
                                                tope.add(val_peek(0).sval);
                                                stackWhen.push(tope);
                                        }
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(2).sval,"Id"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Tipo",TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Linea",AnalizadorLexico.getLineaAct());
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Uso","Constante");
                                        if (TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo").equals("Entero")){
                                                TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Valor", Long.valueOf(val_peek(0).sval));
                                        }else{
                                                TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Valor", Double.parseDouble((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Valor")));
                                        }
                                        TablaSimbolos.removeAtributo(val_peek(2).sval);
                                }
                        }
break;
case 133:
//#line 480 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba una constante");}
break;
case 134:
//#line 481 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba una asignacion =:");}
break;
case 135:
//#line 483 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 136:
//#line 484 ".\gramatica.y"
{yyval = val_peek(0); }
break;
case 137:
//#line 485 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 138:
//#line 486 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 139:
//#line 487 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 140:
//#line 489 ".\gramatica.y"
{
                                        String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                                        NodoHoja hoja = new NodoHoja(val_peek(2).sval+"@"+ambito);
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval, hoja , (ArbolSintactico) val_peek(0));
                                        String tipoS1 = (String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo");
                                        String tipoS3 = ((ArbolSintactico)val_peek(0)).getTipo();
                                        if(!ambito.equals("")){
                                                if(!(tipoS1.equals(tipoS3))){
                                                        yyerror("No se puede realizar una asignacion con tipos diferentes.");
                                                }
                                                else if(((String)TablaSimbolos.getAtributo(val_peek(2).sval+"@"+ambito, "Uso")).equals("Variable")){
                                                        ((ArbolSintactico)yyval).setTipo(tipoS1);
                                                        hoja.setUso((String)TablaSimbolos.getAtributo(val_peek(2).sval+"@"+ambito, "Uso"));
                                                        hoja.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                                }
                                                else {
                                                        yyerror(val_peek(2).sval+" no es una variable.");
                                                }
                                        
                                        }else {
                                                yyerror(val_peek(2).sval+" no esta declarada");
                                        }
                }
break;
case 141:
//#line 512 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba =:");}
break;
case 142:
//#line 513 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba expresion");}
break;
case 143:
//#line 515 ".\gramatica.y"
{     
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));

                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una suma con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                 }
break;
case 144:
//#line 524 ".\gramatica.y"
{
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una resta con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                 }
break;
case 145:
//#line 533 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 146:
//#line 534 ".\gramatica.y"
{
                                        NodoHoja cte = new NodoHoja(val_peek(0).sval);
                                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        yyval = new NodoComun("While como expresion",(ArbolSintactico)val_peek(2),cte);
                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo")); 
                                        }
break;
case 147:
//#line 540 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba un termino");}
break;
case 148:
//#line 541 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba un termino");}
break;
case 149:
//#line 542 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba un constante");}
break;
case 150:
//#line 544 ".\gramatica.y"
{ 
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una multiplicacion con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 151:
//#line 553 ".\gramatica.y"
{
                                        yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una division con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 152:
//#line 561 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 153:
//#line 562 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba un factor");}
break;
case 154:
//#line 563 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba un factor");}
break;
case 155:
//#line 565 ".\gramatica.y"
{
                String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                if((!ambito.equals(""))){
                        if(((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso")).equals("Variable")
                        || ((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso")).equals("Constante")){
                                yyval = new NodoHoja(val_peek(0).sval+"@"+ambito);
                                TablaSimbolos.removeAtributo(val_peek(0).sval);
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Tipo"));
                                ((ArbolSintactico)yyval).setUso((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso"));
                        }
                        else{
                                yyerror(val_peek(0).sval+" no es una variable");
                                yyval = new NodoHoja("Error");
                        }
                }else{
                        yyerror(val_peek(0).sval+" no fue declarada");
                        yyval = new NodoHoja("Error");
                }
           }
break;
case 156:
//#line 584 ".\gramatica.y"
{
                yyval = new NodoHoja(val_peek(0).sval);
                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                ((ArbolSintactico)yyval).setUso("Constante");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Uso","Constante");
              }
break;
case 157:
//#line 590 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 158:
//#line 592 ".\gramatica.y"
{  
                chequearRangoI32(val_peek(0).sval);
                TablaSimbolos.addNuevoSimbolo((String)val_peek(0).sval);
                TablaSimbolos.addAtributo(val_peek(0).sval, "Uso", "Constante");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Tipo", "Entero");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Valor", (String)val_peek(0).sval);
                if (!stackWhen.empty()){
                        List<String> lista=stackWhen.pop();
                        lista.add(val_peek(0).sval);
                        stackWhen.push(lista);
                }

        }
break;
case 159:
//#line 605 ".\gramatica.y"
{  
                TablaSimbolos.addNuevoSimbolo((String)val_peek(0).sval);
                TablaSimbolos.addAtributo(val_peek(0).sval, "Uso", "Constante");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Tipo", "Float");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Valor", calcularFloat(val_peek(0).sval));
                if (!stackWhen.empty()){
                        List<String> lista=stackWhen.pop();
                        lista.add(val_peek(0).sval);
                        stackWhen.push(lista);
                }
        }
break;
case 160:
//#line 616 ".\gramatica.y"
{
                yyval=new ParserVal(val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addNuevoSimbolo((String)val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Uso", "Constante");
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Tipo", "Entero");
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Valor", (String)val_peek(1).sval+val_peek(0).sval);
                if (!stackWhen.empty()){
                        List<String> lista=stackWhen.pop();
                        lista.add(val_peek(1).sval+val_peek(0).sval);
                        stackWhen.push(lista);
                }
        }
break;
case 161:
//#line 628 ".\gramatica.y"
{
                yyval=new ParserVal(val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addNuevoSimbolo((String)val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Uso", "Constante");
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Tipo", "Float");
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Valor", val_peek(1).sval+calcularFloat(val_peek(0).sval));
                if (!stackWhen.empty()){
                        List<String> lista=stackWhen.pop();
                        lista.add(val_peek(1).sval+val_peek(0).sval);
                        stackWhen.push(lista);
                }
        }
break;
case 162:
//#line 642 ".\gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().setIzq((ArbolSintactico)val_peek(1));
                        }
                        ((ArbolSintactico)val_peek(3)).setLex("While Asignacion");
                        yyval=val_peek(3);
                }
break;
case 163:
//#line 649 ".\gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().setIzq((ArbolSintactico)val_peek(0));
                        }
                        ((ArbolSintactico)val_peek(1)).setLex("While Asignacion");
                        yyval=val_peek(1);
                }
break;
case 164:
//#line 656 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba }");}
break;
case 165:
//#line 658 ".\gramatica.y"
{yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 166:
//#line 659 ".\gramatica.y"
{yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 167:
//#line 660 ".\gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));}
break;
case 168:
//#line 661 ".\gramatica.y"
{yyval = new NodoComun("IF",new NodoControl("Condicion", (ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );}
break;
case 169:
//#line 662 ".\gramatica.y"
{yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 170:
//#line 663 ".\gramatica.y"
{ yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));}
break;
case 171:
//#line 664 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 172:
//#line 665 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 173:
//#line 666 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba { ");}
break;
case 174:
//#line 667 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 175:
//#line 668 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 176:
//#line 669 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 177:
//#line 670 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba } ");}
break;
case 178:
//#line 671 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba { ");}
break;
case 179:
//#line 672 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 180:
//#line 673 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ; luego de la sentencia");}
break;
case 181:
//#line 674 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 182:
//#line 675 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ; luego de la sentencia");}
break;
case 183:
//#line 676 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 184:
//#line 677 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ; luego de la sentencia");}
break;
case 185:
//#line 678 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba { ");}
break;
case 186:
//#line 679 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba then ");}
break;
case 187:
//#line 680 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ) ");}
break;
case 188:
//#line 681 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba una condicion ");}
break;
case 189:
//#line 682 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ( ");}
break;
case 190:
//#line 684 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 191:
//#line 685 ".\gramatica.y"
{yyval=new NodoComun("Bloque Ejecutable Asignacion", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 192:
//#line 687 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 193:
//#line 688 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 194:
//#line 689 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 195:
//#line 690 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 196:
//#line 691 ".\gramatica.y"
{NodoHoja cte = new NodoHoja(val_peek(0).sval);
                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                        yyval = new NodoControl("Break", cte);}
break;
case 197:
//#line 695 ".\gramatica.y"
{ yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2))));  }
break;
case 198:
//#line 696 ".\gramatica.y"
{ yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 199:
//#line 697 ".\gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));}
break;
case 200:
//#line 698 ".\gramatica.y"
{yyval = new NodoComun("IF",new NodoControl("Condicion", (ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );}
break;
case 201:
//#line 699 ".\gramatica.y"
{                                              yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 202:
//#line 700 ".\gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));}
break;
case 203:
//#line 701 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 204:
//#line 702 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba } ");}
break;
case 205:
//#line 703 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba { ");}
break;
case 206:
//#line 704 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 207:
//#line 705 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 208:
//#line 706 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 209:
//#line 707 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba } ");}
break;
case 210:
//#line 708 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba { ");}
break;
case 211:
//#line 709 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 212:
//#line 710 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ; luego de la sentencia");}
break;
case 213:
//#line 711 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 214:
//#line 712 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ; luego de la sentencia");}
break;
case 215:
//#line 713 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 216:
//#line 714 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba ; luego de la sentencia");}
break;
case 217:
//#line 715 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba { ");}
break;
case 218:
//#line 716 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba then ");}
break;
case 219:
//#line 717 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba ) ");}
break;
case 220:
//#line 718 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba una condicion ");}
break;
case 221:
//#line 719 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ( ");}
break;
case 222:
//#line 721 ".\gramatica.y"
{
                        yyval= new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                        ((ArbolSintactico)yyval).setUso("Condicion");
                        if (!((((ArbolSintactico)val_peek(2)).getTipo()).equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                               yyerror("error en la comparacion entre expresiones de distintos tipos");
                        }
                }
break;
case 223:
//#line 729 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba otra expresion para comparar.");}
break;
case 224:
//#line 730 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba un tipo de comparacion.");}
break;
case 225:
//#line 732 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 226:
//#line 733 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 227:
//#line 734 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 228:
//#line 735 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 229:
//#line 736 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 230:
//#line 737 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 231:
//#line 739 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 232:
//#line 740 ".\gramatica.y"
{yyval=new NodoComun("Bloque Ejecutable", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 233:
//#line 741 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ;");}
break;
case 234:
//#line 743 ".\gramatica.y"
{  yyval = new NodoControl(val_peek(3).sval, (ArbolSintactico) new NodoHoja(val_peek(1).sval));}
break;
case 235:
//#line 744 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba )");}
break;
case 236:
//#line 745 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba una CADENA");}
break;
case 237:
//#line 746 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba (");}
break;
case 238:
//#line 748 ".\gramatica.y"
{
                String atributoIzq=((ArbolSintactico)val_peek(3)).getLexemaWhen();
                String atributoDer=((ArbolSintactico)val_peek(1)).getLexemaWhen();
                if (!TablaSimbolos.existeSimbolo(atributoIzq)||!TablaSimbolos.existeSimbolo(atributoDer)){
                        yyerror("Identificador en la condicion no declarado");
                        yyval = new NodoHoja("Error en el when");
                }
                else if (!TablaSimbolos.getAtributo(atributoIzq, "Uso" ).equals("Constante")){
                        yyerror(atributoIzq+" no es una constante");
                        yyval = new NodoHoja("Error en el when");

                }else if (!TablaSimbolos.getAtributo(atributoDer, "Uso" ).equals("Constante")){
                        yyerror(atributoDer+" no es una constante");
                        yyval = new NodoHoja("Error en el when");
                }
                else if (!TablaSimbolos.getAtributo(atributoIzq, "Tipo" ).equals(TablaSimbolos.getAtributo(atributoDer, "Tipo" ))){
                        yyerror("Los valores de la condicion del when son de tipos diferentes");
                        yyval = new NodoHoja("Error en el when");
                }else{
                        String s1 =TablaSimbolos.getAtributo(atributoIzq, "Valor")+"";
                        String s2 =TablaSimbolos.getAtributo(atributoDer, "Valor")+"";
                        double valorIzq = Double.parseDouble(s1);
                        double valorDer = Double.parseDouble(s2);
                        switch (val_peek(2).sval){
                                case "=":
                                        if (valorIzq==valorDer){
                                                
                                                yyval = new NodoControl("When", new NodoHoja("When sin sentencias"));
                                        }else{
                                               yyval = new NodoHoja("No cumple condicion when"); 
                                               
                                        }
                                        break;
                                case "<":
                                        if (valorIzq < valorDer){
                                                yyval = new NodoControl("When", new NodoHoja("When sin sentencias"));
                                        }else{
                                               yyval = new NodoHoja("No cumple condicion when");
                                        }
                                        break;
                                case ">":
                                        if (valorIzq > valorDer){
                                                yyval = new NodoControl("When", new NodoHoja("When sin sentencias"));
                                        }else{
                                               yyval = new NodoHoja("No cumple condicion when");
                                               }
                                        break;
                                case "=!":
                                        if (valorIzq != valorDer){
                                                yyval = new NodoControl("When", new NodoHoja("When sin sentencias"));
                                        }else{
                                               yyval = new NodoHoja("No cumple condicion when");
                                               }
                                        break;
                                case "<=":
                                        if (valorIzq <= valorDer){
                                                yyval = new NodoControl("When", new NodoHoja("When sin sentencias"));
                                        }else{
                                               yyval = new NodoHoja("No cumple condicion when");
                                        }
                                        break;
                                case ">=":
                                        if (valorIzq >= valorDer){
                                                yyval = new NodoControl("When", new NodoHoja("When sin sentencias"));
                                        }else{
                                               yyval = new NodoHoja("No cumple condicion when");
                                               }
                                        break;
                        
                        } 
                        List<String> whenActual = new ArrayList<String>();
                        stackWhen.push(whenActual);
                }
        }
break;
case 239:
//#line 822 ".\gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");
                }
break;
case 240:
//#line 826 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion en el when");}
break;
case 241:
//#line 828 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( en el when");}
break;
case 242:
//#line 831 ".\gramatica.y"
{
        yyval=val_peek(4);
        if (!((ArbolSintactico)val_peek(4)).getLex().equals("No cumple condicion when"))
        {
                ((ArbolSintactico)val_peek(4)).setIzq((ArbolSintactico)val_peek(1));
                if (!stackWhen.empty()){
                        List<String> tope=stackWhen.pop();
                        if (!stackWhen.empty()){
                                List<String> whenSuperior=stackWhen.pop();
                                for(String cadena :tope){
                                        whenSuperior.add(cadena);
                                }
                                stackWhen.push(whenSuperior);
                        }
                }
        }else if (!((ArbolSintactico)val_peek(4)).getLex().equals("Error sintactico")){
                if (!stackWhen.empty()){
                        List<String> tope=stackWhen.pop();
                        for(String cadena :tope){
                                TablaSimbolos.removeAtributo(cadena);
                        }
                }
        }
}
break;
case 243:
//#line 855 ".\gramatica.y"
{
                yyval=val_peek(2);
                if (!((ArbolSintactico)val_peek(2)).getLex().equals("No cumple condicion when"))
                {
                        ((ArbolSintactico)val_peek(2)).setIzq((ArbolSintactico)val_peek(0));
                        if (!stackWhen.empty()){
                                List<String> tope=stackWhen.pop();
                                if (!stackWhen.empty()){
                                        List<String> whenSuperior=stackWhen.pop();
                                        for(String cadena :tope){
                                                whenSuperior.add(cadena);
                                        }
                                        stackWhen.push(whenSuperior);
                                }
                        }
                }else  if (!((ArbolSintactico)val_peek(2)).getLex().equals("Error sintactico")){   
                        if (!stackWhen.empty()){
                                List<String> tope=stackWhen.pop();
                                for(String cadena :tope){
                                        TablaSimbolos.removeAtributo(cadena);
                                }
                        }
                        
                }
        }
break;
case 244:
//#line 880 ".\gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");
                }
break;
case 245:
//#line 884 ".\gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");
                }
break;
case 246:
//#line 888 ".\gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then");
                }
break;
case 247:
//#line 893 ".\gramatica.y"
{ 
                        yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(8).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", new NodoHoja("Fin"), (ArbolSintactico) val_peek(1))) );
                        mapEtiquetas.put(val_peek(8).sval,new ArrayList<ArbolSintactico>());
                        }
break;
case 248:
//#line 897 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba )");}
break;
case 249:
//#line 898 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba una asignacion");}
break;
case 250:
//#line 899 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba (");}
break;
case 251:
//#line 900 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba :");}
break;
case 252:
//#line 901 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba )");}
break;
case 253:
//#line 902 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba una condicion");}
break;
case 254:
//#line 903 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba (");}
break;
case 255:
//#line 905 ".\gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", new NodoHoja("Fin"), (ArbolSintactico) val_peek(1)) );      
                        }
break;
case 256:
//#line 908 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba )");}
break;
case 257:
//#line 909 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba una asignacion");}
break;
case 258:
//#line 910 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba (");}
break;
case 259:
//#line 911 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba :");}
break;
case 260:
//#line 912 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba )");}
break;
case 261:
//#line 913 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba una condicion");}
break;
case 262:
//#line 914 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba (");}
break;
case 263:
//#line 916 ".\gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                String tag = ((ArbolSintactico)val_peek(3)).getIzq().getIzq().getLex();
                                List<ArbolSintactico> l = mapEtiquetas.get(tag);
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().setIzq((ArbolSintactico)val_peek(1));
                                if(l!=null){
                                        for(ArbolSintactico a : l){
                                                a.setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer());
                                        }
                                }
                        }
                        yyval=val_peek(3);
                }
break;
case 264:
//#line 929 ".\gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                String tag = ((ArbolSintactico)val_peek(1)).getIzq().getIzq().getLex();
                                List<ArbolSintactico> l = mapEtiquetas.get(tag);
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().setIzq((ArbolSintactico)val_peek(0));
                                if(l!=null){
                                        for(ArbolSintactico a : l){
                                                a.setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer());
                                        }
                                }
                        }
                        yyval = val_peek(1);
                }
break;
case 265:
//#line 942 ".\gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().setIzq((ArbolSintactico)val_peek(1));
                        }
                        yyval = val_peek(3);
                }
break;
case 266:
//#line 948 ".\gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().setIzq((ArbolSintactico)val_peek(0));
                        }
                        yyval = val_peek(1);
                }
break;
case 267:
//#line 954 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba }");}
break;
case 268:
//#line 955 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba {");}
break;
case 269:
//#line 957 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 270:
//#line 958 ".\gramatica.y"
{ yyval = new NodoComun("Bloque Break con Continue",(ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 271:
//#line 959 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ;");}
break;
case 272:
//#line 962 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 273:
//#line 963 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 274:
//#line 964 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 275:
//#line 965 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 276:
//#line 966 ".\gramatica.y"
{boolean b = false;
                                        if(((ArbolSintactico)val_peek(0)).getIzq()!=null){
                                                String tag = ((ArbolSintactico)val_peek(0)).getIzq().getLex() + "@" + ambitoActual;
                                                for(String s : etiquetasAct){
                                                        if(tag.equals(s)){
                                                                b = true;
                                                                break;
                                                        }
                                                }
                                                if(!b){
                                                        yyerror("No se puede saltar al tag " + ((ArbolSintactico)val_peek(0)).getIzq().getLex());
                                                        yyval = new NodoHoja("Error");
                                                }else{
                                                        yyval = new NodoComun("Continue",new NodoHoja("Fin"),(ArbolSintactico)val_peek(0));
                                                        if(mapEtiquetas.containsKey(((ArbolSintactico)val_peek(0)).getIzq().getLex())){
                                                                mapEtiquetas.get(((ArbolSintactico)val_peek(0)).getIzq().getLex()).add((ArbolSintactico)yyval);
                                                        }

                                                }
                                        }else{
                                                yyval = new NodoComun("Continue",new NodoHoja("Fin"),(ArbolSintactico)val_peek(0));
                                        }
                                }
break;
case 277:
//#line 989 ".\gramatica.y"
{yyval = new NodoControl("Break",(ArbolSintactico)new NodoHoja("Fin"));}
break;
case 278:
//#line 991 ".\gramatica.y"
{yyval = new NodoHoja("Fin");}
break;
case 279:
//#line 992 ".\gramatica.y"
{String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        yyval = new NodoControl("Tag", new NodoHoja(val_peek(0).sval) );
                        if(!ambito.equals("")){
                                if(!TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Uso").equals("Etiqueta")){
                                        yyerror(val_peek(0).sval + " no es una etiqueta.");
                                }
                        }else{
                                yyerror("La etiqueta " + val_peek(0).sval + " no esta declarada.");
                        }
                        }
break;
case 280:
//#line 1002 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba un identificador");}
break;
case 281:
//#line 1004 ".\gramatica.y"
{ yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2))));  }
break;
case 282:
//#line 1005 ".\gramatica.y"
{ yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 283:
//#line 1006 ".\gramatica.y"
{ yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2)))); }
break;
case 284:
//#line 1007 ".\gramatica.y"
{ yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) ); }
break;
case 285:
//#line 1008 ".\gramatica.y"
{ yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 286:
//#line 1009 ".\gramatica.y"
{ yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));}
break;
case 287:
//#line 1010 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 288:
//#line 1011 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba } ");}
break;
case 289:
//#line 1012 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba { ");}
break;
case 290:
//#line 1013 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 291:
//#line 1014 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba } ");}
break;
case 292:
//#line 1015 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba end_if ");}
break;
case 293:
//#line 1016 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba } ");}
break;
case 294:
//#line 1017 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba { ");}
break;
case 295:
//#line 1018 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 296:
//#line 1019 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba ; luego de la sentencia");}
break;
case 297:
//#line 1020 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba end_if ");}
break;
case 298:
//#line 1021 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba ; luego de la sentencia");}
break;
case 299:
//#line 1022 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba end_if ");}
break;
case 300:
//#line 1023 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba ; luego de la sentencia");}
break;
case 301:
//#line 1024 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba { ");}
break;
case 302:
//#line 1025 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba then ");}
break;
case 303:
//#line 1026 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba ) ");}
break;
case 304:
//#line 1027 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba una condicion ");}
break;
case 305:
//#line 1028 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba ( ");}
break;
case 306:
//#line 1031 ".\gramatica.y"
{
                        yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                        ((ArbolSintactico)yyval).setUso("Variable");}
break;
case 307:
//#line 1035 ".\gramatica.y"
{
                        String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        if(!ambito.equals("")){
                                 yyval=new NodoHoja(val_peek(0).sval+"@"+ambito);
                                ((ArbolSintactico)yyval).setUso("Variable");
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Tipo"));
                                if( TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito,"Uso").equals("Variable") 
                                || TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito,"Uso").equals("Constante") ){
                                
                                        yyval=new NodoHoja(val_peek(0).sval+"@"+ambito);
                                        ((ArbolSintactico)yyval).setUso("Variable");
                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Tipo"));
                                }else{
                                        yyerror("El parametro " + val_peek(0).sval + " no es una variable.");
                                        yyval = new NodoHoja("Error");
                                }
                        }else{
                                yyval=new NodoHoja("Error");
                                yyerror("El parametro "+ val_peek(0).sval +" no se encuentra declarado en el ambito "+ambitoActual);
                        }
                        
                }
break;
case 308:
//#line 1058 ".\gramatica.y"
{
                                                        String ambito = buscarAmbito(ambitoActual,val_peek(5).sval);
                                                        NodoComun parametro1=null;
                                                        NodoComun parametro2=null;
                                                        if (!ambito.equals("") ){
                                                                if( !TablaSimbolos.getAtributo(val_peek(5).sval+"@"+ambito,"Uso").equals("Funcion") ){
                                                                        yyerror("La funcion "+val_peek(5).sval+" no fue declarada");
                                                                        yyval = new NodoHoja("Error");
                                                                }else{
                                                                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error") && !((ArbolSintactico)val_peek(1)).getLex().equals("Error") ){
                                                                                String par1 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +"@"+ ambito,"Parametro1");
                                                                                String par2 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +"@"+ ambito,"Parametro2");
                                                                                if(par1 != null)
                                                                                        if(par2 != null){
                                                                                                String tipoS3 = (String) ((ArbolSintactico) val_peek(3) ).getTipo();
                                                                                                if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") ) )){
                                                                                                        String nombreS3 = ((ArbolSintactico) val_peek(3)).getLex();
                                                                                                        yyerror("El tipo del parametro "+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                                                                                        yyval = new NodoHoja("Error");
                                                                                                        break;
                                                                                                }else{
                                                                                                        NodoHoja n =new NodoHoja(par1);
                                                                                                        n.setTipo(tipoS3);
                                                                                                        n.setUso("Variable");
                                                                                                        parametro1 = new NodoComun("=:",n , (ArbolSintactico)val_peek(3));
                                                                                                }
                                                                                                String tipoS5 = (String) ((ArbolSintactico) val_peek(1)).getTipo();
                                                                                                if( !(tipoS5.equals((String)TablaSimbolos.getAtributo(par2,"Tipo") ))){
                                                                                                        String nombreS5 = ((ArbolSintactico) val_peek(1)).getLex();
                                                                                                        yyerror("El tipo del parametro "+ nombreS5+" no coincide con el tipo declarado en la funcion.");
                                                                                                        yyval = new NodoHoja("Error");
                                                                                                        break;
                                                                                                }else{
                                                                                                        NodoHoja n =new NodoHoja(par2);
                                                                                                        n.setTipo(tipoS5);
                                                                                                        n.setUso("Variable");
                                                                                                        parametro2 = new NodoComun("=:",n, (ArbolSintactico)val_peek(1));
                                                                                                }
                                                                                        }else{
                                                                                                yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                                                yyval = new NodoHoja("Error");
                                                                                        }
                                                                                else{
                                                                                        yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                                        yyval = new NodoHoja("Error");
                                                                                }
                                                                                yyval=new NodoControl("Llamado Funcion" ,new NodoComun(val_peek(5).sval+"@"+ambito,(ArbolSintactico)parametro1,(ArbolSintactico)parametro2));
                                                                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(5).sval +"@"+ ambito,"Tipo"));
                                                                        }else{
                                                                                yyval = new NodoHoja("Error");
                                                                        }
                                                                }
                                                        }else{
                                                                yyerror("La funcion " + val_peek(5).sval + " no se encuentra declarada");
                                                                yyval = new NodoHoja("Error");
                                                        }
                                                }
break;
case 309:
//#line 1115 ".\gramatica.y"
{
            String ambito = buscarAmbito(ambitoActual,val_peek(3).sval);
            NodoComun parametro1=null;
            if (!ambito.equals("")){
                if (!TablaSimbolos.getAtributo(val_peek(3).sval+"@"+ambito,"Uso").equals("Funcion")){
                        yyerror("La funcion "+val_peek(3).sval+" no fue declarada");
                        yyval = new NodoHoja("Error");
                }else{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error")){
                                String par1 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +"@"+ ambito,"Parametro1");
                                String par2 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +"@"+ ambito,"Parametro2");
                                if(par2 ==null){
                                        if(par1!=null){
                                                String tipoS3 = (String) ((ArbolSintactico) val_peek(1) ).getTipo();
                                                if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") )) ){
                                                        String nombreS3 = ((ArbolSintactico) val_peek(1)).getLex();
                                                        yyerror("El tipo del parametro "+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                                        yyval = new NodoHoja("Error");
                                                }else{
                                                        NodoHoja n =new NodoHoja(par1);
                                                        n.setTipo(tipoS3);
                                                        n.setUso("Variable");
                                                        parametro1 = new NodoComun("=:",n , (ArbolSintactico)val_peek(1));
                                                }
                                        }else{
                                                yyerror("La funcion esta declarada sin parametros.");
                                                yyval = new NodoHoja("Error");
                                        }
                                }else{
                                        yyerror("La funcion esta declarada con dos parametros.");
                                        yyval = new NodoHoja("Error");
                                }
                                yyval=new NodoControl("Llamado Funcion" ,new NodoComun(val_peek(3).sval+"@"+ambito,(ArbolSintactico)parametro1,new NodoHoja("Un solo parametro")));
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(3).sval +"@"+ ambito,"Tipo"));
                        }else{
                                yyval=val_peek(1);
                        }
                }
            }else{
                        yyerror("La funcion " + val_peek(3).sval + " no se encuentra declarada");
                        yyval = new NodoHoja("Error");
            }
        }
break;
case 310:
//#line 1158 ".\gramatica.y"
{
                String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                if (!ambito.equals("") ){
                        if (!TablaSimbolos.getAtributo(val_peek(2).sval+"@"+ambito,"Uso").equals("Funcion")){
                                yyerror("La funcion "+val_peek(2).sval+" no fue declarada");
                                yyval = new NodoHoja("Error");
                        }else{
                                String par1 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Parametro1");
                                String par2 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Parametro2");
                                if(par2 == null){
                                        if(par1 != null){
                                                yyerror("La funcion esta declarada con un parametro.");
                                                yyval = new NodoHoja("Error");
                                        }
                                }else{
                                        yyerror("La funcion esta declarada con dos parametros.");
                                        yyval = new NodoHoja("Error");
                                }
                                yyval=new NodoControl("Llamado Funcion", new NodoComun(val_peek(2).sval+"@"+ambito,new NodoHoja("Fin"),new NodoHoja("Fin")));
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                        }
                }else{
                        yyerror("La funcion " + val_peek(2).sval + " no se encuentra declarada");
                        yyval = new NodoHoja("Error");
                }
        }
break;
case 311:
//#line 1184 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba )");}
break;
case 312:
//#line 1185 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba )");}
break;
case 313:
//#line 1186 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba )");}
break;
case 314:
//#line 1187 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba otro parametro");}
break;
//#line 3335 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 * @throws IOException
 */
public void run() throws IOException
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
