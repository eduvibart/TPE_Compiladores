//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package Principal;
import java.io.IOException;
import AnalizadorLexico.AnalizadorLexico;
import AnalizadorLexico.Token;
import GeneracionCodigoIntermedio.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

//#line 28 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IF=257;
public final static short THEN=258;
public final static short ELSE=259;
public final static short END_IF=260;
public final static short OUT=261;
public final static short FUN=262;
public final static short RETURN=263;
public final static short BREAK=264;
public final static short WHEN=265;
public final static short WHILE=266;
public final static short FOR=267;
public final static short CONTINUE=268;
public final static short ID=269;
public final static short I32=270;
public final static short F32=271;
public final static short PUNTO=272;
public final static short PARENT_A=273;
public final static short PARENT_C=274;
public final static short COMILLA=275;
public final static short COMA=276;
public final static short DOSPUNTOS=277;
public final static short PUNTOCOMA=278;
public final static short IGUAL=279;
public final static short MAYOR=280;
public final static short MENOR=281;
public final static short MENORIGUAL=282;
public final static short MAYORIGUAL=283;
public final static short LLAVE_A=284;
public final static short LLAVE_C=285;
public final static short EXCL=286;
public final static short DIST=287;
public final static short ASIG=288;
public final static short CADENA=289;
public final static short COMENT=290;
public final static short CONST=291;
public final static short SUMA=292;
public final static short RESTA=293;
public final static short MULT=294;
public final static short DIV=295;
public final static short ENTERO=296;
public final static short FLOAT=297;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    1,    2,    2,    2,    3,    3,
    4,    4,    4,    9,    9,    6,    6,   10,   10,   11,
   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
   11,   11,   11,   11,    7,    7,    7,   13,   13,   13,
   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
   14,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   19,   19,   19,   19,
   19,   19,   19,   19,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   21,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   24,   24,   24,   25,   25,   25,   25,   25,
   25,   25,   25,   25,   25,   28,   28,   28,   28,   28,
   28,   28,   28,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   27,   22,   22,
   22,   22,   12,   12,    8,   31,   31,   32,   32,   32,
    5,    5,    5,    5,    5,    5,    5,   15,   15,   15,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   37,
   37,   37,   37,   37,   38,   38,   38,   26,   26,   26,
   26,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   23,   23,   23,   40,
   40,   40,   40,   40,   39,   39,   39,   18,   18,   18,
   18,   34,   34,   34,   34,   34,   34,   34,   34,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   41,   41,   41,   42,   42,   42,   42,   42,
   42,   42,   42,   42,   29,   29,   29,   44,   44,   44,
   44,   44,   44,   44,   44,   43,   43,   43,   43,   43,
   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   45,   45,   16,   16,
   16,   16,   16,   16,   16,
};
final static short yylen[] = {                            2,
    4,    4,    4,    4,    1,    0,    3,    3,    1,    1,
    1,    1,    1,    1,    1,    2,    2,    3,    1,    9,
    7,    6,    9,    7,    6,    8,    6,    5,    7,    5,
    4,    6,    3,    2,    4,    4,    2,    0,    3,    3,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,   11,   13,   13,    8,   13,    9,   13,   12,   10,
    9,    8,   12,   11,    9,    8,    7,    6,    5,    4,
    3,    2,   11,   10,   12,   11,    8,    6,    8,    6,
    5,    4,    3,    2,   13,   11,   11,    9,   13,   11,
   10,    9,    8,    7,    6,    5,    4,   11,    9,    8,
    7,    6,    5,    4,    3,    2,   14,   14,   12,   12,
   12,   12,   10,   10,   14,   14,   12,   12,   11,   11,
   10,   10,    9,    8,    7,    6,    5,    4,   12,   12,
   10,   10,    9,    9,    8,    8,    7,    6,    5,    4,
    3,    2,    0,    3,    3,    1,    1,    1,    1,    1,
    1,    2,    1,    2,    1,    8,    6,    8,    6,    5,
    4,    3,    2,   11,   12,   12,    8,   13,    9,   13,
   12,   10,    9,    8,   12,   11,    9,    8,    7,   12,
   11,   11,   10,    6,    5,    4,    3,    2,    4,    4,
    3,    2,    2,    2,    2,    3,    1,    3,    3,    2,
    1,    1,    1,    1,    1,    1,    1,    3,    2,    3,
    3,    3,    1,    3,    3,    3,    3,    3,    3,    3,
    3,    1,    3,    3,    1,    1,    1,    1,    1,    2,
    2,   12,   12,   11,    8,   13,    9,   13,   12,   10,
    9,    8,   12,   11,    9,    8,    7,   11,   10,   12,
   11,    6,    5,    4,    3,    2,    3,    3,    2,    1,
    1,    1,    1,    1,    0,    3,    2,    4,    4,    3,
    2,    8,    6,    8,    6,    5,    4,    3,    2,   13,
   11,   11,    9,   11,    9,    8,    7,    6,    5,    4,
    3,    2,    0,    3,    2,    1,    1,    1,    1,    1,
    1,    2,    1,    2,    0,    2,    2,    8,    6,    8,
    6,    5,    4,    3,    2,   12,   12,   11,    8,   13,
    9,   13,   12,   10,    9,    8,   12,   11,    9,    8,
    7,   11,   10,   12,   11,    6,    5,    4,    3,    2,
   14,   14,   12,   12,   12,   12,   10,   10,   14,   14,
   12,   12,   11,   11,   10,   10,    9,    8,    7,    6,
    5,    4,   12,   12,   10,   10,    9,    9,    8,    8,
    7,    6,    5,    4,    3,    2,    1,    1,    6,    4,
    3,    6,    4,    3,    5,
};
final static short yydefred[] = {                         0,
    0,    5,    0,    0,    6,    6,    6,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   14,   15,    4,
    0,    0,    9,   10,   11,   12,   13,    0,    0,  201,
  207,  203,  202,  204,  205,  206,    3,    2,    1,  256,
    0,  271,    0,   34,    0,  279,    0,  292,    0,  376,
    0,  209,    0,    0,    0,    0,    0,  197,    8,    7,
   17,   19,    0,   37,   38,  255,    0,    0,  228,  229,
  227,    0,  226,    0,    0,    0,    0,  222,  270,    0,
   33,    0,  278,    0,  291,    0,  375,    0,    0,  384,
  378,  381,  377,    0,    0,    0,  210,    0,  200,    0,
    0,    0,    0,  230,  231,  254,    0,  259,  260,  261,
  262,  263,  264,    0,    0,    0,    0,    0,    0,    0,
  269,  268,   31,    0,    0,    0,  277,    0,  290,    0,
  374,    0,  383,  380,    0,    0,  362,    0,  199,  198,
  196,   18,   36,    0,    0,    0,    0,    0,    0,   35,
   41,   42,   43,    0,   44,   45,   46,   47,   48,   49,
   50,   51,  253,    0,  216,    0,    0,  217,    0,  258,
    0,  218,  214,  219,  215,  223,  220,  224,  221,   28,
    0,  194,  193,   30,    0,    0,  276,    0,  289,    0,
  373,    0,  385,    0,    0,  361,    0,   72,    0,  192,
    0,   84,    0,  106,    0,  142,    0,    0,   40,   39,
  252,  265,    0,   25,   22,   27,    0,   32,    0,  275,
  265,  273,  288,    0,  372,    0,  382,  379,    0,  360,
    0,   71,    0,  191,    0,   83,    0,  105,    0,  141,
    0,    0,    0,    0,  247,    0,   24,   21,   29,    0,
    0,  287,    0,  371,    0,    0,    0,  359,    0,   70,
    0,  190,  189,   82,    0,  104,    0,  140,    0,   97,
    0,  128,    0,  242,    0,    0,  246,    0,  235,   26,
    0,  274,  272,  286,    0,  369,    0,  370,    0,    0,
  358,    0,   69,    0,   81,    0,  103,    0,  139,    0,
   96,    0,  127,    0,  241,    0,  237,  266,  245,  265,
    0,   23,   20,  285,    0,    0,    0,    0,    0,  293,
  296,  298,  301,  300,  283,  297,  299,  367,    0,  368,
    0,    0,  357,    0,    0,   68,   38,    0,   80,   38,
   78,  102,    0,  138,    0,   95,    0,  126,    0,  240,
  265,    0,    0,  249,    0,  340,    0,  304,  315,    0,
    0,  302,    0,  365,  293,  347,  366,  293,  348,    0,
  355,    0,  356,    0,    0,   67,    0,    0,  101,    0,
  137,    0,    0,   94,    0,  125,    0,    0,  251,    0,
  244,    0,  248,  234,  339,    0,  314,    0,  307,  306,
  284,  282,    0,    0,    0,  293,  281,  353,    0,  354,
    0,   62,    0,   66,    0,   55,   79,   77,  100,    0,
  135,    0,  136,    0,   93,    0,  124,    0,  239,    0,
  250,  233,  243,  232,  338,    0,  313,    0,  294,  363,
  345,  364,  346,    0,  351,  293,  343,  352,  293,  344,
   61,    0,   57,    0,   65,   38,    0,   99,    0,    0,
    0,    0,    0,  143,  146,  148,  151,  150,  155,   88,
  147,  149,  133,    0,  134,    0,   92,    0,  123,    0,
    0,  238,  236,  337,    0,  312,    0,  280,    0,    0,
   60,   38,    0,    0,    0,   74,    0,  188,    0,  154,
  163,    0,  152,    0,  131,  143,  113,  132,  143,  114,
   91,    0,  121,    0,  122,    0,  336,  293,    0,  311,
  293,  309,  349,  341,  350,  342,    0,   76,    0,    0,
   64,    0,   73,   52,  187,    0,  162,    0,   98,   87,
    0,    0,    0,   90,  143,   86,  119,    0,  120,    0,
    0,  331,    0,    0,   59,    0,   75,    0,   63,    0,
  186,    0,  161,    0,  145,  144,  129,  111,  130,  112,
    0,  117,  143,  109,  118,  143,  110,  326,    0,  330,
    0,  319,  310,  308,   58,   56,   53,   54,  185,    0,
  160,    0,   89,   85,    0,    0,  325,    0,  321,  329,
  293,    0,  184,  143,    0,  159,  143,  157,  115,  107,
  116,  108,  324,  293,    0,    0,  333,    0,    0,  179,
    0,    0,    0,  335,    0,  328,    0,  332,  318,  174,
    0,  178,    0,  167,  158,  156,  323,    0,  334,  317,
  327,  316,  173,    0,  169,  177,  143,    0,  322,  320,
  172,  143,    0,    0,  183,    0,    0,  181,    0,  176,
    0,  182,  164,  171,    0,  180,  165,  175,  166,  170,
  168,
};
final static short yydgoto[] = {                          3,
    4,    8,   22,   23,  276,  151,  152,  153,   28,   63,
   29,  126,  103,  154,  321,   71,  157,  322,  159,  467,
  468,  469,   72,  504,  541,   73,  471,  472,  362,   74,
   57,   58,   33,   34,  323,  324,   77,   78,  244,  116,
  363,  403,  326,  327,   94,
};
final static short yysindex[] = {                        31,
 -205,    0,    0, -232,    0,    0,    0,  846,  857,  409,
  -75,  147,   67,  163,  245,  302,   39,    0,    0,    0,
 -176, -248,    0,    0,    0,    0,    0,  538, -215,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -238,    0, -249,    0,  336,    0, -219,    0, -147,    0,
  599,    0, -183,  260,  176, -231, -155,    0,    0,    0,
    0,    0, -152,    0,    0,    0, -235,  104,    0,    0,
    0, -140,    0, -247, -102,  -77,  368,    0,    0, -130,
    0,  352,    0,   15,    0,   54,    0, -190, -229,    0,
    0,    0,    0,  173,  -42,  346,    0,  390,    0, -129,
 -176,   -7,  677,    0,    0,    0,  241,    0,    0,    0,
    0,    0,    0, -168,  -78,  214,  -48,  -29,  -59,   22,
    0,    0,    0, -202,  603,  374,    0,  306,    0, -174,
    0,  304,    0,    0,   85,  310,    0,  605,    0,    0,
    0,    0,    0,  378,  383,  449,  456,  464,  106,    0,
    0,    0,    0, -188,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1735,    0,    3,  368,    0,  368,    0,
  390,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  560,    0,    0,    0, -125,  563,    0, 1742,    0,  478,
    0, -105,    0,   73,  -32,    0,  -85,    0,  324,    0,
  371,    0,  376,    0,  421,    0,  629,  499,    0,    0,
    0,    0,  -50,    0,    0,    0,  576,    0,   83,    0,
    0,    0,    0,  633,    0, -212,    0,    0,   26,    0,
  430,    0,  119,    0,  -97,    0,  134,    0,  135,    0,
  -27,  501,  508, 1320,    0,  465,    0,    0,    0,  -94,
 1334,    0,  190,    0,   76,  129,   90,    0,  -12,    0,
  804,    0,    0,    0,  902,    0,  -31,    0,  435,    0,
  442,    0,  635,    0,  693,   59,    0, 1756,    0,    0,
  586,    0,    0,    0, 1566,    0,  272,    0,  273,   97,
    0, -196,    0,  694,    0,  710,    0,  513,    0,    7,
    0,  311,    0,   23,    0, 1772,    0,    0,    0,    0,
   27,    0,    0,    0,  519,  722,  522,  115, -145,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1587,    0,
 1601,  185,    0,  131,  142,    0,    0,   43,    0,    0,
    0,    0,  659,    0, -151,    0,  -17,    0,  474,    0,
    0,   64, 1341,    0, -171,    0,  480,    0,    0,  486,
  661,    0, 1145,    0,    0,    0,    0,    0,    0, 1785,
    0,  312,    0,  342,  726,    0,  764,  743,    0,  357,
    0,  161,  178,    0,  531,    0,   74, 1355,    0,  205,
    0,  232,    0,    0,    0,  379,    0,  385,    0,    0,
    0,    0,  207, 1159, 1181,    0,    0,    0, 1622,    0,
 1636,    0,  253,    0,  770,    0,    0,    0,    0, 1386,
    0,  429,    0,  433,    0,  663,    0,    1,    0,  500,
    0,    0,    0,    0,    0,  914,    0,  915,    0,    0,
    0,    0,    0, 1720,    0,    0,    0,    0,    0,    0,
    0,  786,    0,  261,    0,    0,   82,    0,  541,  722,
  542,  115,  -55,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1408,    0, 1422,    0,  436,    0,  228,
  252,    0,    0,    0, 1657,    0, 1671,    0, 1195, 1217,
    0,    0,   87,  884,  802,    0,  546,    0,  492,    0,
    0,  524,    0,  961,    0,    0,    0,    0,    0,    0,
    0, 1444,    0,  459,    0,  488,    0,    0,   99,    0,
    0,    0,    0,    0,    0,    0,  819,    0,  313,  294,
    0,  143,    0,    0,    0,  489,    0,  494,    0,    0,
  177,  975,  998,    0,    0,    0,    0, 1458,    0, 1480,
 1231,    0,  835, 1253,    0,  630,    0,  318,    0,  323,
    0,  925,    0,  940,    0,    0,    0,    0,    0,    0,
 1012,    0,    0,    0,    0,    0,    0,    0,  840,    0,
 1692,    0,    0,    0,    0,    0,    0,    0,    0, 1494,
    0, 1516,    0,    0, 1035, 1049,    0, 1706,    0,    0,
    0,  200,    0,    0,  211,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  237, 1267,    0,  660, 1072,    0,
  842, 1086, 1289,    0,  675,    0,  685,    0,    0,    0,
  873,    0, 1530,    0,    0,    0,    0,  698,    0,    0,
    0,    0,    0, 1552,    0,    0,    0,  239,    0,    0,
    0,    0,  244, 1109,    0,  714, 1123,    0,  730,    0,
  742,    0,    0,    0,  747,    0,    0,    0,    0,    0,
    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  276,    0,    0,    0,
    0,    0,  281,    0,    0,    0,  544,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  584,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  900,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  544,  614,    0,  644,    0,
  -54,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1372,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  923,    0,  938,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1303,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  283,
    0,  287,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,
};
final static short yygindex[] = {                         0,
    0, 1015,    0,    0,    2, 1036, 1126, 1130,  -69,    0,
    0,  408, -318, -280,   -8,   -4,    0,   62,    0,  -64,
  101,  166,    4, -489, -337,   70,    0,    0,  137,  -40,
    0,  514,    0,    0,   53,  145,  964,  910, -218,    0,
 -342, -264,    0,    0,  520,
};
final static int YYTABLESIZE=2069;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         30,
   30,   30,  251,   31,   31,   31,   79,   59,  108,   24,
   24,   24,  125,  338,   98,  341,  542,   66,  375,  543,
  325,  378,  404,    6,   99,  405,  131,   15,   16,   60,
   67,  109,  110,  111,  112,  113,   83,   53,  160,   80,
   64,   54,   89,  254,  114,  115,   15,   16,  132,   67,
   84,    7,   86,  180,   68,  571,  100,   69,   70,  333,
   35,   35,   35,  444,  366,   52,  369,  209,   65,   32,
   32,   32,   90,   68,  181,  171,   69,   70,    5,  255,
  256,  189,  470,  595,  393,   91,  596,  165,  394,  210,
   92,  353,   56,   75,  155,  334,  335,   55,  156,   75,
  166,   75,  190,  489,  381,  407,  490,   75,   85,   68,
   52,  215,   69,   70,  619,  106,  125,  622,   15,   16,
  101,   67,   93,  102,   68,  121,  139,   69,   70,  197,
  216,   54,  388,  107,  457,  192,  507,  495,  510,  195,
  382,  383,   55,  122,  447,   68,  450,  248,   69,   70,
  225,  217,   36,   36,   36,   30,  117,  654,  262,   31,
  235,  280,  657,   68,  158,  213,   69,   70,   75,  140,
  230,  493,  226,  527,  546,  551,  263,  168,  554,   30,
   40,  118,  281,   31,   75,   76,  173,  175,   75,  222,
  166,   76,  231,   76,  114,  115,  176,   41,  241,   76,
   52,  257,  233,  161,   93,  245,  237,  172,  239,  166,
  574,  313,  577,  530,   68,  253,   35,   69,   70,  257,
  519,  208,  522,  257,  297,   32,  174,  246,  268,  160,
  136,  160,   55,   68,  259,   30,   69,   70,  384,   31,
   35,  229,   30,  291,   68,  298,   31,   69,   70,   32,
  269,   75,  605,   75,  608,   75,  479,   75,  616,  385,
   76,  142,  344,   68,  304,  292,   69,   70,  162,   30,
  127,  623,  300,   31,  302,   53,   76,  178,  348,  311,
   76,  332,  354,   75,  345,  155,    1,  155,  128,  156,
  166,  156,  480,  481,   52,  648,   35,   30,  376,    2,
  349,   31,  257,   35,  355,   32,  653,  352,   36,  129,
  160,   53,   32,  160,   68,   54,  602,   69,   70,  389,
  377,   75,   44,   75,  287,  289,   55,  130,  227,  427,
   35,  286,   36,  615,  380,   45,  308,  496,  249,   32,
  193,  390,  528,   76,   30,   76,  228,   76,   31,   76,
  160,  428,  387,   91,  552,  158,  250,  158,   35,  497,
  396,   52,  290,  398,  529,   88,  155,   32,   68,  155,
  156,   69,   70,  156,  260,   76,  553,   68,   53,   30,
   69,   70,  208,   31,  288,  358,  371,  160,   36,  264,
  266,  361,  261,   55,  161,   36,  161,  373,  559,  104,
  105,   75,   42,  372,  374,   35,  155,  265,  267,   75,
  156,  465,   75,   76,   32,   76,  421,  478,   46,   43,
  560,   68,   36,   68,   69,   70,   69,   70,  133,  160,
  160,   97,  565,  423,   68,   47,  158,   69,   70,  158,
   35,   15,   16,  155,   67,  284,  134,  156,  135,   32,
   36,  422,  424,   68,  566,  617,   69,   70,  370,  162,
  431,  162,  160,  285,  432,  465,  620,  465,   68,  170,
   68,   69,   70,   69,   70,  161,  158,  618,  161,   15,
   16,  466,   67,  513,  439,  155,  155,  433,  621,  156,
  156,  434,  624,   76,  655,  465,  163,   36,  164,  658,
   48,   76,  536,  465,   76,  538,   68,  515,  451,   69,
   70,  452,  453,  158,  625,  161,  656,   49,  155,  494,
   68,  659,  156,   69,   70,   95,   96,  328,  330,  500,
  454,  195,   36,  465,  465,  466,   16,  466,  153,  465,
  162,  465,  305,  162,   68,  329,  331,   69,   70,  514,
  516,   75,  161,  195,   75,  158,  158,   50,   16,  191,
  153,  187,  465,  188,  305,  466,  346,  408,  557,   15,
   16,  558,   67,  466,   51,   15,   16,  587,   67,  232,
  162,  465,  588,  465,  347,  409,  465,  465,  158,   15,
   16,   81,   67,  219,  161,  161,   68,  410,  503,   69,
   70,  137,   68,  466,  466,   69,   70,  123,   82,  466,
  465,  466,  419,  465,  141,  411,   68,  162,  138,   69,
   70,   18,   19,    0,  465,  124,  234,  161,    0,  184,
  420,  236,  466,  198,  435,  465,   15,   16,  200,   67,
  437,   15,   16,   76,   67,  465,   76,  185,  465,  186,
  199,  466,  436,  466,  194,  201,  466,  466,  438,  162,
  162,  119,  120,   68,   38,   11,   69,   70,   68,   12,
   13,   69,   70,   14,   15,   16,  238,   17,   18,   19,
  466,  114,  115,  466,  473,  258,   15,   16,  475,   67,
  299,  511,  162,   39,  466,   15,   16,  301,   67,   21,
   15,   16,  474,   67,  202,  466,  476,   15,   16,  512,
   67,  204,    0,   68,  547,  466,   69,   70,  466,  206,
  277,  203,   68,  278,  279,   69,   70,   68,  205,  386,
   69,   70,  548,  223,   68,  395,  207,   69,   70,   15,
   16,  397,   67,  549,  561,   15,   16,  535,   67,  563,
  224,   15,   16,    0,   67,  482,  270,   15,   16,  483,
   67,  550,  562,  272,  242,  243,   68,  564,  342,   69,
   70,    0,   68,  271,  356,   69,   70,  359,   68,  537,
  273,   69,   70,    0,   68,  343,  425,   69,   70,   15,
   16,  357,   67,   61,  360,    0,  498,  501,    0,  225,
  225,  533,  225,  426,  225,  534,   62,  225,  225,  225,
  225,  225,  225,  499,  502,  214,   68,  225,  218,   69,
   70,  225,  225,  225,  225,  225,  225,    0,  225,   18,
   19,  247,   18,   19,    0,  225,  225,  225,  225,  213,
  213,  312,  213,    0,  213,   18,   19,  213,  213,  213,
  213,  213,  213,    0,   87,   18,   19,  213,  182,    0,
  196,  213,  213,  213,  213,  213,  213,   88,  213,  211,
  211,  183,  211,   88,  211,  213,  213,  211,  211,  211,
  211,  211,  211,    0,  240,  585,    0,  211,  252,  586,
  303,  211,  211,  211,  211,  211,  211,   88,  211,  212,
  212,   88,  212,   88,  212,  211,  211,  212,  212,  212,
  212,  212,  212,    0,  379,  628,  399,  212,  477,  629,
    0,  212,  212,  212,  212,  212,  212,   88,  212,  400,
  639,   88,  143,  144,  640,  212,  212,   12,   13,  145,
  641,  146,  147,  148,  642,  149,   18,   19,  305,  336,
  144,  306,  307,  649,   12,   13,  145,  650,  146,  147,
  148,  150,  149,   18,   19,  339,  144,   21,    0,  662,
   12,   13,  145,  663,  146,  147,  148,  337,  149,   18,
   19,  412,  144,    0,   21,  666,   12,   13,  145,  667,
  146,  147,  148,  340,  149,   18,   19,  668,  417,  144,
   21,  669,  670,   12,   13,  145,  671,  146,  147,  148,
  413,  149,   18,   19,   68,    0,   21,   69,   70,  414,
    9,   10,  415,  416,    0,  455,  144,  418,  177,  179,
   12,   13,  145,   21,  146,  147,  148,    0,  149,   18,
   19,  491,  144,   25,   25,   25,   12,   13,  145,    0,
  146,  147,  148,  456,  149,   18,   19,  531,  144,  293,
   21,  294,   12,   13,  145,    0,  146,  147,  148,  492,
  149,   18,   19,    0,  555,  144,   21,  167,  169,   12,
   13,  145,    0,  146,  147,  148,  532,  149,   18,   19,
  580,    0,   21,  581,  582,  597,    0,  632,  598,  599,
  633,  634,   11,  556,    0,    0,   12,   13,    0,   21,
   14,   15,   16,   11,   17,   18,   19,   12,   13,    0,
    0,   14,   15,   16,    0,   17,   18,   19,  643,    0,
   20,  644,  645,   26,   26,   26,   21,   27,   27,   27,
  144,   37,    0,    0,   12,   13,  145,   21,  146,  147,
  148,    0,  149,   18,   19,  208,  208,  295,  208,  296,
  208,    0,    0,  208,  208,  208,  208,  208,  208,  484,
  486,  485,  487,  208,   21,    0,    0,  208,  303,  303,
  589,  303,  590,  303,  208,    0,  303,  303,  303,  303,
  303,  303,    0,  305,  305,  591,  305,  592,  305,    0,
  303,  305,  305,  305,  305,  305,  305,  303,    0,    0,
    0,    0,    0,    0,    0,  305,  539,  459,    0,    0,
    0,   12,  305,  145,  460,  461,  147,  148,  462,  463,
  567,  459,    0,    0,    0,   12,    0,  145,  460,  461,
  147,  148,  462,  463,    0,  540,    0,    0,    0,    0,
    0,    0,    0,  569,  459,    0,    0,    0,   12,  568,
  145,  460,  461,  147,  148,  462,  463,  593,  459,    0,
    0,    0,   12,    0,  145,  460,  461,  147,  148,  462,
  463,    0,  570,    0,    0,    0,    0,    0,    0,    0,
  609,  459,    0,    0,    0,   12,  594,  145,  460,  461,
  147,  148,  462,  463,  611,  459,    0,    0,    0,   12,
    0,  145,  460,  461,  147,  148,  462,  463,    0,  610,
    0,    0,    0,    0,    0,    0,    0,  630,  459,    0,
    0,    0,   12,  612,  145,  460,  461,  147,  148,  462,
  463,  635,  459,    0,    0,    0,   12,    0,  145,  460,
  461,  147,  148,  462,  463,    0,  631,    0,    0,    0,
    0,    0,    0,    0,  660,  459,    0,    0,    0,   12,
  636,  145,  460,  461,  147,  148,  462,  463,  664,  459,
    0,    0,    0,   12,    0,  145,  460,  461,  147,  148,
  462,  463,    0,  661,    0,    0,    0,    0,    0,    0,
  401,  315,    0,    0,    0,   12,    0,  665,  316,  317,
   15,   16,  318,  319,  440,  315,    0,    0,    0,   12,
    0,    0,  316,  317,   15,   16,  318,  319,    0,  402,
    0,    0,    0,    0,    0,    0,  442,  315,    0,    0,
    0,   12,    0,  441,  316,  317,   15,   16,  318,  319,
  523,  315,    0,    0,    0,   12,    0,    0,  316,  317,
   15,   16,  318,  319,    0,  443,    0,    0,    0,    0,
    0,    0,  525,  315,    0,    0,    0,   12,    0,  524,
  316,  317,   15,   16,  318,  319,  578,  315,    0,    0,
    0,   12,    0,    0,  316,  317,   15,   16,  318,  319,
    0,  526,    0,    0,    0,    0,    0,    0,  583,  315,
    0,    0,    0,   12,    0,  579,  316,  317,   15,   16,
  318,  319,  626,  315,    0,    0,    0,   12,    0,    0,
  316,  317,   15,   16,  318,  319,    0,  584,    0,    0,
    0,    0,    0,    0,  637,  315,    0,    0,    0,   12,
    0,  627,  316,  317,   15,   16,  318,  319,  295,  295,
    0,    0,    0,  295,    0,    0,  295,  295,  295,  295,
  295,  295,    0,  638,    0,  274,   11,    0,    0,    0,
   12,    0,    0,    0,   14,   15,   16,  295,   17,  282,
   11,    0,    0,    0,   12,    0,  391,   11,   14,   15,
   16,   12,   17,    0,  275,   14,   15,   16,    0,   17,
  429,   11,    0,    0,    0,   12,    0,    0,  283,   14,
   15,   16,    0,   17,    0,  392,    0,  267,  267,    0,
    0,    0,  267,    0,    0,    0,  267,  267,  267,  430,
  267,  458,  459,    0,    0,    0,   12,    0,  145,  460,
  461,  147,  148,  462,  463,    0,  267,    0,    0,    0,
    0,    0,    0,  505,  459,    0,    0,    0,   12,  464,
  145,  460,  461,  147,  148,  462,  463,  508,  459,    0,
    0,    0,   12,    0,  145,  460,  461,  147,  148,  462,
  463,  506,    0,    0,    0,    0,    0,    0,    0,  544,
  459,    0,    0,    0,   12,  509,  145,  460,  461,  147,
  148,  462,  463,  572,  459,    0,    0,    0,   12,    0,
  145,  460,  461,  147,  148,  462,  463,  545,    0,    0,
    0,    0,    0,    0,    0,  575,  459,    0,    0,    0,
   12,  573,  145,  460,  461,  147,  148,  462,  463,  603,
  459,    0,    0,    0,   12,    0,  145,  460,  461,  147,
  148,  462,  463,  576,    0,    0,    0,    0,    0,    0,
    0,  606,  459,    0,    0,    0,   12,  604,  145,  460,
  461,  147,  148,  462,  463,  646,  459,    0,    0,    0,
   12,    0,  145,  460,  461,  147,  148,  462,  463,  607,
    0,    0,    0,    0,    0,    0,    0,  651,  459,    0,
    0,    0,   12,  647,  145,  460,  461,  147,  148,  462,
  463,  314,  315,    0,    0,    0,   12,    0,    0,  316,
  317,   15,   16,  318,  319,  652,    0,    0,    0,    0,
    0,    0,  364,  315,    0,    0,    0,   12,    0,  320,
  316,  317,   15,   16,  318,  319,  367,  315,    0,    0,
    0,   12,    0,    0,  316,  317,   15,   16,  318,  319,
  365,    0,    0,    0,    0,    0,    0,  445,  315,    0,
    0,    0,   12,    0,  368,  316,  317,   15,   16,  318,
  319,  448,  315,    0,    0,    0,   12,    0,    0,  316,
  317,   15,   16,  318,  319,  446,    0,    0,    0,    0,
    0,    0,  517,  315,    0,    0,    0,   12,    0,  449,
  316,  317,   15,   16,  318,  319,  520,  315,    0,    0,
    0,   12,    0,    0,  316,  317,   15,   16,  318,  319,
  518,    0,    0,    0,    0,    0,    0,  600,  315,    0,
    0,    0,   12,    0,  521,  316,  317,   15,   16,  318,
  319,  613,  315,    0,    0,    0,   12,    0,    0,  316,
  317,   15,   16,  318,  319,  601,  315,    0,    0,    0,
   12,    0,    0,  316,  317,   15,   16,  318,  319,  614,
  211,   11,    0,    0,    0,   12,    0,  220,   11,   14,
   15,   16,   12,   17,  488,    0,   14,   15,   16,    0,
   17,  309,   11,    0,    0,    0,   12,    0,  212,    0,
   14,   15,   16,    0,   17,  221,    0,  350,   11,    0,
    0,    0,   12,    0,    0,    0,   14,   15,   16,  310,
   17,  315,    0,    0,    0,   12,    0,    0,  316,  317,
   15,   16,  318,  319,    0,  351,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  406,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          8,
    9,   10,  221,    8,    9,   10,  256,  256,  256,    8,
    9,   10,   82,  294,   55,  296,  506,  256,  337,  509,
  285,  340,  365,  256,  256,  368,  256,  266,  267,  278,
  269,  279,  280,  281,  282,  283,  256,  273,  103,  289,
  256,  277,   51,  256,  292,  293,  266,  267,  278,  269,
   47,  284,   49,  256,  293,  545,  288,  296,  297,  256,
    8,    9,   10,  406,  329,  256,  331,  256,  284,    8,
    9,   10,  256,  293,  277,  116,  296,  297,  284,  292,
  293,  256,  420,  573,  256,  269,  576,  256,  260,  278,
  274,  310,  269,   41,  103,  292,  293,  288,  103,   47,
  269,   49,  277,  446,  256,  370,  449,   55,  256,  293,
  256,  181,  296,  297,  604,  256,  186,  607,  266,  267,
  276,  269,   53,  276,  293,  256,  256,  296,  297,  138,
  256,  277,  351,  274,  415,  132,  474,  456,  476,  136,
  292,  293,  288,  274,  409,  293,  411,  217,  296,  297,
  256,  277,    8,    9,   10,  164,  259,  647,  256,  164,
  201,  256,  652,  293,  103,  164,  296,  297,  116,  100,
  256,  452,  278,  492,  512,  518,  274,  256,  521,  188,
  256,  259,  277,  188,  132,   41,  117,  118,  136,  188,
  269,   47,  278,   49,  292,  293,  256,  273,  207,   55,
  256,  256,  199,  103,  135,  256,  203,  256,  205,  269,
  548,  281,  550,  494,  293,  224,  164,  296,  297,  274,
  485,  277,  487,  278,  256,  164,  256,  278,  256,  294,
  273,  296,  288,  293,  231,  244,  296,  297,  256,  244,
  188,  274,  251,  256,  293,  277,  251,  296,  297,  188,
  278,  199,  590,  201,  592,  203,  256,  205,  601,  277,
  116,  269,  256,  293,  273,  278,  296,  297,  103,  278,
  256,  614,  269,  278,  271,  273,  132,  256,  256,  278,
  136,  290,  256,  231,  278,  294,  256,  296,  274,  294,
  269,  296,  292,  293,  256,  633,  244,  306,  256,  269,
  278,  306,  277,  251,  278,  244,  644,  306,  164,  256,
  375,  273,  251,  378,  293,  277,  581,  296,  297,  256,
  278,  269,  256,  271,  255,  256,  288,  274,  256,  256,
  278,  256,  188,  598,  343,  269,  278,  256,  256,  278,
  256,  278,  256,  199,  353,  201,  274,  203,  353,  205,
  415,  278,  349,  269,  256,  294,  274,  296,  306,  278,
  357,  256,  273,  360,  278,  269,  375,  306,  293,  378,
  375,  296,  297,  378,  256,  231,  278,  293,  273,  388,
  296,  297,  277,  388,  256,  316,  256,  452,  244,  256,
  256,  277,  274,  288,  294,  251,  296,  256,  256,  296,
  297,  349,  256,  334,  335,  353,  415,  274,  274,  357,
  415,  420,  360,  269,  353,  271,  256,  426,  256,  273,
  278,  293,  278,  293,  296,  297,  296,  297,  256,  494,
  495,  256,  256,  256,  293,  273,  375,  296,  297,  378,
  388,  266,  267,  452,  269,  256,  274,  452,  276,  388,
  306,  382,  383,  293,  278,  256,  296,  297,  274,  294,
  256,  296,  527,  274,  260,  474,  256,  476,  293,  256,
  293,  296,  297,  296,  297,  375,  415,  278,  378,  266,
  267,  420,  269,  256,  278,  494,  495,  256,  278,  494,
  495,  260,  256,  349,  256,  504,  256,  353,  258,  256,
  256,  357,  499,  512,  360,  502,  293,  256,  256,  296,
  297,  259,  260,  452,  278,  415,  278,  273,  527,  259,
  293,  278,  527,  296,  297,  266,  267,  256,  256,  460,
  278,  256,  388,  542,  543,  474,  256,  476,  256,  548,
  375,  550,  256,  378,  293,  274,  274,  296,  297,  480,
  481,  499,  452,  278,  502,  494,  495,  256,  278,  256,
  278,  256,  571,  258,  278,  504,  256,  256,  256,  266,
  267,  278,  269,  512,  273,  266,  267,  260,  269,  256,
  415,  590,  260,  592,  274,  274,  595,  596,  527,  266,
  267,  256,  269,  186,  494,  495,  293,  256,  462,  296,
  297,  256,  293,  542,  543,  296,  297,  256,  273,  548,
  619,  550,  256,  622,  101,  274,  293,  452,  273,  296,
  297,  270,  271,   -1,  633,  274,  256,  527,   -1,  256,
  274,  256,  571,  256,  256,  644,  266,  267,  256,  269,
  256,  266,  267,  499,  269,  654,  502,  274,  657,  276,
  273,  590,  274,  592,  135,  273,  595,  596,  274,  494,
  495,  294,  295,  293,  256,  257,  296,  297,  293,  261,
  262,  296,  297,  265,  266,  267,  256,  269,  270,  271,
  619,  292,  293,  622,  256,  256,  266,  267,  256,  269,
  256,  256,  527,  285,  633,  266,  267,  256,  269,  291,
  266,  267,  274,  269,  256,  644,  274,  266,  267,  274,
  269,  256,   -1,  293,  256,  654,  296,  297,  657,  256,
  256,  273,  293,  259,  260,  296,  297,  293,  273,  256,
  296,  297,  274,  256,  293,  256,  273,  296,  297,  266,
  267,  256,  269,  256,  256,  266,  267,  256,  269,  256,
  273,  266,  267,   -1,  269,  256,  256,  266,  267,  260,
  269,  274,  274,  256,  266,  267,  293,  274,  256,  296,
  297,   -1,  293,  273,  256,  296,  297,  256,  293,  256,
  273,  296,  297,   -1,  293,  273,  256,  296,  297,  266,
  267,  273,  269,  256,  273,   -1,  256,  256,   -1,  256,
  257,  256,  259,  273,  261,  260,  269,  264,  265,  266,
  267,  268,  269,  273,  273,  256,  293,  274,  256,  296,
  297,  278,  279,  280,  281,  282,  283,   -1,  285,  270,
  271,  256,  270,  271,   -1,  292,  293,  294,  295,  256,
  257,  256,  259,   -1,  261,  270,  271,  264,  265,  266,
  267,  268,  269,   -1,  256,  270,  271,  274,  256,   -1,
  256,  278,  279,  280,  281,  282,  283,  269,  285,  256,
  257,  269,  259,  269,  261,  292,  293,  264,  265,  266,
  267,  268,  269,   -1,  256,  256,   -1,  274,  256,  260,
  256,  278,  279,  280,  281,  282,  283,  269,  285,  256,
  257,  269,  259,  269,  261,  292,  293,  264,  265,  266,
  267,  268,  269,   -1,  256,  256,  256,  274,  256,  260,
   -1,  278,  279,  280,  281,  282,  283,  269,  285,  269,
  256,  269,  256,  257,  260,  292,  293,  261,  262,  263,
  256,  265,  266,  267,  260,  269,  270,  271,  256,  256,
  257,  259,  260,  256,  261,  262,  263,  260,  265,  266,
  267,  285,  269,  270,  271,  256,  257,  291,   -1,  256,
  261,  262,  263,  260,  265,  266,  267,  284,  269,  270,
  271,  256,  257,   -1,  291,  256,  261,  262,  263,  260,
  265,  266,  267,  284,  269,  270,  271,  256,  256,  257,
  291,  260,  256,  261,  262,  263,  260,  265,  266,  267,
  285,  269,  270,  271,  293,   -1,  291,  296,  297,  256,
    6,    7,  259,  260,   -1,  256,  257,  285,  119,  120,
  261,  262,  263,  291,  265,  266,  267,   -1,  269,  270,
  271,  256,  257,    8,    9,   10,  261,  262,  263,   -1,
  265,  266,  267,  284,  269,  270,  271,  256,  257,  256,
  291,  258,  261,  262,  263,   -1,  265,  266,  267,  284,
  269,  270,  271,   -1,  256,  257,  291,  114,  115,  261,
  262,  263,   -1,  265,  266,  267,  285,  269,  270,  271,
  256,   -1,  291,  259,  260,  256,   -1,  256,  259,  260,
  259,  260,  257,  285,   -1,   -1,  261,  262,   -1,  291,
  265,  266,  267,  257,  269,  270,  271,  261,  262,   -1,
   -1,  265,  266,  267,   -1,  269,  270,  271,  256,   -1,
  285,  259,  260,    8,    9,   10,  291,    8,    9,   10,
  257,  285,   -1,   -1,  261,  262,  263,  291,  265,  266,
  267,   -1,  269,  270,  271,  256,  257,  256,  259,  258,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,  256,
  256,  258,  258,  274,  291,   -1,   -1,  278,  256,  257,
  256,  259,  258,  261,  285,   -1,  264,  265,  266,  267,
  268,  269,   -1,  256,  257,  256,  259,  258,  261,   -1,
  278,  264,  265,  266,  267,  268,  269,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  278,  256,  257,   -1,   -1,
   -1,  261,  285,  263,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,
  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,  285,
  263,  264,  265,  266,  267,  268,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,  268,
  269,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,  285,  263,  264,  265,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,  263,  264,  265,  266,  267,  268,  269,   -1,  285,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,  285,  263,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,
  265,  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
  285,  263,  264,  265,  266,  267,  268,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,
  268,  269,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,   -1,  285,  264,  265,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,   -1,  264,  265,  266,  267,  268,  269,   -1,  285,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,   -1,  285,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  285,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,   -1,  285,  264,  265,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  264,  265,  266,  267,  268,  269,   -1,  285,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
   -1,  285,  264,  265,  266,  267,  268,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,   -1,  264,  265,  266,  267,
  268,  269,   -1,  285,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,   -1,  265,  266,  267,  285,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,  256,  257,  265,  266,
  267,  261,  269,   -1,  285,  265,  266,  267,   -1,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  285,  265,
  266,  267,   -1,  269,   -1,  285,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,   -1,  265,  266,  267,  285,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,
  265,  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,  284,
  263,  264,  265,  266,  267,  268,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,  268,
  269,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  257,   -1,   -1,   -1,  261,  284,  263,  264,  265,  266,
  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
  263,  264,  265,  266,  267,  268,  269,  284,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
  261,  284,  263,  264,  265,  266,  267,  268,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,
  267,  268,  269,  284,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,  284,  263,  264,
  265,  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,  263,  264,  265,  266,  267,  268,  269,  284,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,  284,  263,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  284,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
  284,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,  284,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  284,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
  284,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,  284,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  284,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,  284,
  256,  257,   -1,   -1,   -1,  261,   -1,  256,  257,  265,
  266,  267,  261,  269,  285,   -1,  265,  266,  267,   -1,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,  284,   -1,
  265,  266,  267,   -1,  269,  284,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,   -1,  265,  266,  267,  284,
  269,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,   -1,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=297;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"IF","THEN","ELSE","END_IF","OUT","FUN","RETURN","BREAK","WHEN",
"WHILE","FOR","CONTINUE","ID","I32","F32","PUNTO","PARENT_A","PARENT_C",
"COMILLA","COMA","DOSPUNTOS","PUNTOCOMA","IGUAL","MAYOR","MENOR","MENORIGUAL",
"MAYORIGUAL","LLAVE_A","LLAVE_C","EXCL","DIST","ASIG","CADENA","COMENT","CONST",
"SUMA","RESTA","MULT","DIV","ENTERO","FLOAT",
};
final static String yyrule[] = {
"$accept : program",
"program : nombre_program LLAVE_A bloque_sentencias LLAVE_C",
"program : nombre_program LLAVE_A bloque_sentencias error",
"program : nombre_program error bloque_sentencias LLAVE_C",
"program : error LLAVE_A bloque_sentencias LLAVE_C",
"nombre_program : ID",
"bloque_sentencias :",
"bloque_sentencias : bloque_sentencias sentencia PUNTOCOMA",
"bloque_sentencias : bloque_sentencias sentencia error",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_decl_datos",
"sentencia_declarativa : sentencia_decl_fun",
"sentencia_declarativa : lista_const",
"tipo : I32",
"tipo : F32",
"sentencia_decl_datos : tipo list_var",
"sentencia_decl_datos : tipo error",
"list_var : list_var COMA ID",
"list_var : ID",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro error",
"encabezado_fun : FUN ID PARENT_A parametro error",
"encabezado_fun : FUN ID PARENT_A error",
"encabezado_fun : FUN ID PARENT_A parametro COMA error",
"encabezado_fun : FUN ID error",
"encabezado_fun : FUN error",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun error",
"sentencia_decl_fun : encabezado_fun error",
"cuerpo_fun :",
"cuerpo_fun : cuerpo_fun sentencias_fun PUNTOCOMA",
"cuerpo_fun : cuerpo_fun sentencias_fun error",
"sentencias_fun : sentencia_decl_datos",
"sentencias_fun : sentencia_decl_fun",
"sentencias_fun : lista_const",
"sentencias_fun : asignacion",
"sentencias_fun : llamado_func",
"sentencias_fun : sentencia_if_fun",
"sentencias_fun : sentencia_out",
"sentencias_fun : sentencia_when_fun",
"sentencias_fun : sentencia_for_fun",
"sentencias_fun : sentencia_while_fun",
"sentencias_fun : retorno",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_fun : IF PARENT_A condicion error",
"sentencia_if_fun : IF PARENT_A error",
"sentencia_if_fun : IF error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE sentencias_fun error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_fun : WHEN PARENT_A condicion error",
"sentencia_when_fun : WHEN PARENT_A error",
"sentencia_when_fun : WHEN error",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion error",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A error",
"sentencia_while_fun : ID DOSPUNTOS WHILE error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion error",
"sentencia_while_fun : WHILE PARENT_A error",
"sentencia_while_fun : WHILE error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A error",
"sentencia_for_fun : ID DOSPUNTOS FOR error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA error",
"sentencia_for_fun : FOR PARENT_A asignacion error",
"sentencia_for_fun : FOR PARENT_A error",
"sentencia_for_fun : FOR error",
"cuerpo_fun_break :",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break PUNTOCOMA",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break error",
"sentencias_fun_break : asignacion",
"sentencias_fun_break : sentencia_if_break_fun",
"sentencias_fun_break : sentencia_out",
"sentencias_fun_break : sentencia_when_break_fun",
"sentencias_fun_break : sentencia_while_fun",
"sentencias_fun_break : sentencia_for_fun",
"sentencias_fun_break : CONTINUE tag",
"sentencias_fun_break : BREAK",
"sentencias_fun_break : BREAK cte",
"sentencias_fun_break : retorno",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun_break",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_break_fun : WHEN PARENT_A condicion error",
"sentencia_when_break_fun : WHEN PARENT_A error",
"sentencia_when_break_fun : WHEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break_fun : IF PARENT_A condicion error",
"sentencia_if_break_fun : IF PARENT_A error",
"sentencia_if_break_fun : IF error",
"retorno : RETURN PARENT_A expresion PARENT_C",
"retorno : RETURN PARENT_A expresion error",
"retorno : RETURN PARENT_A error",
"retorno : RETURN error",
"parametro : tipo ID",
"parametro : tipo error",
"lista_const : CONST lista_asignacion",
"lista_asignacion : lista_asignacion COMA asignacion_const",
"lista_asignacion : asignacion_const",
"asignacion_const : ID ASIG cte",
"asignacion_const : ID ASIG error",
"asignacion_const : ID error",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : sentencia_if",
"sentencia_ejecutable : sentencia_out",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : sentencia_for",
"sentencia_ejecutable : sentencia_while",
"sentencia_ejecutable : llamado_func",
"asignacion : ID ASIG expresion",
"asignacion : ID error",
"asignacion : ID ASIG error",
"expresion : expresion SUMA termino",
"expresion : expresion RESTA termino",
"expresion : termino",
"expresion : sentencia_for ELSE cte",
"expresion : sentencia_while ELSE cte",
"expresion : expresion SUMA error",
"expresion : expresion RESTA error",
"expresion : sentencia_for ELSE error",
"expresion : sentencia_while ELSE error",
"termino : termino MULT factor",
"termino : termino DIV factor",
"termino : factor",
"termino : termino MULT error",
"termino : termino DIV error",
"factor : ID",
"factor : cte",
"factor : llamado_func",
"cte : ENTERO",
"cte : FLOAT",
"cte : RESTA ENTERO",
"cte : RESTA FLOAT",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if : IF PARENT_A condicion PARENT_C error",
"sentencia_if : IF PARENT_A condicion error",
"sentencia_if : IF PARENT_A error",
"sentencia_if : IF error",
"condicion : expresion comparacion expresion",
"condicion : expresion comparacion error",
"condicion : expresion error",
"comparacion : IGUAL",
"comparacion : MAYOR",
"comparacion : MENOR",
"comparacion : MENORIGUAL",
"comparacion : MAYORIGUAL",
"bloque_ejecutable :",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable PUNTOCOMA",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"sentencia_out : OUT PARENT_A CADENA PARENT_C",
"sentencia_out : OUT PARENT_A CADENA error",
"sentencia_out : OUT PARENT_A error",
"sentencia_out : OUT error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN sentencia_ejecutable",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when : WHEN PARENT_A condicion error",
"sentencia_when : WHEN PARENT_A error",
"sentencia_when : WHEN error",
"sentencia_while : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion error",
"sentencia_while : WHILE PARENT_A error",
"sentencia_while : WHILE error",
"bloque_break_continue :",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue PUNTOCOMA",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue",
"ejecutables_break_continue : asignacion",
"ejecutables_break_continue : sentencia_if_break",
"ejecutables_break_continue : sentencia_out",
"ejecutables_break_continue : sentencia_when_break",
"ejecutables_break_continue : sentencia_while",
"ejecutables_break_continue : sentencia_for",
"ejecutables_break_continue : CONTINUE tag",
"ejecutables_break_continue : BREAK",
"ejecutables_break_continue : BREAK cte",
"tag :",
"tag : DOSPUNTOS ID",
"tag : DOSPUNTOS error",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN ejecutables_break_continue",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_break : WHEN PARENT_A condicion error",
"sentencia_when_break : WHEN PARENT_A error",
"sentencia_when_break : WHEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion error",
"sentencia_if_break : IF PARENT_A error",
"sentencia_if_break : IF error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C ejecutables_break_continue",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C ejecutables_break_continue",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A error",
"sentencia_for : ID DOSPUNTOS FOR error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA error",
"sentencia_for : FOR PARENT_A asignacion error",
"sentencia_for : FOR PARENT_A error",
"sentencia_for : FOR error",
"param_real : cte",
"param_real : ID",
"llamado_func : ID PARENT_A param_real COMA param_real PARENT_C",
"llamado_func : ID PARENT_A param_real PARENT_C",
"llamado_func : ID PARENT_A PARENT_C",
"llamado_func : ID PARENT_A param_real COMA param_real error",
"llamado_func : ID PARENT_A param_real error",
"llamado_func : ID PARENT_A error",
"llamado_func : ID PARENT_A param_real COMA error",
};

//#line 1340 "gramatica.y"
private NodoControl raiz;
private Map<String,ArbolSintactico> funciones = new HashMap<String,ArbolSintactico>();
private static HashMap<Integer,ArrayList<String>> erroresSintacticos = new HashMap<Integer,ArrayList<String>>();
public String ambitoActual = "Global";
private List<String> tipoActual = new ArrayList<String>();


void yyerror(String mensaje){
        if (erroresSintacticos.get(AnalizadorLexico.getLineaAct())== null){
                ArrayList<String> mnsj = new ArrayList<String>();
                mnsj.add(mensaje); 
                erroresSintacticos.put(AnalizadorLexico.getLineaAct(), mnsj);
        }
        else{
                erroresSintacticos.get(AnalizadorLexico.getLineaAct()).add(mensaje);
        }
}

static HashMap<Integer,ArrayList<String>> getErroresSintacticos(){
        return erroresSintacticos;
}
void chequearRangoI32(String sval){
  String s = "2147483647";
  long l = Long.valueOf(s);
  if(Long.valueOf(sval) > l){
    yyerror("La constante esta fuera de rango");
  }
}

void chequearRangoI32Neg(String sval){
       String s = "2147483648";
        long l = Long.valueOf(s);
        if(Long.valueOf(sval) > l){
                yyerror("La constante esta fuera de rango");
  } 
}

int yylex() throws IOException{
        Token t = AnalizadorLexico.getToken();
        this.yylval = new ParserVal(t.getLexema());
        //if(t.getId() != -1){
        //  System.out.println("Id: " + t.getId()+" Lexema: " + t.getLexema());
        //}else
        //  System.out.println("TERMINO LA EJECUCION");
        return t.getId();
}
public NodoControl getRaiz(){
	return raiz;
}
public Map<String,ArbolSintactico> getFuncion(){
        return funciones;
}

void actualizarAmbito(String lex, String amb){
        TablaSimbolos.addAtributo(lex,"Ambito",amb);
}
public String getTipoActual(){
        if(!this.tipoActual.isEmpty()){
                return (this.tipoActual.get(tipoActual.size()-1));
        }
        return null;
}
public void cambiarTipoActual(String f){
        tipoActual.add(f);
}
public void removeTipoActual(){
        if(!this.tipoActual.isEmpty()){
                this.tipoActual.remove(tipoActual.size()-1);
        }
}
public String buscarAmbito(String ambitoActual,String lexema){
        String ambito = ambitoActual;
        while(!TablaSimbolos.existeSimbolo(lexema+":"+ambito)){
                if(ambito.equals("Global")){
                        yyerror("La variable " + lexema + " no se encuentra declarada en el ambito " + ambitoActual);
                        ambito = "";
                        break;
                }else{
                        char [] a = ambito.toCharArray();
                        for (int i = a.length;i>=0;i--){
                                if(a[i-1] == ':'){
                                        ambito = ambito.substring(0,i-1);
                                        break;
                                }
                        }
                }
        }
        return ambito;
}
//#line 1376 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse() throws IOException
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 22 "gramatica.y"
{
                                                                raiz = new NodoControl("PROGRAMA",(ArbolSintactico)val_peek(1));  
                                                                TablaSimbolos.removeAtributo(val_peek(3).sval);
                                                        }
break;
case 2:
//#line 27 "gramatica.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba }");}
break;
case 3:
//#line 30 "gramatica.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba {");}
break;
case 4:
//#line 33 "gramatica.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba el nombre del programa");}
break;
case 6:
//#line 39 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 7:
//#line 40 "gramatica.y"
{
                                                        yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                                                        }
break;
case 8:
//#line 43 "gramatica.y"
{
                                yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba ;");
                        }
break;
case 9:
//#line 48 "gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa");}
break;
case 10:
//#line 49 "gramatica.y"
{yyval = val_peek(0);}
break;
case 12:
//#line 52 "gramatica.y"
{funciones.put((String)((ArbolSintactico)val_peek(0)).getLex(),(ArbolSintactico)val_peek(0));}
break;
case 14:
//#line 55 "gramatica.y"
{
            yyval = new NodoHoja("Entero");
            ((NodoHoja)yyval).setTipo("Entero");
           }
break;
case 15:
//#line 59 "gramatica.y"
{
            yyval = new NodoHoja("Float");
            ((NodoHoja)yyval).setTipo("Float");
           }
break;
case 16:
//#line 64 "gramatica.y"
{  System.out.println("Declaracion de datos");
                                        for (String s : ((NodoTipos)val_peek(0)).getList()){
                                                String ambito = ambitoActual;
                                                while(TablaSimbolos.existeSimbolo(s+":"+ambito)){
                                                        if(ambito.equals("Global")){
                                                                yyerror("La variable " + s + " ya se encuentra declarada en el ambito " + ambitoActual);
                                                                ambito = "";
                                                                break;
                                                        }else{
                                                                char [] a = ambito.toCharArray();
                                                                for (int i = a.length;i>=0;i--){
                                                                        if(a[i-1] == ':'){
                                                                        ambito = ambito.substring(0,i-1);
                                                                        break;
                                                                }
                                                        }
                                                }
                                        }  
                                        if(ambito.equals(ambitoActual)){
                                                TablaSimbolos.addNuevoSimbolo(s+":"+ambito);
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Id",TablaSimbolos.getAtributo(s,"Id"));
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Tipo",((ArbolSintactico) val_peek(1)).getTipo());
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Linea",AnalizadorLexico.getLineaAct());
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Uso","Variable");
                                                TablaSimbolos.removeAtributo(s);
                                        }
                                        

                                        }
                                        yyval = val_peek(0);
                                }
break;
case 17:
//#line 95 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("se esperaba lista de identificadores entre comas");}
break;
case 18:
//#line 98 "gramatica.y"
{
                            yyval=val_peek(2);
                            ((NodoTipos)yyval).add((String)val_peek(0).sval);
                            }
break;
case 19:
//#line 102 "gramatica.y"
{
               yyval=new NodoTipos((String)val_peek(0).sval);
              }
break;
case 20:
//#line 106 "gramatica.y"
{       

                        if(!TablaSimbolos.existeSimbolo(val_peek(7).sval+ ":" + ambitoActual)){
                                yyval = new ParserVal(val_peek(7).sval);
                                TablaSimbolos.addNuevoSimbolo(val_peek(7).sval+ ":" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(7).sval+ ":" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(7).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(7).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(7).sval);
                                TablaSimbolos.addAtributo(val_peek(7).sval+":"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addAtributo(val_peek(7).sval +":"+ambitoActual,"Parametro1",((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual +":"+ val_peek(7).sval);
                                TablaSimbolos.addAtributo(val_peek(7).sval +":"+ambitoActual,"Parametro2",((ArbolSintactico)val_peek(3)).getLex()+ ":"+ ambitoActual +":"+ val_peek(7).sval);
                                ambitoActual += ":"+val_peek(7).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                /*Agrego los parametros en la tabla de simbolos*/
                                TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual);
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(5)).getTipo());
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual,"Uso","Variable");
                                TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual);
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Uso","Variable");

                        }else{
                                yyerror("La funcion " + val_peek(7).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += ":"+val_peek(7).sval;
                        }
                        
}
break;
case 21:
//#line 133 "gramatica.y"
{
                        if(!TablaSimbolos.existeSimbolo(val_peek(5).sval+ ":" + ambitoActual)){
                                yyval = new ParserVal(val_peek(5).sval);
                                TablaSimbolos.addNuevoSimbolo(val_peek(5).sval+ ":" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(5).sval+ ":" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(5).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(5).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(5).sval);
                                TablaSimbolos.addAtributo(val_peek(5).sval+":"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addAtributo(val_peek(5).sval +":"+ambitoActual,"Parametro1", ((ArbolSintactico)val_peek(3)).getLex()+ ":"+ ambitoActual +":"+ val_peek(5).sval);
                                ambitoActual += ":"+val_peek(5).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                /*Agrego el parametro en la tabla de simbolos*/
                                TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual);
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Uso","Variable");

                        }else{
                                yyerror("La funcion " + val_peek(5).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += ":"+val_peek(5).sval;
                        }
                }
break;
case 22:
//#line 154 "gramatica.y"
{
                        if(!TablaSimbolos.existeSimbolo(val_peek(4).sval+ ":" + ambitoActual)){
                                yyval = new ParserVal(val_peek(4).sval);
                                TablaSimbolos.addNuevoSimbolo(val_peek(4).sval+ ":" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(4).sval+ ":" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(4).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(4).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(4).sval);
                                TablaSimbolos.addAtributo(val_peek(4).sval+":"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                ambitoActual += ":"+val_peek(4).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());

                        }else{
                                yyerror("La funcion " + val_peek(4).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += ":"+val_peek(4).sval;
                        }
                }
break;
case 23:
//#line 171 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 24:
//#line 174 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 25:
//#line 177 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 26:
//#line 180 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba :");}
break;
case 27:
//#line 183 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba :");}
break;
case 28:
//#line 186 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba :");}
break;
case 29:
//#line 189 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba )");}
break;
case 30:
//#line 192 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba )");}
break;
case 31:
//#line 195 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba )");}
break;
case 32:
//#line 198 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba otro parametro");}
break;
case 33:
//#line 201 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba (");}
break;
case 34:
//#line 204 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba un nombre de funcion");}
break;
case 35:
//#line 209 "gramatica.y"
{
                                System.out.println("Declaracion de Funcion");
                                yyval = new NodoControl("Funcion:"+val_peek(3).sval,(ArbolSintactico)val_peek(1));
                                char [] a = ambitoActual.toCharArray();
                                for (int i = a.length;i>=0;i--){
                                        if(a[i-1] == ':'){
                                                ambitoActual = ambitoActual.substring(0,i-1);
                                                break;
                                        }
                                }
                                removeTipoActual();
                        }
break;
case 36:
//#line 221 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 37:
//#line 223 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 38:
//#line 226 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 39:
//#line 227 "gramatica.y"
{yyval=new NodoComun("Sentencia_Funcion", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));}
break;
case 40:
//#line 228 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 41:
//#line 231 "gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa Datos");}
break;
case 42:
//#line 232 "gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa Funcion");}
break;
case 43:
//#line 233 "gramatica.y"
{yyval = val_peek(0);}
break;
case 44:
//#line 234 "gramatica.y"
{yyval = val_peek(0);}
break;
case 45:
//#line 235 "gramatica.y"
{yyval=val_peek(0);}
break;
case 46:
//#line 236 "gramatica.y"
{yyval=val_peek(0);}
break;
case 47:
//#line 237 "gramatica.y"
{yyval = val_peek(0);}
break;
case 48:
//#line 238 "gramatica.y"
{yyval = val_peek(0);}
break;
case 49:
//#line 239 "gramatica.y"
{yyval=val_peek(0);}
break;
case 50:
//#line 240 "gramatica.y"
{yyval=val_peek(0);}
break;
case 51:
//#line 241 "gramatica.y"
{yyval=val_peek(0);}
break;
case 52:
//#line 243 "gramatica.y"
{System.out.println("Sentencia IF");
                                yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(8),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(5)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));
                        }
break;
case 53:
//#line 246 "gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(6)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));}
break;
case 54:
//#line 248 "gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(7)),new NodoControl("else fun", (ArbolSintactico)val_peek(3))));}
break;
case 55:
//#line 251 "gramatica.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF FUN", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        }
break;
case 56:
//#line 254 "gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(6)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));}
break;
case 57:
//#line 257 "gramatica.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF FUN", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );}
break;
case 58:
//#line 259 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 59:
//#line 261 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 60:
//#line 263 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 61:
//#line 265 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 62:
//#line 267 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 63:
//#line 269 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 64:
//#line 271 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 65:
//#line 273 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 66:
//#line 275 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 67:
//#line 277 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 68:
//#line 280 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 69:
//#line 282 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 70:
//#line 284 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 71:
//#line 286 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 72:
//#line 288 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 73:
//#line 291 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 74:
//#line 293 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 75:
//#line 296 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 76:
//#line 298 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 77:
//#line 303 "gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 78:
//#line 306 "gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 79:
//#line 309 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 80:
//#line 311 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 81:
//#line 313 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 82:
//#line 315 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 83:
//#line 317 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion");}
break;
case 84:
//#line 319 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 85:
//#line 323 "gramatica.y"
{
                                yyval = new NodoComun("While con Etiqueta Funcion",new NodoControl("Etiqueta", new NodoHoja(val_peek(12).sval)) , new NodoComun("While", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                                System.out.println("Sentencia WHILE con etiqueta y con llaves");
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(12).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(12).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(12).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(12).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(12).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(12).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(12).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 86:
//#line 337 "gramatica.y"
{
                                System.out.println("Sentencia WHILE con etiqueta y sin llaves");
                                yyval = new NodoComun("While con Etiqueta Funcion",new NodoControl("Etiqueta", new NodoHoja(val_peek(10).sval)) , new NodoComun("While", (ArbolSintactico) val_peek(6), new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(10).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(10).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(10).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(10).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(10).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(10).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(10).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 87:
//#line 350 "gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 88:
//#line 353 "gramatica.y"
{
                    yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");
                }
break;
case 89:
//#line 357 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 90:
//#line 359 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 91:
//#line 361 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 92:
//#line 363 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 93:
//#line 365 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 94:
//#line 367 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 95:
//#line 369 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 96:
//#line 371 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 97:
//#line 373 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 98:
//#line 375 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 99:
//#line 377 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 100:
//#line 379 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 101:
//#line 381 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 102:
//#line 383 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 103:
//#line 385 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 104:
//#line 387 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 105:
//#line 389 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 106:
//#line 391 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 107:
//#line 397 "gramatica.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Asignacion FOR",(ArbolSintactico)val_peek(9),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1) ), new NodoHoja(val_peek(5).sval + val_peek(4).sval) )) ));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(13).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(13).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(13).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(13).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 108:
//#line 411 "gramatica.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Asignacion FOR",(ArbolSintactico)val_peek(9),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1) ), new NodoHoja(val_peek(5).sval + val_peek(4).sval) )) ));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(13).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(13).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(13).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(13).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 109:
//#line 425 "gramatica.y"
{
                                System.out.println("Sentencia FOR");
                                 yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Asignacion FOR",(ArbolSintactico)val_peek(7),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0) ), new NodoHoja(val_peek(3).sval + val_peek(2).sval) )) ));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(11).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(11).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(11).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(11).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 110:
//#line 439 "gramatica.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR",(ArbolSintactico)val_peek(7),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0) ), new NodoHoja(val_peek(3).sval + val_peek(2).sval) )) ));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(11).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(11).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(11).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(11).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 111:
//#line 453 "gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",(ArbolSintactico)val_peek(9),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1) ), new NodoHoja(val_peek(5).sval + val_peek(4).sval) )) );
                                                                                             }
break;
case 112:
//#line 456 "gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",(ArbolSintactico)val_peek(9),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1) ), new NodoHoja(val_peek(5).sval + val_peek(4).sval) )) );
                                                                                             }
break;
case 113:
//#line 459 "gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                     yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",(ArbolSintactico)val_peek(7),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0) ), new NodoHoja(val_peek(3).sval + val_peek(2).sval) )) );
                                                                                  }
break;
case 114:
//#line 462 "gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                     yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",(ArbolSintactico)val_peek(7),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0) ), new NodoHoja(val_peek(3).sval + val_peek(2).sval) )) );
                                                                                  }
break;
case 115:
//#line 465 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 116:
//#line 467 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 117:
//#line 470 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 118:
//#line 472 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 119:
//#line 475 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 120:
//#line 477 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 121:
//#line 480 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una constante");}
break;
case 122:
//#line 482 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una constante");}
break;
case 123:
//#line 485 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 124:
//#line 488 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; despues de la condicion");}
break;
case 125:
//#line 491 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion");}
break;
case 126:
//#line 494 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; despues de la asignacion");}
break;
case 127:
//#line 497 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba asignacion");}
break;
case 128:
//#line 500 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 129:
//#line 503 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 130:
//#line 505 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 131:
//#line 508 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 132:
//#line 510 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 133:
//#line 513 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 134:
//#line 515 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 135:
//#line 518 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una constante");}
break;
case 136:
//#line 520 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una constante");}
break;
case 137:
//#line 523 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 138:
//#line 526 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; despues de la condicion");}
break;
case 139:
//#line 529 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion");}
break;
case 140:
//#line 532 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; despues de la asignacion");}
break;
case 141:
//#line 535 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba asignacion");}
break;
case 142:
//#line 538 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 143:
//#line 541 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 144:
//#line 542 "gramatica.y"
{yyval=new NodoComun("Sentencia_Funcion_Break", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));}
break;
case 145:
//#line 543 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 146:
//#line 546 "gramatica.y"
{yyval = val_peek(0);}
break;
case 147:
//#line 547 "gramatica.y"
{yyval = val_peek(0);}
break;
case 148:
//#line 548 "gramatica.y"
{yyval = val_peek(0);}
break;
case 149:
//#line 549 "gramatica.y"
{yyval = val_peek(0);}
break;
case 150:
//#line 550 "gramatica.y"
{yyval = val_peek(0);}
break;
case 151:
//#line 551 "gramatica.y"
{yyval = val_peek(0);}
break;
case 152:
//#line 552 "gramatica.y"
{yyval = new NodoControl("Continue",(ArbolSintactico)val_peek(0));}
break;
case 153:
//#line 553 "gramatica.y"
{yyval = new NodoHoja("Break");}
break;
case 154:
//#line 554 "gramatica.y"
{yyval = new NodoControl("Break", new NodoHoja(val_peek(0).sval));}
break;
case 155:
//#line 555 "gramatica.y"
{yyval=val_peek(0);}
break;
case 156:
//#line 558 "gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 157:
//#line 561 "gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 158:
//#line 564 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 159:
//#line 566 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 160:
//#line 568 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 161:
//#line 570 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 162:
//#line 572 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion");}
break;
case 163:
//#line 574 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 164:
//#line 578 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 165:
//#line 583 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 166:
//#line 588 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 167:
//#line 593 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 168:
//#line 598 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 169:
//#line 603 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 170:
//#line 607 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 171:
//#line 609 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 172:
//#line 611 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 173:
//#line 613 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 174:
//#line 615 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 175:
//#line 618 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 176:
//#line 620 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 177:
//#line 622 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 178:
//#line 624 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 179:
//#line 626 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 180:
//#line 629 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 181:
//#line 631 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 182:
//#line 634 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 183:
//#line 636 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 184:
//#line 639 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 185:
//#line 641 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 186:
//#line 643 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 187:
//#line 645 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 188:
//#line 647 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 189:
//#line 650 "gramatica.y"
{yyval = new NodoControl("Retorno", (ArbolSintactico)val_peek(1));
                                                String tipoRet = ((ArbolSintactico)val_peek(1)).getTipo();
                                                if(!ambitoActual.equals("Global")){
                                                        String tipoFun = getTipoActual();
                                                        if(!tipoRet.equals(tipoFun)){
                                                                yyerror("El retorno debe ser del mismo tipo que el retorno de la funcion.");
                                                        }
                                                }else{
                                                        yyerror("El retorno puede estar solo dentro de una funcion.");
                                                }
                                        }
break;
case 190:
//#line 661 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba )");}
break;
case 191:
//#line 663 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion");}
break;
case 192:
//#line 665 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion entre ( )");}
break;
case 193:
//#line 669 "gramatica.y"
{    yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(1)).getTipo());
}
break;
case 194:
//#line 672 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba identificador");}
break;
case 195:
//#line 676 "gramatica.y"
{System.out.println("Declaracion de Constante/s");}
break;
case 198:
//#line 682 "gramatica.y"
{ 
                                String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                                if(ambito.equals(ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(2).sval+":"+ambito);
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambito,"Id",TablaSimbolos.getAtributo(val_peek(2).sval,"Id"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambito,"Tipo",TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambito,"Linea",AnalizadorLexico.getLineaAct());
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambito,"Uso","Variable");
                                }
                        }
break;
case 199:
//#line 692 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba una constante");}
break;
case 200:
//#line 694 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba una asignacion =:");}
break;
case 201:
//#line 697 "gramatica.y"
{yyval = val_peek(0);}
break;
case 202:
//#line 698 "gramatica.y"
{yyval = val_peek(0); }
break;
case 203:
//#line 699 "gramatica.y"
{yyval = val_peek(0);}
break;
case 204:
//#line 700 "gramatica.y"
{yyval = val_peek(0);}
break;
case 205:
//#line 701 "gramatica.y"
{yyval = val_peek(0);}
break;
case 206:
//#line 702 "gramatica.y"
{yyval = val_peek(0);}
break;
case 207:
//#line 703 "gramatica.y"
{yyval=val_peek(0);}
break;
case 208:
//#line 705 "gramatica.y"
{
                                        System.out.println("Asignacion");
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,new NodoHoja(val_peek(2).sval), (ArbolSintactico) val_peek(0));
                                        String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                                        String tipoS1 = "";
                                        if(!ambito.equals("")){
                                                if(((String)TablaSimbolos.getAtributo(val_peek(2).sval+":"+ambito, "Uso")).equals("Variable")){
                                                        tipoS1 = (String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo");
                                                        ((ArbolSintactico)yyval).setTipo(tipoS1);
                                                }
                                                else {
                                                        yyerror(val_peek(2).sval+" no es una variable.");
                                                }
                                        }
                                        String tipoS3 = ((ArbolSintactico)val_peek(0)).getTipo();
                                        if(!(tipoS1.equals(tipoS3))){
                                                yyerror("No se puede realizar una asignacion con tipos diferentes.");
                                        }
                                        
                                }
break;
case 209:
//#line 725 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba =:");}
break;
case 210:
//#line 727 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion");}
break;
case 211:
//#line 730 "gramatica.y"
{     
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));

                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una suma con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                        
                                 }
break;
case 212:
//#line 740 "gramatica.y"
{yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una resta con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                 }
break;
case 213:
//#line 747 "gramatica.y"
{yyval = val_peek(0);}
break;
case 214:
//#line 748 "gramatica.y"
{yyval = new NodoComun("For como expresion",(ArbolSintactico)val_peek(2),new NodoHoja(val_peek(0).sval));
                                   ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));     
                                        }
break;
case 215:
//#line 751 "gramatica.y"
{    yyval = new NodoComun("While como expresion",(ArbolSintactico)val_peek(2),new NodoHoja(val_peek(0).sval));
                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo")); 
                                        }
break;
case 216:
//#line 754 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un termino");}
break;
case 217:
//#line 756 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un termino");}
break;
case 218:
//#line 758 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un constante");}
break;
case 219:
//#line 760 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un constante");}
break;
case 220:
//#line 764 "gramatica.y"
{ 
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una multiplicacion con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 221:
//#line 773 "gramatica.y"
{
                                        yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una division con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 222:
//#line 782 "gramatica.y"
{
                  yyval = val_peek(0);
                 }
break;
case 223:
//#line 785 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un factor");}
break;
case 224:
//#line 787 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un factor");}
break;
case 225:
//#line 790 "gramatica.y"
{
                yyval = new NodoHoja(val_peek(0).sval);
                String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                if((!ambito.equals(""))){
                        if(((String)TablaSimbolos.getAtributo(val_peek(0).sval+":"+ambito, "Uso")).equals("Variable")){
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +":"+ ambito,"Tipo"));
                        }
                        else{
                                yyerror(val_peek(0).sval+" no es una variable");
                        }
                }
           }
break;
case 226:
//#line 803 "gramatica.y"
{
                yyval = new NodoHoja(val_peek(0).sval);
                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
              }
break;
case 227:
//#line 808 "gramatica.y"
{yyval=val_peek(0);}
break;
case 228:
//#line 810 "gramatica.y"
{  chequearRangoI32(val_peek(0).sval);}
break;
case 229:
//#line 811 "gramatica.y"
{}
break;
case 232:
//#line 816 "gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                                                                                                                                }
break;
case 233:
//#line 820 "gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");}
break;
case 234:
//#line 823 "gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                                                                                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");}
break;
case 235:
//#line 825 "gramatica.y"
{yyval = new NodoComun("IF",new NodoControl("Condicion", (ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                                                                                        System.out.println("Sentencia IF sin corchetes y sin else");}
break;
case 236:
//#line 827 "gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF con corchetes y else");}
break;
case 237:
//#line 830 "gramatica.y"
{
                                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                                        System.out.println("Sentencia IF con corchetes y sin else");}
break;
case 238:
//#line 833 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 239:
//#line 835 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 240:
//#line 837 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 241:
//#line 839 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 242:
//#line 841 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 243:
//#line 844 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 244:
//#line 846 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 245:
//#line 848 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 246:
//#line 850 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 247:
//#line 852 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 248:
//#line 855 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 249:
//#line 857 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 250:
//#line 860 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 251:
//#line 862 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 252:
//#line 865 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 253:
//#line 867 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 254:
//#line 869 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 255:
//#line 871 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 256:
//#line 873 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 257:
//#line 879 "gramatica.y"
{
                        yyval= new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                        if (!((((ArbolSintactico)val_peek(2)).getTipo()).equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                               yyerror("error en la comparacion entre expresiones de distintos tipos");
                        }
                }
break;
case 258:
//#line 885 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba otra expresion para comparar.");}
break;
case 259:
//#line 887 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un tipo de comparacion.");}
break;
case 260:
//#line 890 "gramatica.y"
{yyval= val_peek(0);}
break;
case 261:
//#line 891 "gramatica.y"
{yyval= val_peek(0);}
break;
case 262:
//#line 892 "gramatica.y"
{yyval= val_peek(0);}
break;
case 263:
//#line 893 "gramatica.y"
{yyval= val_peek(0);}
break;
case 264:
//#line 894 "gramatica.y"
{yyval= val_peek(0);}
break;
case 265:
//#line 896 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 266:
//#line 897 "gramatica.y"
{
                                                                yyval=new NodoComun("Bloque Ejecutable", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                                                                }
break;
case 267:
//#line 900 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 268:
//#line 903 "gramatica.y"
{
                        yyval = new NodoControl(val_peek(3).sval, (ArbolSintactico) new NodoHoja(val_peek(1).sval));
                        System.out.println("Sentencia OUT");}
break;
case 269:
//#line 906 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 270:
//#line 908 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una CADENA");}
break;
case 271:
//#line 910 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 272:
//#line 913 "gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 273:
//#line 916 "gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 274:
//#line 919 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } en el when");}
break;
case 275:
//#line 921 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { en el when");}
break;
case 276:
//#line 923 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then en el when");}
break;
case 277:
//#line 925 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) en el when");}
break;
case 278:
//#line 927 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion en el when");}
break;
case 279:
//#line 929 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( en el when");}
break;
case 280:
//#line 933 "gramatica.y"
{
                                yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(12).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(12).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(12).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(12).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(12).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(12).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(12).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(12).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        
                                System.out.println("Sentencia WHILE con etiqueta y con llaves");
                        }
break;
case 281:
//#line 947 "gramatica.y"
{
                        yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(10).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );
                        if(!TablaSimbolos.existeSimbolo(val_peek(10).sval+ ":" + ambitoActual)){
                                TablaSimbolos.addNuevoSimbolo(val_peek(10).sval+ ":" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(10).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                TablaSimbolos.addAtributo(val_peek(10).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(10).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(10).sval);
                        }else{
                                yyerror("La etiqueta '" + val_peek(10).sval + "' ya existe en el ambito " + ambitoActual);
                        }
                        
                        System.out.println("Sentencia WHILE con etiqueta y sin llaves");}
break;
case 282:
//#line 959 "gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 283:
//#line 962 "gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");}
break;
case 284:
//#line 965 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 285:
//#line 967 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 286:
//#line 969 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 287:
//#line 971 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 288:
//#line 973 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 289:
//#line 975 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 290:
//#line 977 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 291:
//#line 979 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 292:
//#line 981 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 293:
//#line 984 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 294:
//#line 985 "gramatica.y"
{
                yyval = new NodoComun("Bloque Break con Continue",(ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                }
break;
case 295:
//#line 988 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba ;");}
break;
case 296:
//#line 992 "gramatica.y"
{yyval = val_peek(0);}
break;
case 297:
//#line 993 "gramatica.y"
{yyval = val_peek(0);}
break;
case 298:
//#line 994 "gramatica.y"
{yyval = val_peek(0);}
break;
case 299:
//#line 995 "gramatica.y"
{yyval = val_peek(0);}
break;
case 300:
//#line 996 "gramatica.y"
{yyval = val_peek(0);}
break;
case 301:
//#line 997 "gramatica.y"
{yyval = val_peek(0);}
break;
case 302:
//#line 998 "gramatica.y"
{yyval = new NodoControl("Continue",(ArbolSintactico)val_peek(0));}
break;
case 303:
//#line 999 "gramatica.y"
{yyval = new NodoHoja("Break");}
break;
case 304:
//#line 1000 "gramatica.y"
{yyval = new NodoControl("Break", new NodoHoja(val_peek(0).sval));}
break;
case 305:
//#line 1002 "gramatica.y"
{yyval = new NodoHoja("Fin");}
break;
case 306:
//#line 1003 "gramatica.y"
{yyval = new NodoControl("Tag", new NodoHoja(val_peek(0).sval) );}
break;
case 307:
//#line 1004 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un identificador");}
break;
case 308:
//#line 1008 "gramatica.y"
{System.out.println("Sentencia WHEN");}
break;
case 309:
//#line 1009 "gramatica.y"
{System.out.println("Sentencia WHEN");}
break;
case 310:
//#line 1010 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } en el when");}
break;
case 311:
//#line 1012 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { en el when");}
break;
case 312:
//#line 1014 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then en el when");}
break;
case 313:
//#line 1016 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) en el when");}
break;
case 314:
//#line 1018 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion en el when");}
break;
case 315:
//#line 1020 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( en el when");}
break;
case 316:
//#line 1024 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 317:
//#line 1029 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 318:
//#line 1034 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 319:
//#line 1039 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 320:
//#line 1044 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 321:
//#line 1049 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 322:
//#line 1053 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 323:
//#line 1055 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 324:
//#line 1057 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 325:
//#line 1059 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 326:
//#line 1061 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 327:
//#line 1064 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 328:
//#line 1066 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 329:
//#line 1068 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 330:
//#line 1070 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 331:
//#line 1072 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 332:
//#line 1075 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 333:
//#line 1077 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 334:
//#line 1080 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 335:
//#line 1082 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 336:
//#line 1085 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 337:
//#line 1087 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 338:
//#line 1089 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 339:
//#line 1091 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 340:
//#line 1093 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 341:
//#line 1098 "gramatica.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",
                                                        new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),
                                                        new NodoComun("FOR",new NodoComun("Asignacion FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)null),
                                                        new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",(ArbolSintactico)val_peek(7)),
                                                        new NodoComun("Cuerpo", 
                                                        new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1) ), 
                                                        new NodoHoja(val_peek(5).sval + val_peek(4).sval) )) ));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(13).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(13).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(13).sval);
                                }else{
                                        yyval = new NodoHoja("Error semantico");
                                        yyerror("La etiqueta '" + val_peek(13).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 342:
//#line 1119 "gramatica.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Asignacion FOR",(ArbolSintactico)val_peek(9),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1) ), new NodoHoja(val_peek(5).sval + val_peek(4).sval) )) ));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(13).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(13).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(13).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(13).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 343:
//#line 1133 "gramatica.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Asignacion FOR",(ArbolSintactico)val_peek(7),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0) ), new NodoHoja(val_peek(3).sval + val_peek(2).sval) )) ));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(11).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(11).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(11).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(11).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 344:
//#line 1147 "gramatica.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR",(ArbolSintactico)val_peek(7),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0) ), new NodoHoja(val_peek(3).sval + val_peek(2).sval) )) ));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(11).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(11).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(11).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(11).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 345:
//#line 1162 "gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",(ArbolSintactico)val_peek(9),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1) ), new NodoHoja(val_peek(5).sval + val_peek(4).sval) )) );
                                                                                             }
break;
case 346:
//#line 1165 "gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",(ArbolSintactico)val_peek(9),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1) ), new NodoHoja(val_peek(5).sval + val_peek(4).sval) )) );
                                                                                             }
break;
case 347:
//#line 1168 "gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",(ArbolSintactico)val_peek(7),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0) ), new NodoHoja(val_peek(3).sval + val_peek(2).sval) )) );
                                                                                  }
break;
case 348:
//#line 1171 "gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",(ArbolSintactico)val_peek(7),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0) ), new NodoHoja(val_peek(3).sval + val_peek(2).sval) )) );
                                                                                  }
break;
case 349:
//#line 1174 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 350:
//#line 1176 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 351:
//#line 1179 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 352:
//#line 1181 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 353:
//#line 1184 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 354:
//#line 1186 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 355:
//#line 1189 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 356:
//#line 1191 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 357:
//#line 1194 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 358:
//#line 1196 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la condicion");}
break;
case 359:
//#line 1198 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion");}
break;
case 360:
//#line 1200 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 361:
//#line 1202 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba asignacion");}
break;
case 362:
//#line 1204 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 363:
//#line 1206 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 364:
//#line 1208 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 365:
//#line 1211 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 366:
//#line 1213 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 367:
//#line 1216 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 368:
//#line 1218 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 369:
//#line 1221 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 370:
//#line 1223 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 371:
//#line 1226 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 372:
//#line 1228 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la condicion");}
break;
case 373:
//#line 1230 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion");}
break;
case 374:
//#line 1232 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 375:
//#line 1234 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba asignacion");}
break;
case 376:
//#line 1236 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 377:
//#line 1240 "gramatica.y"
{
                        yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                }
break;
case 378:
//#line 1245 "gramatica.y"
{yyval=new NodoHoja(val_peek(0).sval);
                        String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        if(!ambito.equals("")){
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +":"+ ambito,"Tipo"));
                        }
                     }
break;
case 379:
//#line 1252 "gramatica.y"
{
                                                        yyval=new NodoComun("llamado funcion",(ArbolSintactico)val_peek(3),(ArbolSintactico)val_peek(1));
                                                        String ambito = buscarAmbito(ambitoActual,val_peek(5).sval);
                                                        if (!ambito.equals("") ){
                                                                if( !TablaSimbolos.getAtributo(val_peek(5).sval+":"+ambito,"Uso").equals("Funcion") ){
                                                                        yyerror("La funcion "+val_peek(5).sval+" no fue declarada");
                                                                }else{
                                                                        String par1 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +":"+ ambito,"Parametro1");
                                                                        String par2 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +":"+ ambito,"Parametro2");
                                                                        if(par1 != null)
                                                                                if(par2 != null){
                                                                                        String tipoS3 = (String) ((ArbolSintactico) val_peek(3) ).getTipo();
                                                                                        if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") ) )){
                                                                                                String nombreS3 = ((ArbolSintactico) val_peek(3)).getLex();
                                                                                                yyerror("El tipo del parametro"+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                                                                        }
                                                                                        String tipoS5 = (String) ((ArbolSintactico) val_peek(1)).getTipo();
                                                                                        if( !(tipoS5.equals((String)TablaSimbolos.getAtributo(par2,"Tipo") ))){
                                                                                                String nombreS5 = ((ArbolSintactico) val_peek(1)).getLex();
                                                                                                yyerror("El tipo del parametro"+ nombreS5+" no coincide con el tipo declarado en la funcion.");
                                                                                        }
                                                                                }else{
                                                                                        yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                                }
                                                                        else{
                                                                                yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                        }
                                                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(5).sval +":"+ ambito,"Tipo"));
                                                                }
                                                        }
                                                }
break;
case 380:
//#line 1283 "gramatica.y"
{System.out.println("Llamado fun 1 parametro");
                yyval=new NodoComun("llamado funcion",(ArbolSintactico)val_peek(1),new NodoHoja("Un solo parametro"));
            String ambito = buscarAmbito(ambitoActual,val_peek(3).sval);
            if (!ambito.equals("")){
                if (!TablaSimbolos.getAtributo(val_peek(3).sval+":"+ambito,"Uso").equals("Funcion")){
                        yyerror("La funcion "+val_peek(3).sval+" no fue declarada");
                }else{
                        String par1 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +":"+ ambito,"Parametro1");
                        String par2 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +":"+ ambito,"Parametro2");
                        if(par2 ==null){
                                if(par1!=null){
                                        String tipoS3 = (String) ((ArbolSintactico) val_peek(1) ).getTipo();
                                        if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") )) ){
                                                String nombreS3 = ((ArbolSintactico) val_peek(1)).getLex();
                                                yyerror("El tipo del parametro"+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                        }
                                }else{
                                        yyerror("La funcion esta declarada sin parametros.");
                                }
                        }else{
                                yyerror("La funcion esta declarada con dos parametros.");
                        }
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(3).sval +":"+ ambito,"Tipo"));
                }
            }
        }
break;
case 381:
//#line 1309 "gramatica.y"
{yyval=new NodoHoja("llamado funcion sin parametros");
                String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                if (!ambito.equals("") ){
                        if (!TablaSimbolos.getAtributo(val_peek(2).sval+":"+ambito,"Uso").equals("Funcion")){
                                yyerror("La funcion "+val_peek(2).sval+" no fue declarada");
                                
                        }else{
                                String par1 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Parametro1");
                                String par2 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Parametro2");
                                if(par2 == null){
                                        if(par1 != null){
                                                yyerror("La funcion esta declarada con un parametro.");
                                        }
                                }else{
                                        yyerror("La funcion esta declarada con dos parametros.");
                                }
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                        }
                }       
        }
break;
case 382:
//#line 1329 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 383:
//#line 1331 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 384:
//#line 1333 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 385:
//#line 1335 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba otro parametro");}
break;
//#line 3826 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 * @throws IOException
 */
public void run() throws IOException
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
