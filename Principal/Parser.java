//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package Principal;
import java.io.IOException;
import AnalizadorLexico.AnalizadorLexico;
import AnalizadorLexico.Token;
import GeneracionCodigoIntermedio.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Stack;

//#line 29 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IF=257;
public final static short THEN=258;
public final static short ELSE=259;
public final static short END_IF=260;
public final static short OUT=261;
public final static short FUN=262;
public final static short RETURN=263;
public final static short BREAK=264;
public final static short WHEN=265;
public final static short WHILE=266;
public final static short FOR=267;
public final static short CONTINUE=268;
public final static short ID=269;
public final static short I32=270;
public final static short F32=271;
public final static short PUNTO=272;
public final static short PARENT_A=273;
public final static short PARENT_C=274;
public final static short COMILLA=275;
public final static short COMA=276;
public final static short DOSPUNTOS=277;
public final static short PUNTOCOMA=278;
public final static short IGUAL=279;
public final static short MAYOR=280;
public final static short MENOR=281;
public final static short MENORIGUAL=282;
public final static short MAYORIGUAL=283;
public final static short LLAVE_A=284;
public final static short LLAVE_C=285;
public final static short EXCL=286;
public final static short DIST=287;
public final static short ASIG=288;
public final static short CADENA=289;
public final static short COMENT=290;
public final static short CONST=291;
public final static short SUMA=292;
public final static short RESTA=293;
public final static short MULT=294;
public final static short DIV=295;
public final static short ENTERO=296;
public final static short FLOAT=297;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    1,    2,    2,    2,    3,    3,
    4,    4,    4,    4,   10,   10,    6,    6,   11,   11,
   12,   12,   12,   12,   12,   12,   12,   12,   12,   12,
   12,   12,   12,   12,   12,    7,    7,    7,   14,   14,
   14,   15,   15,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   18,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   20,   20,   20,
   20,   20,   26,   22,   22,   22,   22,   21,   21,   21,
   21,   21,   21,   28,   28,   28,   29,   29,   29,   29,
   29,   29,   29,   29,   29,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   23,   23,   23,   23,   13,   13,    8,   37,   37,   38,
   38,   38,    5,    5,    5,    5,    5,    5,   16,   16,
   16,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   42,   42,   42,   42,   42,   45,   45,   45,   35,   35,
   35,   35,   43,   43,   43,   44,   44,   44,   48,   48,
   48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
   48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
   48,   48,   48,   46,   46,   47,   47,   47,   47,   47,
   47,   39,   39,   39,   39,   39,   39,   39,   39,   39,
   39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
   39,   39,   39,   39,   39,   39,   24,   24,   24,   50,
   50,   50,   50,   50,   50,   49,   49,   49,   19,   19,
   19,   19,   25,   25,   25,   25,    9,    9,    9,    9,
    9,   27,   27,   27,   27,   27,   27,   27,   27,   30,
   30,   30,   30,   30,   30,   30,   30,   41,   41,   41,
   41,   41,   41,   51,   51,   51,   52,   52,   52,   52,
   52,   52,   52,   34,   34,   34,   53,   53,   53,   53,
   53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
   53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
   53,   31,   31,   31,   31,   31,   31,   31,   31,   31,
   31,   31,   31,   31,   31,   31,   31,   32,   32,   32,
   32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
   32,   32,   32,   40,   40,   40,   40,   40,   40,   40,
   40,   54,   54,   17,   17,   17,   17,   17,   17,   17,
};
final static short yylen[] = {                            2,
    4,    4,    4,    4,    1,    0,    3,    3,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    2,    3,    1,
    9,    7,    6,    9,    7,    6,    8,    6,    5,    7,
    5,    4,    6,    3,    2,    4,    4,    2,    0,    3,
    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,   11,   13,   13,    8,   13,    9,   13,   12,
   10,    9,    8,   12,   11,    9,    8,    7,    6,    5,
    4,    3,    2,   11,   10,   12,   11,    5,    3,    5,
    3,    2,    2,    4,    2,    4,    2,    4,    2,    4,
    2,    4,    4,    0,    3,    3,    1,    1,    1,    1,
    1,    2,    1,    2,    1,   11,   12,   12,    8,   13,
    9,   13,   12,   10,    9,    8,   12,   11,    9,    8,
    7,   12,   11,   11,   10,    6,    5,    4,    3,    2,
    4,    4,    3,    2,    2,    2,    2,    3,    1,    3,
    3,    2,    1,    1,    1,    1,    1,    1,    3,    2,
    3,    3,    3,    1,    3,    3,    3,    3,    3,    3,
    3,    3,    1,    3,    3,    1,    1,    1,    1,    1,
    2,    2,    4,    2,    4,    4,    2,    4,   12,   12,
   11,    8,   13,    9,   13,   12,   10,    9,    8,   12,
   11,    9,    8,    7,   11,   10,   12,   11,    6,    5,
    4,    3,    2,    0,    3,    1,    1,    1,    1,    1,
    2,   12,   12,   11,    8,   13,    9,   13,   12,   10,
    9,    8,   12,   11,    9,    8,    7,   11,   10,   12,
   11,    6,    5,    4,    3,    2,    3,    3,    2,    1,
    1,    1,    1,    1,    1,    0,    3,    2,    4,    4,
    3,    2,    6,    6,    3,    2,    5,    3,    5,    3,
    2,    9,    9,    8,    7,    6,    5,    4,    3,    8,
    8,    7,    6,    5,    4,    3,    2,    4,    2,    4,
    2,    4,    2,    0,    3,    2,    1,    1,    1,    1,
    1,    2,    1,    0,    2,    2,   12,   12,   11,    8,
   13,    9,   13,   12,   10,    9,    8,   12,   11,    9,
    8,    7,   11,   10,   12,   11,    6,    5,    4,    3,
    2,   14,   14,   14,   14,   13,   13,   12,   11,   10,
    9,    8,    7,    6,    5,    4,    3,   13,   13,   13,
   13,   12,   12,   11,   10,    9,    8,    7,    6,    5,
    4,    3,    2,    4,    2,    4,    2,    4,    2,    4,
    2,    1,    1,    6,    4,    3,    6,    4,    3,    5,
};
final static short yydefred[] = {                         0,
    0,    5,    0,    0,    6,    6,    6,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   15,   16,    4,
    0,    0,    9,   10,   11,   12,   13,   14,    0,    0,
  143,  148,  145,    0,    0,    0,    0,    0,    0,  144,
  146,  147,    3,    2,    1,  236,    0,  252,    0,   35,
    0,  256,    0,  277,    0,  353,    0,  150,    0,   83,
    0,    0,    0,  139,    8,    7,   18,   20,    0,   38,
   39,  261,    0,    0,    0,    0,  293,    0,    0,  284,
  287,  289,  291,  290,  279,  288,  283,  284,  281,  359,
  284,  355,  361,  284,  357,  235,    0,    0,  169,  170,
  168,    0,    0,    0,  167,    0,    0,    0,    0,  163,
  251,    0,   34,    0,  255,    0,  276,    0,  352,    0,
  369,  363,  366,  362,    0,  151,    0,  142,    0,    0,
    0,    0,  260,    6,  258,  269,    0,  337,    0,  321,
    0,    0,  292,    0,    0,    0,    0,  171,  172,  234,
    0,    0,    0,    0,  204,  206,  208,  210,  209,  177,
  207,  204,  174,  239,  240,  241,  242,  243,  244,  245,
    0,    0,    0,    0,    0,    0,    0,  250,  249,   32,
    0,    0,    0,    0,  275,    0,  351,    0,  368,  365,
    0,  141,  140,  138,   19,   37,    0,    0,   36,   42,
   43,   44,    0,   45,   46,   47,   48,   49,   50,   51,
   52,    0,    0,    0,    0,    0,    0,  268,    0,  336,
    0,  320,    0,  296,  295,  278,    0,  282,  280,  358,
  354,  360,  356,  233,    0,  203,    0,  211,    0,    0,
  157,    0,  158,    0,  238,    0,  164,  161,  165,  162,
  159,  155,  160,  156,   29,    0,  136,  135,   31,    0,
    0,    0,  274,    0,  350,    0,  370,    0,   73,    0,
  134,    0,   41,   40,   82,    0,    0,    0,    0,   94,
   97,   99,  101,  100,  105,   85,   98,   94,   87,   94,
   89,   94,   91,  259,  257,  267,    0,  335,    0,  319,
    0,  285,  232,  246,    0,  202,    0,  178,  176,    0,
  175,  173,   26,   23,   28,    0,   33,    0,  254,  253,
  273,    0,  349,    0,  367,  364,   72,    0,  133,    0,
   81,   39,   79,  130,    0,  104,  102,    0,    0,    0,
    0,  266,    0,  334,    0,  318,    0,    0,  227,    0,
  201,    0,  205,   25,   22,   30,    0,  272,    0,  348,
    0,   71,    0,  132,  131,    0,  129,    0,   84,    0,
   86,   92,   88,   93,   90,  265,    0,  333,    0,  317,
  284,    0,  222,    0,    0,  226,    0,  215,  200,    0,
   27,    0,  271,  270,  347,    0,   70,    0,   80,   78,
  128,    0,   96,   95,  264,    0,  332,    0,    0,  312,
    0,  221,    0,  217,  247,  225,  246,    0,  199,  204,
    0,   24,   21,  346,    0,   69,   39,    0,  127,    0,
  263,  262,  331,    0,  307,    0,  311,    0,  300,  220,
  246,    0,    0,  229,    0,    0,  194,    0,  345,    0,
    0,   68,    0,  126,   94,    0,  330,    0,  306,    0,
  302,  310,  284,    0,    0,  231,    0,  224,    0,  228,
  214,  189,    0,  193,    0,  182,  344,    0,    0,   63,
    0,   67,    0,   56,    0,  121,    0,  329,    0,  305,
  284,    0,    0,  314,    0,  219,    0,  230,  213,  223,
  212,  188,    0,  184,  192,  204,    0,  342,    0,  343,
    0,   62,    0,   58,    0,   66,   39,    0,  116,    0,
  120,    0,  109,  328,    0,    0,    0,  316,    0,  309,
    0,  313,  299,  218,  216,  187,  204,    0,    0,  196,
    0,  341,  338,  340,  339,   61,   39,    0,    0,    0,
   75,    0,  115,    0,  111,  119,   94,    0,  326,    0,
  327,    0,  304,    0,  315,  298,  308,  297,    0,  198,
    0,  191,    0,  195,  181,    0,   77,    0,    0,   65,
    0,   74,   53,  114,   94,    0,    0,  125,    0,  325,
  322,  324,  323,  303,  301,  186,    0,  197,  180,  190,
  179,   60,    0,   76,    0,   64,    0,    0,  123,    0,
  118,    0,  124,  106,  185,  183,   59,   57,   54,   55,
  113,    0,  122,  107,  117,  108,  112,  110,
};
final static short yydgoto[] = {                          3,
    4,    8,   22,   23,   24,  200,  201,  202,   28,   29,
   69,   30,  183,  132,  203,   81,  101,  206,   82,  208,
  283,  284,  285,  102,  212,   35,   36,  338,  370,   37,
   38,   39,  287,  143,  105,  106,   63,   64,   40,   83,
   84,  107,  108,  109,  110,  239,  310,  161,  348,  173,
  144,  227,   86,  125,
};
final static short yysindex[] = {                      -223,
 -266,    0,    0, -172,    0,    0,    0, 1082, 1109, 1032,
  192,  195,  -89,  372,  445,  454,   99,    0,    0,    0,
 -237, -231,    0,    0,    0,    0,    0,    0,  -12,  -87,
    0,    0,    0,    2,  157, 1786,  570, 1533, 1547,    0,
    0,    0,    0,    0,    0,    0, -186,    0, -225,    0,
  457,    0, -131,    0, -178,    0,   31,    0, -147,    0,
 -153, -196, -197,    0,    0,    0,    0,    0, -191,    0,
    0,    0, 1049,  463,  469,  470,    0, -187, -190,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -169,  514,    0,    0,
    0,  107, 1799, 1810,    0,  565,  159, -136,  -91,    0,
    0,  151,    0,  407,    0,  621,    0,  252,    0, -135,
    0,    0,    0,    0,   86,    0,  588,    0, -162, -237,
  -86,  606,    0,    0,    0,    0,  -14,    0,   98,    0,
   30,  141,    0, 1641, 1251, 1265, 1285,    0,    0,    0,
  337,  483,  596, -111,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -97,  -95,  320,  -77,   60, -109,   48,    0,    0,    0,
 -148,  152,  325,  123,    0, -123,    0,  183,    0,    0,
  228,    0,    0,    0,    0,    0,  494,  498,    0,    0,
    0,    0,  -75,    0,    0,    0,    0,    0,    0,    0,
    0,  398, 1734, 1747, 1760, 1773, 1065,    0,  276,    0,
  -99,    0,  283,    0,    0,    0,  -68,    0,    0,    0,
    0,    0,    0,    0, 1702,    0,  342,    0,  885, 1367,
    0,  159,    0,  159,    0,  588,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  510,    0,    0,    0,  -92,
  534,  328,    0,  501,    0,  -28,    0,  336,    0,  393,
    0,  448,    0,    0,    0,  869,  504,  596, -187,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -83,    0,  267,    0,
  564,    0,    0,    0,  -27,    0,  356,    0,    0,  -61,
    0,    0,    0,    0,    0,  544,    0,  369,    0,    0,
    0,  246,    0,  289,    0,    0,    0,  376,    0,  235,
    0,    0,    0,    0,  466,    0,    0, 1561, 1575, 1149,
 1163,    0,  513,    0,  -13,    0, 1595, 1429,    0,  639,
    0,  585,    0,    0,    0,    0,  -15,    0,  395,    0,
  603,    0,  665,    0,    0,  906,    0,  396,    0,   -7,
    0,    0,    0,    0,    0,    0,  313,    0,  362,    0,
    0,   11,    0,  656,  -32,    0, 1709,    0,    0, 1658,
    0,  594,    0,    0,    0,  482,    0,  923,    0,    0,
    0,  672,    0,    0,    0,  411,    0,  702, 1299,    0,
  708,    0, 1723,    0,    0,    0,    0,   37,    0,    0,
   46,    0,    0,    0,   17,    0,    0,   69,    0, 1481,
    0,    0,    0,  516,    0,  714,    0, 1609,    0,    0,
    0,   72, 1436,    0,   62, 1384,    0,  731,    0, -217,
  939,    0,  821,    0,    0,   87,    0,   42,    0, 1628,
    0,    0,    0,  117, 1450,    0,  118,    0,  138,    0,
    0,    0,  846,    0, 1672,    0,    0,  351,  368,    0,
 -219,    0,  956,    0, 1183,    0,  864,    0,  -70,    0,
    0,  137, 1319,    0,  359,    0,  618,    0,    0,    0,
    0,    0, 1688,    0,    0,    0,  158,    0,  419,    0,
  420,    0,  972,    0,   10,    0,    0,  181,    0,  905,
    0, 1500,    0,    0,  468,  532, 1333,    0,  696,    0,
  716,    0,    0,    0,    0,    0,    0,  208, 1398,    0,
  738,    0,    0,    0,    0,    0,    0,  226,  770,  988,
    0,  764,    0, 1514,    0,    0,    0,  229,    0,  431,
    0,  432,    0,  766,    0,    0,    0,    0, 1415,    0,
  782,    0,  793,    0,    0, 1005,    0,  -65,   -6,    0,
  232,    0,    0,    0,    0,  256, 1197,    0,  807,    0,
    0,    0,    0,    0,    0,    0,  819,    0,    0,    0,
    0,    0,  831,    0,   18,    0,   32, 1217,    0,  844,
    0,  857,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  859,    0,    0,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  260,    0,    0,    0,    0,    0,  284,    0,
    0,    0,    0,    0,    0,    0,    0, 1231,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  668,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  736,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1129,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1353,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  791,    0,  829,    0,  435,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  288,  300,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1467,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,   22,  230,    0, -209,   44,   47,   59,    0,  -98,
    0,    0,   52, -322, -238,   -8,    4,    0,   -2,    0,
  108,  153,  257,  -44,   64,    0,   92, -273, -171,  357,
  458,  579,    0,   40,   -1,  -25,    0,  218,    0,   13,
   53,  767,  -69,   -4,  -33, -157, -100,    0, -335, -107,
  -64,   12,    0,  175,
};
final static int YYTABLESIZE=2094;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         31,
   31,   31,  160,  163,  240,   33,   33,   33,  184,  366,
  118,   32,   32,   32,  339,  182,  340,    5,  341,  116,
   41,   41,   41,  145,   65,  305,  146,    9,   10,  147,
  111,   62,    1,  158,  158,  127,  512,  333,  477,  513,
  514,  286,  289,  291,  293,    2,   66,   85,   89,   92,
   95,   25,   25,   25,   26,   26,   26,  124,  515,  128,
   42,   42,   42,  112,   31,   58,   27,   27,   27,   96,
   33,   34,   34,   34,  478,  479,   32,  117,  130,   15,
   16,  443,   97,    6,  131,   41,   60,   15,   16,  142,
   97,  129,  219,  192,  156,  156,  223,   61,  159,  159,
  157,  157,  126,   59,  451,  465,   98,  255,  121,   99,
  100,    7,   15,   16,   98,   97,   25,   99,  100,   26,
  187,  122,  176,  204,  115,   42,  123,  193,  256,  207,
   98,   27,  263,   99,  100,  205,   34,   97,  385,   98,
  248,  250,   99,  100,   58,   98,  251,  246,   99,  100,
  262,  238,  188,  264,  266,  217,  298,  314,  241,  428,
  243,   98,  182,  315,   99,  100,   50,  177,   70,  158,
  158,   97,  342,   97,  252,  254,   61,  418,  247,   51,
  273,  485,  195,   98,  316,  524,   99,  100,  299,  124,
  604,   97,  307,  343,  550,   98,   71,   98,   99,  100,
   99,  100,  274,  442,  281,  281,  281,  281,   31,  302,
  282,  282,  282,  282,   33,   98,  353,  355,   99,  100,
   32,  525,  526,  213,  576,  328,   31,  323,  349,   41,
  156,  156,   33,  385,  159,  159,  157,  157,   32,  209,
  391,  218,  378,   67,  518,  415,  330,   41,  403,  324,
  350,   15,   16,  396,   97,  385,   68,   72,  456,   73,
   25,  392,  446,   26,  379,  345,  410,  204,  549,   42,
  404,  605,  449,  207,  548,   27,  336,  619,   98,  205,
   34,   99,  100,  587,  210,  222,  119,   42,  411,  421,
  368,  620,  444,  423,  450,   15,   16,  488,   97,  120,
  434,  447,  135,  253,  213,  213,  213,  213,  171,  172,
  579,  608,  318,  359,  445,  249,  409,  470,  337,  489,
  158,  471,   98,  448,  452,   99,  100,  466,   97,  281,
  281,  281,  281,  171,  172,  282,  282,  282,  282,   31,
   98,  189,  486,   99,  100,   33,  453,  194,  539,  467,
  558,   32,   98,  220,   58,   99,  100,  204,  382,  190,
   41,  191,  150,  207,  487,  268,  221,  213,  406,  205,
  425,   59,  494,  498,  507,   60,  158,  499,   31,  569,
  151,  156,  586,  209,   33,  159,   61,  157,  211,  204,
   32,   97,  528,  500,  495,  207,  224,  501,  493,   41,
   42,  205,  538,  103,   31,  158,  178,  257,  458,  225,
   33,  103,    0,  540,  529,   98,   32,  103,   99,  100,
  258,  281,   74,   75,  179,   41,  527,  282,  210,  213,
  213,  213,  213,  158,   31,  541,  551,  156,  265,   42,
   33,  159,  204,  157,  509,  511,   32,   46,  207,  464,
   48,   97,  174,  175,  205,   41,   31,  213,  552,  103,
  103,    0,   33,  570,   47,   42,  156,   49,   32,  158,
  159,  492,  157,  209,  204,   98,  281,   41,   99,  100,
  207,  577,  282,  267,  588,  571,  205,  606,  214,  213,
  364,  560,  562,  103,  156,   42,  122,  103,  159,  158,
  157,  358,    0,  578,  204,  209,  589,  185,  365,  607,
  207,  609,    0,  281,  154,  137,  205,   42,  210,  282,
   98,  213,  344,   99,  100,  186,  171,  172,    0,  103,
  156,  296,  211,  610,  159,   97,  157,  137,  300,   17,
  204,  204,  213,  103,  360,  281,  207,  207,    0,  297,
  210,  282,  205,  205,    0,  294,  301,  361,  209,   98,
  156,   17,   99,  100,  159,  103,  157,  204,  405,  214,
  214,  214,  214,  207,  213,  245,  213,  294,  281,  205,
  259,  154,    0,  319,  282,   15,   16,    0,   97,  215,
  209,  325,  234,  103,  235,  103,  103,  306,  260,  281,
  261,  320,    0,  210,  213,  282,  508,   15,   16,  326,
   97,  351,   98,  213,  532,   99,  100,  407,  533,   97,
  209,    0,  211,  510,  356,  104,  103,   52,  103,  352,
  408,  362,  214,  104,   98,  210,   97,   99,  100,  104,
  213,  213,  357,   98,   53,  213,   99,  100,  327,  363,
  393,  401,    0,  275,  211,  276,  209,  209,   15,   16,
   98,   97,  180,   99,  100,  210,  431,  213,  394,  402,
  215,  215,  215,  215,  542,  544,   18,   19,  213,    0,
  181,  104,  104,  209,  432,   98,  590,  592,   99,  100,
  237,  103,  543,  545,  214,  214,  214,  214,    0,  213,
   54,  210,  210,  329,  591,  593,    0,  211,  237,   56,
  216,    0,  113,   15,   16,  104,   97,   55,  136,  104,
    0,  367,  214,  559,  138,  140,   57,    0,  210,  114,
    0,   15,   16,  215,   97,  137,   97,  424,  236,  211,
   98,  139,  141,   99,  100,    0,  103,   15,   16,  269,
   97,  104,  103,  271,  214,  237,  321,    0,   98,  334,
   98,   99,  100,   99,  100,  313,  270,    0,  376,  211,
  272,  457,    0,  322,   98,    0,  335,   99,  100,   18,
   19,   15,   16,    0,   97,  377,  214,  561,    0,  317,
  103,  216,  216,  216,  216,  215,  215,  215,  215,  354,
   97,    0,  103,   18,   19,  211,  211,  214,   98,  148,
  149,   99,  100,   18,   19,  104,    0,  104,  104,  346,
  164,  347,    0,  215,   98,   87,   76,   99,  100,    0,
   12,  103,  211,   77,    0,   15,   16,   78,   79,  214,
  389,  214,  390,  165,  166,  167,  168,  169,  104,  422,
  104,  170,    0,   88,  216,  215,  171,  172,  395,  103,
    0,  196,  197,   18,   19,    0,   12,   13,  198,  214,
   14,   15,   16,  534,   17,   18,   19,  535,  214,  171,
  172,  165,  166,  167,  168,  169,    0,  215,   98,  170,
  199,   99,  100,    0,  386,  103,   21,  387,  388,  165,
  166,  167,  168,  169,    0,  214,  214,  170,  215,    0,
  214,  412,    0,  104,  413,  414,  216,  216,  216,  216,
  397,    0,  398,  166,  166,  103,  166,  429,  166,  430,
    0,  166,  214,  166,  166,  166,  166,  242,  244,    0,
  215,  166,  215,  214,  216,  166,  166,  166,  166,  166,
  166,  565,  166,    0,  166,  566,    0,  433,    0,  166,
  166,  166,  166,  437,  214,    0,  438,  439,  104,  459,
  215,  567,  460,  461,  104,  568,  216,    0,    0,  215,
  165,  166,  167,  168,  169,    0,  474,    0,  170,  475,
  476,  154,  154,  574,  154,    0,  154,  575,    0,  154,
    0,  154,  154,  154,  154,    0,  215,  215,  216,  154,
    0,  215,  104,  154,  154,  154,  154,  154,  154,  582,
  154,  594,  154,  583,  104,  595,  197,  154,  154,  216,
   12,   13,  198,  215,   14,   15,   16,  598,   17,   18,
   19,  599,    0,    0,  215,    0,  152,  152,  600,  152,
    0,  152,  601,  104,  152,    0,  152,  152,  152,  152,
   21,  216,  613,  216,  152,  215,  614,    0,  152,  152,
  152,  152,  152,  152,  615,  152,  482,  152,  616,  483,
  484,  104,  152,  152,  153,  153,  617,  153,    0,  153,
  618,  216,  153,    0,  153,  153,  153,  153,    0,  623,
  216,  502,  153,  624,  503,  504,  153,  153,  153,  153,
  153,  153,  625,  153,  627,  153,  626,  104,  628,  521,
  153,  153,  522,  523,  331,  197,    0,  216,  216,   12,
   13,  198,  216,   14,   15,   16,    0,   17,   18,   19,
  308,  152,    0,    0,    0,   12,    0,  104,  153,    0,
   15,   16,  332,  154,  216,    0,    0,    0,    0,   21,
  553,  399,  197,  554,  555,  216,   12,   13,  198,  309,
   14,   15,   16,    0,   17,   18,   19,    0,  426,  197,
    0,    0,    0,   12,   13,  198,  216,   14,   15,   16,
  400,   17,   18,   19,  480,  197,   21,    0,    0,   12,
   13,  198,    0,   14,   15,   16,  427,   17,   18,   19,
    0,  516,  197,   21,    0,    0,   12,   13,  198,    0,
   14,   15,   16,  481,   17,   18,   19,  546,  197,   21,
    0,    0,   12,   13,  198,    0,   14,   15,   16,  517,
   17,   18,   19,  580,  197,    0,   21,    0,   12,   13,
  198,    0,   14,   15,   16,  547,   17,   18,   19,    0,
  602,  197,   21,    0,    0,   12,   13,  198,    0,   14,
   15,   16,  581,   17,   18,   19,    0,    0,   21,    0,
    0,    0,    0,    0,    0,    0,    0,   44,   11,  603,
    0,    0,   12,   13,    0,   21,   14,   15,   16,    0,
   17,   18,   19,    0,  133,   11,    0,    0,    0,   12,
   13,    0,    0,   14,   15,   16,   45,   17,   18,   19,
  294,   11,   21,    0,    0,   12,   13,    0,    0,   14,
   15,   16,  134,   17,   18,   19,    0,    0,   11,   21,
    0,    0,   12,   13,    0,    0,   14,   15,   16,  295,
   17,   18,   19,    0,    0,   21,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   11,   20,    0,    0,   12,
   13,    0,   21,   14,   15,   16,    0,   17,   18,   19,
    0,    0,    0,    0,  149,  149,    0,  149,    0,  149,
    0,    0,  149,   43,  149,  149,  149,  149,    0,   21,
    0,    0,  149,    0,  372,  277,  149,    0,    0,   12,
    0,  198,  278,  149,   15,   16,  279,   79,  374,  277,
    0,    0,    0,   12,    0,  198,  278,    0,   15,   16,
  279,   79,    0,  373,    0,    0,    0,    0,  519,  277,
    0,    0,    0,   12,    0,  198,  278,  375,   15,   16,
  279,   79,  611,  277,    0,    0,    0,   12,    0,  198,
  278,    0,   15,   16,  279,   79,    0,  520,    0,    0,
    0,    0,  621,  277,    0,    0,    0,   12,    0,  198,
  278,  612,   15,   16,  279,   79,  294,  294,    0,    0,
    0,  294,    0,    0,  294,    0,  294,  294,  294,  294,
    0,  622,    0,    0,    0,    0,  228,   76,  294,    0,
    0,   12,    0,    0,   77,  294,   15,   16,   78,   79,
  230,   76,    0,    0,    0,   12,    0,    0,   77,    0,
   15,   16,   78,   79,    0,  229,    0,    0,    0,    0,
  232,   76,    0,    0,    0,   12,    0,    0,   77,  231,
   15,   16,   78,   79,  435,   76,    0,    0,    0,   12,
    0,    0,   77,    0,   15,   16,   78,   79,    0,  233,
    0,    0,    0,    0,  530,   76,    0,    0,    0,   12,
    0,    0,   77,  436,   15,   16,   78,   79,  563,   76,
    0,    0,    0,   12,    0,    0,   77,    0,   15,   16,
   78,   79,    0,  531,    0,    0,    0,    0,  286,  286,
    0,    0,    0,  286,    0,    0,  286,  564,  286,  286,
  286,  286,  311,  152,    0,    0,    0,   12,    0,    0,
  153,    0,   15,   16,    0,  154,    0,  286,    0,  472,
  152,    0,    0,    0,   12,    0,    0,  153,    0,   15,
   16,  312,  154,  572,  152,    0,    0,    0,   12,    0,
    0,  153,    0,   15,   16,    0,  154,    0,  473,    0,
  596,  152,    0,    0,    0,   12,    0,    0,  153,    0,
   15,   16,  573,  154,  383,   11,    0,    0,    0,   12,
    0,  468,   11,    0,   15,   16,   12,   17,    0,  597,
    0,   15,   16,    0,   17,  496,   11,    0,    0,    0,
   12,    0,    0,  384,    0,   15,   16,    0,   17,    0,
  469,    0,  248,  248,    0,    0,    0,  248,    0,    0,
    0,    0,  248,  248,  497,  248,  454,  277,    0,    0,
    0,   12,    0,  198,  278,    0,   15,   16,  279,   79,
    0,  248,    0,    0,    0,  556,  277,    0,    0,    0,
   12,    0,  198,  278,  455,   15,   16,  279,   79,  584,
  277,    0,    0,    0,   12,    0,  198,  278,    0,   15,
   16,  279,   79,  557,    0,    0,    0,    0,   90,   76,
    0,    0,    0,   12,    0,    0,   77,  585,   15,   16,
   78,   79,   93,   76,    0,    0,    0,   12,    0,    0,
   77,    0,   15,   16,   78,   79,   91,  277,    0,    0,
    0,   12,    0,  198,  278,    0,   15,   16,  279,   79,
   94,  277,    0,    0,    0,   12,    0,  198,  278,    0,
   15,   16,  279,   79,    0,  369,    0,    0,    0,    0,
  380,   76,    0,    0,    0,   12,    0,    0,   77,  371,
   15,   16,   78,   79,  462,   76,    0,    0,    0,   12,
    0,    0,   77,    0,   15,   16,   78,   79,  381,    0,
    0,    0,    0,  490,   76,    0,    0,    0,   12,    0,
    0,   77,  463,   15,   16,   78,   79,   76,    0,    0,
    0,   12,    0,    0,   77,    0,   15,   16,   78,   79,
    0,  491,    0,  419,  152,    0,    0,    0,   12,    0,
    0,  153,    0,   15,   16,  226,  154,  505,  152,    0,
    0,    0,   12,    0,    0,  153,    0,   15,   16,    0,
  154,  420,    0,  536,  152,    0,    0,    0,   12,    0,
    0,  153,    0,   15,   16,  506,  154,  303,   11,    0,
    0,    0,   12,    0,  416,   11,    0,   15,   16,   12,
   17,  537,    0,    0,   15,   16,    0,   17,  440,   11,
    0,    0,    0,   12,    0,  304,    0,    0,   15,   16,
  277,   17,  417,    0,   12,    0,  198,  278,    0,   15,
   16,  279,   79,  277,    0,    0,  441,   12,    0,  198,
  278,    0,   15,   16,  279,   79,  277,  280,    0,    0,
   12,    0,  198,  278,    0,   15,   16,  279,   79,  277,
  288,    0,    0,   12,    0,  198,  278,    0,   15,   16,
  279,   79,   76,  290,    0,    0,   12,    0,    0,   77,
    0,   15,   16,   78,   79,  152,  292,    0,    0,   12,
    0,    0,  153,    0,   15,   16,  152,  154,    0,   80,
   12,    0,    0,  153,    0,   15,   16,    0,  154,    0,
    0,    0,  155,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  162,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          8,
    9,   10,  103,  104,  162,    8,    9,   10,  116,  332,
   55,    8,    9,   10,  288,  114,  290,  284,  292,   53,
    8,    9,   10,   88,  256,  235,   91,    6,    7,   94,
  256,  269,  256,  103,  104,   61,  256,  276,  256,  259,
  260,  213,  214,  215,  216,  269,  278,   36,   37,   38,
   39,    8,    9,   10,    8,    9,   10,   59,  278,  256,
    8,    9,   10,  289,   73,  256,    8,    9,   10,  256,
   73,    8,    9,   10,  292,  293,   73,  256,  276,  266,
  267,  417,  269,  256,  276,   73,  277,  266,  267,  277,
  269,  288,  137,  256,  103,  104,  141,  288,  103,  104,
  103,  104,  256,  273,  427,  441,  293,  256,  256,  296,
  297,  284,  266,  267,  293,  269,   73,  296,  297,   73,
  256,  269,  259,  132,  256,   73,  274,  129,  277,  132,
  293,   73,  256,  296,  297,  132,   73,  269,  348,  293,
  174,  175,  296,  297,  256,  293,  256,  173,  296,  297,
  184,  153,  288,  277,  188,  134,  256,  256,  256,  398,
  256,  293,  261,  256,  296,  297,  256,  259,  256,  239,
  240,  269,  256,  269,  176,  177,  288,  387,  256,  269,
  256,  455,  269,  293,  277,  256,  296,  297,  288,  191,
  256,  269,  237,  277,  517,  293,  284,  293,  296,  297,
  296,  297,  278,  413,  213,  214,  215,  216,  217,  278,
  213,  214,  215,  216,  217,  293,  278,  316,  296,  297,
  217,  292,  293,  132,  547,  270,  235,  256,  256,  217,
  239,  240,  235,  443,  239,  240,  239,  240,  235,  132,
  256,  256,  256,  256,  483,  278,  272,  235,  256,  278,
  278,  266,  267,  361,  269,  465,  269,  256,  430,  258,
  217,  277,  420,  217,  278,  299,  256,  276,  259,  217,
  278,  278,  256,  276,  513,  217,  278,  260,  293,  276,
  217,  296,  297,  557,  132,  256,  256,  235,  278,  390,
  335,  260,  256,  392,  278,  266,  267,  256,  269,  269,
  408,  256,   73,  256,  213,  214,  215,  216,  292,  293,
  549,  585,  261,  322,  278,  256,  381,  256,  279,  278,
  390,  260,  293,  278,  256,  296,  297,  256,  269,  338,
  339,  340,  341,  292,  293,  338,  339,  340,  341,  348,
  293,  256,  256,  296,  297,  348,  278,  130,  506,  278,
  522,  348,  293,  256,  256,  296,  297,  366,  347,  274,
  348,  276,  256,  366,  278,  191,  269,  276,  377,  366,
  396,  273,  256,  256,  475,  277,  446,  260,  387,  537,
  274,  390,  554,  276,  387,  390,  288,  390,  132,  398,
  387,  269,  256,  256,  278,  398,  256,  260,  463,  387,
  348,  398,  503,   47,  413,  475,  256,  256,  434,  269,
  413,   55,   -1,  256,  278,  293,  413,   61,  296,  297,
  269,  430,  266,  267,  274,  413,  491,  430,  276,  338,
  339,  340,  341,  503,  443,  278,  256,  446,  256,  387,
  443,  446,  451,  446,  478,  479,  443,  256,  451,  438,
  256,  269,  294,  295,  451,  443,  465,  366,  278,  103,
  104,   -1,  465,  256,  273,  413,  475,  273,  465,  539,
  475,  460,  475,  366,  483,  293,  485,  465,  296,  297,
  483,  256,  485,  256,  256,  278,  483,  256,  132,  398,
  256,  525,  526,  137,  503,  443,  269,  141,  503,  569,
  503,  256,   -1,  278,  513,  398,  278,  256,  274,  278,
  513,  256,   -1,  522,  269,  256,  513,  465,  366,  522,
  293,  430,  256,  296,  297,  274,  292,  293,   -1,  173,
  539,  256,  276,  278,  539,  269,  539,  278,  256,  256,
  549,  550,  451,  256,  256,  554,  549,  550,   -1,  274,
  398,  554,  549,  550,   -1,  256,  274,  269,  451,  293,
  569,  278,  296,  297,  569,  278,  569,  576,  256,  213,
  214,  215,  216,  576,  483,  256,  485,  278,  587,  576,
  256,  269,   -1,  256,  587,  266,  267,   -1,  269,  132,
  483,  256,  256,  237,  258,  239,  240,  256,  274,  608,
  276,  274,   -1,  451,  513,  608,  256,  266,  267,  274,
  269,  256,  293,  522,  256,  296,  297,  256,  260,  269,
  513,   -1,  366,  256,  256,   47,  270,  256,  272,  274,
  269,  256,  276,   55,  293,  483,  269,  296,  297,   61,
  549,  550,  274,  293,  273,  554,  296,  297,  256,  274,
  256,  256,   -1,  256,  398,  258,  549,  550,  266,  267,
  293,  269,  256,  296,  297,  513,  256,  576,  274,  274,
  213,  214,  215,  216,  256,  256,  270,  271,  587,   -1,
  274,  103,  104,  576,  274,  293,  256,  256,  296,  297,
  256,  335,  274,  274,  338,  339,  340,  341,   -1,  608,
  256,  549,  550,  256,  274,  274,   -1,  451,  274,  256,
  132,   -1,  256,  266,  267,  137,  269,  273,  256,  141,
   -1,  256,  366,  256,  256,  256,  273,   -1,  576,  273,
   -1,  266,  267,  276,  269,  273,  269,  256,  256,  483,
  293,  273,  273,  296,  297,   -1,  390,  266,  267,  256,
  269,  173,  396,  256,  398,  273,  256,   -1,  293,  256,
  293,  296,  297,  296,  297,  256,  273,   -1,  256,  513,
  273,  256,   -1,  273,  293,   -1,  273,  296,  297,  270,
  271,  266,  267,   -1,  269,  273,  430,  256,   -1,  256,
  434,  213,  214,  215,  216,  338,  339,  340,  341,  256,
  269,   -1,  446,  270,  271,  549,  550,  451,  293,  296,
  297,  296,  297,  270,  271,  237,   -1,  239,  240,  256,
  256,  258,   -1,  366,  293,  256,  257,  296,  297,   -1,
  261,  475,  576,  264,   -1,  266,  267,  268,  269,  483,
  256,  485,  258,  279,  280,  281,  282,  283,  270,  256,
  272,  287,   -1,  284,  276,  398,  292,  293,  256,  503,
   -1,  256,  257,  270,  271,   -1,  261,  262,  263,  513,
  265,  266,  267,  256,  269,  270,  271,  260,  522,  292,
  293,  279,  280,  281,  282,  283,   -1,  430,  293,  287,
  285,  296,  297,   -1,  256,  539,  291,  259,  260,  279,
  280,  281,  282,  283,   -1,  549,  550,  287,  451,   -1,
  554,  256,   -1,  335,  259,  260,  338,  339,  340,  341,
  256,   -1,  258,  256,  257,  569,  259,  256,  261,  258,
   -1,  264,  576,  266,  267,  268,  269,  171,  172,   -1,
  483,  274,  485,  587,  366,  278,  279,  280,  281,  282,
  283,  256,  285,   -1,  287,  260,   -1,  256,   -1,  292,
  293,  294,  295,  256,  608,   -1,  259,  260,  390,  256,
  513,  256,  259,  260,  396,  260,  398,   -1,   -1,  522,
  279,  280,  281,  282,  283,   -1,  256,   -1,  287,  259,
  260,  256,  257,  256,  259,   -1,  261,  260,   -1,  264,
   -1,  266,  267,  268,  269,   -1,  549,  550,  430,  274,
   -1,  554,  434,  278,  279,  280,  281,  282,  283,  256,
  285,  256,  287,  260,  446,  260,  257,  292,  293,  451,
  261,  262,  263,  576,  265,  266,  267,  256,  269,  270,
  271,  260,   -1,   -1,  587,   -1,  256,  257,  256,  259,
   -1,  261,  260,  475,  264,   -1,  266,  267,  268,  269,
  291,  483,  256,  485,  274,  608,  260,   -1,  278,  279,
  280,  281,  282,  283,  256,  285,  256,  287,  260,  259,
  260,  503,  292,  293,  256,  257,  256,  259,   -1,  261,
  260,  513,  264,   -1,  266,  267,  268,  269,   -1,  256,
  522,  256,  274,  260,  259,  260,  278,  279,  280,  281,
  282,  283,  256,  285,  256,  287,  260,  539,  260,  256,
  292,  293,  259,  260,  256,  257,   -1,  549,  550,  261,
  262,  263,  554,  265,  266,  267,   -1,  269,  270,  271,
  256,  257,   -1,   -1,   -1,  261,   -1,  569,  264,   -1,
  266,  267,  284,  269,  576,   -1,   -1,   -1,   -1,  291,
  256,  256,  257,  259,  260,  587,  261,  262,  263,  285,
  265,  266,  267,   -1,  269,  270,  271,   -1,  256,  257,
   -1,   -1,   -1,  261,  262,  263,  608,  265,  266,  267,
  285,  269,  270,  271,  256,  257,  291,   -1,   -1,  261,
  262,  263,   -1,  265,  266,  267,  284,  269,  270,  271,
   -1,  256,  257,  291,   -1,   -1,  261,  262,  263,   -1,
  265,  266,  267,  285,  269,  270,  271,  256,  257,  291,
   -1,   -1,  261,  262,  263,   -1,  265,  266,  267,  284,
  269,  270,  271,  256,  257,   -1,  291,   -1,  261,  262,
  263,   -1,  265,  266,  267,  284,  269,  270,  271,   -1,
  256,  257,  291,   -1,   -1,  261,  262,  263,   -1,  265,
  266,  267,  285,  269,  270,  271,   -1,   -1,  291,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,  285,
   -1,   -1,  261,  262,   -1,  291,  265,  266,  267,   -1,
  269,  270,  271,   -1,  256,  257,   -1,   -1,   -1,  261,
  262,   -1,   -1,  265,  266,  267,  285,  269,  270,  271,
  256,  257,  291,   -1,   -1,  261,  262,   -1,   -1,  265,
  266,  267,  284,  269,  270,  271,   -1,   -1,  257,  291,
   -1,   -1,  261,  262,   -1,   -1,  265,  266,  267,  285,
  269,  270,  271,   -1,   -1,  291,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  257,  285,   -1,   -1,  261,
  262,   -1,  291,  265,  266,  267,   -1,  269,  270,  271,
   -1,   -1,   -1,   -1,  256,  257,   -1,  259,   -1,  261,
   -1,   -1,  264,  285,  266,  267,  268,  269,   -1,  291,
   -1,   -1,  274,   -1,  256,  257,  278,   -1,   -1,  261,
   -1,  263,  264,  285,  266,  267,  268,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,  263,  264,   -1,  266,  267,
  268,  269,   -1,  285,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,   -1,  263,  264,  285,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,  263,
  264,   -1,  266,  267,  268,  269,   -1,  285,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  263,
  264,  285,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,   -1,  266,  267,  268,  269,
   -1,  285,   -1,   -1,   -1,   -1,  256,  257,  278,   -1,
   -1,  261,   -1,   -1,  264,  285,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,
  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  285,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,   -1,  264,   -1,  266,  267,  268,  269,   -1,  285,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
   -1,   -1,  264,  285,  266,  267,  268,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,  266,  267,
  268,  269,   -1,  285,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,   -1,   -1,  264,  285,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  264,   -1,  266,  267,   -1,  269,   -1,  285,   -1,  256,
  257,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,  266,
  267,  285,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
   -1,  264,   -1,  266,  267,   -1,  269,   -1,  285,   -1,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,
  266,  267,  285,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,  256,  257,   -1,  266,  267,  261,  269,   -1,  285,
   -1,  266,  267,   -1,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  285,   -1,  266,  267,   -1,  269,   -1,
  285,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
   -1,   -1,  266,  267,  285,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,  263,  264,   -1,  266,  267,  268,  269,
   -1,  285,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,  263,  264,  284,  266,  267,  268,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,  263,  264,   -1,  266,
  267,  268,  269,  284,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,   -1,   -1,  264,  284,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  264,   -1,  266,  267,  268,  269,  284,  257,   -1,   -1,
   -1,  261,   -1,  263,  264,   -1,  266,  267,  268,  269,
  284,  257,   -1,   -1,   -1,  261,   -1,  263,  264,   -1,
  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  285,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,   -1,  264,   -1,  266,  267,  268,  269,  284,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,
   -1,  264,  284,  266,  267,  268,  269,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,   -1,  266,  267,  268,  269,
   -1,  284,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,
   -1,  264,   -1,  266,  267,  285,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,  264,   -1,  266,  267,   -1,
  269,  284,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,
   -1,  264,   -1,  266,  267,  284,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,  256,  257,   -1,  266,  267,  261,
  269,  284,   -1,   -1,  266,  267,   -1,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,  284,   -1,   -1,  266,  267,
  257,  269,  284,   -1,  261,   -1,  263,  264,   -1,  266,
  267,  268,  269,  257,   -1,   -1,  284,  261,   -1,  263,
  264,   -1,  266,  267,  268,  269,  257,  284,   -1,   -1,
  261,   -1,  263,  264,   -1,  266,  267,  268,  269,  257,
  284,   -1,   -1,  261,   -1,  263,  264,   -1,  266,  267,
  268,  269,  257,  284,   -1,   -1,  261,   -1,   -1,  264,
   -1,  266,  267,  268,  269,  257,  284,   -1,   -1,  261,
   -1,   -1,  264,   -1,  266,  267,  257,  269,   -1,  284,
  261,   -1,   -1,  264,   -1,  266,  267,   -1,  269,   -1,
   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  284,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=297;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"IF","THEN","ELSE","END_IF","OUT","FUN","RETURN","BREAK","WHEN",
"WHILE","FOR","CONTINUE","ID","I32","F32","PUNTO","PARENT_A","PARENT_C",
"COMILLA","COMA","DOSPUNTOS","PUNTOCOMA","IGUAL","MAYOR","MENOR","MENORIGUAL",
"MAYORIGUAL","LLAVE_A","LLAVE_C","EXCL","DIST","ASIG","CADENA","COMENT","CONST",
"SUMA","RESTA","MULT","DIV","ENTERO","FLOAT",
};
final static String yyrule[] = {
"$accept : program",
"program : nombre_program LLAVE_A bloque_sentencias LLAVE_C",
"program : nombre_program LLAVE_A bloque_sentencias error",
"program : nombre_program error bloque_sentencias LLAVE_C",
"program : error LLAVE_A bloque_sentencias LLAVE_C",
"nombre_program : ID",
"bloque_sentencias :",
"bloque_sentencias : bloque_sentencias sentencia PUNTOCOMA",
"bloque_sentencias : bloque_sentencias sentencia error",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_decl_datos",
"sentencia_declarativa : sentencia_decl_fun",
"sentencia_declarativa : lista_const",
"sentencia_declarativa : sentencia_when",
"tipo : I32",
"tipo : F32",
"sentencia_decl_datos : tipo list_var",
"sentencia_decl_datos : tipo error",
"list_var : list_var COMA ID",
"list_var : ID",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro error",
"encabezado_fun : FUN ID PARENT_A parametro error",
"encabezado_fun : FUN ID PARENT_A error",
"encabezado_fun : FUN ID PARENT_A parametro COMA error",
"encabezado_fun : FUN ID error",
"encabezado_fun : FUN error",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun error",
"sentencia_decl_fun : encabezado_fun error",
"cuerpo_fun :",
"cuerpo_fun : cuerpo_fun sentencias_fun PUNTOCOMA",
"cuerpo_fun : cuerpo_fun sentencias_fun error",
"sentencias_fun : sentencia_decl_datos",
"sentencias_fun : sentencia_decl_fun",
"sentencias_fun : lista_const",
"sentencias_fun : asignacion",
"sentencias_fun : llamado_func",
"sentencias_fun : sentencia_if_fun",
"sentencias_fun : sentencia_out",
"sentencias_fun : sentencia_when_fun",
"sentencias_fun : sentencia_for_fun",
"sentencias_fun : sentencia_while_fun",
"sentencias_fun : retorno",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_fun : IF PARENT_A condicion error",
"sentencia_if_fun : IF PARENT_A error",
"sentencia_if_fun : IF error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE sentencias_fun error",
"sentencia_when_fun : encabezado_when THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_when_fun : encabezado_when THEN sentencias_fun",
"sentencia_when_fun : encabezado_when THEN LLAVE_A cuerpo_fun error",
"sentencia_when_fun : encabezado_when THEN error",
"sentencia_when_fun : encabezado_when error",
"etiqueta : ID DOSPUNTOS",
"sentencia_while_fun : encabezado_while_etiqueta LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : encabezado_while_etiqueta sentencias_fun_break",
"sentencia_while_fun : encabezado_while LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : encabezado_while sentencias_fun_break",
"sentencia_for_fun : encabezado_for_etiqueta LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : encabezado_for_etiqueta sentencias_fun_break",
"sentencia_for_fun : encabezado_for LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : encabezado_for sentencias_fun_break",
"sentencia_for_fun : encabezado_for_etiqueta LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : encabezado_for LLAVE_A cuerpo_fun_break error",
"cuerpo_fun_break :",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break PUNTOCOMA",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break error",
"sentencias_fun_break : asignacion",
"sentencias_fun_break : sentencia_if_break_fun",
"sentencias_fun_break : sentencia_out",
"sentencias_fun_break : sentencia_while_fun",
"sentencias_fun_break : sentencia_for_fun",
"sentencias_fun_break : CONTINUE tag",
"sentencias_fun_break : BREAK",
"sentencias_fun_break : BREAK cte",
"sentencias_fun_break : retorno",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break_fun : IF PARENT_A condicion error",
"sentencia_if_break_fun : IF PARENT_A error",
"sentencia_if_break_fun : IF error",
"retorno : RETURN PARENT_A expresion PARENT_C",
"retorno : RETURN PARENT_A expresion error",
"retorno : RETURN PARENT_A error",
"retorno : RETURN error",
"parametro : tipo ID",
"parametro : tipo error",
"lista_const : CONST lista_asignacion",
"lista_asignacion : lista_asignacion COMA asignacion_const",
"lista_asignacion : asignacion_const",
"asignacion_const : ID ASIG cte",
"asignacion_const : ID ASIG error",
"asignacion_const : ID error",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : sentencia_if",
"sentencia_ejecutable : sentencia_out",
"sentencia_ejecutable : sentencia_for",
"sentencia_ejecutable : sentencia_while",
"sentencia_ejecutable : llamado_func",
"asignacion : ID ASIG expresion",
"asignacion : ID error",
"asignacion : ID ASIG error",
"expresion : expresion SUMA termino",
"expresion : expresion RESTA termino",
"expresion : termino",
"expresion : sentencia_for_asig ELSE cte",
"expresion : sentencia_while_asig ELSE cte",
"expresion : expresion SUMA error",
"expresion : expresion RESTA error",
"expresion : sentencia_for_asig ELSE error",
"expresion : sentencia_while_asig ELSE error",
"termino : termino MULT factor",
"termino : termino DIV factor",
"termino : factor",
"termino : termino MULT error",
"termino : termino DIV error",
"factor : ID",
"factor : cte",
"factor : llamado_func",
"cte : ENTERO",
"cte : FLOAT",
"cte : RESTA ENTERO",
"cte : RESTA FLOAT",
"sentencia_for_asig : encabezado_for LLAVE_A bloque_sent_eje_asig LLAVE_C",
"sentencia_for_asig : encabezado_for sent_eje_asig",
"sentencia_for_asig : encabezado_for LLAVE_A bloque_sent_eje_asig error",
"sentencia_while_asig : encabezado_while LLAVE_A bloque_sent_eje_asig LLAVE_C",
"sentencia_while_asig : encabezado_while sent_eje_asig",
"sentencia_while_asig : encabezado_while LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C error",
"sentencia_if_asig : IF PARENT_A condicion error",
"sentencia_if_asig : IF PARENT_A error",
"sentencia_if_asig : IF error",
"bloque_sent_eje_asig :",
"bloque_sent_eje_asig : bloque_sent_eje_asig sent_eje_asig PUNTOCOMA",
"sent_eje_asig : asignacion",
"sent_eje_asig : sentencia_if_asig",
"sent_eje_asig : sentencia_out",
"sent_eje_asig : sentencia_while_asig",
"sent_eje_asig : sentencia_for_asig",
"sent_eje_asig : BREAK cte",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if : IF PARENT_A condicion PARENT_C error",
"sentencia_if : IF PARENT_A condicion error",
"sentencia_if : IF PARENT_A error",
"sentencia_if : IF error",
"condicion : expresion comparacion expresion",
"condicion : expresion comparacion error",
"condicion : expresion error",
"comparacion : IGUAL",
"comparacion : MAYOR",
"comparacion : MENOR",
"comparacion : MENORIGUAL",
"comparacion : MAYORIGUAL",
"comparacion : DIST",
"bloque_ejecutable :",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable PUNTOCOMA",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"sentencia_out : OUT PARENT_A CADENA PARENT_C",
"sentencia_out : OUT PARENT_A CADENA error",
"sentencia_out : OUT PARENT_A error",
"sentencia_out : OUT error",
"encabezado_when : WHEN PARENT_A factor comparacion factor PARENT_C",
"encabezado_when : WHEN PARENT_A factor comparacion factor error",
"encabezado_when : WHEN PARENT_A error",
"encabezado_when : WHEN error",
"sentencia_when : encabezado_when THEN LLAVE_A bloque_sentencias LLAVE_C",
"sentencia_when : encabezado_when THEN sentencia",
"sentencia_when : encabezado_when THEN LLAVE_A bloque_sentencias error",
"sentencia_when : encabezado_when THEN error",
"sentencia_when : encabezado_when error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A error",
"encabezado_while_etiqueta : etiqueta WHILE error",
"encabezado_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C",
"encabezado_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"encabezado_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"encabezado_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"encabezado_while : WHILE PARENT_A condicion PARENT_C error",
"encabezado_while : WHILE PARENT_A condicion error",
"encabezado_while : WHILE PARENT_A error",
"encabezado_while : WHILE error",
"sentencia_while : encabezado_while_etiqueta LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : encabezado_while_etiqueta ejecutables_break_continue",
"sentencia_while : encabezado_while LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : encabezado_while ejecutables_break_continue",
"sentencia_while : encabezado_while LLAVE_A bloque_break_continue error",
"sentencia_while : encabezado_while error",
"bloque_break_continue :",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue PUNTOCOMA",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue",
"ejecutables_break_continue : asignacion",
"ejecutables_break_continue : sentencia_if_break",
"ejecutables_break_continue : sentencia_out",
"ejecutables_break_continue : sentencia_while",
"ejecutables_break_continue : sentencia_for",
"ejecutables_break_continue : CONTINUE tag",
"ejecutables_break_continue : BREAK",
"tag :",
"tag : DOSPUNTOS ID",
"tag : DOSPUNTOS error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion error",
"sentencia_if_break : IF PARENT_A error",
"sentencia_if_break : IF error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG factor PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA factor PARENT_C",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG factor PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA factor PARENT_C",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG factor PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA factor error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG factor PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA factor error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG factor PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG factor PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG factor PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG factor PUNTOCOMA ID comparacion expresion error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG factor PUNTOCOMA ID comparacion error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG factor PUNTOCOMA ID error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG factor PUNTOCOMA error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG factor error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A error",
"encabezado_for_etiqueta : etiqueta FOR error",
"encabezado_for : FOR PARENT_A ID ASIG factor PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA factor PARENT_C",
"encabezado_for : FOR PARENT_A ID ASIG factor PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA factor PARENT_C",
"encabezado_for : FOR PARENT_A ID ASIG factor PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA factor error",
"encabezado_for : FOR PARENT_A ID ASIG factor PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA factor error",
"encabezado_for : FOR PARENT_A ID ASIG factor PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"encabezado_for : FOR PARENT_A ID ASIG factor PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"encabezado_for : FOR PARENT_A ID ASIG factor PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"encabezado_for : FOR PARENT_A ID ASIG factor PUNTOCOMA ID comparacion expresion error",
"encabezado_for : FOR PARENT_A ID ASIG factor PUNTOCOMA ID comparacion error",
"encabezado_for : FOR PARENT_A ID ASIG factor PUNTOCOMA ID error",
"encabezado_for : FOR PARENT_A ID ASIG factor PUNTOCOMA error",
"encabezado_for : FOR PARENT_A ID ASIG factor error",
"encabezado_for : FOR PARENT_A ID ASIG error",
"encabezado_for : FOR PARENT_A ID error",
"encabezado_for : FOR PARENT_A error",
"encabezado_for : FOR error",
"sentencia_for : encabezado_for_etiqueta LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : encabezado_for_etiqueta ejecutables_break_continue",
"sentencia_for : encabezado_for LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : encabezado_for ejecutables_break_continue",
"sentencia_for : encabezado_for_etiqueta LLAVE_A bloque_break_continue error",
"sentencia_for : encabezado_for_etiqueta error",
"sentencia_for : encabezado_for LLAVE_A bloque_break_continue error",
"sentencia_for : encabezado_for error",
"param_real : cte",
"param_real : ID",
"llamado_func : ID PARENT_A param_real COMA param_real PARENT_C",
"llamado_func : ID PARENT_A param_real PARENT_C",
"llamado_func : ID PARENT_A PARENT_C",
"llamado_func : ID PARENT_A param_real COMA param_real error",
"llamado_func : ID PARENT_A param_real error",
"llamado_func : ID PARENT_A error",
"llamado_func : ID PARENT_A param_real COMA error",
};

//#line 1554 "gramatica.y"
private NodoControl raiz;
private List<ArbolSintactico> funciones = new ArrayList<ArbolSintactico>();
private static HashMap<Integer,ArrayList<String>> erroresSintacticos = new HashMap<Integer,ArrayList<String>>();
public String ambitoActual = "Global";
private List<String> tipoActual = new ArrayList<String>();
private List<String> etiquetasAct = new ArrayList<String>();
private Stack<Boolean> hayReturn = new Stack<Boolean>();
private Map<String,List<ArbolSintactico>> mapEtiquetas = new HashMap<String,List<ArbolSintactico>>();
private Stack<List<String>> stackWhen = new Stack<List<String>>();
void yyerror(String mensaje){
        if (erroresSintacticos.get(AnalizadorLexico.getLineaAct())== null){
                ArrayList<String> mnsj = new ArrayList<String>();
                mnsj.add(mensaje); 
                erroresSintacticos.put(AnalizadorLexico.getLineaAct(), mnsj);
        }
        else{
                erroresSintacticos.get(AnalizadorLexico.getLineaAct()).add(mensaje);
        }
}
void yyerror(String mensaje,int linea){
        if (erroresSintacticos.get(linea)== null){
                ArrayList<String> mnsj = new ArrayList<String>();
                mnsj.add(mensaje); 
                erroresSintacticos.put(linea, mnsj);
        }
        else{
                erroresSintacticos.get(linea).add(mensaje);
        }
}
static HashMap<Integer,ArrayList<String>> getErroresSintacticos(){
        return erroresSintacticos;
}
void chequearRangoI32(String sval){
  String s = "2147483647";
  long l = Long.valueOf(s);
  if(Long.valueOf(sval) > l){
    yyerror("La constante esta fuera de rango");
  }
}

int yylex() throws IOException{
        Token t = AnalizadorLexico.getToken();
        this.yylval = new ParserVal(t.getLexema());
        return t.getId();
}
public NodoControl getRaiz(){
	return raiz;
}
public List<ArbolSintactico> getFuncion(){
        return funciones;
}

void actualizarAmbito(String lex, String amb){
        TablaSimbolos.addAtributo(lex,"Ambito",amb);
}
public String getTipoActual(){
        if(!this.tipoActual.isEmpty()){
                return (this.tipoActual.get(tipoActual.size()-1));
        }
        return null;
}
public void cambiarTipoActual(String f){
        tipoActual.add(f);
}
public void removeTipoActual(){
        if(!this.tipoActual.isEmpty()){
                this.tipoActual.remove(tipoActual.size()-1);
        }
}
public String buscarAmbito(String ambitoActual,String lexema){
        String ambito = ambitoActual;
        while(!TablaSimbolos.existeSimbolo(lexema+"@"+ambito)){
                if(ambito.equals("Global")){
                        //yyerror("La variable " + lexema + " no se encuentra declarada en el ambito " + ambitoActual);
                        ambito = "";
                        break;
                }else{
                        char [] a = ambito.toCharArray();
                        for (int i = a.length;i>=0;i--){
                                if(a[i-1] == '@'){
                                        ambito = ambito.substring(0,i-1);
                                        break;
                                }
                        }
                }
        }
        return ambito;
}
public String calcularFloat(String f){
        int i =0;
	char caracter=' ';
	String digito=""; //parte numerica
	String exponente=""; //parte exponencial	
	while (caracter != 'F') {
                if(i<f.length()){
                      caracter = f.charAt(i);
		        digito+= caracter;
		        i++; 
                }else{
                        return f;
                }
	}
        Double d = Double.parseDouble(digito);
	for (int j=i ; j < (f.length()); j++) {
		caracter = f.charAt(j);
		exponente += caracter;
	}
	Double e = Double.parseDouble(exponente);
	Double numero = Math.pow(d, e);
        return numero.toString();	
}
//#line 1373 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse() throws IOException
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 23 "gramatica.y"
{raiz = new NodoControl("PROGRAMA",(ArbolSintactico)val_peek(1));  TablaSimbolos.removeAtributo(val_peek(3).sval);}
break;
case 2:
//#line 24 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba }");}
break;
case 3:
//#line 25 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba {");}
break;
case 4:
//#line 26 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba el nombre del programa");}
break;
case 6:
//#line 30 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 7:
//#line 31 "gramatica.y"
{yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 8:
//#line 32 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ;"); }
break;
case 9:
//#line 34 "gramatica.y"
{yyval=val_peek(0);}
break;
case 10:
//#line 35 "gramatica.y"
{yyval = val_peek(0);}
break;
case 11:
//#line 37 "gramatica.y"
{yyval= new NodoHoja("Sentencia Declarativa");}
break;
case 12:
//#line 38 "gramatica.y"
{yyval= new NodoHoja("Sentencia Declarativa");}
break;
case 13:
//#line 39 "gramatica.y"
{yyval= new NodoHoja("Sentencia Declarativa");}
break;
case 14:
//#line 40 "gramatica.y"
{yyval=val_peek(0);}
break;
case 15:
//#line 42 "gramatica.y"
{yyval = new NodoHoja("Entero"); ((NodoHoja)yyval).setTipo("Entero");}
break;
case 16:
//#line 43 "gramatica.y"
{yyval = new NodoHoja("Float");((NodoHoja)yyval).setTipo("Float");}
break;
case 17:
//#line 46 "gramatica.y"
{ 
                                        for (String s : ((NodoTipos)val_peek(0)).getList()){
                                                String ambito = ambitoActual;
                                                while(TablaSimbolos.existeSimbolo(s+"@"+ambito)){
                                                        if(ambito.equals("Global")){
                                                                yyerror("La variable " + s + " ya se encuentra declarada en el ambito " + ambitoActual);
                                                                ambito = "";
                                                                break;
                                                        }else{
                                                                char [] a = ambito.toCharArray();
                                                                for (int i = a.length;i>=0;i--){
                                                                        if(a[i-1] == ':'){
                                                                        ambito = ambito.substring(0,i-1);
                                                                        break;
                                                                        }
                                                                }
                                                        }
                                                }  
                                                if(ambito.equals(ambitoActual)){
                                                        if (!stackWhen.empty()){
                                                                List<String> tope=stackWhen.pop();
                                                                tope.add(s+"@"+ambito);
                                                                tope.add(s);
                                                                stackWhen.push(tope);
                                                        }
                                                        TablaSimbolos.addNuevoSimbolo(s+"@"+ambito);
                                                        TablaSimbolos.addAtributo(s+"@"+ambito,"Id",TablaSimbolos.getAtributo(s,"Id"));
                                                        TablaSimbolos.addAtributo(s+"@"+ambito,"Tipo",((ArbolSintactico) val_peek(1)).getTipo());
                                                        TablaSimbolos.addAtributo(s+"@"+ambito,"Linea",AnalizadorLexico.getLineaAct());
                                                        TablaSimbolos.addAtributo(s+"@"+ambito,"Uso","Variable");
                                                        TablaSimbolos.removeAtributo(s);
                                                }
                                        }
                                        yyval = val_peek(0);
                                }
break;
case 18:
//#line 81 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("se esperaba lista de identificadores entre comas");}
break;
case 19:
//#line 83 "gramatica.y"
{yyval=val_peek(2);((NodoTipos)yyval).add((String)val_peek(0).sval);}
break;
case 20:
//#line 84 "gramatica.y"
{yyval=new NodoTipos((String)val_peek(0).sval);}
break;
case 21:
//#line 86 "gramatica.y"
{      
                                yyval = new NodoHoja(val_peek(7).sval);
                                if(!TablaSimbolos.existeSimbolo(val_peek(7).sval+ "@" + ambitoActual)){
                                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(0)).getTipo());
                                        TablaSimbolos.addNuevoSimbolo(val_peek(7).sval+ "@" + ambitoActual);
                                        if (!stackWhen.empty()){
                                                List<String> tope=stackWhen.pop();
                                                tope.add(val_peek(7).sval+ "@" + ambitoActual);
                                                stackWhen.push(tope);
                                        }   
                                        TablaSimbolos.addAtributo(val_peek(7).sval+ "@" + ambitoActual,"Uso","Funcion");
                                        TablaSimbolos.addAtributo(val_peek(7).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(7).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(7).sval);
                                        TablaSimbolos.addAtributo(val_peek(7).sval+"@"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                        TablaSimbolos.addAtributo(val_peek(7).sval +"@"+ambitoActual,"Parametro1",((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual +"@"+ val_peek(7).sval);
                                        TablaSimbolos.addAtributo(val_peek(7).sval +"@"+ambitoActual,"Parametro2",((ArbolSintactico)val_peek(3)).getLex()+ "@"+ ambitoActual +"@"+ val_peek(7).sval);
                                        ambitoActual += "@"+val_peek(7).sval;
                                        if (!stackWhen.empty()){
                                                List<String> tope=stackWhen.pop();
                                                tope.add(((ArbolSintactico)val_peek(5)).getLexemaWhen() + "@"+ ambitoActual);
                                                tope.add(((ArbolSintactico)val_peek(3)).getLexemaWhen() + "@"+ ambitoActual);
                                                stackWhen.push(tope);
                                        }
                                        cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                        /*Agrego los parametros en la tabla de simbolos*/
                                        TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual);
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(5)).getTipo());
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual,"Uso","Variable");
                                        TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual);
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Uso","Variable");
                                        hayReturn.push(false);
                                }else{
                                        yyerror("El identificador " + val_peek(7).sval + " ya esta usado en el ambito " + ambitoActual);
                                        ambitoActual += "@"+val_peek(7).sval;
                                }
                        }
break;
case 22:
//#line 123 "gramatica.y"
{
                        yyval = new NodoHoja(val_peek(5).sval);
                        if(!TablaSimbolos.existeSimbolo(val_peek(5).sval+ "@" + ambitoActual)){
                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addNuevoSimbolo(val_peek(5).sval+ "@" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(5).sval+ "@" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(5).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(5).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(5).sval);
                                TablaSimbolos.addAtributo(val_peek(5).sval+"@"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addAtributo(val_peek(5).sval +"@"+ambitoActual,"Parametro1", ((ArbolSintactico)val_peek(3)).getLex()+ "@"+ ambitoActual +"@"+ val_peek(5).sval);
                                if (!stackWhen.empty()){
                                        List<String> tope=stackWhen.pop();
                                        tope.add(val_peek(5).sval+ "@" + ambitoActual);
                                        stackWhen.push(tope);
                                }
                                ambitoActual += "@"+val_peek(5).sval;
                                if (!stackWhen.empty()){
                                        List<String> tope=stackWhen.pop();
                                        tope.add(((ArbolSintactico)val_peek(3)).getLexemaWhen() + "@"+ ambitoActual);
                                        stackWhen.push(tope);
                                }
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                /*Agrego el parametro en la tabla de simbolos*/
                                TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual);
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Uso","Variable");
                                hayReturn.push(false);

                        }else{
                                yyerror("El identificador " + val_peek(5).sval + " ya esta usado en el ambito " + ambitoActual);
                                ambitoActual += "@"+val_peek(5).sval;
                        }
                }
break;
case 23:
//#line 156 "gramatica.y"
{
                        yyval = new NodoHoja(val_peek(4).sval);
                        if(!TablaSimbolos.existeSimbolo(val_peek(4).sval+ "@" + ambitoActual)){
                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addNuevoSimbolo(val_peek(4).sval+ "@" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(4).sval+ "@" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(4).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(4).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(4).sval);
                                TablaSimbolos.addAtributo(val_peek(4).sval+"@"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                if (!stackWhen.empty()){
                                        List<String> tope=stackWhen.pop();
                                        tope.add(val_peek(4).sval+ "@" + ambitoActual);
                                        stackWhen.push(tope);
                                }
                                ambitoActual += "@"+val_peek(4).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                hayReturn.push(false);
                        }else{
                                yyerror("El identificador " + val_peek(4).sval + " ya esta usado en el ambito " + ambitoActual);
                                ambitoActual += "@"+val_peek(4).sval;
                        }
                }
break;
case 24:
//#line 178 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");  ambitoActual += "@"+"Error";yyerror("El tipo declarado no esta permitido");}
break;
case 25:
//#line 179 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  ambitoActual += "@"+"Error";yyerror("El tipo declarado no esta permitido");}
break;
case 26:
//#line 180 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");   ambitoActual += "@"+"Error"; yyerror("El tipo declarado no esta permitido");}
break;
case 27:
//#line 181 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  ambitoActual += "@"+"Error"; yyerror("Se esperaba :");}
break;
case 28:
//#line 182 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); ambitoActual += "@"+"Error";yyerror("Se esperaba :");}
break;
case 29:
//#line 183 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); ambitoActual += "@"+"Error";  yyerror("Se esperaba :");}
break;
case 30:
//#line 184 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); ambitoActual += "@"+"Error"; yyerror("Se esperaba )");}
break;
case 31:
//#line 185 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  ambitoActual += "@"+"Error"; yyerror("Se esperaba )");}
break;
case 32:
//#line 186 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  ambitoActual += "@"+"Error"; yyerror("Se esperaba )");}
break;
case 33:
//#line 187 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); ambitoActual += "@"+"Error";yyerror("Se esperaba otro parametro");}
break;
case 34:
//#line 188 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); ambitoActual += "@"+"Error"; yyerror("Se esperaba (");}
break;
case 35:
//#line 189 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba un nombre de funcion");}
break;
case 36:
//#line 191 "gramatica.y"
{
                                if(!hayReturn.empty() && hayReturn.pop() == true){
                                        char [] a = ambitoActual.toCharArray();
                                        for (int i = a.length;i>=0;i--){
                                                if(a[i-1] == '@'){
                                                        ambitoActual = ambitoActual.substring(0,i-1);
                                                        break;
                                                }
                                        }
                                        NodoControl n = new NodoControl(((ArbolSintactico)val_peek(3)).getLex()+"@"+ambitoActual,(ArbolSintactico)val_peek(1));
                                        n.setTipo(((ArbolSintactico)val_peek(3)).getTipo());
                                        yyval = new NodoControl("Funcion",n);
                                        removeTipoActual();
                                        funciones.add((ArbolSintactico)yyval);
                                        if (!stackWhen.empty()){
                                                List<String> tope=stackWhen.pop();
                                                tope.add("@aux@"+((ArbolSintactico)val_peek(3)).getLex()+"@"+ambitoActual);
                                                stackWhen.push(tope);
                                        }
                                        NodoHoja varAux = (new NodoHoja("@aux@"+((ArbolSintactico)val_peek(3)).getLex()+"@"+ambitoActual));
                                        varAux.setTipo(n.getTipo());
                                        varAux.setUso("variableAuxiliar");
                                }else{
                                        yyerror("La funcion " + ((ArbolSintactico)val_peek(3)).getLex() + " no cuenta con ningun retorno." );
                                }
}
break;
case 37:
//#line 217 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 38:
//#line 218 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba {");}
break;
case 39:
//#line 220 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 40:
//#line 221 "gramatica.y"
{yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 41:
//#line 222 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ;");}
break;
case 42:
//#line 224 "gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa Datos");}
break;
case 43:
//#line 225 "gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa Funcion");}
break;
case 44:
//#line 226 "gramatica.y"
{yyval= new NodoHoja("Sentencia Declarativa Constante");}
break;
case 45:
//#line 227 "gramatica.y"
{yyval = val_peek(0);}
break;
case 46:
//#line 228 "gramatica.y"
{yyval=val_peek(0);}
break;
case 47:
//#line 229 "gramatica.y"
{yyval=val_peek(0);}
break;
case 48:
//#line 230 "gramatica.y"
{yyval = val_peek(0);}
break;
case 49:
//#line 231 "gramatica.y"
{yyval = val_peek(0);}
break;
case 50:
//#line 232 "gramatica.y"
{yyval=val_peek(0);}
break;
case 51:
//#line 233 "gramatica.y"
{yyval=val_peek(0);}
break;
case 52:
//#line 234 "gramatica.y"
{yyval=val_peek(0);}
break;
case 53:
//#line 236 "gramatica.y"
{ yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(8)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(5)),new NodoControl("Else", (ArbolSintactico)val_peek(2))));}
break;
case 54:
//#line 237 "gramatica.y"
{yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(6)),new NodoControl("Else", (ArbolSintactico)val_peek(2))));}
break;
case 55:
//#line 238 "gramatica.y"
{yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(7)),new NodoControl("Else", (ArbolSintactico)val_peek(3))));}
break;
case 56:
//#line 239 "gramatica.y"
{ yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));}
break;
case 57:
//#line 240 "gramatica.y"
{ yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(6)),new NodoControl("Else", (ArbolSintactico)val_peek(2))));}
break;
case 58:
//#line 241 "gramatica.y"
{ yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));}
break;
case 59:
//#line 242 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba end_if ");}
break;
case 60:
//#line 243 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 61:
//#line 244 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba { ");}
break;
case 62:
//#line 245 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba end_if ");}
break;
case 63:
//#line 246 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 64:
//#line 247 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if");}
break;
case 65:
//#line 248 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 66:
//#line 249 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba { ");}
break;
case 67:
//#line 250 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba end_if");}
break;
case 68:
//#line 251 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba ; luego de la sentencia");}
break;
case 69:
//#line 252 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba { ");}
break;
case 70:
//#line 253 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba then ");}
break;
case 71:
//#line 254 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba ) ");}
break;
case 72:
//#line 255 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba una condicion ");}
break;
case 73:
//#line 256 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba (");}
break;
case 74:
//#line 257 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba end_if");}
break;
case 75:
//#line 258 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ; luego de la sentencia");}
break;
case 76:
//#line 259 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if");}
break;
case 77:
//#line 260 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ; luego de la sentencia");}
break;
case 78:
//#line 262 "gramatica.y"
{
        yyval=val_peek(4);
        if (!((ArbolSintactico)val_peek(4)).getLex().equals("No cumple condicion when")){
                ((ArbolSintactico)val_peek(4)).setIzq((ArbolSintactico)val_peek(1));
                if (!stackWhen.empty()){
                        List<String> tope=stackWhen.pop();
                        if (!stackWhen.empty()){
                                List<String> whenSuperior=stackWhen.pop();
                                for(String cadena :tope){
                                        whenSuperior.add(cadena);
                                }
                                stackWhen.push(whenSuperior);
                        }
                }

        } else if (!((ArbolSintactico)val_peek(4)).getLex().equals("Error sintactico")){
                if (!stackWhen.empty()){
                        List<String> tope=stackWhen.pop();
                        for(String cadena :tope){
                                TablaSimbolos.removeAtributo(cadena);
                        }
                }
        }
}
break;
case 79:
//#line 287 "gramatica.y"
{
        yyval=val_peek(2);
        if (!((ArbolSintactico)val_peek(2)).getLex().equals("No cumple condicion when")){
                ((ArbolSintactico)val_peek(2)).setIzq((ArbolSintactico)val_peek(0));
                if (!stackWhen.empty()){
                        List<String> tope=stackWhen.pop();
                        if (!stackWhen.empty()){
                                List<String> whenSuperior=stackWhen.pop();
                                for(String cadena :tope){
                                        whenSuperior.add(cadena);
                                }
                                stackWhen.push(whenSuperior);
                        }
                }
        }else if (!((ArbolSintactico)val_peek(2)).getLex().equals("Error sintactico")){ 
                if (!stackWhen.empty()){
                        List<String> tope=stackWhen.pop();
                        for(String cadena :tope){
                                TablaSimbolos.removeAtributo(cadena);
                        }
                }
        }
}
break;
case 80:
//#line 310 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba }");}
break;
case 81:
//#line 311 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba {");}
break;
case 82:
//#line 312 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba then");}
break;
case 83:
//#line 314 "gramatica.y"
{
                                yyval = new ParserVal(val_peek(1).sval);
                                if(!TablaSimbolos.existeSimbolo(val_peek(1).sval+ "@" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(1).sval+ "@" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(1).sval+ "@" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(1).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(1).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(1).sval);
                                        etiquetasAct.add(val_peek(1).sval + "@" + ambitoActual);
                                }else{
                                        yyerror("El identificador " + val_peek(1).sval + " ya esta usado en el ambito " + ambitoActual);
                                }
                        }
break;
case 84:
//#line 327 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().setIzq((ArbolSintactico)val_peek(1));
                                String tag = ((ArbolSintactico)val_peek(3)).getIzq().getIzq().getLex();
                                List<ArbolSintactico> l = mapEtiquetas.get(tag);
                                if(l!=null){
                                        for(ArbolSintactico a : l){
                                                a.setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer());
                                        }
                                }
                        }
                        yyval = val_peek(3);
                }
break;
case 85:
//#line 340 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().setIzq((ArbolSintactico)val_peek(0));
                                String tag = ((ArbolSintactico)val_peek(1)).getIzq().getIzq().getLex();
                                List<ArbolSintactico> l = mapEtiquetas.get(tag);
                                if(l!=null){
                                        for(ArbolSintactico a : l){
                                                a.setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer());
                                        }
                                }
                        }
                        yyval = val_peek(1);
                        
                }
break;
case 86:
//#line 354 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().setIzq((ArbolSintactico)val_peek(1));
                        }
                        yyval = val_peek(3);
                }
break;
case 87:
//#line 360 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().setIzq((ArbolSintactico)val_peek(0));
                        }
                        yyval = val_peek(1);
                }
break;
case 88:
//#line 367 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(1));
                                String tag = ((ArbolSintactico)val_peek(3)).getIzq().getIzq().getLex();
                                List<ArbolSintactico> l= mapEtiquetas.get(tag);
                                if(l!=null){
                                        for(ArbolSintactico a: l){
                                                a.setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer().getDer());
                                        }
                                }
                        }
                        yyval = val_peek(3);
                }
break;
case 89:
//#line 380 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(0));
                                String tag = ((ArbolSintactico)val_peek(1)).getIzq().getIzq().getLex();
                                List<ArbolSintactico> l= mapEtiquetas.get(tag);
                                if(l!=null){
                                        for(ArbolSintactico a: l){
                                                a.setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer().getDer());
                                        }
                                }
                        }
                        yyval = val_peek(1);
                }
break;
case 90:
//#line 393 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(1));
                        }
                        yyval = val_peek(3);
                }
break;
case 91:
//#line 399 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(0));
                        }
                        yyval = val_peek(1);
                }
break;
case 92:
//#line 405 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba }");}
break;
case 93:
//#line 406 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba }");}
break;
case 94:
//#line 408 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 95:
//#line 409 "gramatica.y"
{yyval=new NodoComun("Sentencia_Break", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 96:
//#line 410 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ;");}
break;
case 97:
//#line 412 "gramatica.y"
{yyval = val_peek(0);}
break;
case 98:
//#line 413 "gramatica.y"
{yyval = val_peek(0);}
break;
case 99:
//#line 414 "gramatica.y"
{yyval = val_peek(0);}
break;
case 100:
//#line 415 "gramatica.y"
{yyval = val_peek(0);}
break;
case 101:
//#line 416 "gramatica.y"
{yyval = val_peek(0);}
break;
case 102:
//#line 417 "gramatica.y"
{        boolean b = false;
                                        if(((ArbolSintactico)val_peek(0)).getIzq()!=null){
                                                String tag = ((ArbolSintactico)val_peek(0)).getIzq().getLex() + "@" + ambitoActual;
                                                for(String s : etiquetasAct){
                                                        if( tag.equals(s)){
                                                                b = true;
                                                                break;
                                                        }
                                                }
                                                if(!b){
                                                        yyerror("No se puede saltar al tag " + ((ArbolSintactico)val_peek(0)).getIzq().getLex());
                                                        yyval = new NodoHoja("Error");
                                                }else{
                                                        yyval = new NodoComun("Continue",new NodoHoja("Fin"),(ArbolSintactico)val_peek(0));
                                                        if(mapEtiquetas.containsKey(((ArbolSintactico)val_peek(0)).getIzq().getLex())){
                                                                mapEtiquetas.get(((ArbolSintactico)val_peek(0)).getIzq().getLex()).add((ArbolSintactico)yyval);
                                                        }
                                                }
                                        }else{
                                                yyval = new NodoComun("Continue",null,(ArbolSintactico)val_peek(0));
                                        }
                                }
break;
case 103:
//#line 439 "gramatica.y"
{yyval = new NodoHoja("Break");}
break;
case 104:
//#line 440 "gramatica.y"
{yyval = new NodoControl("Break", new NodoHoja(val_peek(0).sval));}
break;
case 105:
//#line 441 "gramatica.y"
{yyval=val_peek(0);}
break;
case 106:
//#line 443 "gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));}
break;
case 107:
//#line 444 "gramatica.y"
{yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 108:
//#line 445 "gramatica.y"
{yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 109:
//#line 446 "gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );}
break;
case 110:
//#line 447 "gramatica.y"
{yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 111:
//#line 448 "gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));}
break;
case 112:
//#line 449 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 113:
//#line 450 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 114:
//#line 451 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba { ");}
break;
case 115:
//#line 452 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 116:
//#line 453 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba } ");}
break;
case 117:
//#line 454 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 118:
//#line 455 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 119:
//#line 456 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba { ");}
break;
case 120:
//#line 457 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 121:
//#line 458 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ; luego de la sentencia");}
break;
case 122:
//#line 459 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 123:
//#line 460 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ; luego de la sentencia");}
break;
case 124:
//#line 461 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 125:
//#line 462 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ; luego de la sentencia");}
break;
case 126:
//#line 463 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba { ");}
break;
case 127:
//#line 464 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba then ");}
break;
case 128:
//#line 465 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ) ");}
break;
case 129:
//#line 466 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba una condicion ");}
break;
case 130:
//#line 467 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ( ");}
break;
case 131:
//#line 469 "gramatica.y"
{yyval = new NodoControl("Retorno", (ArbolSintactico)val_peek(1));
                                                String tipoRet = ((ArbolSintactico)val_peek(1)).getTipo();
                                                if(!ambitoActual.equals("Global")){
                                                        String tipoFun = getTipoActual();
                                                        if(!tipoRet.equals(tipoFun)){
                                                                yyerror("El retorno debe ser del mismo tipo que el retorno de la funcion.");
                                                        }else{
                                                                if (!hayReturn.empty()){
                                                                        hayReturn.pop();
                                                                        hayReturn.push(true);
                                                                }
                                                        }
                                                }else{
                                                        yyerror("El retorno puede estar solo dentro de una funcion.");
                                                }
                                        }
break;
case 132:
//#line 485 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba )");}
break;
case 133:
//#line 486 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba expresion");}
break;
case 134:
//#line 487 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba expresion entre ( )");}
break;
case 135:
//#line 489 "gramatica.y"
{    yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(1)).getTipo());
                        TablaSimbolos.removeAtributo(val_peek(0).sval);}
break;
case 136:
//#line 492 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba identificador");}
break;
case 140:
//#line 499 "gramatica.y"
{ 
                                if(TablaSimbolos.existeSimbolo(val_peek(2).sval+"@"+ambitoActual)){
                                        yyerror("La variable " + val_peek(2).sval + " ya se encuentra declarada en el ambito " + ambitoActual);
                                }else{
                                        TablaSimbolos.addNuevoSimbolo(val_peek(2).sval+"@"+ambitoActual);
                                        if (!stackWhen.empty()){
                                                List<String> tope=stackWhen.pop();
                                                tope.add(val_peek(2).sval+ "@" + ambitoActual);
                                                tope.add(val_peek(0).sval);
                                                stackWhen.push(tope);
                                        }
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(2).sval,"Id"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Tipo",TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Linea",AnalizadorLexico.getLineaAct());
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Uso","Constante");
                                        if (TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo").equals("Entero")){
                                                TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Valor", Long.valueOf(val_peek(0).sval));
                                        }else{
                                                TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Valor", Double.parseDouble((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Valor")));
                                        }
                                        TablaSimbolos.removeAtributo(val_peek(2).sval);
                                }
                        }
break;
case 141:
//#line 522 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba una constante");}
break;
case 142:
//#line 523 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba una asignacion =:");}
break;
case 143:
//#line 525 "gramatica.y"
{yyval = val_peek(0);}
break;
case 144:
//#line 526 "gramatica.y"
{yyval = val_peek(0); }
break;
case 145:
//#line 527 "gramatica.y"
{yyval = val_peek(0);}
break;
case 146:
//#line 528 "gramatica.y"
{yyval = val_peek(0);}
break;
case 147:
//#line 529 "gramatica.y"
{yyval = val_peek(0);}
break;
case 148:
//#line 530 "gramatica.y"
{yyval=val_peek(0);}
break;
case 149:
//#line 532 "gramatica.y"
{
                                        String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                                        NodoHoja hoja = new NodoHoja(val_peek(2).sval+"@"+ambito);
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval, hoja , (ArbolSintactico) val_peek(0));
                                        String tipoS1 = (String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo");
                                        String tipoS3 = ((ArbolSintactico)val_peek(0)).getTipo();
                                        if(!ambito.equals("")){
                                                if(!(tipoS1.equals(tipoS3))){
                                                        yyerror("No se puede realizar una asignacion con tipos diferentes.");
                                                }
                                                else if(((String)TablaSimbolos.getAtributo(val_peek(2).sval+"@"+ambito, "Uso")).equals("Variable")){
                                                        ((ArbolSintactico)yyval).setTipo(tipoS1);
                                                        hoja.setUso((String)TablaSimbolos.getAtributo(val_peek(2).sval+"@"+ambito, "Uso"));
                                                        hoja.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                                }
                                                else {
                                                        yyerror(val_peek(2).sval+" no es una variable.");
                                                }
                                        
                                        }else {
                                                yyerror(val_peek(2).sval+" no esta declarada");
                                        }
                }
break;
case 150:
//#line 555 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba =:");}
break;
case 151:
//#line 556 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba expresion");}
break;
case 152:
//#line 558 "gramatica.y"
{     
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));

                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una suma con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                 }
break;
case 153:
//#line 567 "gramatica.y"
{
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una resta con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                 }
break;
case 154:
//#line 576 "gramatica.y"
{yyval = val_peek(0);}
break;
case 155:
//#line 577 "gramatica.y"
{
                                        NodoHoja cte = new NodoHoja(val_peek(0).sval);
                                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        yyval = new NodoComun("For como expresion",(ArbolSintactico)val_peek(2),cte);
                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));     
                                        }
break;
case 156:
//#line 583 "gramatica.y"
{
                                        NodoHoja cte = new NodoHoja(val_peek(0).sval);
                                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        yyval = new NodoComun("While como expresion",(ArbolSintactico)val_peek(2),cte);
                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo")); 
                                        }
break;
case 157:
//#line 589 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba un termino");}
break;
case 158:
//#line 590 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba un termino");}
break;
case 159:
//#line 591 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba un constante");}
break;
case 160:
//#line 592 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba un constante");}
break;
case 161:
//#line 594 "gramatica.y"
{ 
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una multiplicacion con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 162:
//#line 603 "gramatica.y"
{
                                        yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una division con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 163:
//#line 611 "gramatica.y"
{yyval = val_peek(0);}
break;
case 164:
//#line 612 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba un factor");}
break;
case 165:
//#line 613 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba un factor");}
break;
case 166:
//#line 615 "gramatica.y"
{
                String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                if((!ambito.equals(""))){
                        if(((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso")).equals("Variable")
                        || ((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso")).equals("Constante")){
                                yyval = new NodoHoja(val_peek(0).sval+"@"+ambito);
                                TablaSimbolos.removeAtributo(val_peek(0).sval);
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Tipo"));
                                ((ArbolSintactico)yyval).setUso((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso"));
                        }
                        else{
                                yyerror(val_peek(0).sval+" no es una variable");
                                yyval = new NodoHoja("Error");
                        }
                }else{
                        yyerror(val_peek(0).sval+" no fue declarada");
                        yyval = new NodoHoja("Error");
                }
           }
break;
case 167:
//#line 634 "gramatica.y"
{
                yyval = new NodoHoja(val_peek(0).sval);
                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                ((ArbolSintactico)yyval).setUso("Constante");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Uso","Constante");
              }
break;
case 168:
//#line 640 "gramatica.y"
{yyval=val_peek(0);}
break;
case 169:
//#line 642 "gramatica.y"
{  
                chequearRangoI32(val_peek(0).sval);
                TablaSimbolos.addNuevoSimbolo((String)val_peek(0).sval);
                TablaSimbolos.addAtributo(val_peek(0).sval, "Uso", "Constante");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Tipo", "Entero");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Valor", (String)val_peek(0).sval);
                if (!stackWhen.empty()){
                        List<String> lista=stackWhen.pop();
                        lista.add(val_peek(0).sval);
                        stackWhen.push(lista);
                }

        }
break;
case 170:
//#line 655 "gramatica.y"
{  
                TablaSimbolos.addNuevoSimbolo((String)val_peek(0).sval);
                TablaSimbolos.addAtributo(val_peek(0).sval, "Uso", "Constante");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Tipo", "Float");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Valor", calcularFloat(val_peek(0).sval));
                if (!stackWhen.empty()){
                        List<String> lista=stackWhen.pop();
                        lista.add(val_peek(0).sval);
                        stackWhen.push(lista);
                }
        }
break;
case 171:
//#line 666 "gramatica.y"
{
                yyval=new ParserVal(val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addNuevoSimbolo((String)val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Uso", "Constante");
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Tipo", "Entero");
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Valor", (String)val_peek(1).sval+val_peek(0).sval);
                if (!stackWhen.empty()){
                        List<String> lista=stackWhen.pop();
                        lista.add(val_peek(1).sval+val_peek(0).sval);
                        stackWhen.push(lista);
                }
        }
break;
case 172:
//#line 678 "gramatica.y"
{
                yyval=new ParserVal(val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addNuevoSimbolo((String)val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Uso", "Constante");
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Tipo", "Float");
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Valor", val_peek(1).sval+calcularFloat(val_peek(0).sval));
                if (!stackWhen.empty()){
                        List<String> lista=stackWhen.pop();
                        lista.add(val_peek(1).sval+val_peek(0).sval);
                        stackWhen.push(lista);
                }
        }
break;
case 173:
//#line 691 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(1));
                        }
                        yyval = val_peek(3);
                }
break;
case 174:
//#line 697 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(0));
                        }
                        yyval = val_peek(1);
                }
break;
case 175:
//#line 703 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba }");}
break;
case 176:
//#line 704 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().setIzq((ArbolSintactico)val_peek(1));
                        }
                        yyval=val_peek(3);
                }
break;
case 177:
//#line 710 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().setIzq((ArbolSintactico)val_peek(0));
                        }
                        yyval=val_peek(1);
                }
break;
case 178:
//#line 716 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba }");}
break;
case 179:
//#line 718 "gramatica.y"
{yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 180:
//#line 719 "gramatica.y"
{yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 181:
//#line 720 "gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));}
break;
case 182:
//#line 721 "gramatica.y"
{yyval = new NodoComun("IF",new NodoControl("Condicion", (ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );}
break;
case 183:
//#line 722 "gramatica.y"
{yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 184:
//#line 723 "gramatica.y"
{ yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));}
break;
case 185:
//#line 724 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 186:
//#line 725 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 187:
//#line 726 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba { ");}
break;
case 188:
//#line 727 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 189:
//#line 728 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 190:
//#line 729 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 191:
//#line 730 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba } ");}
break;
case 192:
//#line 731 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba { ");}
break;
case 193:
//#line 732 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 194:
//#line 733 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ; luego de la sentencia");}
break;
case 195:
//#line 734 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 196:
//#line 735 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ; luego de la sentencia");}
break;
case 197:
//#line 736 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 198:
//#line 737 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ; luego de la sentencia");}
break;
case 199:
//#line 738 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba { ");}
break;
case 200:
//#line 739 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba then ");}
break;
case 201:
//#line 740 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ) ");}
break;
case 202:
//#line 741 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba una condicion ");}
break;
case 203:
//#line 742 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ( ");}
break;
case 204:
//#line 744 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 205:
//#line 745 "gramatica.y"
{yyval=new NodoComun("Bloque Ejecutable Asignacion", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 206:
//#line 747 "gramatica.y"
{yyval = val_peek(0);}
break;
case 207:
//#line 748 "gramatica.y"
{yyval = val_peek(0);}
break;
case 208:
//#line 749 "gramatica.y"
{yyval = val_peek(0);}
break;
case 209:
//#line 750 "gramatica.y"
{yyval = val_peek(0);}
break;
case 210:
//#line 751 "gramatica.y"
{yyval = val_peek(0);}
break;
case 211:
//#line 752 "gramatica.y"
{NodoHoja cte = new NodoHoja(val_peek(0).sval);
                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                        yyval = new NodoControl("Break", cte);}
break;
case 212:
//#line 756 "gramatica.y"
{ yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2))));  }
break;
case 213:
//#line 757 "gramatica.y"
{ yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 214:
//#line 758 "gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));}
break;
case 215:
//#line 759 "gramatica.y"
{yyval = new NodoComun("IF",new NodoControl("Condicion", (ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );}
break;
case 216:
//#line 760 "gramatica.y"
{                                              yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 217:
//#line 761 "gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));}
break;
case 218:
//#line 762 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 219:
//#line 763 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba } ");}
break;
case 220:
//#line 764 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba { ");}
break;
case 221:
//#line 765 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 222:
//#line 766 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 223:
//#line 767 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 224:
//#line 768 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba } ");}
break;
case 225:
//#line 769 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba { ");}
break;
case 226:
//#line 770 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 227:
//#line 771 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ; luego de la sentencia");}
break;
case 228:
//#line 772 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 229:
//#line 773 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ; luego de la sentencia");}
break;
case 230:
//#line 774 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 231:
//#line 775 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba ; luego de la sentencia");}
break;
case 232:
//#line 776 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba { ");}
break;
case 233:
//#line 777 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba then ");}
break;
case 234:
//#line 778 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba ) ");}
break;
case 235:
//#line 779 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba una condicion ");}
break;
case 236:
//#line 780 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ( ");}
break;
case 237:
//#line 782 "gramatica.y"
{
                        yyval= new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                        ((ArbolSintactico)yyval).setUso("Condicion");
                        if (!((((ArbolSintactico)val_peek(2)).getTipo()).equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                               yyerror("error en la comparacion entre expresiones de distintos tipos");
                        }
                }
break;
case 238:
//#line 790 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba otra expresion para comparar.");}
break;
case 239:
//#line 791 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba un tipo de comparacion.");}
break;
case 240:
//#line 793 "gramatica.y"
{yyval= val_peek(0);}
break;
case 241:
//#line 794 "gramatica.y"
{yyval= val_peek(0);}
break;
case 242:
//#line 795 "gramatica.y"
{yyval= val_peek(0);}
break;
case 243:
//#line 796 "gramatica.y"
{yyval= val_peek(0);}
break;
case 244:
//#line 797 "gramatica.y"
{yyval= val_peek(0);}
break;
case 245:
//#line 798 "gramatica.y"
{yyval=val_peek(0);}
break;
case 246:
//#line 800 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 247:
//#line 801 "gramatica.y"
{yyval=new NodoComun("Bloque Ejecutable", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 248:
//#line 802 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ;");}
break;
case 249:
//#line 804 "gramatica.y"
{  yyval = new NodoControl(val_peek(3).sval, (ArbolSintactico) new NodoHoja(val_peek(1).sval));}
break;
case 250:
//#line 805 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba )");}
break;
case 251:
//#line 806 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba una CADENA");}
break;
case 252:
//#line 807 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba (");}
break;
case 253:
//#line 809 "gramatica.y"
{
                String atributoIzq=((ArbolSintactico)val_peek(3)).getLexemaWhen();
                String atributoDer=((ArbolSintactico)val_peek(1)).getLexemaWhen();
                if (!TablaSimbolos.existeSimbolo(atributoIzq)||!TablaSimbolos.existeSimbolo(atributoDer)){
                        yyerror("Identificador en la condicion no declarado");
                        yyval = new NodoHoja("Error en el when");
                }
                else if (!TablaSimbolos.getAtributo(atributoIzq, "Uso" ).equals("Constante")){
                        yyerror(atributoIzq+" no es una constante");
                        yyval = new NodoHoja("Error en el when");

                }else if (!TablaSimbolos.getAtributo(atributoDer, "Uso" ).equals("Constante")){
                        yyerror(atributoDer+" no es una constante");
                        yyval = new NodoHoja("Error en el when");
                }
                else if (!TablaSimbolos.getAtributo(atributoIzq, "Tipo" ).equals(TablaSimbolos.getAtributo(atributoDer, "Tipo" ))){
                        yyerror("Los valores de la condicion del when son de tipos diferentes");
                        yyval = new NodoHoja("Error en el when");
                }else{
                        String s1 =TablaSimbolos.getAtributo(atributoIzq, "Valor")+"";
                        String s2 =TablaSimbolos.getAtributo(atributoDer, "Valor")+"";
                        double valorIzq = Double.parseDouble(s1);
                        double valorDer = Double.parseDouble(s2);
                        switch (val_peek(2).sval){
                                case "=":
                                        if (valorIzq==valorDer){
                                                
                                                yyval = new NodoControl("When", new NodoHoja("When sin sentencias"));
                                        }else{
                                               yyval = new NodoHoja("No cumple condicion when"); 
                                               
                                        }
                                        break;
                                case "<":
                                        if (valorIzq < valorDer){
                                                yyval = new NodoControl("When", new NodoHoja("When sin sentencias"));
                                        }else{
                                               yyval = new NodoHoja("No cumple condicion when");
                                        }
                                        break;
                                case ">":
                                        if (valorIzq > valorDer){
                                                yyval = new NodoControl("When", new NodoHoja("When sin sentencias"));
                                        }else{
                                               yyval = new NodoHoja("No cumple condicion when");
                                               }
                                        break;
                                case "=!":
                                        if (valorIzq != valorDer){
                                                yyval = new NodoControl("When", new NodoHoja("When sin sentencias"));
                                        }else{
                                               yyval = new NodoHoja("No cumple condicion when");
                                               }
                                        break;
                                case "<=":
                                        if (valorIzq <= valorDer){
                                                yyval = new NodoControl("When", new NodoHoja("When sin sentencias"));
                                        }else{
                                               yyval = new NodoHoja("No cumple condicion when");
                                        }
                                        break;
                                case ">=":
                                        if (valorIzq >= valorDer){
                                                yyval = new NodoControl("When", new NodoHoja("When sin sentencias"));
                                        }else{
                                               yyval = new NodoHoja("No cumple condicion when");
                                               }
                                        break;
                        
                        } 
                        List<String> whenActual = new ArrayList<String>();
                        stackWhen.push(whenActual);
                }
        }
break;
case 254:
//#line 883 "gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");
                }
break;
case 255:
//#line 887 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion en el when");}
break;
case 256:
//#line 889 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( en el when");}
break;
case 257:
//#line 892 "gramatica.y"
{
        yyval=val_peek(4);
        if (!((ArbolSintactico)val_peek(4)).getLex().equals("No cumple condicion when"))
        {
                ((ArbolSintactico)val_peek(4)).setIzq((ArbolSintactico)val_peek(1));
                if (!stackWhen.empty()){
                        List<String> tope=stackWhen.pop();
                        if (!stackWhen.empty()){
                                List<String> whenSuperior=stackWhen.pop();
                                for(String cadena :tope){
                                        whenSuperior.add(cadena);
                                }
                                stackWhen.push(whenSuperior);
                        }
                }
        }else if (!((ArbolSintactico)val_peek(4)).getLex().equals("Error sintactico")){
                if (!stackWhen.empty()){
                        List<String> tope=stackWhen.pop();
                        for(String cadena :tope){
                                TablaSimbolos.removeAtributo(cadena);
                        }
                }
        }
}
break;
case 258:
//#line 916 "gramatica.y"
{
                yyval=val_peek(2);
                if (!((ArbolSintactico)val_peek(2)).getLex().equals("No cumple condicion when"))
                {
                        ((ArbolSintactico)val_peek(2)).setIzq((ArbolSintactico)val_peek(0));
                        if (!stackWhen.empty()){
                                List<String> tope=stackWhen.pop();
                                if (!stackWhen.empty()){
                                        List<String> whenSuperior=stackWhen.pop();
                                        for(String cadena :tope){
                                                whenSuperior.add(cadena);
                                        }
                                        stackWhen.push(whenSuperior);
                                }
                        }
                }else  if (!((ArbolSintactico)val_peek(2)).getLex().equals("Error sintactico")){   
                        if (!stackWhen.empty()){
                                List<String> tope=stackWhen.pop();
                                for(String cadena :tope){
                                        TablaSimbolos.removeAtributo(cadena);
                                }
                        }
                        
                }
        }
break;
case 259:
//#line 941 "gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");
                }
break;
case 260:
//#line 945 "gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");
                }
break;
case 261:
//#line 949 "gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then");
                }
break;
case 262:
//#line 954 "gramatica.y"
{ 
                        yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(8).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", null, (ArbolSintactico) val_peek(1))) );
                        mapEtiquetas.put(val_peek(8).sval,new ArrayList<ArbolSintactico>());
                        }
break;
case 263:
//#line 958 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba )");}
break;
case 264:
//#line 959 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba una asignacion");}
break;
case 265:
//#line 960 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba (");}
break;
case 266:
//#line 961 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba :");}
break;
case 267:
//#line 962 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba )");}
break;
case 268:
//#line 963 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba una condicion");}
break;
case 269:
//#line 964 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba (");}
break;
case 270:
//#line 966 "gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", null, (ArbolSintactico) val_peek(1)) );      
                        }
break;
case 271:
//#line 969 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba )");}
break;
case 272:
//#line 970 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba una asignacion");}
break;
case 273:
//#line 971 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba (");}
break;
case 274:
//#line 972 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba :");}
break;
case 275:
//#line 973 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba )");}
break;
case 276:
//#line 974 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba una condicion");}
break;
case 277:
//#line 975 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba (");}
break;
case 278:
//#line 977 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().setIzq((ArbolSintactico)val_peek(1));
                                String tag = ((ArbolSintactico)val_peek(3)).getIzq().getIzq().getLex();
                                List<ArbolSintactico> l = mapEtiquetas.get(tag);
                                if(l!=null){
                                        for(ArbolSintactico a : l){
                                                a.setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer());
                                        }
                                }
                        }
                        yyval=val_peek(3);
                }
break;
case 279:
//#line 990 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().setIzq((ArbolSintactico)val_peek(0));
                                String tag = ((ArbolSintactico)val_peek(1)).getIzq().getIzq().getLex();
                                List<ArbolSintactico> l = mapEtiquetas.get(tag);
                                if(l!=null){
                                        for(ArbolSintactico a : l){
                                                a.setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer());
                                        }
                                }
                        }
                        yyval = val_peek(1);
                }
break;
case 280:
//#line 1003 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().setIzq((ArbolSintactico)val_peek(1));
                        }
                        yyval = val_peek(3);
                }
break;
case 281:
//#line 1009 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().setIzq((ArbolSintactico)val_peek(0));
                        }
                        yyval = val_peek(1);
                }
break;
case 282:
//#line 1015 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba }");}
break;
case 283:
//#line 1016 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba {");}
break;
case 284:
//#line 1018 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 285:
//#line 1019 "gramatica.y"
{ yyval = new NodoComun("Bloque Break con Continue",(ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 286:
//#line 1020 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ;");}
break;
case 287:
//#line 1023 "gramatica.y"
{yyval = val_peek(0);}
break;
case 288:
//#line 1024 "gramatica.y"
{yyval = val_peek(0);}
break;
case 289:
//#line 1025 "gramatica.y"
{yyval = val_peek(0);}
break;
case 290:
//#line 1026 "gramatica.y"
{yyval = val_peek(0);}
break;
case 291:
//#line 1027 "gramatica.y"
{yyval = val_peek(0);}
break;
case 292:
//#line 1028 "gramatica.y"
{boolean b = false;
                                        if(((ArbolSintactico)val_peek(0)).getIzq()!=null){
                                                String tag = ((ArbolSintactico)val_peek(0)).getIzq().getLex() + "@" + ambitoActual;
                                                for(String s : etiquetasAct){
                                                        if(tag.equals(s)){
                                                                b = true;
                                                                break;
                                                        }
                                                }
                                                if(!b){
                                                        yyerror("No se puede saltar al tag " + ((ArbolSintactico)val_peek(0)).getIzq().getLex());
                                                        yyval = new NodoHoja("Error");
                                                }else{
                                                        yyval = new NodoComun("Continue",new NodoHoja("Fin"),(ArbolSintactico)val_peek(0));
                                                        if(mapEtiquetas.containsKey(((ArbolSintactico)val_peek(0)).getIzq().getLex())){
                                                                mapEtiquetas.get(((ArbolSintactico)val_peek(0)).getIzq().getLex()).add((ArbolSintactico)yyval);
                                                        }

                                                }
                                        }else{
                                                yyval = new NodoComun("Continue",new NodoHoja("Fin"),(ArbolSintactico)val_peek(0));
                                        }
                                }
break;
case 293:
//#line 1051 "gramatica.y"
{yyval = new NodoControl("Break",(ArbolSintactico)new NodoHoja("Fin"));}
break;
case 294:
//#line 1053 "gramatica.y"
{yyval = new NodoHoja("Fin");}
break;
case 295:
//#line 1054 "gramatica.y"
{String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        yyval = new NodoControl("Tag", new NodoHoja(val_peek(0).sval) );
                        if(!ambito.equals("")){
                                if(!TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Uso").equals("Etiqueta")){
                                        yyerror(val_peek(0).sval + " no es una etiqueta.");
                                }
                        }else{
                                yyerror("La etiqueta " + val_peek(0).sval + " no esta declarada.");
                        }
                        }
break;
case 296:
//#line 1064 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba un identificador");}
break;
case 297:
//#line 1066 "gramatica.y"
{ yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2))));  }
break;
case 298:
//#line 1067 "gramatica.y"
{ yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 299:
//#line 1068 "gramatica.y"
{ yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2)))); }
break;
case 300:
//#line 1069 "gramatica.y"
{ yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) ); }
break;
case 301:
//#line 1070 "gramatica.y"
{ yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 302:
//#line 1071 "gramatica.y"
{ yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));}
break;
case 303:
//#line 1072 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 304:
//#line 1073 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba } ");}
break;
case 305:
//#line 1074 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba { ");}
break;
case 306:
//#line 1075 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 307:
//#line 1076 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba } ");}
break;
case 308:
//#line 1077 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba end_if ");}
break;
case 309:
//#line 1078 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba } ");}
break;
case 310:
//#line 1079 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba { ");}
break;
case 311:
//#line 1080 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 312:
//#line 1081 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba ; luego de la sentencia");}
break;
case 313:
//#line 1082 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba end_if ");}
break;
case 314:
//#line 1083 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba ; luego de la sentencia");}
break;
case 315:
//#line 1084 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba end_if ");}
break;
case 316:
//#line 1085 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba ; luego de la sentencia");}
break;
case 317:
//#line 1086 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba { ");}
break;
case 318:
//#line 1087 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba then ");}
break;
case 319:
//#line 1088 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba ) ");}
break;
case 320:
//#line 1089 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba una condicion ");}
break;
case 321:
//#line 1090 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba ( ");}
break;
case 322:
//#line 1092 "gramatica.y"
{
					  String factorAsig = ((ArbolSintactico)val_peek(8)).getLexemaWhen()+buscarAmbito(ambitoActual,val_peek(8).sval);
                                String factorIteracion = ((ArbolSintactico)val_peek(1)).getLexemaWhen()+buscarAmbito(ambitoActual,val_peek(1).sval);
                                if (!factorAsig.equals("Error") && !factorIteracion.equals("Error")){
                                        String ambitoID = val_peek(10).sval+"@"+buscarAmbito(ambitoActual,val_peek(10).sval);
                                        if (buscarAmbito(ambitoActual,val_peek(10).sval).equals("")){
                                                yyerror(val_peek(10).sval+" no esta declarada");yyval=new NodoHoja("Error sintactico");
                                        }else if(!ambitoID.equals(val_peek(6).sval+"@"+buscarAmbito(ambitoActual,val_peek(6).sval))){
                                                yyerror("La variable de la asignacion debe ser la misma que la de la condicion en el for");yyval=new NodoHoja("Error sintactico");
                                        }else if(!((String)TablaSimbolos.getAtributo(factorAsig, "Uso")).equals("Constante")){
                                                yyerror(factorAsig+" debe ser una constante");yyval=new NodoHoja("Error sintactico");
                                        }else if (!((String)TablaSimbolos.getAtributo(factorIteracion, "Uso")).equals("Constante")){
                                                yyerror(factorIteracion+" debe ser una constante");yyval=new NodoHoja("Error sintactico");
                                        }else if(!((String)TablaSimbolos.getAtributo(factorAsig,"Tipo")).equals("Entero")){
                                                yyerror(factorAsig +" debe ser de tipo entero");yyval=new NodoHoja("Error sintactico");
                                        }else if(!((String)TablaSimbolos.getAtributo(factorIteracion,"Tipo")).equals("Entero")){
                                                yyerror(factorIteracion +" debe ser de tipo entero");yyval=new NodoHoja("Error sintactico");
                                        }else if(!((String)TablaSimbolos.getAtributo(ambitoID,"Uso")).equals("Variable")){
                                                yyerror(val_peek(10).sval+" no es una variable"); yyval=new NodoHoja("Error sintactico");
                                        }else if(!((String)TablaSimbolos.getAtributo(ambitoID,"Tipo")).equals("Entero")){
                                                yyerror("La variable "+val_peek(10).sval+" no es de tipo entero"); yyval=new NodoHoja("Error sintactico");
                                        } 
                                        else{
                                			String ambito = buscarAmbito(ambitoActual,val_peek(10).sval);
                                			NodoHoja operando1 = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                			operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                			NodoHoja operando2 = new NodoHoja(val_peek(1).sval);
                                			operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(1).sval +"@"+ ambito,"Tipo"));
                                			operando1.setUso("Variable");
                                			operando2.setUso("Variable");
                                			NodoComun iteracion = new NodoComun(val_peek(2).sval,operando1,operando2);
                                			iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                			NodoHoja iterador = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                			iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                			iterador.setUso("Variable");
                                			NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                			asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                			asignacion.setUso("Entero");
                                			NodoHoja id1 = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                			id1.setUso("Variable");
                                			id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                			NodoHoja id2 = new NodoHoja(val_peek(6).sval+"@"+ambito);
                                			id2.setUso("Variable");
                                			id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(6).sval +"@"+ ambito,"Tipo"));
                                			yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(9).sval, id1, new NodoHoja(val_peek(8).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(5).sval,id2, (ArbolSintactico)val_peek(4))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", null),asignacion ))) );
                                			mapEtiquetas.put(val_peek(13).sval,new ArrayList<ArbolSintactico>());
							}
					}else{
                                        yyval=new NodoHoja("Error sintactico");
                                }
                                
                        }
break;
case 323:
//#line 1144 "gramatica.y"
{
				String factorAsig = ((ArbolSintactico)val_peek(8)).getLexemaWhen()+buscarAmbito(ambitoActual,val_peek(8).sval);
                                String factorIteracion = ((ArbolSintactico)val_peek(1)).getLexemaWhen()+buscarAmbito(ambitoActual,val_peek(1).sval);
                                if (!factorAsig.equals("Error") && !factorIteracion.equals("Error")){
                                        String ambitoID = val_peek(10).sval+"@"+buscarAmbito(ambitoActual,val_peek(10).sval);
                                        if (buscarAmbito(ambitoActual,val_peek(10).sval).equals("")){
                                                yyerror(val_peek(10).sval+" no esta declarada");yyval=new NodoHoja("Error sintactico");
                                        }else if(!ambitoID.equals(val_peek(6).sval+"@"+buscarAmbito(ambitoActual,val_peek(6).sval))){
                                                yyerror("La variable de la asignacion debe ser la misma que la de la condicion en el for");yyval=new NodoHoja("Error sintactico");
                                        }else if(!((String)TablaSimbolos.getAtributo(factorAsig, "Uso")).equals("Constante")){
                                                yyerror(factorAsig+" debe ser una constante");yyval=new NodoHoja("Error sintactico");
                                        }else if (!((String)TablaSimbolos.getAtributo(factorIteracion, "Uso")).equals("Constante")){
                                                yyerror(factorIteracion+" debe ser una constante");yyval=new NodoHoja("Error sintactico");
                                        }else if(!((String)TablaSimbolos.getAtributo(factorAsig,"Tipo")).equals("Entero")){
                                                yyerror(factorAsig +" debe ser de tipo entero");yyval=new NodoHoja("Error sintactico");
                                        }else if(!((String)TablaSimbolos.getAtributo(factorIteracion,"Tipo")).equals("Entero")){
                                                yyerror(factorIteracion +" debe ser de tipo entero");yyval=new NodoHoja("Error sintactico");
                                        }else if(!((String)TablaSimbolos.getAtributo(ambitoID,"Uso")).equals("Variable")){
                                                yyerror(val_peek(10).sval+" no es una variable"); yyval=new NodoHoja("Error sintactico");
                                        }else if(!((String)TablaSimbolos.getAtributo(ambitoID,"Tipo")).equals("Entero")){
                                                yyerror("La variable "+val_peek(10).sval+" no es de tipo entero"); yyval=new NodoHoja("Error sintactico");
                                        } 
                                        else{
                                			String ambito = buscarAmbito(ambitoActual,val_peek(10).sval);
                                			NodoHoja operando1 = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                			operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                			NodoHoja operando2 = new NodoHoja(val_peek(1).sval);
                                			operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(1).sval +"@"+ ambito,"Tipo"));
                                			operando1.setUso("Variable");
                                			operando2.setUso("Variable");
                                			NodoComun iteracion = new NodoComun(val_peek(2).sval,operando1,operando2);
                                			iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                			NodoHoja iterador = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                			iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                			iterador.setUso("Variable");
                                			NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                			asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                			asignacion.setUso("Entero");
                                			NodoHoja id1 = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                			id1.setUso("Variable");
                                			id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                			NodoHoja id2 = new NodoHoja(val_peek(6).sval+"@"+ambito);
                                			id2.setUso("Variable");
                                			id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(6).sval +"@"+ ambito,"Tipo"));
                                			yyval = new NodoComun("For con Etiqueta", 
                                                                                                new NodoControl("Etiqueta", 
                                                                                                                new NodoHoja(val_peek(13).sval)), 
                                                                                                new NodoComun("FOR",
                                                                                                                new NodoComun("Asignacion FOR",         
                                                                                                                                new NodoComun(val_peek(9).sval, id1, new NodoHoja(((ArbolSintactico)val_peek(8)).getLex())) 
                                                                                                                                ,null) ,
                                                                                                                new NodoComun("Condicion-Cuerpo", 
                                                                                                                                new NodoControl("Condicion",
                                                                                                                                                new NodoComun(val_peek(5).sval,id2, (ArbolSintactico)val_peek(4))),
                                                                                                                                new NodoComun("Cuerpo", 
                                                                                                                                                new NodoControl("Cuerpo For", null),
                                                                                                                                                asignacion ))) );
                                			mapEtiquetas.put(val_peek(13).sval,new ArrayList<ArbolSintactico>());
							}
					}else{
                                        yyval=new NodoHoja("Error sintactico");
                                }
                                
                        }
break;
case 324:
//#line 1208 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba )");}
break;
case 325:
//#line 1209 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba )");}
break;
case 326:
//#line 1210 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba constante");}
break;
case 327:
//#line 1211 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba constante");}
break;
case 328:
//#line 1212 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba operador + o -");}
break;
case 329:
//#line 1213 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ; luego de la comparacion");}
break;
case 330:
//#line 1214 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba expresion para comparar");}
break;
case 331:
//#line 1215 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba operador de comparacion");}
break;
case 332:
//#line 1216 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba nombre de variable");}
break;
case 333:
//#line 1217 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ; luego de la asignacion");}
break;
case 334:
//#line 1218 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba numero entero para asignar");}
break;
case 335:
//#line 1219 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba =:");}
break;
case 336:
//#line 1220 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba nombre de variable");}
break;
case 337:
//#line 1221 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba (");}
break;
case 338:
//#line 1223 "gramatica.y"
{
                                String factorAsig = ((ArbolSintactico)val_peek(8)).getLexemaWhen()+buscarAmbito(ambitoActual,val_peek(8).sval);
                                String factorIteracion = ((ArbolSintactico)val_peek(1)).getLexemaWhen()+buscarAmbito(ambitoActual,val_peek(1).sval);
                                if (!factorAsig.equals("Error") && !factorIteracion.equals("Error")){
                                        String ambitoID = val_peek(10).sval+"@"+buscarAmbito(ambitoActual,val_peek(10).sval);
                                        if (buscarAmbito(ambitoActual,val_peek(10).sval).equals("")){
                                                yyerror(val_peek(10).sval+" no esta declarada");yyval=new NodoHoja("Error sintactico");
                                        }else if(!ambitoID.equals(val_peek(6).sval+"@"+buscarAmbito(ambitoActual,val_peek(6).sval))){
                                                yyerror("La variable de la asignacion debe ser la misma que la de la condicion en el for");yyval=new NodoHoja("Error sintactico");
                                        }else if(!((String)TablaSimbolos.getAtributo(factorAsig, "Uso")).equals("Constante")){
                                                yyerror(factorAsig+" debe ser una constante");yyval=new NodoHoja("Error sintactico");
                                        }else if (!((String)TablaSimbolos.getAtributo(factorIteracion, "Uso")).equals("Constante")){
                                                yyerror(factorIteracion+" debe ser una constante");yyval=new NodoHoja("Error sintactico");
                                        }else if(!((String)TablaSimbolos.getAtributo(factorAsig,"Tipo")).equals("Entero")){
                                                yyerror(factorAsig +" debe ser de tipo entero");yyval=new NodoHoja("Error sintactico");
                                        }else if(!((String)TablaSimbolos.getAtributo(factorIteracion,"Tipo")).equals("Entero")){
                                                yyerror(factorIteracion +" debe ser de tipo entero");yyval=new NodoHoja("Error sintactico");
                                        }else if(!((String)TablaSimbolos.getAtributo(ambitoID,"Uso")).equals("Variable")){
                                                yyerror(val_peek(10).sval+" no es una variable"); yyval=new NodoHoja("Error sintactico");
                                        }else if(!((String)TablaSimbolos.getAtributo(ambitoID,"Tipo")).equals("Entero")){
                                                yyerror("La variable "+val_peek(10).sval+" no es de tipo entero"); yyval=new NodoHoja("Error sintactico");
                                        } 
                                        else{
                                                String ambito = buscarAmbito(ambitoActual,val_peek(10).sval);
                                                NodoHoja operando1 = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                                NodoHoja operando2 = new NodoHoja(val_peek(1).sval);
                                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(1).sval +"@"+ ambito,"Tipo"));
                                                operando1.setUso("Variable");
                                                operando2.setUso("Variable");
                                                NodoComun iteracion = new NodoComun(val_peek(2).sval,operando1,operando2);
                                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                                NodoHoja iterador = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                                iterador.setUso("Variable");
                                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                                asignacion.setUso("Entero");
                                                NodoHoja id1 = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                                id1.setUso("Variable");
                                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                                NodoHoja id2 = new NodoHoja(val_peek(6).sval+"@"+ambito);
                                                id2.setUso("Variable");
                                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(6).sval +"@"+ ambito,"Tipo"));
                                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(9).sval,id1,new NodoHoja(((ArbolSintactico)val_peek(8)).getLex())),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(5).sval,id2,(ArbolSintactico)val_peek(4))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", null), asignacion )) );
                                        }
                                }else{
                                        yyval=new NodoHoja("Error sintactico");
                                }
                        
                }
break;
case 339:
//#line 1274 "gramatica.y"
{
                                String factorAsig = ((ArbolSintactico)val_peek(8)).getLexemaWhen()+buscarAmbito(ambitoActual,val_peek(8).sval);
                                String factorIteracion = ((ArbolSintactico)val_peek(1)).getLexemaWhen()+buscarAmbito(ambitoActual,val_peek(1).sval);
                                if (!factorAsig.equals("Error") && !factorIteracion.equals("Error")){
                                        String ambitoID = val_peek(10).sval+"@"+buscarAmbito(ambitoActual,val_peek(10).sval);
                                        if (buscarAmbito(ambitoActual,val_peek(10).sval).equals("")){
                                                yyerror(val_peek(10).sval+" no esta declarada");yyval=new NodoHoja("Error sintactico");
                                        }else if(!ambitoID.equals(val_peek(6).sval+"@"+buscarAmbito(ambitoActual,val_peek(6).sval))){
                                                yyerror("La variable de la asignacion debe ser la misma que la de la condicion en el for");yyval=new NodoHoja("Error sintactico");
                                        }else if(!((String)TablaSimbolos.getAtributo(factorAsig, "Uso")).equals("Constante")){
                                                yyerror(factorAsig+" debe ser una constante");yyval=new NodoHoja("Error sintactico");
                                        }else if (!((String)TablaSimbolos.getAtributo(factorIteracion, "Uso")).equals("Constante")){
                                                yyerror(factorIteracion+" debe ser una constante");yyval=new NodoHoja("Error sintactico");
                                        }else if(!((String)TablaSimbolos.getAtributo(factorAsig,"Tipo")).equals("Entero")){
                                                yyerror(factorAsig +" debe ser de tipo entero");yyval=new NodoHoja("Error sintactico");
                                        }else if(!((String)TablaSimbolos.getAtributo(factorIteracion,"Tipo")).equals("Entero")){
                                                yyerror(factorIteracion +" debe ser de tipo entero");yyval=new NodoHoja("Error sintactico");
                                        }else if(!((String)TablaSimbolos.getAtributo(ambitoID,"Uso")).equals("Variable")){
                                                yyerror(val_peek(10).sval+" no es una variable"); yyval=new NodoHoja("Error sintactico");
                                        }else if(!((String)TablaSimbolos.getAtributo(ambitoID,"Tipo")).equals("Entero")){
                                                yyerror("La variable "+val_peek(10).sval+" no es de tipo entero"); yyval=new NodoHoja("Error sintactico");
                                        } 
                                        else{
                                                String ambito = buscarAmbito(ambitoActual,val_peek(10).sval);
                                                NodoHoja operando1 = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                                NodoHoja operando2 = new NodoHoja(val_peek(1).sval);
                                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(1).sval +"@"+ ambito,"Tipo"));
                                                operando1.setUso("Variable");
                                                operando2.setUso("Variable");
                                                NodoComun iteracion = new NodoComun(val_peek(2).sval,operando1,operando2);
                                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                                NodoHoja iterador = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                                iterador.setUso("Variable");
                                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                                asignacion.setUso("Entero");
                                                NodoHoja id1 = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                                id1.setUso("Variable");
                                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                                NodoHoja id2 = new NodoHoja(val_peek(6).sval+"@"+ambito);
                                                id2.setUso("Variable");
                                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(6).sval +"@"+ ambito,"Tipo"));
                                                yyval = new NodoComun("FOR",
                                                                        new NodoComun("Asignacion FOR",
                                                                                new NodoComun(val_peek(9).sval,id1,new NodoHoja(((ArbolSintactico)val_peek(8)).getLex())),
                                                                                null),
                                                                        new NodoComun("Condicion-Cuerpo",
                                                                                new NodoControl("Condicion",
                                                                                        new NodoComun(val_peek(5).sval,id2,(ArbolSintactico)val_peek(4))),
                                                                                new NodoComun("Cuerpo", 
                                                                                        new NodoControl("Cuerpo For", null), 
                                                                                        asignacion )) );
                                        }
                                }else{
                                        yyval=new NodoHoja("Error sintactico");
                                }
                        
                }
break;
case 340:
//#line 1334 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba )");}
break;
case 341:
//#line 1335 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba )");}
break;
case 342:
//#line 1336 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba constante");}
break;
case 343:
//#line 1337 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba constante");}
break;
case 344:
//#line 1338 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba operador + o -");}
break;
case 345:
//#line 1339 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba ; luego de la comparacion");}
break;
case 346:
//#line 1340 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba expresion para comparar");}
break;
case 347:
//#line 1341 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba operador de comparacion");}
break;
case 348:
//#line 1342 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba nombre de variable");}
break;
case 349:
//#line 1343 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ; luego de la asignacion");}
break;
case 350:
//#line 1344 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba numero entero para asignar");}
break;
case 351:
//#line 1345 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba =:");}
break;
case 352:
//#line 1347 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba asignacion de enteros");}
break;
case 353:
//#line 1348 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba (");}
break;
case 354:
//#line 1351 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(1));
                                String tag = ((ArbolSintactico)val_peek(3)).getIzq().getIzq().getLex();
                                List<ArbolSintactico> l= mapEtiquetas.get(tag);
                                if(l!=null){
                                        for(ArbolSintactico a: l){
                                                a.setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer().getDer());
                                        }
                                }
                        }
                        yyval = val_peek(3);
                        }
break;
case 355:
//#line 1364 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(0));
                                String tag = ((ArbolSintactico)val_peek(1)).getIzq().getIzq().getLex();
                                List<ArbolSintactico> l= mapEtiquetas.get(tag);
                                if(l!=null){
                                        for(ArbolSintactico a: l){
                                                a.setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer().getDer());
                                        }
                                }
                        }
                        yyval = val_peek(1);
                }
break;
case 356:
//#line 1377 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(1));
                        }
                        yyval = val_peek(3);
                }
break;
case 357:
//#line 1383 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(0));
                        }
                        yyval = val_peek(1);          
                        }
break;
case 358:
//#line 1389 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba }");}
break;
case 359:
//#line 1390 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba {");}
break;
case 360:
//#line 1391 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba }");}
break;
case 361:
//#line 1392 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba {");}
break;
case 362:
//#line 1395 "gramatica.y"
{
                        yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                        ((ArbolSintactico)yyval).setUso("Variable");}
break;
case 363:
//#line 1399 "gramatica.y"
{
                        String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        if(!ambito.equals("")){
                                 yyval=new NodoHoja(val_peek(0).sval+"@"+ambito);
                                ((ArbolSintactico)yyval).setUso("Variable");
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Tipo"));
                                if( TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito,"Uso").equals("Variable") 
                                || TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito,"Uso").equals("Constante") ){
                                
                                        yyval=new NodoHoja(val_peek(0).sval+"@"+ambito);
                                        ((ArbolSintactico)yyval).setUso("Variable");
                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Tipo"));
                                }else{
                                        yyerror("El parametro " + val_peek(0).sval + " no es una variable.");
                                        yyval = new NodoHoja("Error");
                                }
                        }else{
                                yyval=new NodoHoja("Error");
                                yyerror("El parametro "+ val_peek(0).sval +" no se encuentra declarado en el ambito "+ambitoActual);
                        }
                        
                }
break;
case 364:
//#line 1422 "gramatica.y"
{
                                                        String ambito = buscarAmbito(ambitoActual,val_peek(5).sval);
                                                        NodoComun parametro1=null;
                                                        NodoComun parametro2=null;
                                                        if (!ambito.equals("") ){
                                                                if( !TablaSimbolos.getAtributo(val_peek(5).sval+"@"+ambito,"Uso").equals("Funcion") ){
                                                                        yyerror("La funcion "+val_peek(5).sval+" no fue declarada");
                                                                        yyval = new NodoHoja("Error");
                                                                }else{
                                                                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error") && !((ArbolSintactico)val_peek(1)).getLex().equals("Error") ){
                                                                                String par1 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +"@"+ ambito,"Parametro1");
                                                                                String par2 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +"@"+ ambito,"Parametro2");
                                                                                if(par1 != null)
                                                                                        if(par2 != null){
                                                                                                String tipoS3 = (String) ((ArbolSintactico) val_peek(3) ).getTipo();
                                                                                                if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") ) )){
                                                                                                        String nombreS3 = ((ArbolSintactico) val_peek(3)).getLex();
                                                                                                        yyerror("El tipo del parametro "+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                                                                                        yyval = new NodoHoja("Error");
                                                                                                        break;
                                                                                                }else{
                                                                                                        NodoHoja n =new NodoHoja(par1);
                                                                                                        n.setTipo(tipoS3);
                                                                                                        n.setUso("Variable");
                                                                                                        parametro1 = new NodoComun("=:",n , (ArbolSintactico)val_peek(3));
                                                                                                }
                                                                                                String tipoS5 = (String) ((ArbolSintactico) val_peek(1)).getTipo();
                                                                                                if( !(tipoS5.equals((String)TablaSimbolos.getAtributo(par2,"Tipo") ))){
                                                                                                        String nombreS5 = ((ArbolSintactico) val_peek(1)).getLex();
                                                                                                        yyerror("El tipo del parametro "+ nombreS5+" no coincide con el tipo declarado en la funcion.");
                                                                                                        yyval = new NodoHoja("Error");
                                                                                                        break;
                                                                                                }else{
                                                                                                        NodoHoja n =new NodoHoja(par2);
                                                                                                        n.setTipo(tipoS5);
                                                                                                        n.setUso("Variable");
                                                                                                        parametro2 = new NodoComun("=:",n, (ArbolSintactico)val_peek(1));
                                                                                                }
                                                                                        }else{
                                                                                                yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                                                yyval = new NodoHoja("Error");
                                                                                        }
                                                                                else{
                                                                                        yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                                        yyval = new NodoHoja("Error");
                                                                                }
                                                                                yyval=new NodoControl("Llamado Funcion" ,new NodoComun(val_peek(5).sval+"@"+ambito,(ArbolSintactico)parametro1,(ArbolSintactico)parametro2));
                                                                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(5).sval +"@"+ ambito,"Tipo"));
                                                                        }else{
                                                                                yyval = new NodoHoja("Error");
                                                                        }
                                                                }
                                                        }else{
                                                                yyerror("La funcion " + val_peek(5).sval + " no se encuentra declarada");
                                                                yyval = new NodoHoja("Error");
                                                        }
                                                }
break;
case 365:
//#line 1479 "gramatica.y"
{
            String ambito = buscarAmbito(ambitoActual,val_peek(3).sval);
            NodoComun parametro1=null;
            if (!ambito.equals("")){
                if (!TablaSimbolos.getAtributo(val_peek(3).sval+"@"+ambito,"Uso").equals("Funcion")){
                        yyerror("La funcion "+val_peek(3).sval+" no fue declarada");
                        yyval = new NodoHoja("Error");
                }else{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error")){
                                String par1 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +"@"+ ambito,"Parametro1");
                                String par2 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +"@"+ ambito,"Parametro2");
                                if(par2 ==null){
                                        if(par1!=null){
                                                String tipoS3 = (String) ((ArbolSintactico) val_peek(1) ).getTipo();
                                                if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") )) ){
                                                        String nombreS3 = ((ArbolSintactico) val_peek(1)).getLex();
                                                        yyerror("El tipo del parametro "+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                                        yyval = new NodoHoja("Error");
                                                }else{
                                                        NodoHoja n =new NodoHoja(par1);
                                                        n.setTipo(tipoS3);
                                                        n.setUso("Variable");
                                                        parametro1 = new NodoComun("=:",n , (ArbolSintactico)val_peek(1));
                                                }
                                        }else{
                                                yyerror("La funcion esta declarada sin parametros.");
                                                yyval = new NodoHoja("Error");
                                        }
                                }else{
                                        yyerror("La funcion esta declarada con dos parametros.");
                                        yyval = new NodoHoja("Error");
                                }
                                yyval=new NodoControl("Llamado Funcion" ,new NodoComun(val_peek(3).sval+"@"+ambito,(ArbolSintactico)parametro1,new NodoHoja("Un solo parametro")));
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(3).sval +"@"+ ambito,"Tipo"));
                        }else{
                                yyval=val_peek(1);
                        }
                }
            }else{
                        yyerror("La funcion " + val_peek(3).sval + " no se encuentra declarada");
                        yyval = new NodoHoja("Error");
            }
        }
break;
case 366:
//#line 1522 "gramatica.y"
{
                String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                if (!ambito.equals("") ){
                        if (!TablaSimbolos.getAtributo(val_peek(2).sval+"@"+ambito,"Uso").equals("Funcion")){
                                yyerror("La funcion "+val_peek(2).sval+" no fue declarada");
                                yyval = new NodoHoja("Error");
                        }else{
                                String par1 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Parametro1");
                                String par2 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Parametro2");
                                if(par2 == null){
                                        if(par1 != null){
                                                yyerror("La funcion esta declarada con un parametro.");
                                                yyval = new NodoHoja("Error");
                                        }
                                }else{
                                        yyerror("La funcion esta declarada con dos parametros.");
                                        yyval = new NodoHoja("Error");
                                }
                                yyval=new NodoControl("Llamado Funcion", new NodoComun(val_peek(2).sval+"@"+ambito,new NodoHoja("Fin"),new NodoHoja("Fin")));
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                        }
                }else{
                        yyerror("La funcion " + val_peek(2).sval + " no se encuentra declarada");
                        yyval = new NodoHoja("Error");
                }
        }
break;
case 367:
//#line 1548 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba )");}
break;
case 368:
//#line 1549 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba )");}
break;
case 369:
//#line 1550 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba )");}
break;
case 370:
//#line 1551 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba otro parametro");}
break;
//#line 4085 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 * @throws IOException
 */
public void run() throws IOException
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
