//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramaticaTomi.y"
package Principal;
import java.io.IOException;
import AnalizadorLexico.AnalizadorLexico;
import AnalizadorLexico.Token;
import GeneracionCodigoIntermedio.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

//#line 28 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IF=257;
public final static short THEN=258;
public final static short ELSE=259;
public final static short END_IF=260;
public final static short OUT=261;
public final static short FUN=262;
public final static short RETURN=263;
public final static short BREAK=264;
public final static short WHEN=265;
public final static short WHILE=266;
public final static short FOR=267;
public final static short CONTINUE=268;
public final static short ID=269;
public final static short I32=270;
public final static short F32=271;
public final static short PUNTO=272;
public final static short PARENT_A=273;
public final static short PARENT_C=274;
public final static short COMILLA=275;
public final static short COMA=276;
public final static short DOSPUNTOS=277;
public final static short PUNTOCOMA=278;
public final static short IGUAL=279;
public final static short MAYOR=280;
public final static short MENOR=281;
public final static short MENORIGUAL=282;
public final static short MAYORIGUAL=283;
public final static short LLAVE_A=284;
public final static short LLAVE_C=285;
public final static short EXCL=286;
public final static short DIST=287;
public final static short ASIG=288;
public final static short CADENA=289;
public final static short COMENT=290;
public final static short CONST=291;
public final static short SUMA=292;
public final static short RESTA=293;
public final static short MULT=294;
public final static short DIV=295;
public final static short ENTERO=296;
public final static short FLOAT=297;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    1,    2,    2,    2,    3,    3,    4,    4,
    4,    9,    9,    6,    6,   10,   10,   11,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,    7,   13,
   13,   13,   14,   14,   14,   14,   14,   14,   14,   14,
   14,   14,   14,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   19,   19,
   19,   19,   19,   19,   19,   19,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   24,   24,   24,   25,   25,   25,   25,   25,   25,
   25,   25,   25,   25,   28,   28,   28,   28,   28,   28,
   28,   28,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   27,   22,   12,
   12,    8,   31,   31,   32,    5,    5,    5,    5,    5,
    5,    5,   15,   30,   30,   30,   30,   30,   30,   37,
   37,   37,   38,   38,   26,   26,   26,   26,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   23,   23,   23,   40,   40,   40,
   40,   40,   39,   39,   39,   18,   18,   18,   18,   34,
   34,   34,   34,   34,   34,   34,   34,   34,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   41,   41,   41,   42,   42,   42,   42,   42,   42,
   42,   42,   42,   29,   29,   44,   44,   44,   44,   44,
   44,   44,   44,   44,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   45,   45,   16,   16,   16,   16,   16,   16,
};
final static short yylen[] = {                            2,
    4,    1,    1,    0,    3,    2,    1,    1,    1,    1,
    1,    1,    1,    2,    2,    3,    1,    2,   11,    9,
    8,   11,    9,    8,    7,    6,    4,    2,    2,    0,
    3,    3,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,   11,   13,   13,    8,   13,    9,   13,
   12,   10,    9,    8,    6,    5,    4,    3,    8,    6,
    8,    6,    5,    4,    3,    8,   13,   11,   11,    9,
   11,    9,    8,    7,    6,    5,    4,    3,    2,   14,
   14,   12,   12,   14,   14,   12,   12,   11,   11,    3,
   12,   12,   10,   10,   12,   12,   10,   10,    9,    9,
    2,    0,    3,    3,    1,    1,    1,    1,    1,    1,
    2,    1,    2,    1,    6,    8,    8,    6,    5,    4,
    3,    8,   11,   12,   12,    8,   13,    9,   13,   12,
   10,    9,    8,    6,    5,    4,    3,    2,    4,    2,
    2,    2,    3,    1,    3,    1,    1,    1,    1,    1,
    1,    1,    3,    3,    3,    1,    1,    3,    3,    3,
    3,    1,    1,    1,    1,    1,    2,    2,   12,   12,
   11,    8,   13,    9,   13,   12,   10,    9,    8,    6,
    5,    4,    3,    2,    3,    3,    3,    1,    1,    1,
    1,    1,    0,    3,    2,    4,    4,    3,    2,    8,
    6,    8,    8,    8,    8,    8,    7,    5,   13,   11,
   11,    9,   11,    9,    8,    7,    6,    5,    4,    3,
    2,    0,    3,    2,    1,    1,    1,    1,    1,    1,
    2,    1,    2,    0,    2,    8,    6,    8,    8,    8,
    8,    8,    7,    5,   12,   12,   11,    8,   13,    9,
   13,   12,   10,    9,    8,    6,    5,    4,    3,    2,
   14,   14,   12,   12,   14,   14,   12,   12,   11,   11,
    3,   12,   12,   10,   10,   12,   12,   10,   10,    9,
    9,    2,    1,    1,    6,    4,    3,    6,    4,    3,
};
final static short yydefred[] = {                         0,
    2,    3,    0,    0,    4,    0,    0,    0,    0,    0,
    0,    0,    0,   12,   13,    1,    0,    0,    7,    8,
    9,   10,   11,    0,    0,  146,  152,  148,  147,  149,
  150,  151,  184,    0,  199,    0,   29,   18,    0,    0,
  221,    0,  282,    0,   17,    0,    0,    0,    0,    0,
    0,  144,    5,    0,   28,    0,  183,    0,    0,  165,
  166,  157,    0,  164,    0,    0,    0,    0,  162,  198,
    0,    0,    0,    0,  220,    0,    0,    0,  290,  284,
  287,  283,    0,  271,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  167,  168,  182,    0,    0,  188,
  189,  190,  191,  192,    0,    0,    0,    0,    0,    0,
    0,  197,  196,    0,    0,    0,    0,  219,    0,    0,
  289,  286,    0,    0,    0,   16,  145,  143,  141,    0,
  140,   27,    0,    0,  181,    0,    0,  163,    0,    0,
  186,    0,  158,  159,  160,  161,    0,    0,  193,    0,
    0,  218,    0,    0,    0,    0,    0,    0,    0,    0,
  180,    0,  193,    0,  193,  193,    0,  193,  193,  193,
  201,  217,    0,    0,  288,  285,    0,    0,   30,    0,
   26,    0,    0,    0,    0,    0,  207,    0,    0,    0,
    0,  216,    0,    0,    0,    0,    0,    0,   30,   25,
    0,  179,    0,    0,  172,  206,  205,  194,  204,  203,
  202,  200,  215,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   21,   33,   34,   35,    0,   36,
   37,   38,   39,   40,   41,   42,   43,    0,   24,    0,
  178,    0,  174,  193,    0,  214,    0,    0,    0,    0,
    0,  222,  225,  227,  230,  229,  212,  226,  228,  280,
    0,  281,    0,    0,    0,    0,    0,    0,    0,    0,
   79,    0,  101,    0,    0,   32,   31,   20,   23,   30,
  177,  193,    0,    0,    0,  260,    0,  233,    0,    0,
    0,  231,    0,  278,  222,  274,  279,  222,  275,    0,
    0,    0,   58,    0,    0,    0,   65,    0,   78,    0,
    0,   90,    0,    0,    0,    0,    0,    0,  171,  259,
    0,    0,    0,    0,  235,  213,  211,    0,    0,    0,
  222,  210,  269,    0,  270,    0,   57,    0,  139,    0,
   64,    0,   77,    0,    0,    0,    0,   22,   19,  176,
    0,  170,  169,  258,    0,    0,    0,    0,    0,  223,
  276,  272,  277,  273,    0,  267,  222,  263,  268,  222,
  264,   56,    0,    0,   63,    0,   76,    0,    0,    0,
    0,  175,  173,  257,    0,    0,    0,  222,    0,    0,
  209,    0,    0,   55,   30,    0,   30,   62,   30,   60,
   75,    0,    0,    0,    0,  256,  222,    0,  222,  222,
    0,  222,  222,  222,  237,  265,  261,  266,  262,    0,
    0,    0,    0,   74,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  243,    0,    0,    0,   54,    0,    0,
   47,   66,   61,   59,   73,    0,    0,    0,    0,    0,
  255,    0,    0,  248,  242,  241,  240,  239,  238,  236,
   53,    0,   49,    0,   30,    0,   72,    0,    0,    0,
    0,    0,  102,  105,  107,  110,  109,  114,   70,  106,
  108,   99,    0,  100,    0,    0,    0,    0,  254,    0,
  250,  222,    0,   52,   30,    0,    0,    0,  138,    0,
  113,    0,    0,  111,    0,   97,  102,   93,   98,  102,
   94,    0,    0,    0,  253,  222,    0,    0,    0,    0,
    0,    0,   44,  137,    0,    0,  121,    0,   71,   69,
    0,    0,    0,  102,   68,   88,    0,   89,    0,    0,
    0,    0,  247,   51,    0,    0,    0,  136,    0,    0,
  120,    0,  104,  103,   95,   91,   96,   92,    0,   86,
  102,   82,   87,  102,   83,  252,    0,  246,  245,   50,
   48,   45,   46,  135,    0,    0,  119,    0,   67,    0,
    0,  251,  249,  134,  102,    0,  102,  118,  102,  115,
   84,   80,   85,   81,    0,    0,    0,    0,  133,    0,
    0,  126,  122,  117,  116,  132,    0,  128,  102,    0,
  131,  102,    0,    0,    0,    0,    0,    0,  123,  130,
    0,  124,  125,  129,  127,
};
final static short yydgoto[] = {                          3,
    4,    6,   18,   19,  188,  226,  227,  228,   24,   49,
   25,   94,  198,  229,  253,   62,  232,  254,  234,  476,
  477,  478,   63,  505,  531,   64,  480,  481,  292,   65,
   51,   52,   29,   30,  255,  256,   68,   69,  167,  107,
  293,  328,  258,  259,   83,
};
final static short yysindex[] = {                      -164,
    0,    0,    0, -258,    0, 1196, -122,  -54,   18,   38,
   76,  147,  -57,    0,    0,    0, -210, -216,    0,    0,
    0,    0,    0, -173,  151,    0,    0,    0,    0,    0,
    0,    0,    0, -233,    0, -242,    0,    0, -265,   19,
    0,   34,    0, -133,    0, -221,  272, -265,  -81, -145,
  -52,    0,    0,  -81,    0,  310,    0,   65,  -37,    0,
    0,    0, -117,    0,   73,  -32,  -25, -106,    0,    0,
 -109,  -26,  -21, -247,    0, -101,   30,  102,    0,    0,
    0,    0, -112,    0,   55,  100,  210,  119,  301, -210,
  130,  138,  161, -108,    0,    0,    0, -240, -265,    0,
    0,    0,    0,    0, -223, -223,   67,  301,  301, -223,
 -223,    0,    0,  184,  199,  179,  274,    0, -253, -265,
    0,    0, -184, -265, -133,    0,    0,    0,    0,   26,
    0,    0,  201,  253,    0, 1992,  210,    0, -106, -106,
    0,  210,    0,    0,    0,    0,  197,  200,    0,  211,
 1999,    0,  153,  247,  -80,  261,  262,  268,   26,  -70,
    0,    7,    0,  277,    0,    0,  402,    0,    0,    0,
    0,    0,  182,  218,    0,    0,  289, -265,    0,  294,
    0, -198, -168,   98,  455,  544,    0,  295, 2020, 2027,
 1540,    0,  -69,  301,  301,  309,  315,  280,    0,    0,
  248,    0,  356,  231,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1727,  -39,  -23, -133,  396,  327,  330,
  162,  163,  166,    4,    0,    0,    0,    0, -249,    0,
    0,    0,    0,    0,    0,    0,    0, 1130,    0, -215,
    0, 2013,    0,    0,  333,    0,  172,  301,  185,  343,
 -146,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1741,    0, 1762,  355,  301,  301,   79, -265, -265,  115,
    0,  220,    0, -133,  292,    0,    0,    0,    0,    0,
    0,    0,  366, 2034,  413,    0,  321,    0, -265,  340,
  382,    0, 1379,    0,    0,    0,    0,    0,    0,  864,
  -18,    5,    0,    8, -111,  403,    0,    9,    0,   33,
  431,    0,  407,  418,  912, 1554,  434,  463,    0,    0,
   43,  453,  454, -167,    0,    0,    0,  437, 1401, 1415,
    0,    0,    0, 1776,    0, 1797,    0,  372,    0,  471,
    0,  376,    0, -190, -265, -265, -133,    0,    0,    0,
  206,    0,    0,    0,  383,  472,  473,  449,  391,    0,
    0,    0,    0,    0, 1900,    0,    0,    0,    0,    0,
    0,    0,  929,  450,    0,  945,    0,  192,  460,  478,
  475,    0,    0,    0, 1811,  477,  479,    0,  484, 1832,
    0, 1437, 1451,    0,    0,  481,    0,    0,    0,    0,
    0,  216,  404,  485, -265,    0,    0,  486,    0,    0,
 1913,    0,    0,    0,    0,    0,    0,    0,    0,  961,
  439, 1141,  978,    0,   50,  301,  301,  482,  491, 1473,
  441, 1926, 1939,    0, 1952, 1965, 1487,    0, -119, 1168,
    0,    0,    0,    0,    0, 1584,   88,   95, -133,  410,
    0,  401, 2049,    0,    0,    0,    0,    0,    0,    0,
    0, -206,    0,  498,    0,  497,    0,  194,  301,  198,
  343,  -59,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1598,    0, 1620,  502,  301,  301,    0, 1846,
    0,    0,  499,    0,    0,  585, 1179,  519,    0,  357,
    0, -265,  389,    0,  517,    0,    0,    0,    0,    0,
    0,  126,  103,  112,    0,    0,  510, 1978,  529, 1005,
  513,  514,    0,    0,  149,  520,    0,  157,    0,    0,
 -188, 1254, 1268,    0,    0,    0, 1634,    0, 1656, 1509,
  533,  539,    0,    0,  213,  546,  547,    0,  416,  550,
    0,  425,    0,    0,    0,    0,    0,    0, 1860,    0,
    0,    0,    0,    0,    0,    0,  245,    0,    0,    0,
    0,    0,    0,    0, 1670,  532,    0, 1692,    0, 1291,
 1305,    0,    0,    0,    0,  526,    0,    0,    0,    0,
    0,    0,    0,    0, 1328,  445, 1874, 1342,    0,  406,
  650,    0,    0,    0,    0,    0, 1706,    0,    0,  542,
    0,    0,  545, 1887,  564, 1365,  568,  570,    0,    0,
  304,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1223,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1022,    0,
 1049,    0,    0, 1076,    0,    0,    0,  601,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  679,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  480,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -207,    0,  727,  778,
    0, -104,    0,    0,    0,    0,    0,    0,    0, 1103,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1561,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  816,    0,  849,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1523,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  885,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -162,    0,
 -153,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,    0,    0,    0,   -1,  825,  826,  827,  -48,  810,
    0,  701, -174, -363,   -6,  270,    0,   24,    0, -183,
 -177, -118,  -20, -160, -429,    6,    0,    0,  365,  -42,
    0,  747,    0,    0,  528,  636,  602,  615, -126,    0,
 -286,  -92,    0,    0,  715,
};
final static int YYTABLESIZE=2333;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         26,
   11,   12,  152,   58,   20,   87,  276,   93,  329,  396,
  116,  330,  400,   70,  235,  135,  479,  136,   72,   74,
  236,   76,   57,  153,  238,    5,  117,   59,  277,   28,
   60,   61,   11,   12,   79,   58,  183,   78,  185,  186,
  279,  189,  190,  191,  365,  138,   71,   80,  187,  494,
  187,   82,   81,  508,  235,  511,  137,  200,   50,   59,
  236,   53,   60,   61,  142,  377,  187,  553,  280,   59,
  187,   59,   60,   61,   60,   61,  466,  495,  201,  237,
  392,  158,  535,  393,   80,   93,  378,  202,    7,  554,
  358,    1,    8,  112,  127,   45,   10,   11,   12,  154,
  162,  411,  234,  156,    2,  315,  359,  562,   59,  565,
  180,   60,   61,  143,  144,  112,  203,  284,  157,  237,
  430,  257,  432,  433,  234,  435,  436,  437,   82,   26,
   47,  235,  521,   33,  164,   77,  461,  236,   97,  462,
  463,   48,   89,  121,   26,  586,  112,  132,  590,  171,
   34,  185,  240,  185,  118,  316,   98,  197,  464,   28,
   26,  122,  339,  123,  113,  133,  193,  134,  296,  185,
  299,  610,  119,  185,   28,  175,   26,  613,   26,   26,
  105,  106,   26,   26,   26,  181,  213,  110,  111,  235,
   28,  230,  235,  176,   88,  236,  237,   26,  236,  215,
  216,   35,  245,  182,  214,  518,   28,  332,   28,   28,
  264,   45,   28,   28,   28,   46,  260,  275,   36,   47,
  420,  233,  422,   90,  423,  305,  108,   28,   48,  540,
   48,  230,  262,  109,  261,   26,  235,  333,  235,  235,
  283,  368,  236,  371,  236,  236,  304,  114,  306,  308,
  263,  310,  115,  288,  237,  334,  235,  237,   95,   96,
  335,  233,  236,  337,  341,   28,  321,  311,  322,  324,
  301,  302,   45,   37,   73,   27,   46,   26,  336,   46,
  275,  338,  342,   47,   11,   12,   38,   58,  343,   75,
  497,   48,  408,   39,   48,   14,   15,  415,  354,   11,
   12,  237,   58,  237,  237,  445,  344,   28,  230,   26,
   40,   59,  235,  235,   60,   61,  355,   48,  236,  236,
  520,  237,  141,  446,  379,  380,   59,  124,   99,   60,
   61,   41,   11,   12,  303,   58,  235,   46,  233,   28,
  381,   47,  236,  482,   11,   12,  532,   58,   42,  533,
  484,  100,  101,  102,  103,  104,  204,  205,  536,   59,
  493,  483,   60,   61,  105,  106,  230,  538,  485,  230,
  307,   59,  125,  559,   60,   61,  537,  237,  237,  120,
   11,   12,  468,   58,  429,  539,    8,  126,  220,  469,
  470,  222,  223,  471,  472,  425,  233,  517,  129,  233,
  580,  237,   43,  581,  548,   27,   55,   59,  172,  534,
   60,   61,  551,  230,  130,  230,  230,  269,  271,   44,
   27,  273,  549,   56,  595,  173,  597,  286,  598,  131,
  552,  447,  448,  230,  270,  272,   27,  192,  274,  474,
  289,  147,  486,  233,  287,  233,  233,  401,  614,  499,
   77,  616,   27,  502,   27,   27,  148,  290,   27,   27,
   27,  382,  149,  233,  402,  383,  500,  231,  570,  475,
  503,  424,  571,   27,  501,  309,  474,  159,  474,  525,
  165,  526,  528,  166,   77,   11,   12,    7,   58,  230,
  230,    8,  513,  514,  168,   10,   11,   12,  474,  162,
  582,  105,  106,  239,  583,  474,  475,  231,  475,  194,
  195,   27,   59,  230,  244,   60,   61,   14,   15,  233,
  233,   91,   14,   15,  174,  474,  474,   84,  475,  150,
  474,  151,  474,   31,  177,  475,  219,   85,   86,  178,
    8,    9,  220,  233,  221,  222,  223,  312,  224,   14,
   15,  179,  474,   27,  184,  475,  475,  313,  314,  624,
  475,   66,  475,  625,  225,  196,   66,   66,  474,   66,
   17,  474,  208,  474,  474,   66,  320,  199,   91,   14,
   15,  217,  475,   92,  231,   27,   11,   12,  474,   58,
  474,  474,  218,   59,  474,  323,   60,   61,  475,  267,
  474,  475,  268,  475,  475,   11,   12,  474,   58,  474,
  285,  241,  524,   59,  242,  243,   60,   61,  475,  291,
  475,  475,   11,   12,  475,   58,   66,  372,  300,  373,
  475,  375,   59,  376,   66,   60,   61,  475,  384,  475,
  385,   32,  231,  317,  527,  231,  389,   66,  390,   59,
  325,   66,   60,   61,   11,   12,  489,   58,    7,  490,
  491,  606,    8,   31,  607,  608,   10,   11,   12,   67,
  162,  574,  319,  575,   67,   67,  340,   67,   31,  346,
  577,   59,  578,   67,   60,   61,  187,  265,  266,  231,
  347,  231,  231,  352,   31,  426,  427,  440,  441,  453,
  454,  487,  488,  601,  602,   66,  139,  140,  345,  231,
   31,    7,   31,   31,  360,    8,   31,   31,   31,   10,
   11,   12,  353,  162,  145,  146,  356,  357,  374,  386,
  387,   31,  388,  397,   67,  153,  153,  403,  153,  206,
  153,  153,   67,  153,  153,  153,  153,  153,  153,  153,
  153,  404,  405,  153,  449,   67,  496,  153,  421,   67,
  409,  428,  410,  431,  153,  231,  231,  412,  450,   31,
  153,   32,  529,  468,  498,  512,  519,    8,  523,  220,
  469,  470,  222,  223,  471,  472,   32,  541,  543,  231,
  546,  547,  568,  550,   66,   66,   66,   66,  569,   66,
    7,  530,   32,  596,    8,  572,  573,  576,   10,   11,
   12,   31,  162,   67,   66,  587,   66,   66,   32,  615,
   32,   32,  617,  619,   32,   32,   32,  622,  207,  623,
   21,   22,   23,   54,  160,  504,  128,  155,    0,   32,
    0,  219,    0,   31,    0,    8,    9,  220,    0,  221,
  222,  223,    0,  224,   14,   15,  163,  163,  163,  163,
    0,  163,  163,    0,  163,  163,  163,  163,  163,  163,
  163,  163,   66,   66,  163,   17,    0,   32,  163,  163,
  163,  163,  163,  163,    0,  163,    0,    0,    0,    0,
    0,  163,  163,  163,  163,  163,    0,    0,    0,    0,
    0,    0,   67,   67,   67,   67,  468,   67,    0,    0,
    8,    0,  220,  469,  470,  222,  223,  471,  472,   32,
    0,    0,   67,    0,   67,   67,    0,    0,    0,    0,
    0,    0,   66,  609,  156,  156,  156,  156,    0,  156,
  156,    0,  156,  156,  156,  156,  156,  156,  156,  156,
    0,   32,  156,    0,    0,    0,  156,  156,  156,  156,
  156,  156,    0,  156,    0,    0,    0,    0,    0,  156,
  156,  156,    0,    0,    0,    0,    0,    0,    0,    0,
   67,   67,  154,  154,  154,  154,    0,  154,  154,    0,
  154,  154,  154,  154,  154,  154,  154,  154,    0,    0,
  154,    0,    0,    0,  154,  154,  154,  154,  154,  154,
    0,  154,    0,    0,    0,    0,    0,  154,  154,  154,
    0,    0,    0,    0,    0,    0,    0,   66,    0,   66,
   66,    0,    0,  155,  155,  155,  155,    0,  155,  155,
   67,  155,  155,  155,  155,  155,  155,  155,  155,    0,
    0,  155,    0,    0,    0,  155,  155,  155,  155,  155,
  155,    0,  155,    0,    0,    0,    0,    0,  155,  155,
  155,  232,  232,    0,  232,    0,  232,  232,    0,  232,
  232,  232,  232,  232,  232,  232,  232,    0,    0,    0,
    0,    0,    0,  232,    0,    0,    0,    0,    0,    0,
  232,    0,    0,    0,  234,  234,  232,  234,    0,  234,
  234,    0,  234,  234,  234,  234,  234,  234,  234,  234,
  247,    0,    0,    0,    8,    0,  234,  248,  249,   11,
   12,  250,  251,  234,    0,   67,    0,   67,   67,  234,
  244,  244,    0,  244,    0,  244,  244,  331,  244,  244,
  244,  244,  244,  244,  244,  244,    0,    0,    0,    0,
    0,    0,  244,    0,    0,    0,    0,  348,  219,  244,
    0,    0,    8,    9,  220,  244,  221,  222,  223,    0,
  224,   14,   15,    0,  394,  219,    0,    0,    0,    8,
    9,  220,    0,  221,  222,  223,  349,  224,   14,   15,
  398,  219,   17,    0,    0,    8,    9,  220,    0,  221,
  222,  223,  395,  224,   14,   15,  438,  219,    0,   17,
    0,    8,    9,  220,    0,  221,  222,  223,  399,  224,
   14,   15,    0,  443,  219,   17,    0,    0,    8,    9,
  220,    0,  221,  222,  223,  439,  224,   14,   15,    0,
    0,   17,    0,    0,    0,    0,    0,    0,    0,    0,
  544,  219,  444,    0,    0,    8,    9,  220,   17,  221,
  222,  223,    0,  224,   14,   15,    0,   15,   15,    0,
    0,    0,   15,   15,    0,    0,   15,   15,   15,  545,
   15,   15,   15,    0,    0,   17,    0,    0,    0,   15,
    0,    0,    0,    0,  142,  142,   15,    0,    0,  142,
  142,    0,   15,  142,  142,  142,    0,  142,  142,  142,
    0,    0,    0,    0,    0,    0,  142,    0,    0,    0,
    0,   14,   14,  142,    0,    0,   14,   14,    0,  142,
   14,   14,   14,    0,   14,   14,   14,    0,    0,    0,
    0,    0,    0,   14,    0,    0,    0,    0,  208,  208,
   14,    0,    0,  208,  208,    0,   14,  208,  208,  208,
    0,  208,  208,  208,    0,    0,    0,    0,    0,    0,
  208,    0,    0,    0,    0,    0,  219,  208,    0,    0,
    8,    9,  220,  208,  221,  222,  223,  219,  224,   14,
   15,    8,    9,  220,    0,  221,  222,  223,    0,  224,
   14,   15,    0,    0,  278,    0,    0,    0,    0,    0,
   17,    0,    0,    0,  219,  442,    0,    0,    8,    9,
  220,   17,  221,  222,  223,  219,  224,   14,   15,    8,
    9,  220,    0,  221,  222,  223,    0,  224,   14,   15,
    0,  465,    7,    0,    0,    0,    8,    9,   17,    0,
   10,   11,   12,  522,   13,   14,   15,    0,    0,   17,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    6,
   16,    0,    0,    6,    6,    0,   17,    6,    6,    6,
    0,    6,    6,    6,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    6,    0,  555,
  468,    0,    0,    6,    8,    0,  220,  469,  470,  222,
  223,  471,  472,  557,  468,    0,    0,    0,    8,    0,
  220,  469,  470,  222,  223,  471,  472,    0,  556,    0,
    0,    0,    0,    0,    0,    0,  591,  468,    0,    0,
    0,    8,  558,  220,  469,  470,  222,  223,  471,  472,
  593,  468,    0,    0,    0,    8,    0,  220,  469,  470,
  222,  223,  471,  472,    0,  592,    0,    0,    0,    0,
    0,    0,    0,  599,  468,    0,    0,    0,    8,  594,
  220,  469,  470,  222,  223,  471,  472,  604,  468,    0,
    0,    0,    8,    0,  220,  469,  470,  222,  223,  471,
  472,    0,  600,    0,    0,    0,    0,    0,    0,    0,
  620,  468,    0,    0,    0,    8,  605,  220,  469,  470,
  222,  223,  471,  472,  326,  247,    0,    0,    0,    8,
    0,    0,  248,  249,   11,   12,  250,  251,    0,  621,
    0,    0,    0,    0,    0,    0,  361,  247,    0,    0,
    0,    8,    0,  327,  248,  249,   11,   12,  250,  251,
  363,  247,    0,    0,    0,    8,    0,    0,  248,  249,
   11,   12,  250,  251,    0,  362,    0,    0,    0,    0,
    0,    0,  416,  247,    0,    0,    0,    8,    0,  364,
  248,  249,   11,   12,  250,  251,  418,  247,    0,    0,
    0,    8,    0,    0,  248,  249,   11,   12,  250,  251,
    0,  417,    0,    0,    0,    0,    0,    0,  451,  247,
    0,    0,    0,    8,    0,  419,  248,  249,   11,   12,
  250,  251,  459,  247,    0,    0,    0,    8,    0,    0,
  248,  249,   11,   12,  250,  251,    0,  452,    0,    0,
    0,    0,    0,    0,  566,  247,    0,    0,    0,    8,
    0,  460,  248,  249,   11,   12,  250,  251,  224,  224,
    0,    0,    0,  224,    0,    0,  224,  224,  224,  224,
  224,  224,    0,  567,    0,  211,    7,    0,    0,    0,
    8,    0,    0,    0,   10,   11,   12,  224,  162,  350,
    7,    0,    0,    0,    8,    0,  195,  195,   10,   11,
   12,  195,  162,    0,  212,  195,  195,  195,    0,  195,
    0,    0,    0,    0,    0,    0,    0,    0,  351,  467,
  468,    0,    0,    0,    8,  195,  220,  469,  470,  222,
  223,  471,  472,  506,  468,    0,    0,    0,    8,    0,
  220,  469,  470,  222,  223,  471,  472,  473,    0,    0,
    0,    0,    0,    0,    0,  509,  468,    0,    0,    0,
    8,  507,  220,  469,  470,  222,  223,  471,  472,  560,
  468,    0,    0,    0,    8,    0,  220,  469,  470,  222,
  223,  471,  472,  510,    0,    0,    0,    0,    0,    0,
    0,  563,  468,    0,    0,    0,    8,  561,  220,  469,
  470,  222,  223,  471,  472,  584,  468,    0,    0,    0,
    8,    0,  220,  469,  470,  222,  223,  471,  472,  564,
    0,    0,    0,    0,    0,    0,    0,  588,  468,    0,
    0,    0,    8,  585,  220,  469,  470,  222,  223,  471,
  472,  611,  468,    0,    0,    0,    8,    0,  220,  469,
  470,  222,  223,  471,  472,  589,    0,    0,    0,    0,
    0,    0,  246,  247,    0,    0,    0,    8,    0,  612,
  248,  249,   11,   12,  250,  251,  294,  247,    0,    0,
    0,    8,    0,    0,  248,  249,   11,   12,  250,  251,
  252,    0,    0,    0,    0,    0,    0,  297,  247,    0,
    0,    0,    8,    0,  295,  248,  249,   11,   12,  250,
  251,  366,  247,    0,    0,    0,    8,    0,    0,  248,
  249,   11,   12,  250,  251,  298,    0,    0,    0,    0,
    0,    0,  369,  247,    0,    0,    0,    8,    0,  367,
  248,  249,   11,   12,  250,  251,  406,  247,    0,    0,
    0,    8,    0,    0,  248,  249,   11,   12,  250,  251,
  370,    0,    0,    0,    0,    0,    0,  413,  247,    0,
    0,    0,    8,    0,  407,  248,  249,   11,   12,  250,
  251,  515,  247,    0,    0,    0,    8,    0,    0,  248,
  249,   11,   12,  250,  251,  414,  468,    0,    0,    0,
    8,    0,  220,  469,  470,  222,  223,  471,  472,  516,
  468,    0,    0,    0,    8,    0,  220,  469,  470,  222,
  223,  471,  472,  468,  579,    0,    0,    8,    0,  220,
  469,  470,  222,  223,  471,  472,  247,    0,  603,    0,
    8,    0,    0,  248,  249,   11,   12,  250,  251,  247,
    0,  618,    0,    8,    0,    0,  248,  249,   11,   12,
  250,  251,  247,    0,  391,    0,    8,    0,    0,  248,
  249,   11,   12,  250,  251,  247,    0,  434,    0,    8,
    0,    0,  248,  249,   11,   12,  250,  251,  247,    0,
  455,    0,    8,    0,    0,  248,  249,   11,   12,  250,
  251,  247,    0,  456,    0,    8,    0,    0,  248,  249,
   11,   12,  250,  251,  247,    0,  457,    0,    8,    0,
    0,  248,  249,   11,   12,  250,  251,  161,    7,  458,
    0,    0,    8,    0,  169,    7,   10,   11,   12,    8,
  162,    0,  542,   10,   11,   12,    0,  162,  281,    7,
    0,    0,    0,    8,    0,  163,    7,   10,   11,   12,
    8,  162,  170,    7,   10,   11,   12,    8,  162,    0,
    7,   10,   11,   12,    8,  162,  282,    0,   10,   11,
   12,    0,  162,    0,  209,  247,    0,    0,    0,    8,
    0,  210,  248,  249,   11,   12,  250,  251,  318,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  492,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          6,
  266,  267,  256,  269,    6,   48,  256,   56,  295,  373,
  258,  298,  376,  256,  198,  256,  446,  258,   39,   40,
  198,   42,  256,  277,  199,  284,  274,  293,  278,    6,
  296,  297,  266,  267,  256,  269,  163,   44,  165,  166,
  256,  168,  169,  170,  331,  269,  289,  269,  256,  256,
  258,   46,  274,  483,  238,  485,   99,  256,  269,  293,
  238,  278,  296,  297,  107,  256,  274,  256,  284,  293,
  278,  293,  296,  297,  296,  297,  440,  284,  277,  198,
  367,  130,  512,  370,  269,  134,  277,  256,  257,  278,
  258,  256,  261,  256,   89,  269,  265,  266,  267,  120,
  269,  388,  256,  124,  269,  280,  274,  537,  293,  539,
  159,  296,  297,  108,  109,  278,  285,  244,  125,  238,
  407,  214,  409,  410,  278,  412,  413,  414,  123,  136,
  277,  315,  496,  256,  136,  269,  256,  315,  256,  259,
  260,  288,  288,  256,  151,  575,  256,  256,  578,  151,
  273,  256,  201,  258,  256,  282,  274,  178,  278,  136,
  167,  274,  274,  276,  274,  274,  173,  276,  261,  274,
  263,  601,  274,  278,  151,  256,  183,  607,  185,  186,
  292,  293,  189,  190,  191,  256,  256,  294,  295,  373,
  167,  198,  376,  274,  276,  373,  315,  204,  376,  194,
  195,  256,  204,  274,  274,  492,  183,  300,  185,  186,
  217,  269,  189,  190,  191,  273,  256,  277,  273,  277,
  395,  198,  397,  276,  399,  268,  259,  204,  288,  516,
  288,  238,  256,  259,  274,  242,  420,  256,  422,  423,
  242,  334,  420,  336,  422,  423,  267,  274,  269,  270,
  274,  272,  274,  248,  373,  274,  440,  376,  296,  297,
  256,  238,  440,  256,  256,  242,  287,  274,  289,  290,
  265,  266,  269,  256,  256,    6,  273,  284,  274,  273,
  277,  274,  274,  277,  266,  267,  269,  269,  256,  256,
  465,  288,  385,  256,  288,  270,  271,  390,  256,  266,
  267,  420,  269,  422,  423,  256,  274,  284,  315,  316,
  273,  293,  496,  497,  296,  297,  274,  288,  496,  497,
  495,  440,  256,  274,  345,  346,  293,  273,  256,  296,
  297,  256,  266,  267,  256,  269,  520,  273,  315,  316,
  347,  277,  520,  256,  266,  267,  507,  269,  273,  510,
  256,  279,  280,  281,  282,  283,  259,  260,  256,  293,
  453,  274,  296,  297,  292,  293,  373,  256,  274,  376,
  256,  293,  273,  534,  296,  297,  274,  496,  497,  278,
  266,  267,  257,  269,  405,  274,  261,  269,  263,  264,
  265,  266,  267,  268,  269,  402,  373,  490,  269,  376,
  561,  520,  256,  564,  256,  136,  256,  293,  256,  284,
  296,  297,  256,  420,  277,  422,  423,  256,  256,  273,
  151,  256,  274,  273,  585,  273,  587,  256,  589,  269,
  274,  426,  427,  440,  273,  273,  167,  256,  273,  446,
  256,  258,  449,  420,  273,  422,  423,  256,  609,  256,
  269,  612,  183,  256,  185,  186,  258,  273,  189,  190,
  191,  256,  284,  440,  273,  260,  273,  198,  256,  446,
  273,  256,  260,  204,  469,  256,  483,  277,  485,  500,
  284,  502,  503,  284,  269,  266,  267,  257,  269,  496,
  497,  261,  487,  488,  284,  265,  266,  267,  505,  269,
  256,  292,  293,  256,  260,  512,  483,  238,  485,  292,
  293,  242,  293,  520,  284,  296,  297,  270,  271,  496,
  497,  269,  270,  271,  278,  532,  533,  256,  505,  256,
  537,  258,  539,    6,  274,  512,  257,  266,  267,  278,
  261,  262,  263,  520,  265,  266,  267,  256,  269,  270,
  271,  284,  559,  284,  278,  532,  533,  266,  267,  256,
  537,   34,  539,  260,  285,  277,   39,   40,  575,   42,
  291,  578,  278,  580,  581,   48,  256,  284,  269,  270,
  271,  273,  559,  274,  315,  316,  266,  267,  595,  269,
  597,  598,  278,  293,  601,  256,  296,  297,  575,  273,
  607,  578,  273,  580,  581,  266,  267,  614,  269,  616,
  278,  256,  256,  293,  259,  260,  296,  297,  595,  277,
  597,  598,  266,  267,  601,  269,   99,  256,  274,  258,
  607,  256,  293,  258,  107,  296,  297,  614,  256,  616,
  258,    6,  373,  278,  256,  376,  256,  120,  258,  293,
  269,  124,  296,  297,  266,  267,  256,  269,  257,  259,
  260,  256,  261,  136,  259,  260,  265,  266,  267,   34,
  269,  256,  260,  258,   39,   40,  274,   42,  151,  273,
  256,  293,  258,   48,  296,  297,  285,  292,  293,  420,
  273,  422,  423,  260,  167,  292,  293,  259,  260,  259,
  260,  292,  293,  259,  260,  178,  105,  106,  278,  440,
  183,  257,  185,  186,  278,  261,  189,  190,  191,  265,
  266,  267,  260,  269,  110,  111,  274,  274,  258,  258,
  258,  204,  284,  284,   99,  256,  257,  278,  259,  285,
  261,  262,  107,  264,  265,  266,  267,  268,  269,  270,
  271,  274,  278,  274,  273,  120,  259,  278,  278,  124,
  284,  277,  284,  278,  285,  496,  497,  284,  278,  242,
  291,  136,  256,  257,  278,  274,  278,  261,  260,  263,
  264,  265,  266,  267,  268,  269,  151,  278,  260,  520,
  278,  278,  260,  274,  267,  268,  269,  270,  260,  272,
  257,  285,  167,  278,  261,  260,  260,  258,  265,  266,
  267,  284,  269,  178,  287,  284,  289,  290,  183,  278,
  185,  186,  278,  260,  189,  190,  191,  260,  285,  260,
    6,    6,    6,   24,  134,  471,   90,  123,   -1,  204,
   -1,  257,   -1,  316,   -1,  261,  262,  263,   -1,  265,
  266,  267,   -1,  269,  270,  271,  256,  257,  258,  259,
   -1,  261,  262,   -1,  264,  265,  266,  267,  268,  269,
  270,  271,  345,  346,  274,  291,   -1,  242,  278,  279,
  280,  281,  282,  283,   -1,  285,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,   -1,   -1,   -1,   -1,
   -1,   -1,  267,  268,  269,  270,  257,  272,   -1,   -1,
  261,   -1,  263,  264,  265,  266,  267,  268,  269,  284,
   -1,   -1,  287,   -1,  289,  290,   -1,   -1,   -1,   -1,
   -1,   -1,  405,  284,  256,  257,  258,  259,   -1,  261,
  262,   -1,  264,  265,  266,  267,  268,  269,  270,  271,
   -1,  316,  274,   -1,   -1,   -1,  278,  279,  280,  281,
  282,  283,   -1,  285,   -1,   -1,   -1,   -1,   -1,  291,
  292,  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  345,  346,  256,  257,  258,  259,   -1,  261,  262,   -1,
  264,  265,  266,  267,  268,  269,  270,  271,   -1,   -1,
  274,   -1,   -1,   -1,  278,  279,  280,  281,  282,  283,
   -1,  285,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  500,   -1,  502,
  503,   -1,   -1,  256,  257,  258,  259,   -1,  261,  262,
  405,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
   -1,  274,   -1,   -1,   -1,  278,  279,  280,  281,  282,
  283,   -1,  285,   -1,   -1,   -1,   -1,   -1,  291,  292,
  293,  256,  257,   -1,  259,   -1,  261,  262,   -1,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,   -1,   -1,
   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,   -1,   -1,
  285,   -1,   -1,   -1,  256,  257,  291,  259,   -1,  261,
  262,   -1,  264,  265,  266,  267,  268,  269,  270,  271,
  257,   -1,   -1,   -1,  261,   -1,  278,  264,  265,  266,
  267,  268,  269,  285,   -1,  500,   -1,  502,  503,  291,
  256,  257,   -1,  259,   -1,  261,  262,  284,  264,  265,
  266,  267,  268,  269,  270,  271,   -1,   -1,   -1,   -1,
   -1,   -1,  278,   -1,   -1,   -1,   -1,  256,  257,  285,
   -1,   -1,  261,  262,  263,  291,  265,  266,  267,   -1,
  269,  270,  271,   -1,  256,  257,   -1,   -1,   -1,  261,
  262,  263,   -1,  265,  266,  267,  285,  269,  270,  271,
  256,  257,  291,   -1,   -1,  261,  262,  263,   -1,  265,
  266,  267,  284,  269,  270,  271,  256,  257,   -1,  291,
   -1,  261,  262,  263,   -1,  265,  266,  267,  284,  269,
  270,  271,   -1,  256,  257,  291,   -1,   -1,  261,  262,
  263,   -1,  265,  266,  267,  285,  269,  270,  271,   -1,
   -1,  291,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,  285,   -1,   -1,  261,  262,  263,  291,  265,
  266,  267,   -1,  269,  270,  271,   -1,  256,  257,   -1,
   -1,   -1,  261,  262,   -1,   -1,  265,  266,  267,  285,
  269,  270,  271,   -1,   -1,  291,   -1,   -1,   -1,  278,
   -1,   -1,   -1,   -1,  256,  257,  285,   -1,   -1,  261,
  262,   -1,  291,  265,  266,  267,   -1,  269,  270,  271,
   -1,   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,
   -1,  256,  257,  285,   -1,   -1,  261,  262,   -1,  291,
  265,  266,  267,   -1,  269,  270,  271,   -1,   -1,   -1,
   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,  256,  257,
  285,   -1,   -1,  261,  262,   -1,  291,  265,  266,  267,
   -1,  269,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,
  278,   -1,   -1,   -1,   -1,   -1,  257,  285,   -1,   -1,
  261,  262,  263,  291,  265,  266,  267,  257,  269,  270,
  271,  261,  262,  263,   -1,  265,  266,  267,   -1,  269,
  270,  271,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,
  291,   -1,   -1,   -1,  257,  285,   -1,   -1,  261,  262,
  263,  291,  265,  266,  267,  257,  269,  270,  271,  261,
  262,  263,   -1,  265,  266,  267,   -1,  269,  270,  271,
   -1,  284,  257,   -1,   -1,   -1,  261,  262,  291,   -1,
  265,  266,  267,  285,  269,  270,  271,   -1,   -1,  291,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
  285,   -1,   -1,  261,  262,   -1,  291,  265,  266,  267,
   -1,  269,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,  256,
  257,   -1,   -1,  291,  261,   -1,  263,  264,  265,  266,
  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
  263,  264,  265,  266,  267,  268,  269,   -1,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,  285,  263,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,
  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,  285,
  263,  264,  265,  266,  267,  268,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,  268,
  269,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,  285,  263,  264,  265,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,   -1,  264,  265,  266,  267,  268,  269,   -1,  285,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,   -1,  285,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  285,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,   -1,  285,  264,  265,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  264,  265,  266,  267,  268,  269,   -1,  285,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
   -1,  285,  264,  265,  266,  267,  268,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,   -1,  264,  265,  266,  267,
  268,  269,   -1,  285,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,   -1,  265,  266,  267,  285,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,  256,  257,  265,  266,
  267,  261,  269,   -1,  285,  265,  266,  267,   -1,  269,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,  256,
  257,   -1,   -1,   -1,  261,  285,  263,  264,  265,  266,
  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
  263,  264,  265,  266,  267,  268,  269,  284,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
  261,  284,  263,  264,  265,  266,  267,  268,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,
  267,  268,  269,  284,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,  284,  263,  264,
  265,  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,  263,  264,  265,  266,  267,  268,  269,  284,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,  284,  263,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,
  265,  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  284,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
  284,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,  284,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  284,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
  284,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,  284,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  284,  257,   -1,   -1,   -1,
  261,   -1,  263,  264,  265,  266,  267,  268,  269,  284,
  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,
  267,  268,  269,  257,  285,   -1,   -1,  261,   -1,  263,
  264,  265,  266,  267,  268,  269,  257,   -1,  285,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,  257,
   -1,  285,   -1,  261,   -1,   -1,  264,  265,  266,  267,
  268,  269,  257,   -1,  285,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  257,   -1,  285,   -1,  261,
   -1,   -1,  264,  265,  266,  267,  268,  269,  257,   -1,
  285,   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,
  269,  257,   -1,  285,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,  257,   -1,  285,   -1,  261,   -1,
   -1,  264,  265,  266,  267,  268,  269,  256,  257,  285,
   -1,   -1,  261,   -1,  256,  257,  265,  266,  267,  261,
  269,   -1,  285,  265,  266,  267,   -1,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,  284,  257,  265,  266,  267,
  261,  269,  284,  257,  265,  266,  267,  261,  269,   -1,
  257,  265,  266,  267,  261,  269,  284,   -1,  265,  266,
  267,   -1,  269,   -1,  285,  257,   -1,   -1,   -1,  261,
   -1,  285,  264,  265,  266,  267,  268,  269,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  284,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=297;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"IF","THEN","ELSE","END_IF","OUT","FUN","RETURN","BREAK","WHEN",
"WHILE","FOR","CONTINUE","ID","I32","F32","PUNTO","PARENT_A","PARENT_C",
"COMILLA","COMA","DOSPUNTOS","PUNTOCOMA","IGUAL","MAYOR","MENOR","MENORIGUAL",
"MAYORIGUAL","LLAVE_A","LLAVE_C","EXCL","DIST","ASIG","CADENA","COMENT","CONST",
"SUMA","RESTA","MULT","DIV","ENTERO","FLOAT",
};
final static String yyrule[] = {
"$accept : program",
"program : nombre_program LLAVE_A bloque_sentencias LLAVE_C",
"program : error",
"nombre_program : ID",
"bloque_sentencias :",
"bloque_sentencias : bloque_sentencias sentencia PUNTOCOMA",
"bloque_sentencias : bloque_sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_decl_datos",
"sentencia_declarativa : sentencia_decl_fun",
"sentencia_declarativa : lista_const",
"tipo : I32",
"tipo : F32",
"sentencia_decl_datos : tipo list_var",
"sentencia_decl_datos : ID list_var",
"list_var : list_var COMA ID",
"list_var : ID",
"fun_id : FUN ID",
"sentencia_decl_fun : fun_id PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : fun_id PARENT_A parametro PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : fun_id PARENT_A PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : fun_id PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun error",
"sentencia_decl_fun : fun_id PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo error",
"sentencia_decl_fun : fun_id PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS error",
"sentencia_decl_fun : fun_id PARENT_A parametro COMA parametro PARENT_C error",
"sentencia_decl_fun : fun_id PARENT_A parametro COMA parametro error",
"sentencia_decl_fun : fun_id PARENT_A parametro error",
"sentencia_decl_fun : fun_id error",
"sentencia_decl_fun : FUN error",
"cuerpo_fun :",
"cuerpo_fun : cuerpo_fun sentencias_fun PUNTOCOMA",
"cuerpo_fun : cuerpo_fun sentencias_fun error",
"sentencias_fun : sentencia_decl_datos",
"sentencias_fun : sentencia_decl_fun",
"sentencias_fun : lista_const",
"sentencias_fun : asignacion",
"sentencias_fun : llamado_func",
"sentencias_fun : sentencia_if_fun",
"sentencias_fun : sentencia_out",
"sentencias_fun : sentencia_when_fun",
"sentencias_fun : sentencia_for_fun",
"sentencias_fun : sentencia_while_fun",
"sentencias_fun : retorno",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_fun : IF PARENT_A condicion error",
"sentencia_if_fun : IF PARENT_A error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_fun : WHEN PARENT_A condicion error",
"sentencia_when_fun : WHEN PARENT_A error",
"sentencia_when_fun : WHEN error condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion error",
"sentencia_while_fun : WHILE PARENT_A error",
"sentencia_while_fun : WHILE error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for_fun : ID DOSPUNTOS error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for_fun : FOR error",
"cuerpo_fun_break :",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break PUNTOCOMA",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break error",
"sentencias_fun_break : asignacion",
"sentencias_fun_break : sentencia_if_break_fun",
"sentencias_fun_break : sentencia_out",
"sentencias_fun_break : sentencia_when_break_fun",
"sentencias_fun_break : sentencia_while_fun",
"sentencias_fun_break : sentencia_for_fun",
"sentencias_fun_break : CONTINUE tag",
"sentencias_fun_break : BREAK",
"sentencias_fun_break : BREAK cte",
"sentencias_fun_break : retorno",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun_break",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_break_fun : WHEN PARENT_A condicion error",
"sentencia_when_break_fun : WHEN PARENT_A error",
"sentencia_when_break_fun : WHEN error condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break_fun : IF PARENT_A condicion error",
"sentencia_if_break_fun : IF PARENT_A error",
"sentencia_if_break_fun : IF error",
"retorno : RETURN PARENT_A expresion PARENT_C",
"parametro : tipo ID",
"parametro : ID ID",
"lista_const : CONST lista_asignacion",
"lista_asignacion : lista_asignacion COMA asignacion_const",
"lista_asignacion : asignacion_const",
"asignacion_const : ID ASIG cte",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : sentencia_if",
"sentencia_ejecutable : sentencia_out",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : sentencia_for",
"sentencia_ejecutable : sentencia_while",
"sentencia_ejecutable : llamado_func",
"asignacion : ID ASIG expresion",
"expresion : expresion SUMA termino",
"expresion : expresion RESTA termino",
"expresion : termino",
"expresion : llamado_func",
"expresion : sentencia_for ELSE cte",
"expresion : sentencia_while ELSE cte",
"termino : termino MULT factor",
"termino : termino DIV factor",
"termino : factor",
"factor : ID",
"factor : cte",
"cte : ENTERO",
"cte : FLOAT",
"cte : RESTA ENTERO",
"cte : RESTA FLOAT",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if : IF PARENT_A condicion PARENT_C error",
"sentencia_if : IF PARENT_A condicion error",
"sentencia_if : IF PARENT_A error",
"sentencia_if : IF error",
"condicion : expresion comparacion expresion",
"condicion : expresion comparacion error",
"condicion : expresion error expresion",
"comparacion : IGUAL",
"comparacion : MAYOR",
"comparacion : MENOR",
"comparacion : MENORIGUAL",
"comparacion : MAYORIGUAL",
"bloque_ejecutable :",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable PUNTOCOMA",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"sentencia_out : OUT PARENT_A CADENA PARENT_C",
"sentencia_out : OUT PARENT_A CADENA error",
"sentencia_out : OUT PARENT_A error",
"sentencia_out : OUT error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN sentencia_ejecutable",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN error bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C error LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A error PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN error condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C error",
"sentencia_while : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion error",
"sentencia_while : WHILE PARENT_A error",
"sentencia_while : WHILE error",
"bloque_break_continue :",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue PUNTOCOMA",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue",
"ejecutables_break_continue : asignacion",
"ejecutables_break_continue : sentencia_if_break",
"ejecutables_break_continue : sentencia_out",
"ejecutables_break_continue : sentencia_when_break",
"ejecutables_break_continue : sentencia_while",
"ejecutables_break_continue : sentencia_for",
"ejecutables_break_continue : CONTINUE tag",
"ejecutables_break_continue : BREAK",
"ejecutables_break_continue : BREAK cte",
"tag :",
"tag : DOSPUNTOS ID",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN ejecutables_break_continue",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN error bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C error LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A error PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN error condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion error",
"sentencia_if_break : IF PARENT_A error",
"sentencia_if_break : IF error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C ejecutables_break_continue",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C ejecutables_break_continue",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for : ID DOSPUNTOS error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for : FOR error",
"param_real : cte",
"param_real : ID",
"llamado_func : ID PARENT_A param_real COMA param_real PARENT_C",
"llamado_func : ID PARENT_A param_real PARENT_C",
"llamado_func : ID PARENT_A PARENT_C",
"llamado_func : ID PARENT_A param_real COMA param_real error",
"llamado_func : ID PARENT_A param_real error",
"llamado_func : ID PARENT_A error",
};

//#line 728 "gramaticaTomi.y"
private NodoControl raiz;
private List<String> variablesEnElAmbito = new ArrayList<String>();
private Map<String,ArbolSintactico> funciones = new HashMap<String,ArbolSintactico>();
private static List<Integer> linFun = new ArrayList<Integer>();
private List<ArbolSintactico> retornos = new ArrayList<ArbolSintactico>();
private static HashMap<Integer,ArrayList<String>> erroresSintacticos = new HashMap<Integer,ArrayList<String>>();
private static List<NodoFuncion> pilaFunciones = new ArrayList<NodoFuncion>();
public String ambitoActual = "Global";


void yyerror(String mensaje){
        if (erroresSintacticos.get(AnalizadorLexico.getLineaAct())== null){
                ArrayList<String> mnsj = new ArrayList<String>();
                mnsj.add(mensaje); 
                erroresSintacticos.put(AnalizadorLexico.getLineaAct(), mnsj);
        }
        else{
                erroresSintacticos.get(AnalizadorLexico.getLineaAct()).add(mensaje);
        }
}

static HashMap<Integer,ArrayList<String>> getErroresSintacticos(){
        return erroresSintacticos;
}
void chequearRangoI32(String sval){
  String s = "2147483647";
  long l = Long.valueOf(s);
  if(Long.valueOf(sval) > l){
    yyerror("La constante esta fuera de rango");
  }
}

void chequearRangoI32Neg(String sval){
       String s = "2147483648";
        long l = Long.valueOf(s);
        if(Long.valueOf(sval) > l){
                yyerror("La constante esta fuera de rango");
  } 
}

int yylex() throws IOException{
        Token t = AnalizadorLexico.getToken();
        this.yylval = new ParserVal(t.getLexema());
        //if(t.getId() != -1){
        //  System.out.println("Id: " + t.getId()+" Lexema: " + t.getLexema());
        //}else
        //  System.out.println("TERMINO LA EJECUCION");
        return t.getId();
}
public NodoControl getRaiz(){
	return raiz;
}
public Map<String,ArbolSintactico> getFuncion(){
        return funciones;
}

void actualizarAmbito(String lex, String amb){
        TablaSimbolos.addAtributo(lex,"Ambito",amb);
}

void putVariableEnAmbito(String s){
        this.variablesEnElAmbito.add(s);
}

void limpiarVariablesDeAmbito(){
        this.variablesEnElAmbito = new ArrayList<String>();
}
void removeVarDeAmbito(String s){
        this.variablesEnElAmbito.remove(s);
}
List<String> getListaVariablesDelAmbito(){
        return this.variablesEnElAmbito;
}
public static void addLinFun(int i){
        linFun.add(i);
}
public static Integer getTope(){

        Integer i = linFun.remove(linFun.size()-1);
        return i;
}

public static void addFuncionPila(NodoFuncion n){
        pilaFunciones.add(n);
}

public static NodoFuncion getTopeFuncion(){
        if(!pilaFunciones.isEmpty())
          return pilaFunciones.get(pilaFunciones.size()-1);
        return null;
}
public static void removeTopeFuncion(){
        pilaFunciones.remove(pilaFunciones.size()-1);
}
public static List<NodoFuncion> getPilaFunciones(){
        return pilaFunciones;
}
public String buscarAmbito(String ambitoActual,String lexema){
        String ambito = ambitoActual;
        while(!TablaSimbolos.existeSimbolo(lexema+":"+ambito)){
                if(ambito.equals("Global")){
                        yyerror("La variable " + lexema + " no se encuentra declarada en el ambito " + ambitoActual);
                        ambito = "";
                        break;
                }else{
                        char [] a = ambito.toCharArray();
                        for (int i = a.length;i>=0;i--){
                                if(a[i-1] == ':'){
                                        ambito = ambito.substring(0,i-1);
                                        break;
                                }
                        }
                }
        }
        return ambito;
}

//#line 1328 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse() throws IOException
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 22 "gramaticaTomi.y"
{
                                                                raiz = new NodoControl("PROGRAMA",(ArbolSintactico)val_peek(1));  
                                                                TablaSimbolos.removeAtributo(val_peek(3).sval);
                                                        }
break;
case 2:
//#line 28 "gramaticaTomi.y"
{yyerror("Hay un error sintactico en la entrada que arrastra errores");}
break;
case 4:
//#line 32 "gramaticaTomi.y"
{yyval=new NodoHoja("Fin");}
break;
case 5:
//#line 33 "gramaticaTomi.y"
{
                                                        yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                                                        }
break;
case 6:
//#line 36 "gramaticaTomi.y"
{
                                yyval = new NodoControl("Error",(ArbolSintactico)null);
                                yyerror("Se esperaba ;");
                        }
break;
case 7:
//#line 41 "gramaticaTomi.y"
{yyval=new NodoHoja("Sentencia Declarativa");}
break;
case 8:
//#line 42 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 10:
//#line 45 "gramaticaTomi.y"
{funciones.put((String)((ArbolSintactico)val_peek(0)).getLex(),(ArbolSintactico)val_peek(0));}
break;
case 12:
//#line 48 "gramaticaTomi.y"
{
            yyval = new NodoHoja("Entero");
            ((NodoHoja)yyval).setTipo("Entero");
           }
break;
case 13:
//#line 52 "gramaticaTomi.y"
{
            yyval = new NodoHoja("Float");
            ((NodoHoja)yyval).setTipo("Float");
           }
break;
case 14:
//#line 57 "gramaticaTomi.y"
{  System.out.println("Declaracion de datos");
                                        for (String s : ((NodoTipos)val_peek(0)).getList()){
                                                String ambito = ambitoActual;
                                                while(TablaSimbolos.existeSimbolo(s+":"+ambito)){
                                                        if(ambito.equals("Global")){
                                                                yyerror("La variable " + s + " ya se encuentra declarada en el ambito " + ambitoActual);
                                                                ambito = "";
                                                                break;
                                                        }else{
                                                                char [] a = ambito.toCharArray();
                                                                for (int i = a.length;i>=0;i--){
                                                                        if(a[i-1] == ':'){
                                                                        ambito = ambito.substring(0,i-1);
                                                                        break;
                                                                }
                                                        }
                                                }
                                        }  
                                        if(ambito.equals(ambitoActual)){
                                                TablaSimbolos.addNuevoSimbolo(s+":"+ambito);
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Id",TablaSimbolos.getAtributo(s,"Id"));
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Tipo",((ArbolSintactico) val_peek(1)).getTipo());
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Linea",AnalizadorLexico.getLineaAct());
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Uso","Variable");
                                                TablaSimbolos.removeAtributo(s);
                                        }
                                        

                                        }
                                        yyval = val_peek(0);
                                }
break;
case 15:
//#line 88 "gramaticaTomi.y"
{yyerror("No esta permitido el tipo declarado");}
break;
case 16:
//#line 90 "gramaticaTomi.y"
{
                            yyval=val_peek(2);
                            ((NodoTipos)yyval).add((String)val_peek(0).sval);
                            }
break;
case 17:
//#line 94 "gramaticaTomi.y"
{
               yyval=new NodoTipos((String)val_peek(0).sval);
              }
break;
case 18:
//#line 98 "gramaticaTomi.y"
{       

                        if(!TablaSimbolos.existeSimbolo(val_peek(0).sval+ ":" + ambitoActual)){
                                yyval = new ParserVal(val_peek(0).sval);
                                TablaSimbolos.addNuevoSimbolo(val_peek(0).sval+ ":" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(0).sval+ ":" + ambitoActual,"Uso","NombreFuncion");
                                TablaSimbolos.addAtributo(val_peek(0).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(0).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(0).sval);
                                ambitoActual += ":"+val_peek(0).sval;

                        }else{
                                yyerror("La funcion " + val_peek(0).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += ":"+val_peek(0).sval;
                        }

}
break;
case 19:
//#line 115 "gramaticaTomi.y"
{
                                System.out.println("Declaracion de Funcion");
                                yyval = new NodoControl("Funcion:"+val_peek(10).sval,(ArbolSintactico)val_peek(1));
                                String tipo = ((ArbolSintactico)val_peek(3)).getTipo();
                                Integer tope = getTope();
                                ArrayList<ArbolSintactico> r1 = new ArrayList<ArbolSintactico>();
                                for (ArbolSintactico a1 : retornos){
                                        r1.add(a1);
                                }
                                for (ArbolSintactico a : r1){
                                        Integer i = a.getLinea();
                                        if( (i>= tope) && (i<=(Integer)AnalizadorLexico.getLineaAct()) ){
                                                if(!(a.getTipo().equals(tipo))  && !(a.getTipo().equals("null"))){
                                                        yyerror("El retorno debe tener el mismo tipo que el de la funcion.");
                                                }
                                                retornos.remove(a);
                                        }
                                }
                                char [] a = ambitoActual.toCharArray();
                                for (int i = a.length;i>=0;i--){
                                        if(a[i-1] == ':'){
                                                ambitoActual = ambitoActual.substring(0,i-1);
                                                break;
                                        }
                                }

                        }
break;
case 20:
//#line 142 "gramaticaTomi.y"
{
                                System.out.println("Declaracion de Funcion");                                                               
                                yyval = new NodoControl("Funcion:"+val_peek(8).sval,(ArbolSintactico)val_peek(1));
                                String tipo = ((ArbolSintactico)val_peek(3)).getTipo();
                                Integer tope = getTope();  
                                ArrayList<ArbolSintactico> r1 = new ArrayList<ArbolSintactico>();
                                
                                for (ArbolSintactico a1 : retornos){
                                        r1.add(a1);
                                }
                                for (ArbolSintactico a : r1){
                                        Integer i = a.getLinea();
                                        if( (i>= tope) && (i<=(Integer)AnalizadorLexico.getLineaAct()) ){
                                                if(!(a.getTipo().equals(tipo))  && !(a.getTipo().equals("null"))){
                                                        yyerror("El retorno debe tener el mismo tipo que el de la funcion.");
                                                }
                                                retornos.remove(a);
                                        }
                                }
                                char [] a = ambitoActual.toCharArray();
                                for (int i = a.length;i>=0;i--){
                                        if(a[i-1] == ':'){
                                                ambitoActual = ambitoActual.substring(0,i-1);
                                                break;
                                        }
                                }
                                }
break;
case 21:
//#line 169 "gramaticaTomi.y"
{
                                System.out.println("Declaracion de Funcion");
                                yyval = new NodoControl("Funcion:"+val_peek(7).sval,(ArbolSintactico)val_peek(1));
                                Integer tope = getTope();
                                String tipo = ((ArbolSintactico)val_peek(3)).getTipo();
                                ArrayList<ArbolSintactico> r1 = new ArrayList<ArbolSintactico>();
                                for (ArbolSintactico a1 : retornos){
                                        r1.add(a1);
                                }
                                for (ArbolSintactico a : r1){
                                        Integer i = a.getLinea();
                                        if( (i>= tope) && (i<=(Integer)AnalizadorLexico.getLineaAct()) ){
                                                if(!(a.getTipo().equals(tipo))  && !(a.getTipo().equals("null"))){
                                                        yyerror("El retorno debe tener el mismo tipo que el de la funcion.");
                                                }
                                                retornos.remove(a);
                                        }
                                }
                                char [] a = ambitoActual.toCharArray();
                                for (int i = a.length;i>=0;i--){
                                        if(i!=0){
                                                if(a[i-1] == ':'){
                                                        ambitoActual = ambitoActual.substring(0,i-1);
                                                        break;
                                                }
                                        }
                                }
                                }
break;
case 22:
//#line 197 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 23:
//#line 198 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 24:
//#line 199 "gramaticaTomi.y"
{yyerror("El tipo declarado no esta permitido");}
break;
case 25:
//#line 200 "gramaticaTomi.y"
{yyerror("Se esperaba :");}
break;
case 26:
//#line 201 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 27:
//#line 202 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 28:
//#line 203 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 29:
//#line 204 "gramaticaTomi.y"
{yyerror("Se esperaba un nombre de funcion");}
break;
case 30:
//#line 206 "gramaticaTomi.y"
{yyval=new NodoHoja("Fin");}
break;
case 31:
//#line 207 "gramaticaTomi.y"
{yyval=new NodoComun("Sentencia_Funcion", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));}
break;
case 32:
//#line 208 "gramaticaTomi.y"
{yyerror("Se esperaba ;");}
break;
case 33:
//#line 210 "gramaticaTomi.y"
{yyval=new NodoHoja("Sentencia Declarativa Datos");}
break;
case 34:
//#line 211 "gramaticaTomi.y"
{yyval=new NodoHoja("Sentencia Declarativa Funcion");}
break;
case 35:
//#line 212 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 36:
//#line 213 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 37:
//#line 214 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 38:
//#line 215 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 39:
//#line 216 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 41:
//#line 218 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 42:
//#line 219 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 43:
//#line 220 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 44:
//#line 222 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                                yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(8),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(5)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));
                        }
break;
case 45:
//#line 225 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(6)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));}
break;
case 46:
//#line 227 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(7)),new NodoControl("else fun", (ArbolSintactico)val_peek(3))));}
break;
case 47:
//#line 230 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF FUN", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                }
break;
case 48:
//#line 233 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(6)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));}
break;
case 49:
//#line 236 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF FUN", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );}
break;
case 50:
//#line 238 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 51:
//#line 239 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 52:
//#line 240 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 53:
//#line 241 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 54:
//#line 242 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 55:
//#line 243 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 56:
//#line 244 "gramaticaTomi.y"
{yyerror("Se esperaba then ");}
break;
case 57:
//#line 245 "gramaticaTomi.y"
{yyerror("Se esperaba ) ");}
break;
case 58:
//#line 246 "gramaticaTomi.y"
{yyerror("Se esperaba una condicion ");}
break;
case 59:
//#line 248 "gramaticaTomi.y"
{System.out.println("Sentencia WHEN");}
break;
case 60:
//#line 249 "gramaticaTomi.y"
{System.out.println("Sentencia WHEN");}
break;
case 61:
//#line 250 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 62:
//#line 251 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 63:
//#line 252 "gramaticaTomi.y"
{yyerror("Se esperaba then ");}
break;
case 64:
//#line 253 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 65:
//#line 254 "gramaticaTomi.y"
{yyerror("Se esperaba condicion");}
break;
case 66:
//#line 255 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 67:
//#line 257 "gramaticaTomi.y"
{
    yyval = new NodoComun("While con Etiqueta Funcion",new NodoControl("Etiqueta", new NodoHoja(val_peek(12).sval)) , new NodoComun("While", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                        System.out.println("Sentencia WHILE con etiqueta y con llaves");}
break;
case 68:
//#line 260 "gramaticaTomi.y"
{System.out.println("Sentencia WHILE con etiqueta y sin llaves");
                    yyval = new NodoComun("While con Etiqueta Funcion",new NodoControl("Etiqueta", new NodoHoja(val_peek(10).sval)) , new NodoComun("While", (ArbolSintactico) val_peek(6), new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );}
break;
case 69:
//#line 262 "gramaticaTomi.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 70:
//#line 265 "gramaticaTomi.y"
{
                    yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");
                }
break;
case 71:
//#line 269 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 72:
//#line 270 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 73:
//#line 271 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 74:
//#line 272 "gramaticaTomi.y"
{yyerror("Se esperaba una asignacion");}
break;
case 75:
//#line 273 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 76:
//#line 274 "gramaticaTomi.y"
{yyerror("Se esperaba :");}
break;
case 77:
//#line 275 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 78:
//#line 276 "gramaticaTomi.y"
{yyerror("Se esperaba una condicion");}
break;
case 79:
//#line 277 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 80:
//#line 279 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                                        yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                                                                                                       }
break;
case 81:
//#line 282 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                                        yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                                                                                                       }
break;
case 82:
//#line 285 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                                                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                                                                                                                                }
break;
case 83:
//#line 288 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                                                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                                                                                                                                }
break;
case 84:
//#line 291 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 85:
//#line 292 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 86:
//#line 293 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 87:
//#line 294 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 88:
//#line 295 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 89:
//#line 296 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 90:
//#line 297 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 91:
//#line 298 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 92:
//#line 301 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 93:
//#line 304 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 94:
//#line 307 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 95:
//#line 310 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 96:
//#line 311 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 97:
//#line 312 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 98:
//#line 313 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 99:
//#line 314 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 100:
//#line 315 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 101:
//#line 316 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 104:
//#line 320 "gramaticaTomi.y"
{yyerror("Se esperaba ;");}
break;
case 115:
//#line 334 "gramaticaTomi.y"
{System.out.println("Sentencia WHEN");}
break;
case 116:
//#line 335 "gramaticaTomi.y"
{System.out.println("Sentencia WHEN");}
break;
case 117:
//#line 336 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 118:
//#line 337 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 119:
//#line 338 "gramaticaTomi.y"
{yyerror("Se esperaba then ");}
break;
case 120:
//#line 339 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 121:
//#line 340 "gramaticaTomi.y"
{yyerror("Se esperaba condicion");}
break;
case 122:
//#line 341 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 123:
//#line 344 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 124:
//#line 349 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 125:
//#line 354 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 126:
//#line 359 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 127:
//#line 364 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 128:
//#line 369 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 129:
//#line 373 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 130:
//#line 374 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 131:
//#line 375 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 132:
//#line 376 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 133:
//#line 377 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 134:
//#line 378 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 135:
//#line 379 "gramaticaTomi.y"
{yyerror("Se esperaba then ");}
break;
case 136:
//#line 380 "gramaticaTomi.y"
{yyerror("Se esperaba ) ");}
break;
case 137:
//#line 381 "gramaticaTomi.y"
{yyerror("Se esperaba una condicion ");}
break;
case 138:
//#line 382 "gramaticaTomi.y"
{yyerror("Se esperaba ( ");}
break;
case 139:
//#line 384 "gramaticaTomi.y"
{yyval = new NodoControl("Retorno", (ArbolSintactico)val_peek(1));
                                                NodoHoja retorno = new NodoHoja("Retorno");
                                                retorno.setLinea(AnalizadorLexico.getLineaAct());
                                                retorno.setTipo(((ArbolSintactico)val_peek(1)).getTipo());
                                                retornos.add(retorno);
                                                }
break;
case 141:
//#line 393 "gramaticaTomi.y"
{yyerror("No esta permitido el tipo declarado");}
break;
case 142:
//#line 396 "gramaticaTomi.y"
{System.out.println("Declaracion de Constante/s");}
break;
case 145:
//#line 402 "gramaticaTomi.y"
{ 
                                String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                                if(ambito.equals(ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(2).sval+":"+ambito);
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambito,"Id",TablaSimbolos.getAtributo(val_peek(2).sval,"Id"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambito,"Tipo",((ArbolSintactico) val_peek(2)).getTipo());
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambito,"Linea",AnalizadorLexico.getLineaAct());
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambito,"Uso","Variable");
                                }
                        }
break;
case 146:
//#line 413 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 147:
//#line 414 "gramaticaTomi.y"
{yyval = val_peek(0); }
break;
case 148:
//#line 415 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 149:
//#line 416 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 150:
//#line 417 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 151:
//#line 418 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 152:
//#line 419 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 153:
//#line 421 "gramaticaTomi.y"
{
                                        System.out.println("Asignacion");
                                        yyval = new NodoComun(val_peek(1).sval,new NodoHoja(val_peek(2).sval), (ArbolSintactico) val_peek(0));
                                        String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                                        String tipoS1 = "";
                                        if(!ambito.equals("")){
                                                tipoS1 = (String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo");
                                                ((ArbolSintactico)yyval).setTipo(tipoS1);
                                        }
                                        String tipoS3 = ((ArbolSintactico)val_peek(0)).getTipo();
                                        if(!(tipoS1.equals(tipoS3))){
                                                yyerror("No se puede realizar una asignacion con tipos diferentes.");
                                        }
                                        
                                }
break;
case 154:
//#line 437 "gramaticaTomi.y"
{     
                                        yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));

                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una suma con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                        
                                 }
break;
case 155:
//#line 447 "gramaticaTomi.y"
{yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una resta con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                 }
break;
case 156:
//#line 454 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 157:
//#line 455 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 160:
//#line 460 "gramaticaTomi.y"
{ 
                                        yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una multiplicacion con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 161:
//#line 469 "gramaticaTomi.y"
{
                                        yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una division con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 162:
//#line 478 "gramaticaTomi.y"
{
                  yyval = val_peek(0);
                 }
break;
case 163:
//#line 482 "gramaticaTomi.y"
{
                yyval = new NodoHoja(val_peek(0).sval);
                String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                if(!ambito.equals("")){
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +":"+ ambito,"Tipo"));
                }
           }
break;
case 164:
//#line 490 "gramaticaTomi.y"
{
                yyval = new NodoHoja(val_peek(0).sval);
                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
              }
break;
case 165:
//#line 495 "gramaticaTomi.y"
{  chequearRangoI32(val_peek(0).sval);}
break;
case 166:
//#line 496 "gramaticaTomi.y"
{}
break;
case 167:
//#line 497 "gramaticaTomi.y"
{chequearRangoI32Neg(val_peek(0).sval);}
break;
case 169:
//#line 501 "gramaticaTomi.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                                                                                                                                }
break;
case 170:
//#line 505 "gramaticaTomi.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");}
break;
case 171:
//#line 508 "gramaticaTomi.y"
{yyval = new NodoComun("IF", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                                                                                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");}
break;
case 172:
//#line 510 "gramaticaTomi.y"
{yyval = new NodoComun("IF", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                                                                                        System.out.println("Sentencia IF sin corchetes y sin else");}
break;
case 173:
//#line 512 "gramaticaTomi.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF con corchetes y else");}
break;
case 174:
//#line 515 "gramaticaTomi.y"
{
                                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                                        System.out.println("Sentencia IF con corchetes y sin else");}
break;
case 175:
//#line 518 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 176:
//#line 519 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 177:
//#line 520 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 178:
//#line 521 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 179:
//#line 522 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 180:
//#line 523 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 181:
//#line 524 "gramaticaTomi.y"
{yyerror("Se esperaba then ");}
break;
case 182:
//#line 525 "gramaticaTomi.y"
{yyerror("Se esperaba ) ");}
break;
case 183:
//#line 526 "gramaticaTomi.y"
{yyerror("Se esperaba una condicion ");}
break;
case 184:
//#line 527 "gramaticaTomi.y"
{yyerror("Se esperaba ( ");}
break;
case 185:
//#line 532 "gramaticaTomi.y"
{
                        yyval= new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                        if (!((((ArbolSintactico)val_peek(2)).getTipo()).equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                               yyerror("error en la comparacion entre expresiones de distintos tipos");
                        }
                }
break;
case 186:
//#line 538 "gramaticaTomi.y"
{yyerror("Se esperaba otra expresion para comparar.");}
break;
case 187:
//#line 539 "gramaticaTomi.y"
{yyerror("Se esperaba un tipo de comparacion.");}
break;
case 188:
//#line 541 "gramaticaTomi.y"
{yyval= val_peek(0);}
break;
case 189:
//#line 542 "gramaticaTomi.y"
{yyval= val_peek(0);}
break;
case 190:
//#line 543 "gramaticaTomi.y"
{yyval= val_peek(0);}
break;
case 191:
//#line 544 "gramaticaTomi.y"
{yyval= val_peek(0);}
break;
case 192:
//#line 545 "gramaticaTomi.y"
{yyval= val_peek(0);}
break;
case 193:
//#line 547 "gramaticaTomi.y"
{yyval=new NodoHoja("Fin");}
break;
case 194:
//#line 548 "gramaticaTomi.y"
{
                                                                yyval=new NodoComun("Bloque Ejecutable", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                                                                }
break;
case 195:
//#line 551 "gramaticaTomi.y"
{yyerror("Se esperaba ;");}
break;
case 196:
//#line 553 "gramaticaTomi.y"
{
                        yyval = new NodoControl(val_peek(3).sval, (ArbolSintactico) new NodoHoja(val_peek(1).sval));
                        System.out.println("Sentencia OUT");}
break;
case 197:
//#line 556 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 198:
//#line 557 "gramaticaTomi.y"
{yyerror("Se esperaba una CADENA");}
break;
case 199:
//#line 558 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 200:
//#line 560 "gramaticaTomi.y"
{
                        yyval = new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 201:
//#line 563 "gramaticaTomi.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 202:
//#line 566 "gramaticaTomi.y"
{yyerror("Se esperaba } en el when");}
break;
case 203:
//#line 567 "gramaticaTomi.y"
{yyerror("Se esperaba { en el when");}
break;
case 204:
//#line 568 "gramaticaTomi.y"
{yyerror("Se esperaba then en el when");}
break;
case 205:
//#line 569 "gramaticaTomi.y"
{yyerror("Se esperaba condicion en el when");}
break;
case 206:
//#line 570 "gramaticaTomi.y"
{yyerror("Se esperaba ( en el when");}
break;
case 207:
//#line 571 "gramaticaTomi.y"
{yyerror("Se esperaba ) en el when");}
break;
case 208:
//#line 572 "gramaticaTomi.y"
{yyerror("Se esperaba then en el when");}
break;
case 209:
//#line 574 "gramaticaTomi.y"
{
                        yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(12).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                        System.out.println("Sentencia WHILE con etiqueta y con llaves");}
break;
case 210:
//#line 577 "gramaticaTomi.y"
{
                        yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(10).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );
                        System.out.println("Sentencia WHILE con etiqueta y sin llaves");}
break;
case 211:
//#line 580 "gramaticaTomi.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 212:
//#line 583 "gramaticaTomi.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");}
break;
case 213:
//#line 586 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 214:
//#line 587 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 215:
//#line 588 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 216:
//#line 589 "gramaticaTomi.y"
{yyerror("Se esperaba una asignacion");}
break;
case 217:
//#line 590 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 218:
//#line 591 "gramaticaTomi.y"
{yyerror("Se esperaba :");}
break;
case 219:
//#line 592 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 220:
//#line 593 "gramaticaTomi.y"
{yyerror("Se esperaba una condicion");}
break;
case 221:
//#line 594 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 222:
//#line 596 "gramaticaTomi.y"
{yyval=new NodoHoja("Fin");}
break;
case 223:
//#line 597 "gramaticaTomi.y"
{
                yyval = new NodoComun("Bloque Break con Continue",(ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                }
break;
case 224:
//#line 600 "gramaticaTomi.y"
{yyerror("Se esperaba ;");}
break;
case 225:
//#line 603 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 226:
//#line 604 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 227:
//#line 605 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 228:
//#line 606 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 229:
//#line 607 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 230:
//#line 608 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 231:
//#line 609 "gramaticaTomi.y"
{yyval = new NodoControl("Continue",(ArbolSintactico)val_peek(0));}
break;
case 232:
//#line 610 "gramaticaTomi.y"
{yyval = new NodoHoja("Break");}
break;
case 233:
//#line 611 "gramaticaTomi.y"
{yyval = new NodoControl("Break", new NodoHoja(val_peek(0).sval));}
break;
case 234:
//#line 613 "gramaticaTomi.y"
{yyval = new NodoHoja("Fin");}
break;
case 235:
//#line 614 "gramaticaTomi.y"
{yyval = new NodoControl("Tag", new NodoHoja(val_peek(0).sval) );}
break;
case 236:
//#line 616 "gramaticaTomi.y"
{System.out.println("Sentencia WHEN");}
break;
case 237:
//#line 617 "gramaticaTomi.y"
{System.out.println("Sentencia WHEN");}
break;
case 238:
//#line 618 "gramaticaTomi.y"
{yyerror("Se esperaba } en el when");}
break;
case 239:
//#line 619 "gramaticaTomi.y"
{yyerror("Se esperaba { en el when");}
break;
case 240:
//#line 620 "gramaticaTomi.y"
{yyerror("Se esperaba then en el when");}
break;
case 241:
//#line 621 "gramaticaTomi.y"
{yyerror("Se esperaba condicion en el when");}
break;
case 242:
//#line 622 "gramaticaTomi.y"
{yyerror("Se esperaba ( en el when");}
break;
case 243:
//#line 623 "gramaticaTomi.y"
{yyerror("Se esperaba ) en el when");}
break;
case 244:
//#line 624 "gramaticaTomi.y"
{yyerror("Se esperaba then en el when");}
break;
case 245:
//#line 627 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 246:
//#line 632 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 247:
//#line 637 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 248:
//#line 642 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 249:
//#line 647 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 250:
//#line 652 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 251:
//#line 656 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 252:
//#line 657 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 253:
//#line 658 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 254:
//#line 659 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 255:
//#line 660 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 256:
//#line 661 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 257:
//#line 662 "gramaticaTomi.y"
{yyerror("Se esperaba then ");}
break;
case 258:
//#line 663 "gramaticaTomi.y"
{yyerror("Se esperaba ) ");}
break;
case 259:
//#line 664 "gramaticaTomi.y"
{yyerror("Se esperaba una condicion ");}
break;
case 260:
//#line 665 "gramaticaTomi.y"
{yyerror("Se esperaba ( ");}
break;
case 261:
//#line 668 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                                        yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                                                                                                       }
break;
case 262:
//#line 671 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                                        yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                                                                                                       }
break;
case 263:
//#line 674 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                                                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                                                                                                                                }
break;
case 264:
//#line 677 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                                                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                                                                                                                                }
break;
case 265:
//#line 680 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 266:
//#line 681 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 267:
//#line 682 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 268:
//#line 683 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 269:
//#line 684 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 270:
//#line 685 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 271:
//#line 686 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 272:
//#line 687 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 273:
//#line 690 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 274:
//#line 693 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 275:
//#line 696 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 276:
//#line 699 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 277:
//#line 700 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 278:
//#line 701 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 279:
//#line 702 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 280:
//#line 703 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 281:
//#line 704 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 282:
//#line 705 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 283:
//#line 708 "gramaticaTomi.y"
{
                        yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                }
break;
case 284:
//#line 713 "gramaticaTomi.y"
{yyval=new NodoHoja(val_peek(0).sval);
                        String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        if(!ambito.equals("")){
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +":"+ ambito,"Tipo"));
                        }
                     }
break;
case 285:
//#line 720 "gramaticaTomi.y"
{yyval=new NodoComun("llamado funcion",(ArbolSintactico)val_peek(3),(ArbolSintactico)val_peek(1));}
break;
case 286:
//#line 721 "gramaticaTomi.y"
{yyval=new NodoComun("llamado funcion",(ArbolSintactico)val_peek(1),new NodoHoja("Un solo parametro"));}
break;
case 287:
//#line 722 "gramaticaTomi.y"
{yyval=new NodoHoja("llamado funcion sin parametros");}
break;
case 288:
//#line 723 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 289:
//#line 724 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 290:
//#line 725 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
//#line 2886 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 * @throws IOException
 */
public void run() throws IOException
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
