//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package Principal;
import java.io.IOException;
import AnalizadorLexico.AnalizadorLexico;
import AnalizadorLexico.Token;
import GeneracionCodigoIntermedio.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

//#line 28 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IF=257;
public final static short THEN=258;
public final static short ELSE=259;
public final static short END_IF=260;
public final static short OUT=261;
public final static short FUN=262;
public final static short RETURN=263;
public final static short BREAK=264;
public final static short WHEN=265;
public final static short WHILE=266;
public final static short FOR=267;
public final static short CONTINUE=268;
public final static short ID=269;
public final static short I32=270;
public final static short F32=271;
public final static short PUNTO=272;
public final static short PARENT_A=273;
public final static short PARENT_C=274;
public final static short COMILLA=275;
public final static short COMA=276;
public final static short DOSPUNTOS=277;
public final static short PUNTOCOMA=278;
public final static short IGUAL=279;
public final static short MAYOR=280;
public final static short MENOR=281;
public final static short MENORIGUAL=282;
public final static short MAYORIGUAL=283;
public final static short LLAVE_A=284;
public final static short LLAVE_C=285;
public final static short EXCL=286;
public final static short DIST=287;
public final static short ASIG=288;
public final static short CADENA=289;
public final static short COMENT=290;
public final static short CONST=291;
public final static short SUMA=292;
public final static short RESTA=293;
public final static short MULT=294;
public final static short DIV=295;
public final static short ENTERO=296;
public final static short FLOAT=297;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    1,    2,    2,    2,    3,    3,    4,    4,
    4,    9,    9,    6,    6,   10,   10,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,   12,   12,
   12,   13,   13,   13,   13,   13,   13,   13,   13,   13,
   13,   13,   16,   16,   16,   16,   16,   16,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   18,   18,   18,
   18,   18,   18,   18,   18,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   23,   23,   23,   24,   24,   24,   24,   24,   24,   24,
   24,   24,   24,   27,   27,   27,   27,   27,   27,   27,
   27,   26,   26,   26,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   26,   26,   26,   26,   21,   11,   11,
    8,   30,   30,    5,    5,    5,    5,    5,    5,    5,
   14,   29,   29,   29,   29,   29,   29,   35,   35,   35,
   36,   36,   25,   25,   25,   25,   31,   31,   31,   31,
   31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
   31,   31,   22,   22,   22,   38,   38,   38,   38,   38,
   37,   37,   37,   17,   17,   17,   17,   32,   32,   32,
   32,   32,   32,   32,   32,   32,   34,   34,   34,   34,
   34,   34,   34,   34,   34,   34,   34,   34,   34,   39,
   39,   39,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   28,   28,   42,   42,   42,   42,   42,   42,   42,
   42,   42,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   43,   43,   15,   15,   15,   15,   15,   15,
};
final static short yylen[] = {                            2,
    4,    1,    1,    0,    3,    2,    1,    1,    1,    1,
    1,    1,    1,    2,    2,    3,    1,   12,   10,    9,
   12,   10,    9,    8,    7,    5,    3,    2,    0,    3,
    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,   11,   13,   13,    8,   13,    9,   13,   12,
   10,    9,    8,    6,    5,    4,    3,    8,    6,    8,
    6,    5,    4,    3,    8,   13,   11,   11,    9,   11,
    9,    8,    7,    6,    5,    4,    3,    2,   14,   14,
   12,   12,   14,   14,   12,   12,   11,   11,    3,   12,
   12,   10,   10,   12,   12,   10,   10,    9,    9,    2,
    0,    3,    3,    1,    1,    1,    1,    1,    1,    2,
    1,    2,    1,    6,    8,    8,    6,    5,    4,    3,
    8,   11,   12,   12,    8,   13,    9,   13,   12,   10,
    9,    8,    6,    5,    4,    3,    2,    4,    2,    2,
    2,    3,    1,    1,    1,    1,    1,    1,    1,    1,
    3,    3,    3,    1,    1,    3,    3,    3,    3,    1,
    1,    1,    1,    1,    2,    2,   12,   12,   11,    8,
   13,    9,   13,   12,   10,    9,    8,    6,    5,    4,
    3,    2,    3,    3,    3,    1,    1,    1,    1,    1,
    0,    3,    2,    4,    4,    3,    2,    8,    6,    8,
    8,    8,    8,    8,    7,    5,   13,   11,   11,    9,
   11,    9,    8,    7,    6,    5,    4,    3,    2,    0,
    3,    2,    1,    1,    1,    1,    1,    1,    2,    1,
    2,    0,    2,    8,    6,    8,    8,    8,    8,    8,
    7,    5,   12,   12,   11,    8,   13,    9,   13,   12,
   10,    9,    8,    6,    5,    4,    3,    2,   14,   14,
   12,   12,   14,   14,   12,   12,   11,   11,    3,   12,
   12,   10,   10,   12,   12,   10,   10,    9,    9,    2,
    1,    1,    6,    4,    3,    6,    4,    3,
};
final static short yydefred[] = {                         0,
    2,    3,    0,    0,    4,    0,    0,    0,    0,    0,
    0,    0,    0,   12,   13,    1,    0,    0,    7,    8,
    9,   10,   11,    0,  144,  150,  146,  145,  147,  148,
  149,  182,    0,  197,    0,   28,    0,    0,    0,  219,
    0,  280,    0,   17,    0,    0,    0,    0,    0,  143,
    0,    5,    0,  181,    0,    0,  163,  164,  155,    0,
  162,    0,    0,    0,    0,  160,  196,    0,   27,    0,
    0,    0,    0,  218,    0,    0,  288,  282,  285,  281,
    0,  269,    0,    0,    0,    0,    0,  165,  166,  180,
    0,    0,  186,  187,  188,  189,  190,    0,    0,    0,
    0,    0,    0,    0,  195,  194,    0,    0,    0,    0,
    0,    0,    0,    0,  217,    0,    0,  287,  284,    0,
    0,    0,   16,  142,  179,    0,    0,  161,    0,    0,
  184,    0,  156,  157,  158,  159,  140,    0,  139,   26,
    0,    0,    0,    0,  191,    0,    0,  216,    0,    0,
    0,    0,    0,  178,    0,  191,    0,    0,    0,    0,
  191,  191,    0,  191,  191,  191,  199,  215,    0,    0,
  286,  283,    0,    0,    0,    0,   29,    0,   25,    0,
    0,    0,  205,    0,    0,    0,    0,  214,    0,    0,
    0,    0,    0,  177,    0,    0,  170,    0,   29,   24,
    0,  204,  203,  192,  202,  201,  200,  198,  213,    0,
    0,    0,    0,    0,  176,    0,  172,  191,    0,    0,
    0,    0,    0,    0,    0,   20,   32,   33,   34,    0,
   35,   36,   37,   38,   39,   40,   41,   42,    0,   23,
    0,  212,    0,    0,    0,    0,    0,  220,  223,  225,
  228,  227,  210,  224,  226,  278,    0,  279,    0,    0,
    0,    0,  175,  191,    0,    0,    0,    0,    0,    0,
    0,   78,    0,  100,    0,    0,   31,   30,   19,   22,
   29,  258,    0,  231,    0,    0,    0,  229,    0,  276,
  220,  272,  277,  220,  273,    0,    0,    0,    0,    0,
    0,  169,   57,    0,    0,    0,   64,    0,   77,    0,
    0,   89,    0,    0,    0,  257,    0,    0,    0,    0,
  233,  211,  209,    0,    0,    0,  220,  208,  267,    0,
  268,    0,  174,    0,  168,  167,   56,    0,  138,    0,
   63,    0,   76,    0,    0,    0,    0,   21,   18,  256,
    0,    0,    0,    0,    0,  221,  274,  270,  275,  271,
    0,  265,  220,  261,  266,  220,  262,  173,  171,   55,
    0,    0,   62,    0,   75,    0,    0,    0,    0,  255,
    0,    0,    0,  220,    0,    0,  207,    0,    0,   54,
   29,    0,   29,   61,   29,   59,   74,    0,    0,    0,
    0,  254,  220,    0,  220,  220,    0,  220,  220,  220,
  235,  263,  259,  264,  260,    0,    0,    0,    0,   73,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  241,
    0,    0,    0,   53,    0,    0,   46,   65,   60,   58,
   72,    0,    0,    0,    0,    0,  253,    0,    0,  246,
  240,  239,  238,  237,  236,  234,   52,    0,   48,    0,
   29,    0,   71,    0,    0,    0,    0,    0,  101,  104,
  106,  109,  108,  113,   69,  105,  107,   98,    0,   99,
    0,    0,    0,    0,  252,    0,  248,  220,    0,   51,
   29,    0,    0,    0,  137,    0,  112,    0,    0,  110,
    0,   96,  101,   92,   97,  101,   93,    0,    0,    0,
  251,  220,    0,    0,    0,    0,    0,    0,   43,  136,
    0,    0,  120,    0,   70,   68,    0,    0,    0,  101,
   67,   87,    0,   88,    0,    0,    0,    0,  245,   50,
    0,    0,    0,  135,    0,    0,  119,    0,  103,  102,
   94,   90,   95,   91,    0,   85,  101,   81,   86,  101,
   82,  250,    0,  244,  243,   49,   47,   44,   45,  134,
    0,    0,  118,    0,   66,    0,    0,  249,  247,  133,
  101,    0,  101,  117,  101,  114,   83,   79,   84,   80,
    0,    0,    0,    0,  132,    0,    0,  125,  121,  116,
  115,  131,    0,  127,  101,    0,  130,  101,    0,    0,
    0,    0,    0,    0,  122,  129,    0,  123,  124,  128,
  126,
};
final static short yydgoto[] = {                          3,
    4,    6,   18,   19,  184,  227,  228,  229,   24,   48,
  110,  198,  230,  249,   59,  233,  250,  235,  472,  473,
  474,   60,  501,  527,   61,  476,  477,  288,   62,   51,
   28,   29,  251,  252,   65,   66,  163,  100,  289,  324,
  254,  255,   81,
};
final static short yysindex[] = {                      -158,
    0,    0,    0, -275,    0, 1186, -133, -129, -117,  -84,
  -73,  -44,  -72,    0,    0,    0, -253, -237,    0,    0,
    0,    0,    0, -213,    0,    0,    0,    0,    0,    0,
    0,    0, -231,    0, -255,    0,  -22, -102, -184,    0,
 -111,    0, -253,    0,  160,  151, -102, -176, -191,    0,
  -99,    0, -176,    0, -259,  100,    0,    0,    0, -113,
    0, -235,  -85,  -55,  143,    0,    0,  -90,    0,  264,
  -46,  -34,   66,    0,  -68,  -28,    0,    0,    0,    0,
 -114,    0,  -19,   30,  213,   43, -253,    0,    0,    0,
 -252, -102,    0,    0,    0,    0,    0, -254, -254,   20,
  248,  248, -254, -254,    0,    0,   69,    3,   76, -106,
  126,  161,  107, -105,    0, -227, -102,    0,    0, -189,
 -102, -253,    0,    0,    0, 1946,  213,    0,  143,  143,
    0,  213,    0,    0,    0,    0,    0,  260,    0,    0,
  128,  303,  164,  178,    0,  190, 1953,    0,   34,  220,
  -57,  227,  231,    0,  188,    0,  240,  252,  260,  -35,
    0,    0,  247,    0,    0,    0,    0,    0,  -60,  266,
    0,    0,  269, -102,   97,  358,    0,  280,    0, -183,
 1974, 1981,    0,  289, 1988, 1995,  467,    0,  -12,  248,
  248,  308,  298,    0,  291, 1395,    0,  517,    0,    0,
  196,    0,    0,    0,    0,    0,    0,    0,    0,  641,
  -11,    5, -253,  341,    0, 1967,    0,    0,  314,  329,
  332,  127,  129,  133,  -51,    0,    0,    0,    0, -204,
    0,    0,    0,    0,    0,    0,    0,    0, 1120,    0,
 -244,    0,  147,  248,  148,  359,  183,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1697,    0, 1711,  340,
  248,  248,    0,    0,  352, 2010,  385,   32, -102, -102,
   39,    0,   54,    0, -253,  226,    0,    0,    0,    0,
    0,    0,  158,    0, -102,  203,  412,    0,  411,    0,
    0,    0,    0,    0,    0, 2049,    8,    9, 1524,  393,
  422,    0,    0,   11, -146,  409,    0,   17,    0,   28,
  408,    0,  414,  415,  506,    0,   48,  416,  420,  141,
    0,    0,    0,  426, 1380, 1402,    0,    0,    0, 1732,
    0, 1746,    0,  -25,    0,    0,    0,  281,    0,  431,
    0,  328,    0, -163, -102, -102, -253,    0,    0,    0,
  337,  451,  453,  428,  342,    0,    0,    0,    0,    0,
 1854,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  436,  429,    0,  609,    0,  153,  437,  440,  438,    0,
 1767,  433,  435,    0,  441, 1781,    0, 1416, 1438,    0,
    0,  444,    0,    0,    0,    0,    0,   90,  347,  449,
 -102,    0,    0,  452,    0,    0, 1867,    0,    0,    0,
    0,    0,    0,    0,    0,  951,  382, 1131,  968,    0,
   59,  248,  248,  456,  460, 1452,  384, 1880, 1893,    0,
 1906, 1919, 1474,    0, -141, 1158,    0,    0,    0,    0,
    0, 1554,   63,   70, -253,  355,    0,  301, 2063,    0,
    0,    0,    0,    0,    0,    0,    0, -223,    0,  472,
    0,  462,    0,  155,  248,  177,  359,  201,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1568,    0,
 1590,  468,  248,  248,    0, 1802,    0,    0,  463,    0,
    0, 1213, 1169,  483,    0,  259,    0, -102,  353,    0,
  796,    0,    0,    0,    0,    0,    0, 2021,   78,   87,
    0,    0,  469, 1932,  485,  995,  473,  475,    0,    0,
  101,  476,    0,  113,    0,    0, -192, 1255, 1269,    0,
    0,    0, 1604,    0, 1626, 1488,  486,  494,    0,    0,
  184,  497,  498,    0,  369,  508,    0,  373,    0,    0,
    0,    0,    0,    0, 1815,    0,    0,    0,    0,    0,
    0,    0,  208,    0,    0,    0,    0,    0,    0,    0,
 1640,  480,    0, 1662,    0, 1292, 1306,    0,    0,    0,
    0,  507,    0,    0,    0,    0,    0,    0,    0,    0,
 1329,  401, 1828, 1343,    0,  323, 2035,    0,    0,    0,
    0,    0, 1676,    0,    0,  511,    0,    0,  516, 1841,
  535, 1366,  536,  538,    0,    0,  234,    0,    0,    0,
    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1224,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1012,    0,    0,
 1039,    0, 1066,    0,  665,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  712,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  561,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -187,    0,  756,  818,
    0, -153,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1093,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1531,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  862,    0,  893,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1510,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  924,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, -188,    0, -179,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,
};
final static short yygindex[] = {                         0,
    0,    0,    0,    0,    7,  795,  800,  801,  -63,  785,
  668, -180, -366,   -6,  192,    0,   61,    0, -144, -122,
   27,  -15,   18,  -86,  -42,    0,    0,  344,  -37,    0,
    0,    0,  574,  618,  564,  566, -134,    0, -274, -208,
    0,    0,  692,
};
final static int YYTABLESIZE=2347;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         25,
   67,  253,   80,  125,  392,  126,  109,  396,    5,   85,
   50,  280,   20,   45,  128,   49,  325,   46,  239,  326,
   92,  175,   71,   73,   54,   75,  181,  182,  148,  185,
  186,  187,  490,   68,   11,   12,   76,   55,   56,  281,
   52,   57,   58,   93,   94,   95,   96,   97,  292,  149,
  295,  277,  361,  236,  127,   44,   98,   99,  133,  134,
  491,   56,  132,  549,   57,   58,   27,  111,  185,  462,
  185,   72,  200,  278,  158,  237,  232,   80,  109,   78,
  124,   11,   12,  266,   55,  550,  185,  328,  388,  111,
  185,  389,  375,  201,  236,  178,   47,    1,  232,   86,
  315,  150,  183,   56,  183,  152,   57,   58,   56,  407,
    2,   57,   58,  376,  457,  153,  237,  458,  459,   25,
  183,  364,   32,  367,  183,  517,   34,  339,  426,  299,
  428,  429,  157,  431,  432,  433,  460,  241,   36,   33,
   25,  118,   90,   35,   74,   98,   99,  211,  212,  140,
  146,   37,  147,  167,   11,   12,   25,   55,  193,  119,
   91,  120,  189,   11,   12,  105,   55,  141,   25,  142,
  236,   38,  404,  101,   25,   25,   87,  411,   25,   25,
   25,   56,   40,  106,   57,   58,   27,  115,   39,   25,
   56,  231,  237,   57,   58,  188,   44,   26,  171,   41,
   45,  284,  219,  102,   46,  116,  260,   27,   49,   25,
  416,   42,  418,  514,  419,   47,  172,   44,  297,  298,
  179,   45,  265,   27,  238,  276,  236,  111,   43,  236,
  368,  305,  231,   69,  369,   27,   47,  536,  180,  112,
  489,   27,   27,  209,  256,   27,   27,   27,  237,  117,
   70,  237,  304,  121,  306,  308,   27,  310,  234,   25,
  258,  210,  257,  329,  331,  238,  337,  317,  311,  318,
  320,  236,  341,  236,  236,  131,   27,  513,  259,  138,
  493,  330,  332,  343,  338,   11,   12,  303,   55,  168,
  342,  236,   25,  237,  307,  237,  237,   11,   12,  234,
   55,  344,  122,  350,   11,   12,  169,   55,  231,  309,
  516,  123,   56,  237,  441,   57,   58,   26,  478,   11,
   12,  351,   55,  113,   56,  480,   27,   57,   58,  377,
  378,   56,  442,  532,   57,   58,  479,  137,   26,  114,
  379,  238,  534,  481,  139,  420,   56,  236,  236,   57,
   58,  533,  194,    7,   26,  475,  544,    8,   49,   27,
  535,   10,   11,   12,  231,  155,   26,  231,  547,  237,
  237,  236,   26,   26,  545,  234,   26,   26,   26,  443,
  444,  195,  270,  143,  272,  425,  548,   26,  274,  232,
  145,  421,  504,  237,  507,   88,   89,  238,  354,  271,
  238,  273,  282,  285,  159,  275,   82,   26,  397,  231,
  495,  231,  231,  316,  355,   77,   83,   84,  144,  283,
  286,  531,  497,   11,   12,  398,   55,  496,   78,  231,
  232,  234,  498,   79,  234,  470,  103,  104,  482,  566,
  509,  510,  238,  567,  238,  238,  558,  161,  561,  499,
   56,  240,   56,   57,   58,   57,   58,   26,  319,   46,
   45,  162,  238,  578,   46,   14,   15,  579,   11,   12,
   47,   55,  470,  164,  470,   47,  234,  276,  234,  234,
  521,  312,  522,  524,  582,  231,  231,  586,   47,  620,
   26,  313,  314,  621,  470,   56,  234,  170,   57,   58,
  173,  470,  471,    7,   98,   99,  232,    8,  174,  231,
  606,   10,   11,   12,  520,  155,  609,  176,  238,  238,
  528,  470,  470,  529,   11,   12,  470,   55,  470,   14,
   15,  183,  107,   14,   15,  177,  370,  108,  371,  471,
   56,  471,  238,   57,   58,  192,  215,  555,  470,  216,
  217,   56,  234,  234,   57,   58,  485,  190,  191,  486,
  487,  471,  232,  199,  470,  232,  204,  470,  471,  470,
  470,  107,   14,   15,  576,  214,  234,  577,  602,   30,
  213,  603,  604,  373,  470,  374,  470,  470,  471,  471,
  470,  267,  380,  471,  381,  471,  470,  385,  591,  386,
  593,  268,  594,  470,  269,  470,   63,  232,  523,  232,
  232,   63,   63,  296,   63,  471,  196,  197,   11,   12,
   63,   55,  610,   31,  570,  612,  571,  232,  573,  300,
  574,  471,  261,  262,  471,  287,  471,  471,  422,  423,
  436,  437,  449,  450,  302,   56,  483,  484,   57,   58,
   64,  471,  335,  471,  471,   64,   64,  471,   64,  597,
  598,  129,  130,  471,   64,   63,  322,  243,  135,  136,
  471,    8,  471,   63,  244,  245,   11,   12,  246,  247,
  321,  336,  340,  232,  232,  345,  346,  347,  372,  352,
   63,  390,  220,  353,   63,  323,    8,    9,  221,   30,
  222,  223,  224,  356,  225,   14,   15,  232,  382,   64,
  383,  384,  393,  400,  399,  401,  405,   64,  406,  391,
   30,  417,  207,    7,  408,  424,   17,    8,  445,  427,
  492,   10,   11,   12,   64,  155,   30,  446,   64,  494,
  515,  508,  519,   31,  539,  564,  537,   63,   30,  546,
  542,  208,  543,  565,   30,   30,  568,  569,   30,   30,
   30,  348,  220,  583,   31,  572,    8,    9,  221,   30,
  222,  223,  224,  220,  225,   14,   15,    8,    9,  221,
   31,  222,  223,  224,  592,  225,   14,   15,  611,   30,
  349,   64,   31,  613,  615,  618,   17,  619,   31,   31,
   21,  226,   31,   31,   31,   22,   23,   17,   53,  160,
  500,  151,    0,   31,    0,    0,  151,  151,    0,  151,
    0,  151,  151,    0,  151,  151,  151,  151,  151,  151,
  151,  151,    0,   31,  151,    0,  151,    0,  151,   30,
    0,   63,   63,   63,   63,  151,   63,    0,    0,    0,
    0,  151,    0,    0,    0,    0,   63,    0,   63,   63,
    0,    0,    0,    0,  394,  220,    0,    0,    0,    8,
    9,  221,   30,  222,  223,  224,    0,  225,   14,   15,
    0,    0,    0,   31,    0,   64,   64,   64,   64,    0,
   64,    0,  395,    0,    0,    0,  242,  243,    0,   17,
   64,    8,   64,   64,  244,  245,   11,   12,  246,  247,
    0,    0,    0,    0,    0,    0,   31,    0,   63,   63,
  161,  161,  161,  161,  248,  161,  161,    0,  161,  161,
  161,  161,  161,  161,  161,  161,    0,    0,  161,    0,
  161,    0,  161,  161,  161,  161,  161,  161,    0,  161,
    0,    0,    0,    0,    0,  161,  161,  161,  161,  161,
    0,    0,   64,   64,    0,    0,    0,  154,  154,  154,
  154,    0,  154,  154,   63,  154,  154,  154,  154,  154,
  154,  154,  154,    0,    0,  154,    0,  154,    0,  154,
  154,  154,  154,  154,  154,    0,  154,    0,    0,    0,
    0,    0,  154,  154,  154,    0,    0,    0,    0,    0,
    0,  152,  152,  152,  152,    0,  152,  152,   64,  152,
  152,  152,  152,  152,  152,  152,  152,    0,    0,  152,
    0,  152,    0,  152,  152,  152,  152,  152,  152,    0,
  152,    0,    0,    0,    0,    0,  152,  152,  152,    0,
    0,  525,  464,    0,    0,    0,    8,    0,  221,  465,
  466,  223,  224,  467,  468,    0,    0,    0,    0,   63,
    0,   63,   63,  153,  153,  153,  153,    0,  153,  153,
  526,  153,  153,  153,  153,  153,  153,  153,  153,    0,
    0,  153,    0,  153,    0,  153,  153,  153,  153,  153,
  153,    0,  153,    0,    0,    0,    0,    0,  153,  153,
  153,    0,    0,   64,    0,   64,   64,  230,  230,    0,
  230,    0,  230,  230,    0,  230,  230,  230,  230,  230,
  230,  230,  230,    0,    0,    0,    0,    0,    0,  230,
    0,    0,    0,    0,    0,    0,  230,    0,  232,  232,
    0,  232,  230,  232,  232,    0,  232,  232,  232,  232,
  232,  232,  232,  232,    0,    0,    0,    0,    0,    0,
  232,    0,    0,    0,    0,    0,    0,  232,    0,  242,
  242,    0,  242,  232,  242,  242,    0,  242,  242,  242,
  242,  242,  242,  242,  242,    0,    0,    0,    0,    0,
    0,  242,    0,    0,    0,    0,  434,  220,  242,    0,
    0,    8,    9,  221,  242,  222,  223,  224,    0,  225,
   14,   15,    0,  439,  220,    0,    0,    0,    8,    9,
  221,    0,  222,  223,  224,  435,  225,   14,   15,    0,
    0,   17,    0,    0,    0,    0,    0,    0,    0,    0,
  540,  220,  440,    0,    0,    8,    9,  221,   17,  222,
  223,  224,    0,  225,   14,   15,    0,   15,   15,    0,
    0,    0,   15,   15,    0,    0,   15,   15,   15,  541,
   15,   15,   15,    0,    0,   17,    0,    0,    0,   15,
    0,    0,    0,    0,  141,  141,   15,    0,    0,  141,
  141,    0,   15,  141,  141,  141,    0,  141,  141,  141,
    0,    0,    0,    0,    0,    0,  141,    0,    0,    0,
    0,   14,   14,  141,    0,    0,   14,   14,    0,  141,
   14,   14,   14,    0,   14,   14,   14,    0,    0,    0,
    0,    0,    0,   14,    0,    0,    0,    0,  206,  206,
   14,    0,    0,  206,  206,    0,   14,  206,  206,  206,
    0,  206,  206,  206,    0,    0,    0,    0,    0,    0,
  206,    0,    0,    0,    0,    0,  220,  206,    0,    0,
    8,    9,  221,  206,  222,  223,  224,  220,  225,   14,
   15,    8,    9,  221,    0,  222,  223,  224,    0,  225,
   14,   15,    0,    0,  279,    0,    0,    0,    0,    0,
   17,    0,    0,    0,  220,  438,    0,    0,    8,    9,
  221,   17,  222,  223,  224,  220,  225,   14,   15,    8,
    9,  221,    0,  222,  223,  224,    0,  225,   14,   15,
    0,  461,    7,    0,    0,    0,    8,    9,   17,    0,
   10,   11,   12,  518,   13,   14,   15,    0,    0,   17,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  220,
   16,    0,    0,    8,    9,  221,   17,  222,  223,  224,
    6,  225,   14,   15,    6,    6,    0,    0,    6,    6,
    6,    0,    6,    6,    6,    0,    0,    0,    0,    0,
    0,    0,    0,   17,    0,    0,    0,    0,    6,    0,
  551,  464,    0,    0,    6,    8,    0,  221,  465,  466,
  223,  224,  467,  468,  553,  464,    0,    0,    0,    8,
    0,  221,  465,  466,  223,  224,  467,  468,    0,  552,
    0,    0,    0,    0,    0,    0,    0,  587,  464,    0,
    0,    0,    8,  554,  221,  465,  466,  223,  224,  467,
  468,  589,  464,    0,    0,    0,    8,    0,  221,  465,
  466,  223,  224,  467,  468,    0,  588,    0,    0,    0,
    0,    0,    0,    0,  595,  464,    0,    0,    0,    8,
  590,  221,  465,  466,  223,  224,  467,  468,  600,  464,
    0,    0,    0,    8,    0,  221,  465,  466,  223,  224,
  467,  468,    0,  596,    0,    0,    0,    0,    0,    0,
    0,  616,  464,    0,    0,    0,    8,  601,  221,  465,
  466,  223,  224,  467,  468,  357,  243,    0,    0,    0,
    8,    0,    0,  244,  245,   11,   12,  246,  247,    0,
  617,    7,    0,    0,    0,    8,    0,  359,  243,   10,
   11,   12,    8,  155,  358,  244,  245,   11,   12,  246,
  247,  412,  243,    0,    0,    0,    8,    0,  218,  244,
  245,   11,   12,  246,  247,    0,  360,    0,    0,    0,
    0,    0,    0,  414,  243,    0,    0,    0,    8,    0,
  413,  244,  245,   11,   12,  246,  247,  447,  243,    0,
    0,    0,    8,    0,    0,  244,  245,   11,   12,  246,
  247,    0,  415,    0,    0,    0,    0,    0,    0,  455,
  243,    0,    0,    0,    8,    0,  448,  244,  245,   11,
   12,  246,  247,  562,  243,    0,    0,    0,    8,    0,
    0,  244,  245,   11,   12,  246,  247,    0,  456,    0,
    0,    0,    0,    0,    0,  222,  222,    0,    0,    0,
  222,    0,  563,  222,  222,  222,  222,  222,  222,  333,
    7,    0,    0,    0,    8,    0,  193,  193,   10,   11,
   12,  193,  155,    0,  222,  193,  193,  193,    0,  193,
    0,    0,    0,    0,    0,    0,    0,    0,  334,  463,
  464,    0,    0,    0,    8,  193,  221,  465,  466,  223,
  224,  467,  468,  502,  464,    0,    0,    0,    8,    0,
  221,  465,  466,  223,  224,  467,  468,  469,    0,    0,
    0,    0,    0,    0,    0,  505,  464,    0,    0,    0,
    8,  503,  221,  465,  466,  223,  224,  467,  468,  556,
  464,    0,    0,    0,    8,    0,  221,  465,  466,  223,
  224,  467,  468,  506,    0,    0,    0,    0,    0,    0,
    0,  559,  464,    0,    0,    0,    8,  557,  221,  465,
  466,  223,  224,  467,  468,  580,  464,    0,    0,    0,
    8,    0,  221,  465,  466,  223,  224,  467,  468,  560,
    0,    0,    0,    0,    0,    0,    0,  584,  464,    0,
    0,    0,    8,  581,  221,  465,  466,  223,  224,  467,
  468,  607,  464,    0,    0,    0,    8,    0,  221,  465,
  466,  223,  224,  467,  468,  585,    0,    0,    0,    0,
    0,    0,  290,  243,    0,    0,    0,    8,    0,  608,
  244,  245,   11,   12,  246,  247,  293,  243,    0,    0,
    0,    8,    0,    0,  244,  245,   11,   12,  246,  247,
  291,    0,    0,    0,    0,    0,    0,  362,  243,    0,
    0,    0,    8,    0,  294,  244,  245,   11,   12,  246,
  247,  365,  243,    0,    0,    0,    8,    0,    0,  244,
  245,   11,   12,  246,  247,  363,    0,    0,    0,    0,
    0,    0,  402,  243,    0,    0,    0,    8,    0,  366,
  244,  245,   11,   12,  246,  247,  409,  243,    0,    0,
    0,    8,    0,    0,  244,  245,   11,   12,  246,  247,
  403,    0,    0,    0,    0,    0,    0,  511,  243,    0,
    0,    0,    8,    0,  410,  244,  245,   11,   12,  246,
  247,  464,    0,    0,    0,    8,    0,  221,  465,  466,
  223,  224,  467,  468,  464,  512,    0,    0,    8,    0,
  221,  465,  466,  223,  224,  467,  468,  464,    0,  575,
    0,    8,    0,  221,  465,  466,  223,  224,  467,  468,
  243,    0,  599,    0,    8,    0,    0,  244,  245,   11,
   12,  246,  247,  243,    0,  614,    0,    8,    0,    0,
  244,  245,   11,   12,  246,  247,  243,    0,  387,    0,
    8,    0,    0,  244,  245,   11,   12,  246,  247,  243,
    0,  430,    0,    8,    0,    0,  244,  245,   11,   12,
  246,  247,  243,    0,  451,    0,    8,    0,    0,  244,
  245,   11,   12,  246,  247,  243,    0,  452,    0,    8,
    0,    0,  244,  245,   11,   12,  246,  247,  243,    0,
  453,    0,    8,    0,    0,  244,  245,   11,   12,  246,
  247,  154,    7,  454,    0,    0,    8,    0,  165,    7,
   10,   11,   12,    8,  155,    0,  538,   10,   11,   12,
    0,  155,  263,    7,    0,    0,    0,    8,    0,  156,
    7,   10,   11,   12,    8,  155,  166,    7,   10,   11,
   12,    8,  155,    0,    7,   10,   11,   12,    8,  155,
  264,    7,   10,   11,   12,    8,  155,    0,  202,   10,
   11,   12,    0,  155,    0,  203,    7,    0,    0,    0,
    8,    0,  205,    0,   10,   11,   12,  464,  155,  206,
    0,    8,    0,  221,  465,  466,  223,  224,  467,  468,
    0,  464,    0,    0,  301,    8,    0,  221,  465,  466,
  223,  224,  467,  468,  530,  243,    0,    0,    0,    8,
    0,    0,  244,  245,   11,   12,  246,  247,  605,  243,
    0,    0,    0,    8,    0,    0,  244,  245,   11,   12,
  246,  247,  327,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  488,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          6,
  256,  210,   45,  256,  371,  258,   70,  374,  284,   47,
   17,  256,    6,  273,  269,  269,  291,  277,  199,  294,
  256,  156,   38,   39,  256,   41,  161,  162,  256,  164,
  165,  166,  256,  289,  266,  267,   43,  269,  293,  284,
  278,  296,  297,  279,  280,  281,  282,  283,  257,  277,
  259,  256,  327,  198,   92,  269,  292,  293,  101,  102,
  284,  293,  100,  256,  296,  297,    6,  256,  256,  436,
  258,  256,  256,  278,  138,  198,  256,  120,  142,  269,
   87,  266,  267,  218,  269,  278,  274,  296,  363,  278,
  278,  366,  256,  277,  239,  159,  288,  256,  278,  276,
  281,  117,  256,  293,  258,  121,  296,  297,  293,  384,
  269,  296,  297,  277,  256,  122,  239,  259,  260,  126,
  274,  330,  256,  332,  278,  492,  256,  274,  403,  264,
  405,  406,  126,  408,  409,  410,  278,  201,  256,  273,
  147,  256,  256,  273,  256,  292,  293,  190,  191,  256,
  256,  269,  258,  147,  266,  267,  163,  269,  174,  274,
  274,  276,  169,  266,  267,  256,  269,  274,  175,  276,
  315,  256,  381,  259,  181,  182,  276,  386,  185,  186,
  187,  293,  256,  274,  296,  297,  126,  256,  273,  196,
  293,  198,  315,  296,  297,  256,  269,    6,  256,  273,
  273,  244,  196,  259,  277,  274,  213,  147,  269,  216,
  391,  256,  393,  488,  395,  288,  274,  269,  261,  262,
  256,  273,  216,  163,  198,  277,  371,  274,  273,  374,
  256,  269,  239,  256,  260,  175,  288,  512,  274,  274,
  449,  181,  182,  256,  256,  185,  186,  187,  371,  278,
  273,  374,  268,  273,  270,  271,  196,  273,  198,  266,
  256,  274,  274,  256,  256,  239,  256,  283,  275,  285,
  286,  416,  256,  418,  419,  256,  216,  486,  274,  277,
  461,  274,  274,  256,  274,  266,  267,  256,  269,  256,
  274,  436,  299,  416,  256,  418,  419,  266,  267,  239,
  269,  274,  273,  256,  266,  267,  273,  269,  315,  256,
  491,  269,  293,  436,  256,  296,  297,  126,  256,  266,
  267,  274,  269,  258,  293,  256,  266,  296,  297,  345,
  346,  293,  274,  256,  296,  297,  274,  269,  147,  274,
  347,  315,  256,  274,  269,  256,  293,  492,  493,  296,
  297,  274,  256,  257,  163,  442,  256,  261,  269,  299,
  274,  265,  266,  267,  371,  269,  175,  374,  256,  492,
  493,  516,  181,  182,  274,  315,  185,  186,  187,  422,
  423,  285,  256,  258,  256,  401,  274,  196,  256,  198,
  284,  398,  479,  516,  481,  296,  297,  371,  258,  273,
  374,  273,  256,  256,  277,  273,  256,  216,  256,  416,
  256,  418,  419,  256,  274,  256,  266,  267,  258,  273,
  273,  508,  465,  266,  267,  273,  269,  273,  269,  436,
  239,  371,  256,  274,  374,  442,  294,  295,  445,  256,
  483,  484,  416,  260,  418,  419,  533,  284,  535,  273,
  293,  256,  293,  296,  297,  296,  297,  266,  256,  277,
  273,  284,  436,  256,  277,  270,  271,  260,  266,  267,
  288,  269,  479,  284,  481,  288,  416,  277,  418,  419,
  496,  256,  498,  499,  571,  492,  493,  574,  288,  256,
  299,  266,  267,  260,  501,  293,  436,  278,  296,  297,
  274,  508,  442,  257,  292,  293,  315,  261,  278,  516,
  597,  265,  266,  267,  256,  269,  603,  278,  492,  493,
  503,  528,  529,  506,  266,  267,  533,  269,  535,  270,
  271,  285,  269,  270,  271,  284,  256,  274,  258,  479,
  293,  481,  516,  296,  297,  277,  256,  530,  555,  259,
  260,  293,  492,  493,  296,  297,  256,  292,  293,  259,
  260,  501,  371,  284,  571,  374,  278,  574,  508,  576,
  577,  269,  270,  271,  557,  278,  516,  560,  256,    6,
  273,  259,  260,  256,  591,  258,  593,  594,  528,  529,
  597,  278,  256,  533,  258,  535,  603,  256,  581,  258,
  583,  273,  585,  610,  273,  612,   33,  416,  256,  418,
  419,   38,   39,  274,   41,  555,  259,  260,  266,  267,
   47,  269,  605,    6,  256,  608,  258,  436,  256,  278,
  258,  571,  292,  293,  574,  277,  576,  577,  292,  293,
  259,  260,  259,  260,  260,  293,  292,  293,  296,  297,
   33,  591,  260,  593,  594,   38,   39,  597,   41,  259,
  260,   98,   99,  603,   47,   92,  256,  257,  103,  104,
  610,  261,  612,  100,  264,  265,  266,  267,  268,  269,
  269,  260,  274,  492,  493,  278,  273,  273,  258,  274,
  117,  256,  257,  274,  121,  285,  261,  262,  263,  126,
  265,  266,  267,  278,  269,  270,  271,  516,  258,   92,
  258,  284,  284,  274,  278,  278,  284,  100,  284,  284,
  147,  278,  256,  257,  284,  277,  291,  261,  273,  278,
  259,  265,  266,  267,  117,  269,  163,  278,  121,  278,
  278,  274,  260,  126,  260,  260,  278,  174,  175,  274,
  278,  285,  278,  260,  181,  182,  260,  260,  185,  186,
  187,  256,  257,  284,  147,  258,  261,  262,  263,  196,
  265,  266,  267,  257,  269,  270,  271,  261,  262,  263,
  163,  265,  266,  267,  278,  269,  270,  271,  278,  216,
  285,  174,  175,  278,  260,  260,  291,  260,  181,  182,
    6,  285,  185,  186,  187,    6,    6,  291,   24,  142,
  467,  120,   -1,  196,   -1,   -1,  256,  257,   -1,  259,
   -1,  261,  262,   -1,  264,  265,  266,  267,  268,  269,
  270,  271,   -1,  216,  274,   -1,  276,   -1,  278,  266,
   -1,  268,  269,  270,  271,  285,  273,   -1,   -1,   -1,
   -1,  291,   -1,   -1,   -1,   -1,  283,   -1,  285,  286,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
  262,  263,  299,  265,  266,  267,   -1,  269,  270,  271,
   -1,   -1,   -1,  266,   -1,  268,  269,  270,  271,   -1,
  273,   -1,  284,   -1,   -1,   -1,  256,  257,   -1,  291,
  283,  261,  285,  286,  264,  265,  266,  267,  268,  269,
   -1,   -1,   -1,   -1,   -1,   -1,  299,   -1,  345,  346,
  256,  257,  258,  259,  284,  261,  262,   -1,  264,  265,
  266,  267,  268,  269,  270,  271,   -1,   -1,  274,   -1,
  276,   -1,  278,  279,  280,  281,  282,  283,   -1,  285,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,  295,
   -1,   -1,  345,  346,   -1,   -1,   -1,  256,  257,  258,
  259,   -1,  261,  262,  401,  264,  265,  266,  267,  268,
  269,  270,  271,   -1,   -1,  274,   -1,  276,   -1,  278,
  279,  280,  281,  282,  283,   -1,  285,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  257,  258,  259,   -1,  261,  262,  401,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,   -1,  274,
   -1,  276,   -1,  278,  279,  280,  281,  282,  283,   -1,
  285,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,
  265,  266,  267,  268,  269,   -1,   -1,   -1,   -1,  496,
   -1,  498,  499,  256,  257,  258,  259,   -1,  261,  262,
  285,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
   -1,  274,   -1,  276,   -1,  278,  279,  280,  281,  282,
  283,   -1,  285,   -1,   -1,   -1,   -1,   -1,  291,  292,
  293,   -1,   -1,  496,   -1,  498,  499,  256,  257,   -1,
  259,   -1,  261,  262,   -1,  264,  265,  266,  267,  268,
  269,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,  278,
   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,  256,  257,
   -1,  259,  291,  261,  262,   -1,  264,  265,  266,  267,
  268,  269,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,
  278,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,  256,
  257,   -1,  259,  291,  261,  262,   -1,  264,  265,  266,
  267,  268,  269,  270,  271,   -1,   -1,   -1,   -1,   -1,
   -1,  278,   -1,   -1,   -1,   -1,  256,  257,  285,   -1,
   -1,  261,  262,  263,  291,  265,  266,  267,   -1,  269,
  270,  271,   -1,  256,  257,   -1,   -1,   -1,  261,  262,
  263,   -1,  265,  266,  267,  285,  269,  270,  271,   -1,
   -1,  291,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,  285,   -1,   -1,  261,  262,  263,  291,  265,
  266,  267,   -1,  269,  270,  271,   -1,  256,  257,   -1,
   -1,   -1,  261,  262,   -1,   -1,  265,  266,  267,  285,
  269,  270,  271,   -1,   -1,  291,   -1,   -1,   -1,  278,
   -1,   -1,   -1,   -1,  256,  257,  285,   -1,   -1,  261,
  262,   -1,  291,  265,  266,  267,   -1,  269,  270,  271,
   -1,   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,
   -1,  256,  257,  285,   -1,   -1,  261,  262,   -1,  291,
  265,  266,  267,   -1,  269,  270,  271,   -1,   -1,   -1,
   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,  256,  257,
  285,   -1,   -1,  261,  262,   -1,  291,  265,  266,  267,
   -1,  269,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,
  278,   -1,   -1,   -1,   -1,   -1,  257,  285,   -1,   -1,
  261,  262,  263,  291,  265,  266,  267,  257,  269,  270,
  271,  261,  262,  263,   -1,  265,  266,  267,   -1,  269,
  270,  271,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,
  291,   -1,   -1,   -1,  257,  285,   -1,   -1,  261,  262,
  263,  291,  265,  266,  267,  257,  269,  270,  271,  261,
  262,  263,   -1,  265,  266,  267,   -1,  269,  270,  271,
   -1,  284,  257,   -1,   -1,   -1,  261,  262,  291,   -1,
  265,  266,  267,  285,  269,  270,  271,   -1,   -1,  291,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  257,
  285,   -1,   -1,  261,  262,  263,  291,  265,  266,  267,
  257,  269,  270,  271,  261,  262,   -1,   -1,  265,  266,
  267,   -1,  269,  270,  271,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  291,   -1,   -1,   -1,   -1,  285,   -1,
  256,  257,   -1,   -1,  291,  261,   -1,  263,  264,  265,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,  263,  264,  265,  266,  267,  268,  269,   -1,  285,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,  285,  263,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,
  265,  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
  285,  263,  264,  265,  266,  267,  268,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,
  268,  269,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,  285,  263,  264,
  265,  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,   -1,
  285,  257,   -1,   -1,   -1,  261,   -1,  256,  257,  265,
  266,  267,  261,  269,  285,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,  284,  264,
  265,  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,
  285,  264,  265,  266,  267,  268,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,
  269,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  257,   -1,   -1,   -1,  261,   -1,  285,  264,  265,  266,
  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
   -1,  264,  265,  266,  267,  268,  269,   -1,  285,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,  285,  264,  265,  266,  267,  268,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,  256,  257,  265,  266,
  267,  261,  269,   -1,  285,  265,  266,  267,   -1,  269,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,  256,
  257,   -1,   -1,   -1,  261,  285,  263,  264,  265,  266,
  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
  263,  264,  265,  266,  267,  268,  269,  284,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
  261,  284,  263,  264,  265,  266,  267,  268,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,
  267,  268,  269,  284,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,  284,  263,  264,
  265,  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,  263,  264,  265,  266,  267,  268,  269,  284,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,  284,  263,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,
  265,  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  284,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
  284,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,  284,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  284,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
  284,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,  284,  264,  265,  266,  267,  268,
  269,  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,
  266,  267,  268,  269,  257,  284,   -1,   -1,  261,   -1,
  263,  264,  265,  266,  267,  268,  269,  257,   -1,  285,
   -1,  261,   -1,  263,  264,  265,  266,  267,  268,  269,
  257,   -1,  285,   -1,  261,   -1,   -1,  264,  265,  266,
  267,  268,  269,  257,   -1,  285,   -1,  261,   -1,   -1,
  264,  265,  266,  267,  268,  269,  257,   -1,  285,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,  257,
   -1,  285,   -1,  261,   -1,   -1,  264,  265,  266,  267,
  268,  269,  257,   -1,  285,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  257,   -1,  285,   -1,  261,
   -1,   -1,  264,  265,  266,  267,  268,  269,  257,   -1,
  285,   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,
  269,  256,  257,  285,   -1,   -1,  261,   -1,  256,  257,
  265,  266,  267,  261,  269,   -1,  285,  265,  266,  267,
   -1,  269,  256,  257,   -1,   -1,   -1,  261,   -1,  284,
  257,  265,  266,  267,  261,  269,  284,  257,  265,  266,
  267,  261,  269,   -1,  257,  265,  266,  267,  261,  269,
  284,  257,  265,  266,  267,  261,  269,   -1,  285,  265,
  266,  267,   -1,  269,   -1,  285,  257,   -1,   -1,   -1,
  261,   -1,  285,   -1,  265,  266,  267,  257,  269,  285,
   -1,  261,   -1,  263,  264,  265,  266,  267,  268,  269,
   -1,  257,   -1,   -1,  285,  261,   -1,  263,  264,  265,
  266,  267,  268,  269,  284,  257,   -1,   -1,   -1,  261,
   -1,   -1,  264,  265,  266,  267,  268,  269,  284,  257,
   -1,   -1,   -1,  261,   -1,   -1,  264,  265,  266,  267,
  268,  269,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  284,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=297;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"IF","THEN","ELSE","END_IF","OUT","FUN","RETURN","BREAK","WHEN",
"WHILE","FOR","CONTINUE","ID","I32","F32","PUNTO","PARENT_A","PARENT_C",
"COMILLA","COMA","DOSPUNTOS","PUNTOCOMA","IGUAL","MAYOR","MENOR","MENORIGUAL",
"MAYORIGUAL","LLAVE_A","LLAVE_C","EXCL","DIST","ASIG","CADENA","COMENT","CONST",
"SUMA","RESTA","MULT","DIV","ENTERO","FLOAT",
};
final static String yyrule[] = {
"$accept : program",
"program : nombre_program LLAVE_A bloque_sentencias LLAVE_C",
"program : error",
"nombre_program : ID",
"bloque_sentencias :",
"bloque_sentencias : bloque_sentencias sentencia PUNTOCOMA",
"bloque_sentencias : bloque_sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_decl_datos",
"sentencia_declarativa : sentencia_decl_fun",
"sentencia_declarativa : lista_const",
"tipo : I32",
"tipo : F32",
"sentencia_decl_datos : tipo list_var",
"sentencia_decl_datos : ID list_var",
"list_var : list_var COMA ID",
"list_var : ID",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun error",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo error",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS error",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C error",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro error",
"sentencia_decl_fun : FUN ID PARENT_A parametro error",
"sentencia_decl_fun : FUN ID error",
"sentencia_decl_fun : FUN error",
"cuerpo_fun :",
"cuerpo_fun : cuerpo_fun sentencias_fun PUNTOCOMA",
"cuerpo_fun : cuerpo_fun sentencias_fun error",
"sentencias_fun : sentencia_decl_datos",
"sentencias_fun : sentencia_decl_fun",
"sentencias_fun : lista_const",
"sentencias_fun : asignacion",
"sentencias_fun : llamado_func",
"sentencias_fun : sentencia_if_fun",
"sentencias_fun : sentencia_out",
"sentencias_fun : sentencia_when_fun",
"sentencias_fun : sentencia_for_fun",
"sentencias_fun : sentencia_while_fun",
"sentencias_fun : retorno",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_fun : IF PARENT_A condicion error",
"sentencia_if_fun : IF PARENT_A error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_fun : WHEN PARENT_A condicion error",
"sentencia_when_fun : WHEN PARENT_A error",
"sentencia_when_fun : WHEN error condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion error",
"sentencia_while_fun : WHILE PARENT_A error",
"sentencia_while_fun : WHILE error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for_fun : ID DOSPUNTOS error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for_fun : FOR error",
"cuerpo_fun_break :",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break PUNTOCOMA",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break error",
"sentencias_fun_break : asignacion",
"sentencias_fun_break : sentencia_if_break_fun",
"sentencias_fun_break : sentencia_out",
"sentencias_fun_break : sentencia_when_break_fun",
"sentencias_fun_break : sentencia_while_fun",
"sentencias_fun_break : sentencia_for_fun",
"sentencias_fun_break : CONTINUE tag",
"sentencias_fun_break : BREAK",
"sentencias_fun_break : BREAK cte",
"sentencias_fun_break : retorno",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun_break",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_break_fun : WHEN PARENT_A condicion error",
"sentencia_when_break_fun : WHEN PARENT_A error",
"sentencia_when_break_fun : WHEN error condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break_fun : IF PARENT_A condicion error",
"sentencia_if_break_fun : IF PARENT_A error",
"sentencia_if_break_fun : IF error",
"retorno : RETURN PARENT_A expresion PARENT_C",
"parametro : tipo ID",
"parametro : ID ID",
"lista_const : CONST lista_asignacion",
"lista_asignacion : lista_asignacion COMA asignacion",
"lista_asignacion : asignacion",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : sentencia_if",
"sentencia_ejecutable : sentencia_out",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : sentencia_for",
"sentencia_ejecutable : sentencia_while",
"sentencia_ejecutable : llamado_func",
"asignacion : ID ASIG expresion",
"expresion : expresion SUMA termino",
"expresion : expresion RESTA termino",
"expresion : termino",
"expresion : llamado_func",
"expresion : sentencia_for ELSE cte",
"expresion : sentencia_while ELSE cte",
"termino : termino MULT factor",
"termino : termino DIV factor",
"termino : factor",
"factor : ID",
"factor : cte",
"cte : ENTERO",
"cte : FLOAT",
"cte : RESTA ENTERO",
"cte : RESTA FLOAT",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if : IF PARENT_A condicion PARENT_C error",
"sentencia_if : IF PARENT_A condicion error",
"sentencia_if : IF PARENT_A error",
"sentencia_if : IF error",
"condicion : expresion comparacion expresion",
"condicion : expresion comparacion error",
"condicion : expresion error expresion",
"comparacion : IGUAL",
"comparacion : MAYOR",
"comparacion : MENOR",
"comparacion : MENORIGUAL",
"comparacion : MAYORIGUAL",
"bloque_ejecutable :",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable PUNTOCOMA",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"sentencia_out : OUT PARENT_A CADENA PARENT_C",
"sentencia_out : OUT PARENT_A CADENA error",
"sentencia_out : OUT PARENT_A error",
"sentencia_out : OUT error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN sentencia_ejecutable",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN error bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C error LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A error PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN error condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C error",
"sentencia_while : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion error",
"sentencia_while : WHILE PARENT_A error",
"sentencia_while : WHILE error",
"bloque_break_continue :",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue PUNTOCOMA",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue",
"ejecutables_break_continue : asignacion",
"ejecutables_break_continue : sentencia_if_break",
"ejecutables_break_continue : sentencia_out",
"ejecutables_break_continue : sentencia_when_break",
"ejecutables_break_continue : sentencia_while",
"ejecutables_break_continue : sentencia_for",
"ejecutables_break_continue : CONTINUE tag",
"ejecutables_break_continue : BREAK",
"ejecutables_break_continue : BREAK cte",
"tag :",
"tag : DOSPUNTOS ID",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN ejecutables_break_continue",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN error bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C error LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A error PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN error condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion error",
"sentencia_if_break : IF PARENT_A error",
"sentencia_if_break : IF error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C ejecutables_break_continue",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C ejecutables_break_continue",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for : ID DOSPUNTOS error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for : FOR error",
"param_real : cte",
"param_real : ID",
"llamado_func : ID PARENT_A param_real COMA param_real PARENT_C",
"llamado_func : ID PARENT_A param_real PARENT_C",
"llamado_func : ID PARENT_A PARENT_C",
"llamado_func : ID PARENT_A param_real COMA param_real error",
"llamado_func : ID PARENT_A param_real error",
"llamado_func : ID PARENT_A error",
};

//#line 771 ".\gramatica.y"
private NodoControl raiz;
private List<String> variablesEnElAmbito = new ArrayList<String>();
private Map<String,ArbolSintactico> funciones = new HashMap<String,ArbolSintactico>();
private static List<Integer> linFun = new ArrayList<Integer>();
private List<ArbolSintactico> retornos = new ArrayList<ArbolSintactico>();
private static HashMap<Integer,ArrayList<String>> erroresSintacticos = new HashMap<Integer,ArrayList<String>>();

void yyerror(String mensaje){
        if (erroresSintacticos.get(AnalizadorLexico.getLineaAct()-1)== null){
                ArrayList<String> mnsj = new ArrayList<String>();
                mnsj.add(mensaje); 
                erroresSintacticos.put(AnalizadorLexico.getLineaAct()-1, mnsj);
        }
        else{
                erroresSintacticos.get(AnalizadorLexico.getLineaAct()-1).add(mensaje);
        }
}

static HashMap<Integer,ArrayList<String>> getErroresSintacticos(){
        return erroresSintacticos;
}
void chequearRangoI32(String sval){
  String s = "2147483647";
  long l = Long.valueOf(s);
  if(Long.valueOf(sval) > l){
    yyerror("La constante esta fuera de rango");
  }
}

void chequearRangoI32Neg(String sval){
       String s = "2147483648";
        long l = Long.valueOf(s);
        if(Long.valueOf(sval) > l){
                yyerror("La constante esta fuera de rango");
  } 
}

int yylex() throws IOException{
        Token t = AnalizadorLexico.getToken();
        this.yylval = new ParserVal(t.getLexema());
        //if(t.getId() != -1){
        //  System.out.println("Id: " + t.getId()+" Lexema: " + t.getLexema());
        //}else
        //  System.out.println("TERMINO LA EJECUCION");
        return t.getId();
}
public NodoControl getRaiz(){
	return raiz;
}
public Map<String,ArbolSintactico> getFuncion(){
        return funciones;
}

void actualizarAmbito(String lex, String amb){
        TablaSimbolos.addAtributo(lex,"Ambito",amb);
}

void putVariableEnAmbito(String s){
        this.variablesEnElAmbito.add(s);
}

void limpiarVariablesDeAmbito(){
        this.variablesEnElAmbito = new ArrayList<String>();
}
void removeVarDeAmbito(String s){
        this.variablesEnElAmbito.remove(s);
}
List<String> getListaVariablesDelAmbito(){
        return this.variablesEnElAmbito;
}
public static void addLinFun(int i){
        linFun.add(i);
}
public static Integer getTope(){

        Integer i = linFun.remove(linFun.size()-1);
        return i;
}
//#line 1289 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse() throws IOException
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 22 ".\gramatica.y"
{raiz = new NodoControl("PROGRAMA",(ArbolSintactico)val_peek(1));
                                                            Integer tope = 1;
                                                                ArrayList<String> listaVariables = new ArrayList<String>();
                                                                for(String s1 : getListaVariablesDelAmbito()){
                                                                        listaVariables.add(s1);
                                                                }
                                                                for (String s : listaVariables){
                                                                        Integer i = (Integer) TablaSimbolos.getAtributo(s,"Linea");
                                                                        if((i >= tope) && (i <=(Integer)AnalizadorLexico.getLineaAct())){
                                                                                String ambito =(String) TablaSimbolos.getAtributo(s,"Ambito");
                                                                                if ( ambito == null){
                                                                                        TablaSimbolos.addAtributo(s,"Ambito","Global");
                                                                                }
                                                                                else{
                                                                                        ambito+="Global";
                                                                                        TablaSimbolos.addAtributo(s,"Ambito",ambito);
                                                                                }
                                                                        }
                                                                }
                                                           }
break;
case 2:
//#line 42 ".\gramatica.y"
{yyerror("Hay un error sintactico en la entrada que arrastra errores");}
break;
case 4:
//#line 46 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 5:
//#line 47 ".\gramatica.y"
{
                                                        yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                                                        }
break;
case 6:
//#line 50 ".\gramatica.y"
{
                                yyval = new NodoControl("Error",(ArbolSintactico)null);
                                yyerror("Se esperaba ;");
                        }
break;
case 7:
//#line 55 ".\gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa");}
break;
case 8:
//#line 56 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 10:
//#line 59 ".\gramatica.y"
{funciones.put((String)((ArbolSintactico)val_peek(0)).getLex(),(ArbolSintactico)val_peek(0));}
break;
case 12:
//#line 62 ".\gramatica.y"
{
            yyval = new NodoHoja("Entero");
            ((NodoHoja)yyval).setTipo("Entero");
           }
break;
case 13:
//#line 66 ".\gramatica.y"
{
            yyval = new NodoHoja("Float");
            ((NodoHoja)yyval).setTipo("Float");
           }
break;
case 14:
//#line 71 ".\gramatica.y"
{System.out.println("Declaracion de datos");
                                      for (String s : ((NodoTipos)val_peek(0)).getList()){
                                        TablaSimbolos.addAtributo(s,"Tipo",((ArbolSintactico) val_peek(1)).getTipo());
                                        putVariableEnAmbito(s);
                                        TablaSimbolos.addAtributo(s,"Linea",AnalizadorLexico.getLineaAct());
                                        TablaSimbolos.addAtributo(s,"Uso","Variable");
                                      }
                                      yyval = val_peek(0);
                                     }
break;
case 15:
//#line 80 ".\gramatica.y"
{yyerror("No esta permitido el tipo declarado");}
break;
case 16:
//#line 82 ".\gramatica.y"
{
                            yyval=val_peek(2);
                            ((NodoTipos)yyval).add((String)val_peek(0).sval);
                            }
break;
case 17:
//#line 86 ".\gramatica.y"
{
               yyval=new NodoTipos((String)val_peek(0).sval);
              }
break;
case 18:
//#line 90 ".\gramatica.y"
{
                                System.out.println("Declaracion de Funcion");
                                yyval = new NodoControl("Funcion:"+val_peek(10).sval,(ArbolSintactico)val_peek(1));
                                TablaSimbolos.addAtributo(val_peek(10).sval,"Uso","NombreFuncion");
                                Integer tope = getTope();
                                ArrayList<String> listaVariables = new ArrayList<String>();
                                for(String s1 : getListaVariablesDelAmbito()){
                                        listaVariables.add(s1);
                                }
                                for (String s : listaVariables){
                                        Integer i = (Integer) TablaSimbolos.getAtributo(s,"Linea");
                                        if((i >= tope) && (i <=(Integer)AnalizadorLexico.getLineaAct())){
                                                String ambito = (String)TablaSimbolos.getAtributo(s,"Ambito");
                                                if ( ambito == null){
                                                        TablaSimbolos.addAtributo(s,"Ambito",val_peek(10).sval+":");
                                                }
                                                else{
                                                        ambito+=val_peek(10).sval+":";
                                                        TablaSimbolos.addAtributo(s,"Ambito",ambito);
                                                }
                                        }
                                }
                                ArrayList<ArbolSintactico> r1 = new ArrayList<ArbolSintactico>();
                                String tipo = ((ArbolSintactico)val_peek(3)).getTipo();
                                for (ArbolSintactico a1 : retornos){
                                        r1.add(a1);
                                }
                                for (ArbolSintactico a : r1){
                                        Integer i = a.getLinea();
                                        if( (i>= tope) && (i<=(Integer)AnalizadorLexico.getLineaAct()) ){
                                                if(!(a.getTipo().equals(tipo))  && !(a.getTipo().equals("null"))){
                                                        yyerror("El retorno debe tener el mismo tipo que el de la funcion.");
                                                }
                                                retornos.remove(a);
                                        }
                                }
                                
                        }
break;
case 19:
//#line 128 ".\gramatica.y"
{
                                System.out.println("Declaracion de Funcion");                                                               
                                yyval = new NodoControl("Funcion:"+val_peek(8).sval,(ArbolSintactico)val_peek(1));
                                TablaSimbolos.addAtributo(val_peek(8).sval,"Uso","NombreFuncion");
                                Integer tope = getTope();
                                ArrayList<String> listaVariables = new ArrayList<String>();
                                for(String s1 : getListaVariablesDelAmbito()){
                                        listaVariables.add(s1);
                                }
                                for (String s : listaVariables){
                                        Integer i = (Integer) TablaSimbolos.getAtributo(s,"Linea");
                                        if((i >= tope) && (i <=(Integer)AnalizadorLexico.getLineaAct())){
                                                String ambito = (String)TablaSimbolos.getAtributo(s,"Ambito");
                                                if ( ambito == null){
                                                        TablaSimbolos.addAtributo(s,"Ambito",val_peek(8).sval+":");
                                                }
                                                else{
                                                        ambito+=val_peek(8).sval+":";
                                                        TablaSimbolos.addAtributo(s,"Ambito",ambito);
                                                }
                                        }
                                }
                                ArrayList<ArbolSintactico> r1 = new ArrayList<ArbolSintactico>();
                                String tipo = ((ArbolSintactico)val_peek(3)).getTipo();
                                for (ArbolSintactico a1 : retornos){
                                        r1.add(a1);
                                }
                                for (ArbolSintactico a : r1){
                                        Integer i = a.getLinea();
                                        if( (i>= tope) && (i<=(Integer)AnalizadorLexico.getLineaAct()) ){
                                                if(!(a.getTipo().equals(tipo))  && !(a.getTipo().equals("null"))){
                                                        yyerror("El retorno debe tener el mismo tipo que el de la funcion.");
                                                }
                                                retornos.remove(a);
                                        }
                                }
                                }
break;
case 20:
//#line 165 ".\gramatica.y"
{
                                System.out.println("Declaracion de Funcion");
                                yyval = new NodoControl("Funcion:"+val_peek(7).sval,(ArbolSintactico)val_peek(1));
                                TablaSimbolos.addAtributo(val_peek(7).sval,"Uso","NombreFuncion");
                                Integer tope = getTope();
                                ArrayList<String> listaVariables = new ArrayList<String>();
                                for(String s1 : getListaVariablesDelAmbito()){
                                        listaVariables.add(s1);
                                }
                                for (String s : listaVariables){
                                        Integer i = (Integer) TablaSimbolos.getAtributo(s,"Linea");
                                        if((i >= tope) && (i <=(Integer)AnalizadorLexico.getLineaAct())){
                                                String ambito = (String)TablaSimbolos.getAtributo(s,"Ambito");
                                                if ( ambito == null){
                                                        TablaSimbolos.addAtributo(s,"Ambito",val_peek(7).sval+":");
                                                }
                                                else{
                                                        ambito+=val_peek(7).sval+":";
                                                        TablaSimbolos.addAtributo(s,"Ambito",ambito);
                                                }
                                        }
                                }
                                ArrayList<ArbolSintactico> r1 = new ArrayList<ArbolSintactico>();
                                String tipo = ((ArbolSintactico)val_peek(3)).getTipo();
                                for (ArbolSintactico a1 : retornos){
                                        r1.add(a1);
                                }
                                for (ArbolSintactico a : r1){
                                        Integer i = a.getLinea();
                                        if( (i>= tope) && (i<=(Integer)AnalizadorLexico.getLineaAct()) ){
                                                if(!(a.getTipo().equals(tipo))  && !(a.getTipo().equals("null"))){
                                                        yyerror("El retorno debe tener el mismo tipo que el de la funcion.");
                                                }
                                                retornos.remove(a);
                                        }
                                }
                                }
break;
case 21:
//#line 202 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 22:
//#line 203 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 23:
//#line 204 ".\gramatica.y"
{yyerror("El tipo declarado no esta permitido");}
break;
case 24:
//#line 205 ".\gramatica.y"
{yyerror("Se esperaba :");}
break;
case 25:
//#line 206 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 26:
//#line 207 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 27:
//#line 208 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 28:
//#line 209 ".\gramatica.y"
{yyerror("Se esperaba un nombre de funcion");}
break;
case 29:
//#line 211 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 30:
//#line 212 ".\gramatica.y"
{yyval=new NodoComun("Sentencia_Funcion", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));}
break;
case 31:
//#line 213 ".\gramatica.y"
{yyerror("Se esperaba ;");}
break;
case 32:
//#line 215 ".\gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa Datos");}
break;
case 33:
//#line 216 ".\gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa Funcion");}
break;
case 34:
//#line 217 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 35:
//#line 218 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 36:
//#line 219 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 37:
//#line 220 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 38:
//#line 221 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 40:
//#line 223 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 41:
//#line 224 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 42:
//#line 225 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 43:
//#line 227 ".\gramatica.y"
{System.out.println("Sentencia IF");
                                yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(8),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(5)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));
                        }
break;
case 44:
//#line 230 ".\gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(6)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));}
break;
case 45:
//#line 232 ".\gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(7)),new NodoControl("else fun", (ArbolSintactico)val_peek(3))));}
break;
case 46:
//#line 235 ".\gramatica.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF FUN", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                }
break;
case 47:
//#line 238 ".\gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(6)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));}
break;
case 48:
//#line 241 ".\gramatica.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF FUN", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );}
break;
case 49:
//#line 243 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 50:
//#line 244 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 51:
//#line 245 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 52:
//#line 246 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 53:
//#line 247 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 54:
//#line 248 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 55:
//#line 249 ".\gramatica.y"
{yyerror("Se esperaba then ");}
break;
case 56:
//#line 250 ".\gramatica.y"
{yyerror("Se esperaba ) ");}
break;
case 57:
//#line 251 ".\gramatica.y"
{yyerror("Se esperaba una condicion ");}
break;
case 58:
//#line 253 ".\gramatica.y"
{System.out.println("Sentencia WHEN");}
break;
case 59:
//#line 254 ".\gramatica.y"
{System.out.println("Sentencia WHEN");}
break;
case 60:
//#line 255 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 61:
//#line 256 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 62:
//#line 257 ".\gramatica.y"
{yyerror("Se esperaba then ");}
break;
case 63:
//#line 258 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 64:
//#line 259 ".\gramatica.y"
{yyerror("Se esperaba condicion");}
break;
case 65:
//#line 260 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 66:
//#line 262 ".\gramatica.y"
{
    yyval = new NodoComun("While con Etiqueta Funcion",new NodoControl("Etiqueta", new NodoHoja(val_peek(12).sval)) , new NodoComun("While", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                        System.out.println("Sentencia WHILE con etiqueta y con llaves");}
break;
case 67:
//#line 265 ".\gramatica.y"
{System.out.println("Sentencia WHILE con etiqueta y sin llaves");
                    yyval = new NodoComun("While con Etiqueta Funcion",new NodoControl("Etiqueta", new NodoHoja(val_peek(10).sval)) , new NodoComun("While", (ArbolSintactico) val_peek(6), new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );}
break;
case 68:
//#line 267 ".\gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 69:
//#line 270 ".\gramatica.y"
{
                    yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");
                }
break;
case 70:
//#line 274 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 71:
//#line 275 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 72:
//#line 276 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 73:
//#line 277 ".\gramatica.y"
{yyerror("Se esperaba una asignacion");}
break;
case 74:
//#line 278 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 75:
//#line 279 ".\gramatica.y"
{yyerror("Se esperaba :");}
break;
case 76:
//#line 280 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 77:
//#line 281 ".\gramatica.y"
{yyerror("Se esperaba una condicion");}
break;
case 78:
//#line 282 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 79:
//#line 284 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                                        yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                                                                                                       }
break;
case 80:
//#line 287 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                                        yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                                                                                                       }
break;
case 81:
//#line 290 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                                                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                                                                                                                                }
break;
case 82:
//#line 293 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                                                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                                                                                                                                }
break;
case 83:
//#line 296 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 84:
//#line 297 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 85:
//#line 298 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 86:
//#line 299 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 87:
//#line 300 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 88:
//#line 301 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 89:
//#line 302 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 90:
//#line 303 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 91:
//#line 306 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 92:
//#line 309 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 93:
//#line 312 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 94:
//#line 315 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 95:
//#line 316 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 96:
//#line 317 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 97:
//#line 318 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 98:
//#line 319 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 99:
//#line 320 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 100:
//#line 321 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 103:
//#line 325 ".\gramatica.y"
{yyerror("Se esperaba ;");}
break;
case 114:
//#line 339 ".\gramatica.y"
{System.out.println("Sentencia WHEN");}
break;
case 115:
//#line 340 ".\gramatica.y"
{System.out.println("Sentencia WHEN");}
break;
case 116:
//#line 341 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 117:
//#line 342 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 118:
//#line 343 ".\gramatica.y"
{yyerror("Se esperaba then ");}
break;
case 119:
//#line 344 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 120:
//#line 345 ".\gramatica.y"
{yyerror("Se esperaba condicion");}
break;
case 121:
//#line 346 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 122:
//#line 349 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 123:
//#line 354 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 124:
//#line 359 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 125:
//#line 364 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 126:
//#line 369 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 127:
//#line 374 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 128:
//#line 378 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 129:
//#line 379 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 130:
//#line 380 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 131:
//#line 381 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 132:
//#line 382 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 133:
//#line 383 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 134:
//#line 384 ".\gramatica.y"
{yyerror("Se esperaba then ");}
break;
case 135:
//#line 385 ".\gramatica.y"
{yyerror("Se esperaba ) ");}
break;
case 136:
//#line 386 ".\gramatica.y"
{yyerror("Se esperaba una condicion ");}
break;
case 137:
//#line 387 ".\gramatica.y"
{yyerror("Se esperaba ( ");}
break;
case 138:
//#line 389 ".\gramatica.y"
{yyval = new NodoControl("Retorno", (ArbolSintactico)val_peek(1));
                                                NodoHoja retorno = new NodoHoja("Retorno");
                                                retorno.setLinea(AnalizadorLexico.getLineaAct());
                                                retorno.setTipo(((ArbolSintactico)val_peek(1)).getTipo());
                                                retornos.add(retorno);
                                                }
break;
case 140:
//#line 398 ".\gramatica.y"
{yyerror("No esta permitido el tipo declarado");}
break;
case 141:
//#line 401 ".\gramatica.y"
{System.out.println("Declaracion de Constante/s");}
break;
case 144:
//#line 406 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 145:
//#line 407 ".\gramatica.y"
{yyval = val_peek(0); }
break;
case 146:
//#line 408 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 147:
//#line 409 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 148:
//#line 410 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 149:
//#line 411 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 150:
//#line 412 ".\gramatica.y"
{}
break;
case 151:
//#line 414 ".\gramatica.y"
{
                                 System.out.println("Asignacion");
                                 yyval = new NodoComun(val_peek(1).sval,new NodoHoja(val_peek(2).sval), (ArbolSintactico) val_peek(0));
                                 String s1 = (String) (TablaSimbolos.getAtributo((val_peek(2).sval),"Tipo"));
                                 String s2;
                                 if(TablaSimbolos.existeSimbolo(((ArbolSintactico) val_peek(0)).getLex())) {
                                        s2 = (String) (TablaSimbolos.getAtributo((((ArbolSintactico) val_peek(0)).getLex()),"Tipo"));
                                        ((ArbolSintactico)yyval).setTipo(s2);
                                 }else{
                                        s2 = ((ArbolSintactico)val_peek(0)).getTipo();
                                 }
                                 if(s1 == null){
                                        System.out.println("Variable no declarada " + val_peek(2).sval);
                                 }else{
                                        if((s2 == "null")){
                                                yyerror("Falta declarar alguna variable para realizar la asignacion.");
                                        }else{
                                                yyerror("No se puede realizar una asignacion con tipos diferentes.");
                                        }
                                        
                                 }
                                }
break;
case 152:
//#line 437 ".\gramatica.y"
{yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                String s1,s2;
                                 s1 = (String) (TablaSimbolos.getAtributo((((ArbolSintactico) val_peek(2)).getLex()),"Tipo"));
                                 if(s1 != null) {
                                        ((ArbolSintactico)yyval).setTipo(s1);     
                                 }else{
                                        if(TablaSimbolos.existeSimbolo(((ArbolSintactico)val_peek(2)).getLex())){
                                                yyerror("Variable no declarada " + ((ArbolSintactico)val_peek(2)).getLex());
                                                ((ArbolSintactico)yyval).setTipo("null"); 
                                        }
                                 }
                                 s2 = (String) (TablaSimbolos.getAtributo((((ArbolSintactico) val_peek(0)).getLex()),"Tipo"));
                                 if(s2 != null) {
                                       ((ArbolSintactico)yyval).setTipo(s2);
                                 }else{
                                        yyerror("Variable no declarada " + ((ArbolSintactico)val_peek(0)).getLex());
                                        ((ArbolSintactico)yyval).setTipo("null"); 
                                 }
                                 
                                 }
break;
case 153:
//#line 457 ".\gramatica.y"
{yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                String s1,s2;
                                s1 = (String) (TablaSimbolos.getAtributo((((ArbolSintactico) val_peek(2)).getLex()),"Tipo"));
                                 if(s1 != null) {
                                        ((ArbolSintactico)yyval).setTipo(s1);     
                                 }else{
                                        if(TablaSimbolos.existeSimbolo(((ArbolSintactico)val_peek(2)).getLex())){
                                                yyerror("Variable no declarada " + ((ArbolSintactico)val_peek(2)).getLex());
                                                ((ArbolSintactico)yyval).setTipo("null"); 
                                        }
                                 }
                                 s2 = (String) (TablaSimbolos.getAtributo((((ArbolSintactico) val_peek(0)).getLex()),"Tipo"));
                                 if(s2 != null) {
                                       ((ArbolSintactico)yyval).setTipo(s2);
                                 }else{
                                        yyerror("Variable no declarada " + ((ArbolSintactico)val_peek(0)).getLex());
                                        ((ArbolSintactico)yyval).setTipo("null"); 
                                 }
                                 }
break;
case 154:
//#line 476 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 158:
//#line 482 ".\gramatica.y"
{yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                String s1,s2;
                                s1 = (String) (TablaSimbolos.getAtributo((((ArbolSintactico) val_peek(2)).getLex()),"Tipo"));
                                 if(s1 != null) {
                                        ((ArbolSintactico)yyval).setTipo(s1);     
                                 }else{
                                        if(TablaSimbolos.existeSimbolo(((ArbolSintactico)val_peek(2)).getLex())){
                                                yyerror("Variable no declarada " + ((ArbolSintactico)val_peek(2)).getLex());
                                                ((ArbolSintactico)yyval).setTipo("null"); 
                                        }
                                 }
                                 s2 = (String) (TablaSimbolos.getAtributo((((ArbolSintactico) val_peek(0)).getLex()),"Tipo"));
                                 if(s2 != null) {
                                       ((ArbolSintactico)yyval).setTipo(s2);
                                 }else{
                                        yyerror("Variable no declarada " + ((ArbolSintactico)val_peek(0)).getLex());
                                        ((ArbolSintactico)yyval).setTipo("null"); 
                                 }
                                 
                                 }
break;
case 159:
//#line 503 ".\gramatica.y"
{
                                 yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                 String s1,s2;
                                 s1 = (String) (TablaSimbolos.getAtributo((((ArbolSintactico) val_peek(2)).getLex()),"Tipo"));
                                 if(s1 != null) {
                                        ((ArbolSintactico)yyval).setTipo(s1);     
                                 }else{
                                        if(TablaSimbolos.existeSimbolo(((ArbolSintactico)val_peek(2)).getLex())){
                                                yyerror("Variable no declarada " + ((ArbolSintactico)val_peek(2)).getLex());
                                                ((ArbolSintactico)yyval).setTipo("null"); 
                                        }
                                 }
                                 s2 = (String) (TablaSimbolos.getAtributo((((ArbolSintactico) val_peek(0)).getLex()),"Tipo"));
                                 if(s2 != null) {
                                       ((ArbolSintactico)yyval).setTipo(s2);
                                 }else{
                                        yyerror("Variable no declarada " + ((ArbolSintactico)val_peek(0)).getLex());
                                        ((ArbolSintactico)yyval).setTipo("null"); 
                                 }
                                }
break;
case 160:
//#line 524 ".\gramatica.y"
{
                  yyval = val_peek(0);
                 }
break;
case 161:
//#line 528 ".\gramatica.y"
{
            yyval = new NodoHoja(val_peek(0).sval);
            String s = (String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo");
            if (s != null){
                ((ArbolSintactico)yyval).setTipo(s);  
            }else {
                yyerror("Variable no declarada " + val_peek(0).sval);
            }
                                                                      
           }
break;
case 162:
//#line 538 ".\gramatica.y"
{
                yyval = new NodoHoja(val_peek(0).sval);
                String s = (String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo");
                if (s != null){
                        ((ArbolSintactico)yyval).setTipo(s);  
                }else {
                        yyerror("Variable no declarada " + val_peek(0).sval);
                }
              }
break;
case 163:
//#line 548 ".\gramatica.y"
{  chequearRangoI32(val_peek(0).sval);}
break;
case 164:
//#line 549 ".\gramatica.y"
{}
break;
case 165:
//#line 550 ".\gramatica.y"
{chequearRangoI32Neg(val_peek(0).sval);}
break;
case 167:
//#line 554 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");}
break;
case 168:
//#line 557 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");}
break;
case 169:
//#line 560 ".\gramatica.y"
{yyval = new NodoComun("IF", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                                                                                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");}
break;
case 170:
//#line 562 ".\gramatica.y"
{yyval = new NodoComun("IF", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                                                                                        System.out.println("Sentencia IF sin corchetes y sin else");}
break;
case 171:
//#line 564 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF con corchetes y else");}
break;
case 172:
//#line 567 ".\gramatica.y"
{
                                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                                        System.out.println("Sentencia IF con corchetes y sin else");}
break;
case 173:
//#line 570 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 174:
//#line 571 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 175:
//#line 572 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 176:
//#line 573 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 177:
//#line 574 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 178:
//#line 575 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 179:
//#line 576 ".\gramatica.y"
{yyerror("Se esperaba then ");}
break;
case 180:
//#line 577 ".\gramatica.y"
{yyerror("Se esperaba ) ");}
break;
case 181:
//#line 578 ".\gramatica.y"
{yyerror("Se esperaba una condicion ");}
break;
case 182:
//#line 579 ".\gramatica.y"
{yyerror("Se esperaba ( ");}
break;
case 183:
//#line 584 ".\gramatica.y"
{
                        yyval= new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                        if (!((((ArbolSintactico)val_peek(2)).getTipo()).equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                               yyerror("error en la comparacion entre expresiones de distintos tipos");
                        }
                }
break;
case 184:
//#line 590 ".\gramatica.y"
{yyerror("Se esperaba otra expresion para comparar.");}
break;
case 185:
//#line 591 ".\gramatica.y"
{yyerror("Se esperaba un tipo de comparacion.");}
break;
case 186:
//#line 593 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 187:
//#line 594 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 188:
//#line 595 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 189:
//#line 596 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 190:
//#line 597 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 191:
//#line 599 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 192:
//#line 600 ".\gramatica.y"
{
                                                                yyval=new NodoComun("Bloque Ejecutable", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                                                                }
break;
case 193:
//#line 603 ".\gramatica.y"
{yyerror("Se esperaba ;");}
break;
case 194:
//#line 605 ".\gramatica.y"
{
                        yyval = new NodoControl(val_peek(3).sval, (ArbolSintactico) new NodoHoja(val_peek(1).sval));
                        System.out.println("Sentencia OUT");}
break;
case 195:
//#line 608 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 196:
//#line 609 ".\gramatica.y"
{yyerror("Se esperaba una CADENA");}
break;
case 197:
//#line 610 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 198:
//#line 612 ".\gramatica.y"
{
                        yyval = new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 199:
//#line 615 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 200:
//#line 618 ".\gramatica.y"
{yyerror("Se esperaba } en el when");}
break;
case 201:
//#line 619 ".\gramatica.y"
{yyerror("Se esperaba { en el when");}
break;
case 202:
//#line 620 ".\gramatica.y"
{yyerror("Se esperaba then en el when");}
break;
case 203:
//#line 621 ".\gramatica.y"
{yyerror("Se esperaba condicion en el when");}
break;
case 204:
//#line 622 ".\gramatica.y"
{yyerror("Se esperaba ( en el when");}
break;
case 205:
//#line 623 ".\gramatica.y"
{yyerror("Se esperaba ) en el when");}
break;
case 206:
//#line 624 ".\gramatica.y"
{yyerror("Se esperaba then en el when");}
break;
case 207:
//#line 626 ".\gramatica.y"
{
                        yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(12).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                        System.out.println("Sentencia WHILE con etiqueta y con llaves");}
break;
case 208:
//#line 629 ".\gramatica.y"
{
                        yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(10).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );
                        System.out.println("Sentencia WHILE con etiqueta y sin llaves");}
break;
case 209:
//#line 632 ".\gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 210:
//#line 635 ".\gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");}
break;
case 211:
//#line 638 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 212:
//#line 639 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 213:
//#line 640 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 214:
//#line 641 ".\gramatica.y"
{yyerror("Se esperaba una asignacion");}
break;
case 215:
//#line 642 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 216:
//#line 643 ".\gramatica.y"
{yyerror("Se esperaba :");}
break;
case 217:
//#line 644 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 218:
//#line 645 ".\gramatica.y"
{yyerror("Se esperaba una condicion");}
break;
case 219:
//#line 646 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 220:
//#line 648 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 221:
//#line 649 ".\gramatica.y"
{
                yyval = new NodoComun("Bloque Break con Continue",(ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                }
break;
case 222:
//#line 652 ".\gramatica.y"
{yyerror("Se esperaba ;");}
break;
case 223:
//#line 655 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 224:
//#line 656 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 225:
//#line 657 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 226:
//#line 658 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 227:
//#line 659 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 228:
//#line 660 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 229:
//#line 661 ".\gramatica.y"
{yyval = new NodoControl("Continue",(ArbolSintactico)val_peek(0));}
break;
case 230:
//#line 662 ".\gramatica.y"
{yyval = new NodoHoja("Break");}
break;
case 231:
//#line 663 ".\gramatica.y"
{yyval = new NodoControl("Break", new NodoHoja(val_peek(0).sval));}
break;
case 232:
//#line 665 ".\gramatica.y"
{yyval = new NodoHoja("Fin");}
break;
case 233:
//#line 666 ".\gramatica.y"
{yyval = new NodoControl("Tag", new NodoHoja(val_peek(0).sval) );}
break;
case 234:
//#line 668 ".\gramatica.y"
{System.out.println("Sentencia WHEN");}
break;
case 235:
//#line 669 ".\gramatica.y"
{System.out.println("Sentencia WHEN");}
break;
case 236:
//#line 670 ".\gramatica.y"
{yyerror("Se esperaba } en el when");}
break;
case 237:
//#line 671 ".\gramatica.y"
{yyerror("Se esperaba { en el when");}
break;
case 238:
//#line 672 ".\gramatica.y"
{yyerror("Se esperaba then en el when");}
break;
case 239:
//#line 673 ".\gramatica.y"
{yyerror("Se esperaba condicion en el when");}
break;
case 240:
//#line 674 ".\gramatica.y"
{yyerror("Se esperaba ( en el when");}
break;
case 241:
//#line 675 ".\gramatica.y"
{yyerror("Se esperaba ) en el when");}
break;
case 242:
//#line 676 ".\gramatica.y"
{yyerror("Se esperaba then en el when");}
break;
case 243:
//#line 679 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 244:
//#line 684 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 245:
//#line 689 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 246:
//#line 694 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 247:
//#line 699 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 248:
//#line 704 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 249:
//#line 708 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 250:
//#line 709 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 251:
//#line 710 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 252:
//#line 711 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 253:
//#line 712 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 254:
//#line 713 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 255:
//#line 714 ".\gramatica.y"
{yyerror("Se esperaba then ");}
break;
case 256:
//#line 715 ".\gramatica.y"
{yyerror("Se esperaba ) ");}
break;
case 257:
//#line 716 ".\gramatica.y"
{yyerror("Se esperaba una condicion ");}
break;
case 258:
//#line 717 ".\gramatica.y"
{yyerror("Se esperaba ( ");}
break;
case 259:
//#line 720 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                                        yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                                                                                                       }
break;
case 260:
//#line 723 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                                        yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                                                                                                       }
break;
case 261:
//#line 726 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                                                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                                                                                                                                }
break;
case 262:
//#line 729 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                                                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                                                                                                                                }
break;
case 263:
//#line 732 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 264:
//#line 733 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 265:
//#line 734 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 266:
//#line 735 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 267:
//#line 736 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 268:
//#line 737 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 269:
//#line 738 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 270:
//#line 739 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 271:
//#line 742 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 272:
//#line 745 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 273:
//#line 748 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 274:
//#line 751 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 275:
//#line 752 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 276:
//#line 753 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 277:
//#line 754 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 278:
//#line 755 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 279:
//#line 756 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 280:
//#line 757 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 281:
//#line 760 ".\gramatica.y"
{yyval = new NodoHoja(val_peek(0).sval);}
break;
case 282:
//#line 761 ".\gramatica.y"
{yyval=new NodoHoja(val_peek(0).sval);}
break;
case 283:
//#line 763 ".\gramatica.y"
{yyval=new NodoComun("llamado funcion",(ArbolSintactico)val_peek(3),(ArbolSintactico)val_peek(1));}
break;
case 284:
//#line 764 ".\gramatica.y"
{yyval=new NodoComun("llamado funcion",(ArbolSintactico)val_peek(1),new NodoHoja("Un solo parametro"));}
break;
case 285:
//#line 765 ".\gramatica.y"
{yyval=new NodoHoja("llamado funcion sin parametros");}
break;
case 286:
//#line 766 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 287:
//#line 767 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 288:
//#line 768 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
//#line 2887 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 * @throws IOException
 */
public void run() throws IOException
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
