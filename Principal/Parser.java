//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramaticaTomi.y"
package Principal;
import java.io.IOException;
import AnalizadorLexico.AnalizadorLexico;
import AnalizadorLexico.Token;
import GeneracionCodigoIntermedio.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

//#line 28 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IF=257;
public final static short THEN=258;
public final static short ELSE=259;
public final static short END_IF=260;
public final static short OUT=261;
public final static short FUN=262;
public final static short RETURN=263;
public final static short BREAK=264;
public final static short WHEN=265;
public final static short WHILE=266;
public final static short FOR=267;
public final static short CONTINUE=268;
public final static short ID=269;
public final static short I32=270;
public final static short F32=271;
public final static short PUNTO=272;
public final static short PARENT_A=273;
public final static short PARENT_C=274;
public final static short COMILLA=275;
public final static short COMA=276;
public final static short DOSPUNTOS=277;
public final static short PUNTOCOMA=278;
public final static short IGUAL=279;
public final static short MAYOR=280;
public final static short MENOR=281;
public final static short MENORIGUAL=282;
public final static short MAYORIGUAL=283;
public final static short LLAVE_A=284;
public final static short LLAVE_C=285;
public final static short EXCL=286;
public final static short DIST=287;
public final static short ASIG=288;
public final static short CADENA=289;
public final static short COMENT=290;
public final static short CONST=291;
public final static short SUMA=292;
public final static short RESTA=293;
public final static short MULT=294;
public final static short DIV=295;
public final static short ENTERO=296;
public final static short FLOAT=297;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    1,    2,    2,    2,    3,    3,    4,    4,
    4,    9,    9,    6,    6,   10,   10,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,   12,   12,
   12,   13,   13,   13,   13,   13,   13,   13,   13,   13,
   13,   13,   16,   16,   16,   16,   16,   16,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   18,   18,   18,
   18,   18,   18,   18,   18,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   23,   23,   23,   24,   24,   24,   24,   24,   24,   24,
   24,   24,   24,   27,   27,   27,   27,   27,   27,   27,
   27,   26,   26,   26,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   26,   26,   26,   26,   21,   11,   11,
    8,   30,   30,   31,    5,    5,    5,    5,    5,    5,
    5,   14,   29,   29,   29,   29,   29,   29,   36,   36,
   36,   37,   37,   25,   25,   25,   25,   32,   32,   32,
   32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
   32,   32,   32,   22,   22,   22,   39,   39,   39,   39,
   39,   38,   38,   38,   17,   17,   17,   17,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   40,   40,   40,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   28,   28,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   42,   42,   42,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   42,   42,   42,   42,   34,
   34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
   34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
   34,   44,   44,   15,   15,   15,   15,   15,   15,
};
final static short yylen[] = {                            2,
    4,    1,    1,    0,    3,    2,    1,    1,    1,    1,
    1,    1,    1,    2,    2,    3,    1,   12,   10,    9,
   12,   10,    9,    8,    7,    5,    3,    2,    0,    3,
    3,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,   11,   13,   13,    8,   13,    9,   13,   12,
   10,    9,    8,    6,    5,    4,    3,    8,    6,    8,
    6,    5,    4,    3,    8,   13,   11,   11,    9,   11,
    9,    8,    7,    6,    5,    4,    3,    2,   14,   14,
   12,   12,   14,   14,   12,   12,   11,   11,    3,   12,
   12,   10,   10,   12,   12,   10,   10,    9,    9,    2,
    0,    3,    3,    1,    1,    1,    1,    1,    1,    2,
    1,    2,    1,    6,    8,    8,    6,    5,    4,    3,
    8,   11,   12,   12,    8,   13,    9,   13,   12,   10,
    9,    8,    6,    5,    4,    3,    2,    4,    2,    2,
    2,    3,    1,    3,    1,    1,    1,    1,    1,    1,
    1,    3,    3,    3,    1,    1,    3,    3,    3,    3,
    1,    1,    1,    1,    1,    2,    2,   12,   12,   11,
    8,   13,    9,   13,   12,   10,    9,    8,    6,    5,
    4,    3,    2,    3,    3,    3,    1,    1,    1,    1,
    1,    0,    3,    2,    4,    4,    3,    2,    8,    6,
    8,    8,    8,    8,    8,    7,    5,   13,   11,   11,
    9,   11,    9,    8,    7,    6,    5,    4,    3,    2,
    0,    3,    2,    1,    1,    1,    1,    1,    1,    2,
    1,    2,    0,    2,    8,    6,    8,    8,    8,    8,
    8,    7,    5,   12,   12,   11,    8,   13,    9,   13,
   12,   10,    9,    8,    6,    5,    4,    3,    2,   14,
   14,   12,   12,   14,   14,   12,   12,   11,   11,    3,
   12,   12,   10,   10,   12,   12,   10,   10,    9,    9,
    2,    1,    1,    6,    4,    3,    6,    4,    3,
};
final static short yydefred[] = {                         0,
    2,    3,    0,    0,    4,    0,    0,    0,    0,    0,
    0,    0,    0,   12,   13,    1,    0,    0,    7,    8,
    9,   10,   11,    0,  145,  151,  147,  146,  148,  149,
  150,  183,    0,  198,    0,   28,    0,    0,    0,  220,
    0,  281,    0,   17,    0,    0,    0,    0,    0,    0,
  143,    5,    0,  182,    0,    0,  164,  165,  156,    0,
  163,    0,    0,    0,    0,  161,  197,    0,   27,    0,
    0,    0,    0,  219,    0,    0,    0,  289,  283,  286,
  282,    0,  270,    0,    0,    0,    0,    0,    0,  166,
  167,  181,    0,    0,  187,  188,  189,  190,  191,    0,
    0,    0,    0,    0,    0,    0,  196,  195,    0,    0,
    0,    0,    0,    0,    0,    0,  218,    0,    0,  288,
  285,    0,    0,    0,   16,  144,  142,  180,    0,    0,
  162,    0,    0,  185,    0,  157,  158,  159,  160,  140,
    0,  139,   26,    0,    0,    0,    0,  192,    0,    0,
  217,    0,    0,    0,    0,    0,  179,    0,  192,    0,
    0,    0,    0,  192,  192,    0,  192,  192,  192,  200,
  216,    0,    0,  287,  284,    0,    0,    0,    0,   29,
    0,   25,    0,    0,    0,  206,    0,    0,    0,    0,
  215,    0,    0,    0,    0,    0,  178,    0,    0,  171,
    0,   29,   24,    0,  205,  204,  193,  203,  202,  201,
  199,  214,    0,    0,    0,    0,    0,  177,    0,  173,
  192,    0,    0,    0,    0,    0,    0,    0,   20,   32,
   33,   34,    0,   35,   36,   37,   38,   39,   40,   41,
   42,    0,   23,    0,  213,    0,    0,    0,    0,    0,
  221,  224,  226,  229,  228,  211,  225,  227,  279,    0,
  280,    0,    0,    0,    0,  176,  192,    0,    0,    0,
    0,    0,    0,    0,   78,    0,  100,    0,    0,   31,
   30,   19,   22,   29,  259,    0,  232,    0,    0,    0,
  230,    0,  277,  221,  273,  278,  221,  274,    0,    0,
    0,    0,    0,    0,  170,   57,    0,    0,    0,   64,
    0,   77,    0,    0,   89,    0,    0,    0,  258,    0,
    0,    0,    0,  234,  212,  210,    0,    0,    0,  221,
  209,  268,    0,  269,    0,  175,    0,  169,  168,   56,
    0,  138,    0,   63,    0,   76,    0,    0,    0,    0,
   21,   18,  257,    0,    0,    0,    0,    0,  222,  275,
  271,  276,  272,    0,  266,  221,  262,  267,  221,  263,
  174,  172,   55,    0,    0,   62,    0,   75,    0,    0,
    0,    0,  256,    0,    0,    0,  221,    0,    0,  208,
    0,    0,   54,   29,    0,   29,   61,   29,   59,   74,
    0,    0,    0,    0,  255,  221,    0,  221,  221,    0,
  221,  221,  221,  236,  264,  260,  265,  261,    0,    0,
    0,    0,   73,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  242,    0,    0,    0,   53,    0,    0,   46,
   65,   60,   58,   72,    0,    0,    0,    0,    0,  254,
    0,    0,  247,  241,  240,  239,  238,  237,  235,   52,
    0,   48,    0,   29,    0,   71,    0,    0,    0,    0,
    0,  101,  104,  106,  109,  108,  113,   69,  105,  107,
   98,    0,   99,    0,    0,    0,    0,  253,    0,  249,
  221,    0,   51,   29,    0,    0,    0,  137,    0,  112,
    0,    0,  110,    0,   96,  101,   92,   97,  101,   93,
    0,    0,    0,  252,  221,    0,    0,    0,    0,    0,
    0,   43,  136,    0,    0,  120,    0,   70,   68,    0,
    0,    0,  101,   67,   87,    0,   88,    0,    0,    0,
    0,  246,   50,    0,    0,    0,  135,    0,    0,  119,
    0,  103,  102,   94,   90,   95,   91,    0,   85,  101,
   81,   86,  101,   82,  251,    0,  245,  244,   49,   47,
   44,   45,  134,    0,    0,  118,    0,   66,    0,    0,
  250,  248,  133,  101,    0,  101,  117,  101,  114,   83,
   79,   84,   80,    0,    0,    0,    0,  132,    0,    0,
  125,  121,  116,  115,  131,    0,  127,  101,    0,  130,
  101,    0,    0,    0,    0,    0,    0,  122,  129,    0,
  123,  124,  128,  126,
};
final static short yydgoto[] = {                          3,
    4,    6,   18,   19,  187,  230,  231,  232,   24,   48,
  112,  201,  233,  252,   59,  236,  253,  238,  475,  476,
  477,   60,  504,  530,   61,  479,  480,  291,   62,   50,
   51,   28,   29,  254,  255,   65,   66,  166,  102,  292,
  327,  257,  258,   82,
};
final static short yysindex[] = {                       -67,
    0,    0,    0, -257,    0,  293, -123,  -86,  -22,  -47,
  -19,  130,  119,    0,    0,    0, -206, -176,    0,    0,
    0,    0,    0, -135,    0,    0,    0,    0,    0,    0,
    0,    0,   23,    0, -236,    0,  152, -120,   35,    0,
   42,    0, -130,    0, -222,  268, -120, -167, -134, -101,
    0,    0, -167,    0, -248,  -65,    0,    0,    0, -131,
    0, -124,  -62,  -59,   54,    0,    0, -103,    0,  332,
  -36,  -33, -239,    0,  -70,  -21,    3,    0,    0,    0,
    0, -246,    0,   49,   70,  244,   46,  337, -206,    0,
    0,    0, -192, -120,    0,    0,    0,    0,    0, -186,
 -186,   57,  337,  337, -186, -186,    0,    0,   93,   95,
  140,  -75,  173,  270,  265, -116,    0, -238, -120,    0,
    0, -105, -120, -130,    0,    0,    0,    0, 1956,  244,
    0,   54,   54,    0,  244,    0,    0,    0,    0,    0,
  311,    0,    0,  284,  306,  283,  286,    0,  302, 1963,
    0,  156,  301,  -53,  334,  343,    0,  -20,    0,  345,
  328,  311,  -50,    0,    0, -179,    0,    0,    0,    0,
    0,   37,  312,    0,    0,  362, -120, -225,  369,    0,
  372,    0, -160,  133,  523,    0,  392, 1984, 1991,  100,
    0,  -31,  337,  337,  402,  400,    0,  388, 1388,    0,
 1130,    0,    0,  199,    0,    0,    0,    0,    0,    0,
    0,    0,  -49,   14,   20, -130,  344,    0, 1977,    0,
    0,  417,  409,  424,  180,  208,  212,  183,    0,    0,
    0,    0, -223,    0,    0,    0,    0,    0,    0,    0,
    0, 1141,    0, -235,    0,  218,  337,  223,  422,  200,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  647,
    0, 1726,  427,  337,  337,    0,    0,  420, 1998,  442,
  154, -120, -120,  161,    0,  206,    0, -130,  273,    0,
    0,    0,    0,    0,    0,  245,    0, -120,  251,  434,
    0, 1395,    0,    0,    0,    0,    0,    0, 2047,   31,
   51, 1553,  444,  445,    0,    0,   62,   -9,  433,    0,
   73,    0,   81,  430,    0,  436,  440,  512,    0,   85,
  454,  456, -146,    0,    0,    0,  441, 1409, 1431,    0,
    0,    0, 1740,    0, 1761,    0, -155,    0,    0,    0,
  -93,    0,  475,    0,  185,    0, -129, -120, -120, -130,
    0,    0,    0,  209,  479,  480,  457,  237,    0,    0,
    0,    0,    0, 1864,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  561,  458,    0,  615,    0,  236,  467,
  473,  470,    0, 1775,  465,  468,    0,  469, 1796,    0,
 1445, 1467,    0,    0,  478,    0,    0,    0,    0,    0,
   58,  359,  437, -120,    0,    0,  481,    0,    0, 1877,
    0,    0,    0,    0,    0,    0,    0,    0,  961,  404,
 1168,  978,    0,   90,  337,  337,  484,  482, 1481,  406,
 1890, 1903,    0, 1916, 1929, 1503,    0, -175,  455,    0,
    0,    0,    0,    0, 1583,  104,  131, -130,  391,    0,
  390, 2060,    0,    0,    0,    0,    0,    0,    0,    0,
 -234,    0,  492,    0,  485,    0,  248,  337,  260,  422,
  220,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1597,    0, 1619,  490,  337,  337,    0, 1810,    0,
    0,  494,    0,    0, 1206, 1179,  498,    0,  329,    0,
 -120,  376,    0, 1248,    0,    0,    0,    0,    0,    0,
 2021,  150,  158,    0,    0,  507, 1942,  510, 1005,  508,
  513,    0,    0,  163,  519,    0,  166,    0,    0, -202,
 1262, 1285,    0,    0,    0, 1633,    0, 1655, 1517,  534,
  535,    0,    0,  203,  540,  541,    0,  295,  544,    0,
  331,    0,    0,    0,    0,    0,    0, 1824,    0,    0,
    0,    0,    0,    0,    0,  259,    0,    0,    0,    0,
    0,    0,    0, 1669,  520,    0, 1691,    0, 1299, 1322,
    0,    0,    0,    0,  529,    0,    0,    0,    0,    0,
    0,    0,    0, 1336,  426, 1838, 1359,    0,  421, 2034,
    0,    0,    0,    0,    0, 1705,    0,    0,  537,    0,
    0,  538, 1851,  552, 1373,  553,  559,    0,    0,  271,
    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1217,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1022,    0, 1049,
    0,    0, 1076,    0,  671,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  718,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  841,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -137,
    0,  762,  803,    0,    8,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1103,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1560,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  872,    0,  903,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1539,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  934,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, -164,    0, -156,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,    0,    0,    0,   -5,  815,  819,  823,  -68,  809,
  689, -154, -369,   -6,  192,    0,   61,    0, -144, -122,
   27,  -15, -495, -439,  -42,    0,    0,  365,  -43,    0,
  747,    0,    0,  577,  621,  590,  588, -152,    0,  323,
 -204,    0,    0,  715,
};
final static int YYTABLESIZE=2344;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         25,
   20,  111,   81,   86,  395,  478,  178,  399,  256,  120,
  531,  184,  185,  532,  188,  189,  190,  151,  115,   67,
  283,  493,   71,   73,   45,   75,    5,  121,   46,  122,
  197,    7,  280,   78,  116,    8,   77,  558,  152,   10,
   11,   12,  507,  158,  510,  126,   79,  242,  284,  494,
  130,   80,   68,  552,  281,  295,  239,  298,  135,  198,
  136,  137,   49,  128,  579,  129,   27,  580,  269,  465,
   56,  534,  161,   57,   58,  553,  111,    7,  240,   81,
  460,    8,  131,  461,  462,   10,   11,   12,  594,  158,
  596,  111,  597,  181,  331,  203,  561,  239,  564,  233,
  371,   52,  463,  153,  372,  186,   56,  155,   87,   57,
   58,  357,  613,  111,  302,  615,  204,  156,  186,  240,
  186,  233,   25,  160,   92,  520,  378,  358,  367,  318,
  370,   94,   32,   44,  585,  244,  186,  589,   76,  149,
  186,  150,   93,   25,  170,   11,   12,  379,   55,   33,
  214,  215,  107,   88,   95,   96,   97,   98,   99,   25,
  609,  196,  373,   79,  374,  192,  612,  100,  101,   34,
  108,   25,   56,  239,   89,   57,   58,   25,   25,  407,
  143,   25,   25,   25,  414,  117,   35,   56,    1,   27,
   57,   58,   25,  222,  234,  240,  103,   26,  144,  104,
  145,    2,  174,  118,  287,  182,  245,  246,   38,  263,
   27,    8,   25,  268,  247,  248,   11,   12,  249,  250,
  175,  300,  301,  183,  212,   39,   27,  241,  308,  239,
   90,   91,  239,   36,  251,  234,   40,  113,   27,  419,
  114,  421,  213,  422,   27,   27,   37,  492,   27,   27,
   27,  240,   45,   41,  240,  307,   46,  309,  311,   27,
  313,  237,   25,  184,  342,  184,   47,   47,  241,  259,
  320,  314,  321,  323,  239,  261,  239,  239,   54,   27,
  119,  184,  100,  101,  516,  184,  332,  260,   11,   12,
   72,   55,  191,  262,  239,   25,  240,   74,  240,  240,
   11,   12,  237,   55,  333,   76,  334,   11,   12,  496,
   55,  234,  134,  423,  125,   56,  240,  340,   57,   58,
   26,  123,   11,   12,  335,   55,   76,   56,  344,   27,
   57,   58,  380,  381,   56,  341,  346,   57,   58,  519,
  353,   26,  124,  382,  241,  444,  345,  105,  106,   56,
  239,  239,   57,   58,  347,  210,    7,   26,  354,  481,
    8,  140,   27,  445,   10,   11,   12,  234,  158,   26,
  234,  141,  240,  240,  239,   26,   26,  482,  237,   26,
   26,   26,  446,  447,  211,   42,  483,   44,  428,    7,
   26,   45,  235,    8,  424,   46,  240,   10,   11,   12,
  241,  158,   43,  241,  484,  535,   47,   69,  142,  306,
   26,  171,  234,  537,  234,  234,  310,  205,  547,   11,
   12,  550,   55,  536,   70,  500,   11,   12,  172,   55,
  146,  538,  234,  235,  237,  273,  548,  237,  473,  551,
  376,  485,  377,  512,  513,  241,   56,  241,  241,   57,
   58,   44,  274,   56,  243,   45,   57,   58,  569,  279,
   26,  312,  570,  275,  383,  241,  384,  277,   14,   15,
   47,   11,   12,  285,   55,  473,   46,  473,  288,  237,
  276,  237,  237,  524,  278,  525,  527,   47,  234,  234,
  286,  400,  388,   26,  389,  289,  279,  473,   56,  237,
  319,   57,   58,  498,  473,  474,  322,   47,  401,  235,
   11,   12,  234,   55,  581,  501,   11,   12,  582,   55,
  499,  241,  241,   83,  473,  473,  623,  147,  315,  473,
  624,  473,  502,   84,   85,  100,  101,   56,  316,  317,
   57,   58,  474,   56,  474,  241,   57,   58,  148,    7,
  573,  473,  574,    8,    9,  237,  237,   10,   11,   12,
  162,   13,   14,   15,  474,  235,  164,  473,  235,  165,
  473,  474,  473,  473,  109,   14,   15,   16,  173,  237,
   14,   15,   30,   17,  523,  167,  576,  473,  577,  473,
  473,  474,  474,  473,   11,   12,  474,   55,  474,  473,
  109,   14,   15,  193,  194,  110,  473,  176,  473,   63,
  235,  180,  235,  235,   63,   63,  328,   63,  474,  329,
  177,   56,  179,   63,   57,   58,   31,  199,  200,   56,
  235,  526,   57,   58,  474,  264,  265,  474,  195,  474,
  474,   11,   12,  218,   55,  488,  219,  220,  489,  490,
  425,  426,  364,   64,  474,  202,  474,  474,   64,   64,
  474,   64,  439,  440,  452,  453,  474,   64,   56,  207,
   63,   57,   58,  474,  216,  474,  605,  217,   63,  606,
  607,  271,  486,  487,  600,  601,  235,  235,  391,  132,
  133,  392,  138,  139,  270,   63,  272,  303,  290,   63,
  299,  305,  324,  338,  339,   30,  343,  348,  349,  410,
  235,  223,  350,  427,   64,    8,    9,  224,  359,  225,
  226,  227,   64,  228,   14,   15,   30,  355,  429,  356,
  431,  432,  375,  434,  435,  436,  385,  386,  464,   64,
  387,  396,   30,   64,  402,   17,  403,  404,  408,   31,
  495,  409,  411,   63,   30,  420,  448,  522,  430,  449,
   30,   30,  497,  511,   30,   30,   30,  351,  223,  542,
   31,  518,    8,    9,  224,   30,  225,  226,  227,    7,
  228,   14,   15,    8,  540,  545,   31,   10,   11,   12,
  546,  158,  549,  567,  568,   30,  352,   64,   31,  571,
  572,  575,   17,  586,   31,   31,  595,  206,   31,   31,
   31,  618,  621,  517,  614,  616,  393,  223,  622,   31,
   21,    8,    9,  224,   22,  225,  226,  227,   23,  228,
   14,   15,   53,  163,  503,  127,  154,  539,    0,   31,
    0,    0,    0,    0,  394,   30,    0,   63,   63,   63,
   63,   17,   63,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   63,    0,   63,   63,    0,    0,    0,    0,
  397,  223,    0,    0,    0,    8,    9,  224,   30,  225,
  226,  227,    0,  228,   14,   15,    0,    0,    0,   31,
    0,   64,   64,   64,   64,    0,   64,    0,  398,    0,
    0,    0,  293,  246,    0,   17,   64,    8,   64,   64,
  247,  248,   11,   12,  249,  250,    0,    0,    0,    0,
    0,    0,   31,    0,   63,   63,  162,  162,  162,  162,
  294,  162,  162,    0,  162,  162,  162,  162,  162,  162,
  162,  162,    0,    0,  162,    0,    0,    0,  162,  162,
  162,  162,  162,  162,    0,  162,    0,    0,    0,    0,
    0,  162,  162,  162,  162,  162,    0,    0,   64,   64,
    0,    0,    0,  155,  155,  155,  155,    0,  155,  155,
   63,  155,  155,  155,  155,  155,  155,  155,  155,    0,
    0,  155,    0,    0,    0,  155,  155,  155,  155,  155,
  155,    0,  155,    0,    0,    0,    0,    0,  155,  155,
  155,    0,    0,    0,    0,    0,    0,  153,  153,  153,
  153,    0,  153,  153,   64,  153,  153,  153,  153,  153,
  153,  153,  153,    0,    0,  153,    0,    0,    0,  153,
  153,  153,  153,  153,  153,    0,  153,    0,    0,    0,
    0,    0,  153,  153,  153,    0,    0,    0,  154,  154,
  154,  154,    0,  154,  154,    0,  154,  154,  154,  154,
  154,  154,  154,  154,    0,   63,  154,   63,   63,    0,
  154,  154,  154,  154,  154,  154,    0,  154,    0,    0,
    0,    0,    0,  154,  154,  154,  152,  152,    0,  152,
    0,  152,  152,    0,  152,  152,  152,  152,  152,  152,
  152,  152,    0,    0,  152,    0,    0,    0,  152,   64,
    0,   64,   64,    0,    0,  152,    0,  231,  231,    0,
  231,  152,  231,  231,    0,  231,  231,  231,  231,  231,
  231,  231,  231,    0,    0,    0,    0,    0,    0,  231,
    0,    0,    0,    0,    0,    0,  231,    0,  233,  233,
    0,  233,  231,  233,  233,    0,  233,  233,  233,  233,
  233,  233,  233,  233,    0,    0,    0,    0,    0,    0,
  233,    0,    0,    0,    0,    0,    0,  233,    0,  243,
  243,    0,  243,  233,  243,  243,    0,  243,  243,  243,
  243,  243,  243,  243,  243,    0,    0,    0,    0,    0,
    0,  243,    0,    0,    0,    0,  437,  223,  243,    0,
    0,    8,    9,  224,  243,  225,  226,  227,    0,  228,
   14,   15,    0,  442,  223,    0,    0,    0,    8,    9,
  224,    0,  225,  226,  227,  438,  228,   14,   15,    0,
    0,   17,    0,    0,    0,    0,    0,    0,    0,    0,
  543,  223,  443,    0,    0,    8,    9,  224,   17,  225,
  226,  227,    0,  228,   14,   15,    0,   15,   15,    0,
    0,    0,   15,   15,    0,    0,   15,   15,   15,  544,
   15,   15,   15,    0,    0,   17,    0,    0,    0,   15,
    0,    0,    0,    0,  141,  141,   15,    0,    0,  141,
  141,    0,   15,  141,  141,  141,    0,  141,  141,  141,
    0,    0,    0,    0,    0,    0,  141,    0,    0,    0,
    0,   14,   14,  141,    0,    0,   14,   14,    0,  141,
   14,   14,   14,    0,   14,   14,   14,    0,    0,    0,
    0,    0,    0,   14,    0,    0,    0,    0,  207,  207,
   14,    0,    0,  207,  207,    0,   14,  207,  207,  207,
    0,  207,  207,  207,    0,    0,    0,    0,    0,    0,
  207,    0,    0,    0,    0,    0,  223,  207,    0,    0,
    8,    9,  224,  207,  225,  226,  227,  223,  228,   14,
   15,    8,    9,  224,    0,  225,  226,  227,    0,  228,
   14,   15,    0,    0,  229,    0,    0,    0,    0,    0,
   17,    0,    0,    0,  223,  282,    0,    0,    8,    9,
  224,   17,  225,  226,  227,  223,  228,   14,   15,    8,
    9,  224,    0,  225,  226,  227,    0,  228,   14,   15,
    0,    0,  441,    0,    0,    0,    0,    0,   17,    0,
    0,    0,  223,  521,    0,    0,    8,    9,  224,   17,
  225,  226,  227,    6,  228,   14,   15,    6,    6,    0,
    0,    6,    6,    6,    0,    6,    6,    6,    0,    0,
    0,    0,    0,    0,    0,    0,   17,    0,    0,    0,
    0,    6,    0,  528,  467,    0,    0,    6,    8,    0,
  224,  468,  469,  226,  227,  470,  471,  554,  467,    0,
    0,    0,    8,    0,  224,  468,  469,  226,  227,  470,
  471,    0,  529,    0,    0,    0,    0,    0,    0,    0,
  556,  467,    0,    0,    0,    8,  555,  224,  468,  469,
  226,  227,  470,  471,  590,  467,    0,    0,    0,    8,
    0,  224,  468,  469,  226,  227,  470,  471,    0,  557,
    0,    0,    0,    0,    0,    0,    0,  592,  467,    0,
    0,    0,    8,  591,  224,  468,  469,  226,  227,  470,
  471,  598,  467,    0,    0,    0,    8,    0,  224,  468,
  469,  226,  227,  470,  471,    0,  593,    0,    0,    0,
    0,    0,    0,    0,  603,  467,    0,    0,    0,    8,
  599,  224,  468,  469,  226,  227,  470,  471,  619,  467,
    0,    0,    0,    8,    0,  224,  468,  469,  226,  227,
  470,  471,    0,  604,    7,    0,    0,    0,    8,    0,
  325,  246,   10,   11,   12,    8,  158,  620,  247,  248,
   11,   12,  249,  250,  360,  246,    0,    0,    0,    8,
    0,  221,  247,  248,   11,   12,  249,  250,    0,  326,
    0,    0,    0,    0,    0,    0,  362,  246,    0,    0,
    0,    8,    0,  361,  247,  248,   11,   12,  249,  250,
  415,  246,    0,    0,    0,    8,    0,    0,  247,  248,
   11,   12,  249,  250,    0,  363,    0,    0,    0,    0,
    0,    0,  417,  246,    0,    0,    0,    8,    0,  416,
  247,  248,   11,   12,  249,  250,  450,  246,    0,    0,
    0,    8,    0,    0,  247,  248,   11,   12,  249,  250,
    0,  418,    0,    0,    0,    0,    0,    0,  458,  246,
    0,    0,    0,    8,    0,  451,  247,  248,   11,   12,
  249,  250,  565,  246,    0,    0,    0,    8,    0,    0,
  247,  248,   11,   12,  249,  250,    0,  459,    0,    0,
    0,    0,    0,    0,  223,  223,    0,    0,    0,  223,
    0,  566,  223,  223,  223,  223,  223,  223,  336,    7,
    0,    0,    0,    8,    0,  194,  194,   10,   11,   12,
  194,  158,    0,  223,  194,  194,  194,    0,  194,    0,
    0,    0,    0,    0,    0,    0,    0,  337,  466,  467,
    0,    0,    0,    8,  194,  224,  468,  469,  226,  227,
  470,  471,  505,  467,    0,    0,    0,    8,    0,  224,
  468,  469,  226,  227,  470,  471,  472,    0,    0,    0,
    0,    0,    0,    0,  508,  467,    0,    0,    0,    8,
  506,  224,  468,  469,  226,  227,  470,  471,  559,  467,
    0,    0,    0,    8,    0,  224,  468,  469,  226,  227,
  470,  471,  509,    0,    0,    0,    0,    0,    0,    0,
  562,  467,    0,    0,    0,    8,  560,  224,  468,  469,
  226,  227,  470,  471,  583,  467,    0,    0,    0,    8,
    0,  224,  468,  469,  226,  227,  470,  471,  563,    0,
    0,    0,    0,    0,    0,    0,  587,  467,    0,    0,
    0,    8,  584,  224,  468,  469,  226,  227,  470,  471,
  610,  467,    0,    0,    0,    8,    0,  224,  468,  469,
  226,  227,  470,  471,  588,    0,    0,    0,    0,    0,
    0,  296,  246,    0,    0,    0,    8,    0,  611,  247,
  248,   11,   12,  249,  250,  365,  246,    0,    0,    0,
    8,    0,    0,  247,  248,   11,   12,  249,  250,  297,
    0,    0,    0,    0,    0,    0,  368,  246,    0,    0,
    0,    8,    0,  366,  247,  248,   11,   12,  249,  250,
  405,  246,    0,    0,    0,    8,    0,    0,  247,  248,
   11,   12,  249,  250,  369,    0,    0,    0,    0,    0,
    0,  412,  246,    0,    0,    0,    8,    0,  406,  247,
  248,   11,   12,  249,  250,  514,  246,    0,    0,    0,
    8,    0,    0,  247,  248,   11,   12,  249,  250,  413,
  467,    0,    0,    0,    8,    0,  224,  468,  469,  226,
  227,  470,  471,  515,  467,    0,    0,    0,    8,    0,
  224,  468,  469,  226,  227,  470,  471,  467,  578,    0,
    0,    8,    0,  224,  468,  469,  226,  227,  470,  471,
  246,    0,  602,    0,    8,    0,    0,  247,  248,   11,
   12,  249,  250,  246,    0,  617,    0,    8,    0,    0,
  247,  248,   11,   12,  249,  250,  246,    0,  390,    0,
    8,    0,    0,  247,  248,   11,   12,  249,  250,  246,
    0,  433,    0,    8,    0,    0,  247,  248,   11,   12,
  249,  250,  246,    0,  454,    0,    8,    0,    0,  247,
  248,   11,   12,  249,  250,  246,    0,  455,    0,    8,
    0,    0,  247,  248,   11,   12,  249,  250,  246,    0,
  456,    0,    8,    0,    0,  247,  248,   11,   12,  249,
  250,  157,    7,  457,    0,    0,    8,    0,  168,    7,
   10,   11,   12,    8,  158,    0,  541,   10,   11,   12,
    0,  158,  266,    7,    0,    0,    0,    8,    0,  159,
    7,   10,   11,   12,    8,  158,  169,    7,   10,   11,
   12,    8,  158,    0,    7,   10,   11,   12,    8,  158,
  267,    0,   10,   11,   12,    0,  158,    0,  208,    0,
    0,    0,    0,    0,    0,  209,    0,  467,    0,    0,
    0,    8,  304,  224,  468,  469,  226,  227,  470,  471,
  467,    0,    0,    0,    8,    0,  224,  468,  469,  226,
  227,  470,  471,  246,  533,    0,    0,    8,    0,    0,
  247,  248,   11,   12,  249,  250,  246,  608,    0,    0,
    8,    0,    0,  247,  248,   11,   12,  249,  250,    0,
  330,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  491,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          6,
    6,   70,   45,   47,  374,  445,  159,  377,  213,  256,
  506,  164,  165,  509,  167,  168,  169,  256,  258,  256,
  256,  256,   38,   39,  273,   41,  284,  274,  277,  276,
  256,  257,  256,  256,  274,  261,   43,  533,  277,  265,
  266,  267,  482,  269,  484,   88,  269,  202,  284,  284,
   94,  274,  289,  256,  278,  260,  201,  262,  102,  285,
  103,  104,  269,  256,  560,  258,    6,  563,  221,  439,
  293,  511,  141,  296,  297,  278,  145,  257,  201,  122,
  256,  261,  269,  259,  260,  265,  266,  267,  584,  269,
  586,  256,  588,  162,  299,  256,  536,  242,  538,  256,
  256,  278,  278,  119,  260,  285,  293,  123,  276,  296,
  297,  258,  608,  278,  267,  611,  277,  124,  256,  242,
  258,  278,  129,  129,  256,  495,  256,  274,  333,  284,
  335,  256,  256,  269,  574,  204,  274,  577,  269,  256,
  278,  258,  274,  150,  150,  266,  267,  277,  269,  273,
  193,  194,  256,  288,  279,  280,  281,  282,  283,  166,
  600,  177,  256,  269,  258,  172,  606,  292,  293,  256,
  274,  178,  293,  318,  276,  296,  297,  184,  185,  384,
  256,  188,  189,  190,  389,  256,  273,  293,  256,  129,
  296,  297,  199,  199,  201,  318,  259,    6,  274,  259,
  276,  269,  256,  274,  247,  256,  256,  257,  256,  216,
  150,  261,  219,  219,  264,  265,  266,  267,  268,  269,
  274,  264,  265,  274,  256,  273,  166,  201,  272,  374,
  296,  297,  377,  256,  284,  242,  256,  274,  178,  394,
  274,  396,  274,  398,  184,  185,  269,  452,  188,  189,
  190,  374,  273,  273,  377,  271,  277,  273,  274,  199,
  276,  201,  269,  256,  274,  258,  288,  288,  242,  256,
  286,  278,  288,  289,  419,  256,  421,  422,  256,  219,
  278,  274,  292,  293,  489,  278,  256,  274,  266,  267,
  256,  269,  256,  274,  439,  302,  419,  256,  421,  422,
  266,  267,  242,  269,  274,  269,  256,  266,  267,  464,
  269,  318,  256,  256,  269,  293,  439,  256,  296,  297,
  129,  273,  266,  267,  274,  269,  269,  293,  256,  269,
  296,  297,  348,  349,  293,  274,  256,  296,  297,  494,
  256,  150,  273,  350,  318,  256,  274,  294,  295,  293,
  495,  496,  296,  297,  274,  256,  257,  166,  274,  256,
  261,  269,  302,  274,  265,  266,  267,  374,  269,  178,
  377,  277,  495,  496,  519,  184,  185,  274,  318,  188,
  189,  190,  425,  426,  285,  256,  256,  269,  404,  257,
  199,  273,  201,  261,  401,  277,  519,  265,  266,  267,
  374,  269,  273,  377,  274,  256,  288,  256,  269,  256,
  219,  256,  419,  256,  421,  422,  256,  285,  256,  266,
  267,  256,  269,  274,  273,  468,  266,  267,  273,  269,
  258,  274,  439,  242,  374,  256,  274,  377,  445,  274,
  256,  448,  258,  486,  487,  419,  293,  421,  422,  296,
  297,  269,  273,  293,  256,  273,  296,  297,  256,  277,
  269,  256,  260,  256,  256,  439,  258,  256,  270,  271,
  288,  266,  267,  256,  269,  482,  277,  484,  256,  419,
  273,  421,  422,  499,  273,  501,  502,  288,  495,  496,
  273,  256,  256,  302,  258,  273,  277,  504,  293,  439,
  256,  296,  297,  256,  511,  445,  256,  288,  273,  318,
  266,  267,  519,  269,  256,  256,  266,  267,  260,  269,
  273,  495,  496,  256,  531,  532,  256,  258,  256,  536,
  260,  538,  273,  266,  267,  292,  293,  293,  266,  267,
  296,  297,  482,  293,  484,  519,  296,  297,  284,  257,
  256,  558,  258,  261,  262,  495,  496,  265,  266,  267,
  277,  269,  270,  271,  504,  374,  284,  574,  377,  284,
  577,  511,  579,  580,  269,  270,  271,  285,  278,  519,
  270,  271,    6,  291,  256,  284,  256,  594,  258,  596,
  597,  531,  532,  600,  266,  267,  536,  269,  538,  606,
  269,  270,  271,  292,  293,  274,  613,  274,  615,   33,
  419,  284,  421,  422,   38,   39,  294,   41,  558,  297,
  278,  293,  278,   47,  296,  297,    6,  259,  260,  293,
  439,  256,  296,  297,  574,  292,  293,  577,  277,  579,
  580,  266,  267,  256,  269,  256,  259,  260,  259,  260,
  292,  293,  330,   33,  594,  284,  596,  597,   38,   39,
  600,   41,  259,  260,  259,  260,  606,   47,  293,  278,
   94,  296,  297,  613,  273,  615,  256,  278,  102,  259,
  260,  273,  292,  293,  259,  260,  495,  496,  366,  100,
  101,  369,  105,  106,  278,  119,  273,  278,  277,  123,
  274,  260,  269,  260,  260,  129,  274,  278,  273,  387,
  519,  257,  273,  277,   94,  261,  262,  263,  278,  265,
  266,  267,  102,  269,  270,  271,  150,  274,  406,  274,
  408,  409,  258,  411,  412,  413,  258,  258,  284,  119,
  284,  284,  166,  123,  278,  291,  274,  278,  284,  129,
  259,  284,  284,  177,  178,  278,  273,  260,  278,  278,
  184,  185,  278,  274,  188,  189,  190,  256,  257,  260,
  150,  278,  261,  262,  263,  199,  265,  266,  267,  257,
  269,  270,  271,  261,  278,  278,  166,  265,  266,  267,
  278,  269,  274,  260,  260,  219,  285,  177,  178,  260,
  260,  258,  291,  284,  184,  185,  278,  285,  188,  189,
  190,  260,  260,  491,  278,  278,  256,  257,  260,  199,
    6,  261,  262,  263,    6,  265,  266,  267,    6,  269,
  270,  271,   24,  145,  470,   89,  122,  515,   -1,  219,
   -1,   -1,   -1,   -1,  284,  269,   -1,  271,  272,  273,
  274,  291,  276,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  286,   -1,  288,  289,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,  262,  263,  302,  265,
  266,  267,   -1,  269,  270,  271,   -1,   -1,   -1,  269,
   -1,  271,  272,  273,  274,   -1,  276,   -1,  284,   -1,
   -1,   -1,  256,  257,   -1,  291,  286,  261,  288,  289,
  264,  265,  266,  267,  268,  269,   -1,   -1,   -1,   -1,
   -1,   -1,  302,   -1,  348,  349,  256,  257,  258,  259,
  284,  261,  262,   -1,  264,  265,  266,  267,  268,  269,
  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,  279,
  280,  281,  282,  283,   -1,  285,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  294,  295,   -1,   -1,  348,  349,
   -1,   -1,   -1,  256,  257,  258,  259,   -1,  261,  262,
  404,  264,  265,  266,  267,  268,  269,  270,  271,   -1,
   -1,  274,   -1,   -1,   -1,  278,  279,  280,  281,  282,
  283,   -1,  285,   -1,   -1,   -1,   -1,   -1,  291,  292,
  293,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,  258,
  259,   -1,  261,  262,  404,  264,  265,  266,  267,  268,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
  279,  280,  281,  282,  283,   -1,  285,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,   -1,   -1,   -1,  256,  257,
  258,  259,   -1,  261,  262,   -1,  264,  265,  266,  267,
  268,  269,  270,  271,   -1,  499,  274,  501,  502,   -1,
  278,  279,  280,  281,  282,  283,   -1,  285,   -1,   -1,
   -1,   -1,   -1,  291,  292,  293,  256,  257,   -1,  259,
   -1,  261,  262,   -1,  264,  265,  266,  267,  268,  269,
  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,  499,
   -1,  501,  502,   -1,   -1,  285,   -1,  256,  257,   -1,
  259,  291,  261,  262,   -1,  264,  265,  266,  267,  268,
  269,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,  278,
   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,  256,  257,
   -1,  259,  291,  261,  262,   -1,  264,  265,  266,  267,
  268,  269,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,
  278,   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,  256,
  257,   -1,  259,  291,  261,  262,   -1,  264,  265,  266,
  267,  268,  269,  270,  271,   -1,   -1,   -1,   -1,   -1,
   -1,  278,   -1,   -1,   -1,   -1,  256,  257,  285,   -1,
   -1,  261,  262,  263,  291,  265,  266,  267,   -1,  269,
  270,  271,   -1,  256,  257,   -1,   -1,   -1,  261,  262,
  263,   -1,  265,  266,  267,  285,  269,  270,  271,   -1,
   -1,  291,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,  285,   -1,   -1,  261,  262,  263,  291,  265,
  266,  267,   -1,  269,  270,  271,   -1,  256,  257,   -1,
   -1,   -1,  261,  262,   -1,   -1,  265,  266,  267,  285,
  269,  270,  271,   -1,   -1,  291,   -1,   -1,   -1,  278,
   -1,   -1,   -1,   -1,  256,  257,  285,   -1,   -1,  261,
  262,   -1,  291,  265,  266,  267,   -1,  269,  270,  271,
   -1,   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,
   -1,  256,  257,  285,   -1,   -1,  261,  262,   -1,  291,
  265,  266,  267,   -1,  269,  270,  271,   -1,   -1,   -1,
   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,  256,  257,
  285,   -1,   -1,  261,  262,   -1,  291,  265,  266,  267,
   -1,  269,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,
  278,   -1,   -1,   -1,   -1,   -1,  257,  285,   -1,   -1,
  261,  262,  263,  291,  265,  266,  267,  257,  269,  270,
  271,  261,  262,  263,   -1,  265,  266,  267,   -1,  269,
  270,  271,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,
  291,   -1,   -1,   -1,  257,  285,   -1,   -1,  261,  262,
  263,  291,  265,  266,  267,  257,  269,  270,  271,  261,
  262,  263,   -1,  265,  266,  267,   -1,  269,  270,  271,
   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,  291,   -1,
   -1,   -1,  257,  285,   -1,   -1,  261,  262,  263,  291,
  265,  266,  267,  257,  269,  270,  271,  261,  262,   -1,
   -1,  265,  266,  267,   -1,  269,  270,  271,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,   -1,   -1,   -1,
   -1,  285,   -1,  256,  257,   -1,   -1,  291,  261,   -1,
  263,  264,  265,  266,  267,  268,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,  268,
  269,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,  285,  263,  264,  265,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,  263,  264,  265,  266,  267,  268,  269,   -1,  285,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,  285,  263,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,
  265,  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
  285,  263,  264,  265,  266,  267,  268,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,
  268,  269,   -1,  285,  257,   -1,   -1,   -1,  261,   -1,
  256,  257,  265,  266,  267,  261,  269,  285,  264,  265,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,  284,  264,  265,  266,  267,  268,  269,   -1,  285,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,   -1,  285,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  285,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,   -1,  285,  264,  265,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  264,  265,  266,  267,  268,  269,   -1,  285,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
   -1,  285,  264,  265,  266,  267,  268,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,  256,  257,  265,  266,  267,
  261,  269,   -1,  285,  265,  266,  267,   -1,  269,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,  256,  257,
   -1,   -1,   -1,  261,  285,  263,  264,  265,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,  263,
  264,  265,  266,  267,  268,  269,  284,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
  284,  263,  264,  265,  266,  267,  268,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,
  268,  269,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,  284,  263,  264,  265,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,  263,  264,  265,  266,  267,  268,  269,  284,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,  284,  263,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,
  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  284,  264,
  265,  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,  284,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,   -1,  284,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  284,  264,
  265,  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,  284,
  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,
  267,  268,  269,  284,  257,   -1,   -1,   -1,  261,   -1,
  263,  264,  265,  266,  267,  268,  269,  257,  285,   -1,
   -1,  261,   -1,  263,  264,  265,  266,  267,  268,  269,
  257,   -1,  285,   -1,  261,   -1,   -1,  264,  265,  266,
  267,  268,  269,  257,   -1,  285,   -1,  261,   -1,   -1,
  264,  265,  266,  267,  268,  269,  257,   -1,  285,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,  257,
   -1,  285,   -1,  261,   -1,   -1,  264,  265,  266,  267,
  268,  269,  257,   -1,  285,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  257,   -1,  285,   -1,  261,
   -1,   -1,  264,  265,  266,  267,  268,  269,  257,   -1,
  285,   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,
  269,  256,  257,  285,   -1,   -1,  261,   -1,  256,  257,
  265,  266,  267,  261,  269,   -1,  285,  265,  266,  267,
   -1,  269,  256,  257,   -1,   -1,   -1,  261,   -1,  284,
  257,  265,  266,  267,  261,  269,  284,  257,  265,  266,
  267,  261,  269,   -1,  257,  265,  266,  267,  261,  269,
  284,   -1,  265,  266,  267,   -1,  269,   -1,  285,   -1,
   -1,   -1,   -1,   -1,   -1,  285,   -1,  257,   -1,   -1,
   -1,  261,  285,  263,  264,  265,  266,  267,  268,  269,
  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,
  267,  268,  269,  257,  284,   -1,   -1,  261,   -1,   -1,
  264,  265,  266,  267,  268,  269,  257,  284,   -1,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,   -1,
  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  284,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=297;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"IF","THEN","ELSE","END_IF","OUT","FUN","RETURN","BREAK","WHEN",
"WHILE","FOR","CONTINUE","ID","I32","F32","PUNTO","PARENT_A","PARENT_C",
"COMILLA","COMA","DOSPUNTOS","PUNTOCOMA","IGUAL","MAYOR","MENOR","MENORIGUAL",
"MAYORIGUAL","LLAVE_A","LLAVE_C","EXCL","DIST","ASIG","CADENA","COMENT","CONST",
"SUMA","RESTA","MULT","DIV","ENTERO","FLOAT",
};
final static String yyrule[] = {
"$accept : program",
"program : nombre_program LLAVE_A bloque_sentencias LLAVE_C",
"program : error",
"nombre_program : ID",
"bloque_sentencias :",
"bloque_sentencias : bloque_sentencias sentencia PUNTOCOMA",
"bloque_sentencias : bloque_sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_decl_datos",
"sentencia_declarativa : sentencia_decl_fun",
"sentencia_declarativa : lista_const",
"tipo : I32",
"tipo : F32",
"sentencia_decl_datos : tipo list_var",
"sentencia_decl_datos : ID list_var",
"list_var : list_var COMA ID",
"list_var : ID",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun error",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo error",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS error",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C error",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro error",
"sentencia_decl_fun : FUN ID PARENT_A parametro error",
"sentencia_decl_fun : FUN ID error",
"sentencia_decl_fun : FUN error",
"cuerpo_fun :",
"cuerpo_fun : cuerpo_fun sentencias_fun PUNTOCOMA",
"cuerpo_fun : cuerpo_fun sentencias_fun error",
"sentencias_fun : sentencia_decl_datos",
"sentencias_fun : sentencia_decl_fun",
"sentencias_fun : lista_const",
"sentencias_fun : asignacion",
"sentencias_fun : llamado_func",
"sentencias_fun : sentencia_if_fun",
"sentencias_fun : sentencia_out",
"sentencias_fun : sentencia_when_fun",
"sentencias_fun : sentencia_for_fun",
"sentencias_fun : sentencia_while_fun",
"sentencias_fun : retorno",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_fun : IF PARENT_A condicion error",
"sentencia_if_fun : IF PARENT_A error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_fun : WHEN PARENT_A condicion error",
"sentencia_when_fun : WHEN PARENT_A error",
"sentencia_when_fun : WHEN error condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion error",
"sentencia_while_fun : WHILE PARENT_A error",
"sentencia_while_fun : WHILE error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for_fun : ID DOSPUNTOS error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for_fun : FOR error",
"cuerpo_fun_break :",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break PUNTOCOMA",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break error",
"sentencias_fun_break : asignacion",
"sentencias_fun_break : sentencia_if_break_fun",
"sentencias_fun_break : sentencia_out",
"sentencias_fun_break : sentencia_when_break_fun",
"sentencias_fun_break : sentencia_while_fun",
"sentencias_fun_break : sentencia_for_fun",
"sentencias_fun_break : CONTINUE tag",
"sentencias_fun_break : BREAK",
"sentencias_fun_break : BREAK cte",
"sentencias_fun_break : retorno",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun_break",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_break_fun : WHEN PARENT_A condicion error",
"sentencia_when_break_fun : WHEN PARENT_A error",
"sentencia_when_break_fun : WHEN error condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break_fun : IF PARENT_A condicion error",
"sentencia_if_break_fun : IF PARENT_A error",
"sentencia_if_break_fun : IF error",
"retorno : RETURN PARENT_A expresion PARENT_C",
"parametro : tipo ID",
"parametro : ID ID",
"lista_const : CONST lista_asignacion",
"lista_asignacion : lista_asignacion COMA asignacion_const",
"lista_asignacion : asignacion_const",
"asignacion_const : ID ASIG cte",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : sentencia_if",
"sentencia_ejecutable : sentencia_out",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : sentencia_for",
"sentencia_ejecutable : sentencia_while",
"sentencia_ejecutable : llamado_func",
"asignacion : ID ASIG expresion",
"expresion : expresion SUMA termino",
"expresion : expresion RESTA termino",
"expresion : termino",
"expresion : llamado_func",
"expresion : sentencia_for ELSE cte",
"expresion : sentencia_while ELSE cte",
"termino : termino MULT factor",
"termino : termino DIV factor",
"termino : factor",
"factor : ID",
"factor : cte",
"cte : ENTERO",
"cte : FLOAT",
"cte : RESTA ENTERO",
"cte : RESTA FLOAT",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if : IF PARENT_A condicion PARENT_C error",
"sentencia_if : IF PARENT_A condicion error",
"sentencia_if : IF PARENT_A error",
"sentencia_if : IF error",
"condicion : expresion comparacion expresion",
"condicion : expresion comparacion error",
"condicion : expresion error expresion",
"comparacion : IGUAL",
"comparacion : MAYOR",
"comparacion : MENOR",
"comparacion : MENORIGUAL",
"comparacion : MAYORIGUAL",
"bloque_ejecutable :",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable PUNTOCOMA",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"sentencia_out : OUT PARENT_A CADENA PARENT_C",
"sentencia_out : OUT PARENT_A CADENA error",
"sentencia_out : OUT PARENT_A error",
"sentencia_out : OUT error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN sentencia_ejecutable",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN error bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C error LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A error PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN error condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C error",
"sentencia_while : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion error",
"sentencia_while : WHILE PARENT_A error",
"sentencia_while : WHILE error",
"bloque_break_continue :",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue PUNTOCOMA",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue",
"ejecutables_break_continue : asignacion",
"ejecutables_break_continue : sentencia_if_break",
"ejecutables_break_continue : sentencia_out",
"ejecutables_break_continue : sentencia_when_break",
"ejecutables_break_continue : sentencia_while",
"ejecutables_break_continue : sentencia_for",
"ejecutables_break_continue : CONTINUE tag",
"ejecutables_break_continue : BREAK",
"ejecutables_break_continue : BREAK cte",
"tag :",
"tag : DOSPUNTOS ID",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN ejecutables_break_continue",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN error bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C error LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A error PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN error condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion error",
"sentencia_if_break : IF PARENT_A error",
"sentencia_if_break : IF error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C ejecutables_break_continue",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C ejecutables_break_continue",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for : ID DOSPUNTOS error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for : FOR error",
"param_real : cte",
"param_real : ID",
"llamado_func : ID PARENT_A param_real COMA param_real PARENT_C",
"llamado_func : ID PARENT_A param_real PARENT_C",
"llamado_func : ID PARENT_A PARENT_C",
"llamado_func : ID PARENT_A param_real COMA param_real error",
"llamado_func : ID PARENT_A param_real error",
"llamado_func : ID PARENT_A error",
};

//#line 945 "gramaticaTomi.y"
private NodoControl raiz;
private List<String> variablesEnElAmbito = new ArrayList<String>();
private Map<String,ArbolSintactico> funciones = new HashMap<String,ArbolSintactico>();
private static List<Integer> linFun = new ArrayList<Integer>();
private List<ArbolSintactico> retornos = new ArrayList<ArbolSintactico>();
private static HashMap<Integer,ArrayList<String>> erroresSintacticos = new HashMap<Integer,ArrayList<String>>();
private static List<NodoFuncion> pilaFunciones = new ArrayList<NodoFuncion>();



void yyerror(String mensaje){
        if (erroresSintacticos.get(AnalizadorLexico.getLineaAct())== null){
                ArrayList<String> mnsj = new ArrayList<String>();
                mnsj.add(mensaje); 
                erroresSintacticos.put(AnalizadorLexico.getLineaAct(), mnsj);
        }
        else{
                erroresSintacticos.get(AnalizadorLexico.getLineaAct()).add(mensaje);
        }
}

static HashMap<Integer,ArrayList<String>> getErroresSintacticos(){
        return erroresSintacticos;
}
void chequearRangoI32(String sval){
  String s = "2147483647";
  long l = Long.valueOf(s);
  if(Long.valueOf(sval) > l){
    yyerror("La constante esta fuera de rango");
  }
}

void chequearRangoI32Neg(String sval){
       String s = "2147483648";
        long l = Long.valueOf(s);
        if(Long.valueOf(sval) > l){
                yyerror("La constante esta fuera de rango");
  } 
}

int yylex() throws IOException{
        Token t = AnalizadorLexico.getToken();
        this.yylval = new ParserVal(t.getLexema());
        //if(t.getId() != -1){
        //  System.out.println("Id: " + t.getId()+" Lexema: " + t.getLexema());
        //}else
        //  System.out.println("TERMINO LA EJECUCION");
        return t.getId();
}
public NodoControl getRaiz(){
	return raiz;
}
public Map<String,ArbolSintactico> getFuncion(){
        return funciones;
}

void actualizarAmbito(String lex, String amb){
        TablaSimbolos.addAtributo(lex,"Ambito",amb);
}

void putVariableEnAmbito(String s){
        this.variablesEnElAmbito.add(s);
}

void limpiarVariablesDeAmbito(){
        this.variablesEnElAmbito = new ArrayList<String>();
}
void removeVarDeAmbito(String s){
        this.variablesEnElAmbito.remove(s);
}
List<String> getListaVariablesDelAmbito(){
        return this.variablesEnElAmbito;
}
public static void addLinFun(int i){
        linFun.add(i);
}
public static Integer getTope(){

        Integer i = linFun.remove(linFun.size()-1);
        return i;
}

public static void addFuncionPila(NodoFuncion n){
        pilaFunciones.add(n);
}

public static NodoFuncion getTopeFuncion(){
        if(!pilaFunciones.isEmpty())
          return pilaFunciones.get(pilaFunciones.size()-1);
        return null;
}
public static void removeTopeFuncion(){
        pilaFunciones.remove(pilaFunciones.size()-1);
}
public static List<NodoFuncion> getPilaFunciones(){
        return pilaFunciones;
}
//#line 1309 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse() throws IOException
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 22 "gramaticaTomi.y"
{raiz = new NodoControl("PROGRAMA",(ArbolSintactico)val_peek(1));
                                                            Integer tope = 1;
                                                                ArrayList<String> listaVariables = new ArrayList<String>();
                                                                for(String s1 : getListaVariablesDelAmbito()){
                                                                        listaVariables.add(s1);
                                                                }
                                                                for (String s : listaVariables){
                                                                        Integer i = (Integer) TablaSimbolos.getAtributo(s,"Linea");
                                                                        if((i >= tope) && (i <=(Integer)AnalizadorLexico.getLineaAct())){
                                                                                String ambito =(String) TablaSimbolos.getAtributo(s,"Ambito");
                                                                                if ( ambito == null){
                                                                                        TablaSimbolos.addAtributo(s,"Ambito","Global");
                                                                                }
                                                                                else{
                                                                                        ambito+="Global";
                                                                                        TablaSimbolos.addAtributo(s,"Ambito",ambito);
                                                                                }
                                                                        }
                                                                }
                                                                NodoFuncion nf = getTopeFuncion();
                                                                if(!(nf==null)){
                                                                        for (NodoVariableUsada var : nf.getListaVariables()){
                                                                                String ambitoDecl = (String)TablaSimbolos.getAtributo(var.getVariable(),"Ambito");
                                                                                String ambitoUsado = var.getAmbito();
                                                                                if(!(ambitoUsado.contains(ambitoDecl))){
                                                                                        yyerror("La variable "+ var.getVariable()+ " no se puede  utilizar en el ambito " + ambitoUsado);
                                                                                }

                                                                        }
                                                                }
                                                                
                                                        }
break;
case 2:
//#line 56 "gramaticaTomi.y"
{yyerror("Hay un error sintactico en la entrada que arrastra errores");}
break;
case 4:
//#line 60 "gramaticaTomi.y"
{yyval=new NodoHoja("Fin");}
break;
case 5:
//#line 61 "gramaticaTomi.y"
{
                                                        yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                                                        }
break;
case 6:
//#line 64 "gramaticaTomi.y"
{
                                yyval = new NodoControl("Error",(ArbolSintactico)null);
                                yyerror("Se esperaba ;");
                        }
break;
case 7:
//#line 69 "gramaticaTomi.y"
{yyval=new NodoHoja("Sentencia Declarativa");}
break;
case 8:
//#line 70 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 10:
//#line 73 "gramaticaTomi.y"
{funciones.put((String)((ArbolSintactico)val_peek(0)).getLex(),(ArbolSintactico)val_peek(0));}
break;
case 12:
//#line 76 "gramaticaTomi.y"
{
            yyval = new NodoHoja("Entero");
            ((NodoHoja)yyval).setTipo("Entero");
           }
break;
case 13:
//#line 80 "gramaticaTomi.y"
{
            yyval = new NodoHoja("Float");
            ((NodoHoja)yyval).setTipo("Float");
           }
break;
case 14:
//#line 85 "gramaticaTomi.y"
{System.out.println("Declaracion de datos");
                                      for (String s : ((NodoTipos)val_peek(0)).getList()){
                                        TablaSimbolos.addAtributo(s,"Tipo",((ArbolSintactico) val_peek(1)).getTipo());
                                        putVariableEnAmbito(s);
                                        TablaSimbolos.addAtributo(s,"Linea",AnalizadorLexico.getLineaAct());
                                        TablaSimbolos.addAtributo(s,"Uso","Variable");
                                      }
                                      yyval = val_peek(0);
                                     }
break;
case 15:
//#line 94 "gramaticaTomi.y"
{yyerror("No esta permitido el tipo declarado");}
break;
case 16:
//#line 96 "gramaticaTomi.y"
{
                            yyval=val_peek(2);
                            ((NodoTipos)yyval).add((String)val_peek(0).sval);
                            }
break;
case 17:
//#line 100 "gramaticaTomi.y"
{
               yyval=new NodoTipos((String)val_peek(0).sval);
              }
break;
case 18:
//#line 104 "gramaticaTomi.y"
{
                                System.out.println("Declaracion de Funcion");
                                yyval = new NodoControl("Funcion:"+val_peek(10).sval,(ArbolSintactico)val_peek(1));
                                TablaSimbolos.addAtributo(val_peek(10).sval,"Uso","NombreFuncion");
                                Integer tope = getTope();
                                
                                for (String s : getListaVariablesDelAmbito()){
                                        Integer i = (Integer) TablaSimbolos.getAtributo(s,"Linea");
                                        
                                        if((i >= tope) && (i <=(Integer)AnalizadorLexico.getLineaAct())){

                                                String ambito = (String)TablaSimbolos.getAtributo(s,"Ambito");
                                                if ( ambito == null){
                                                        TablaSimbolos.addAtributo(s,"Ambito",val_peek(10).sval+":");
                                                }
                                                else{
                                                        ambito+=val_peek(10).sval+":";
                                                        TablaSimbolos.addAtributo(s,"Ambito",ambito);
                                                }
                                        }
                                }
                                
                                ArrayList<ArbolSintactico> r1 = new ArrayList<ArbolSintactico>();
                                String tipo = ((ArbolSintactico)val_peek(3)).getTipo();
                                for (ArbolSintactico a1 : retornos){
                                        r1.add(a1);
                                }
                                for (ArbolSintactico a : r1){
                                        Integer i = a.getLinea();
                                        if( (i>= tope) && (i<=(Integer)AnalizadorLexico.getLineaAct()) ){
                                                if(!(a.getTipo().equals(tipo))  && !(a.getTipo().equals("null"))){
                                                        yyerror("El retorno debe tener el mismo tipo que el de la funcion.");
                                                }
                                                retornos.remove(a);
                                        }
                                }
                                NodoFuncion funcion = getTopeFuncion();
                                removeTopeFuncion();
                                funcion.setNombre(val_peek(10).sval);
                                NodoFuncion sig = getTopeFuncion();
                                for (NodoVariableUsada n : funcion.getListaVariables()){
                                        String ambito = n.getAmbito();
                                        ambito = ambito +":" +funcion.getNombre();
                                        n.setAmbito(ambito);
                                        if(!(sig==null)){
                                                if(sig.getNombre().equals("Global")){
                                                        ambito = ambito + ":" + "Global";
                                                        n.setAmbito(ambito);
                                                }
                                                sig.addVariable(n);
                                        }else{
                                                NodoFuncion global = new NodoFuncion(1);
                                                global.setNombre("Global");
                                                ambito = ambito + ":" + "Global";
                                                n.setAmbito(ambito);
                                                global.addVariable(n);
                                                addFuncionPila(global);
                                                sig = global;
                                        }
                                }
                                

                        }
break;
case 19:
//#line 167 "gramaticaTomi.y"
{
                                System.out.println("Declaracion de Funcion");                                                               
                                yyval = new NodoControl("Funcion:"+val_peek(8).sval,(ArbolSintactico)val_peek(1));
                                TablaSimbolos.addAtributo(val_peek(8).sval,"Uso","NombreFuncion");
                                Integer tope = getTope();  
                                for (String s : getListaVariablesDelAmbito()){
                                        Integer i = (Integer) TablaSimbolos.getAtributo(s,"Linea");
                                        if((i >= tope) && (i <=(Integer)AnalizadorLexico.getLineaAct())){
                                                String ambito = (String)TablaSimbolos.getAtributo(s,"Ambito");
                                                if ( ambito == null){
                                                        TablaSimbolos.addAtributo(s,"Ambito",val_peek(8).sval+":");
                                                }
                                                else{
                                                        ambito+=val_peek(8).sval+":";
                                                        TablaSimbolos.addAtributo(s,"Ambito",ambito);
                                                }
                                        }
                                }
                                ArrayList<ArbolSintactico> r1 = new ArrayList<ArbolSintactico>();
                                String tipo = ((ArbolSintactico)val_peek(3)).getTipo();
                                for (ArbolSintactico a1 : retornos){
                                        r1.add(a1);
                                }
                                for (ArbolSintactico a : r1){
                                        Integer i = a.getLinea();
                                        if( (i>= tope) && (i<=(Integer)AnalizadorLexico.getLineaAct()) ){
                                                if(!(a.getTipo().equals(tipo))  && !(a.getTipo().equals("null"))){
                                                        yyerror("El retorno debe tener el mismo tipo que el de la funcion.");
                                                }
                                                retornos.remove(a);
                                        }
                                }
                                NodoFuncion funcion = getTopeFuncion();
                                removeTopeFuncion();
                                funcion.setNombre(val_peek(8).sval);
                                NodoFuncion sig = getTopeFuncion();
                                for (NodoVariableUsada n : funcion.getListaVariables()){
                                        String ambito = n.getAmbito();
                                        ambito = ambito +":" +funcion.getNombre();
                                        n.setAmbito(ambito);
                                        if(!(sig==null)){
                                                if(sig.getNombre().equals("Global")){
                                                        ambito = ambito + ":" + "Global";
                                                        n.setAmbito(ambito);
                                                }
                                                sig.addVariable(n);
                                        }else{
                                                NodoFuncion global = new NodoFuncion(1);
                                                global.setNombre("Global");
                                                ambito = ambito + ":" + "Global";
                                                n.setAmbito(ambito);
                                                global.addVariable(n);
                                                addFuncionPila(global);
                                                sig = global;
                                        }
                                }
                                }
break;
case 20:
//#line 224 "gramaticaTomi.y"
{
                                System.out.println("Declaracion de Funcion");
                                yyval = new NodoControl("Funcion:"+val_peek(7).sval,(ArbolSintactico)val_peek(1));
                                TablaSimbolos.addAtributo(val_peek(7).sval,"Uso","NombreFuncion");
                                Integer tope = getTope();
                                for (String s : getListaVariablesDelAmbito()){
                                        Integer i = (Integer) TablaSimbolos.getAtributo(s,"Linea");
                                        if((i >= tope) && (i <=(Integer)AnalizadorLexico.getLineaAct())){
                                                String ambito = (String)TablaSimbolos.getAtributo(s,"Ambito");
                                                if ( ambito == null){
                                                        TablaSimbolos.addAtributo(s,"Ambito",val_peek(7).sval+":");
                                                }
                                                else{
                                                        ambito+=val_peek(7).sval+":";
                                                        TablaSimbolos.addAtributo(s,"Ambito",ambito);
                                                }
                                        }
                                }
                                ArrayList<ArbolSintactico> r1 = new ArrayList<ArbolSintactico>();
                                String tipo = ((ArbolSintactico)val_peek(3)).getTipo();
                                for (ArbolSintactico a1 : retornos){
                                        r1.add(a1);
                                }
                                for (ArbolSintactico a : r1){
                                        Integer i = a.getLinea();
                                        if( (i>= tope) && (i<=(Integer)AnalizadorLexico.getLineaAct()) ){
                                                if(!(a.getTipo().equals(tipo))  && !(a.getTipo().equals("null"))){
                                                        yyerror("El retorno debe tener el mismo tipo que el de la funcion.");
                                                }
                                                retornos.remove(a);
                                        }
                                }
                                NodoFuncion funcion = getTopeFuncion();
                                removeTopeFuncion();
                                funcion.setNombre(val_peek(7).sval);
                                NodoFuncion sig = getTopeFuncion();
                                for (NodoVariableUsada n : funcion.getListaVariables()){
                                        String ambito = n.getAmbito();
                                        ambito = ambito +":" +funcion.getNombre();
                                        n.setAmbito(ambito);
                                        if(!(sig==null)){
                                                if(sig.getNombre().equals("Global")){
                                                        ambito = ambito + ":" + "Global";
                                                        n.setAmbito(ambito);
                                                }
                                                sig.addVariable(n);
                                        }else{
                                                NodoFuncion global = new NodoFuncion(1);
                                                global.setNombre("Global");
                                                ambito = ambito + ":" + "Global";
                                                n.setAmbito(ambito);
                                                global.addVariable(n);
                                                addFuncionPila(global);
                                                sig = global;
                                        }
                                }
                                }
break;
case 21:
//#line 281 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 22:
//#line 282 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 23:
//#line 283 "gramaticaTomi.y"
{yyerror("El tipo declarado no esta permitido");}
break;
case 24:
//#line 284 "gramaticaTomi.y"
{yyerror("Se esperaba :");}
break;
case 25:
//#line 285 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 26:
//#line 286 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 27:
//#line 287 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 28:
//#line 288 "gramaticaTomi.y"
{yyerror("Se esperaba un nombre de funcion");}
break;
case 29:
//#line 290 "gramaticaTomi.y"
{yyval=new NodoHoja("Fin");}
break;
case 30:
//#line 291 "gramaticaTomi.y"
{yyval=new NodoComun("Sentencia_Funcion", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));}
break;
case 31:
//#line 292 "gramaticaTomi.y"
{yyerror("Se esperaba ;");}
break;
case 32:
//#line 294 "gramaticaTomi.y"
{yyval=new NodoHoja("Sentencia Declarativa Datos");}
break;
case 33:
//#line 295 "gramaticaTomi.y"
{yyval=new NodoHoja("Sentencia Declarativa Funcion");}
break;
case 34:
//#line 296 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 35:
//#line 297 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 36:
//#line 298 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 37:
//#line 299 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 38:
//#line 300 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 40:
//#line 302 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 41:
//#line 303 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 42:
//#line 304 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 43:
//#line 306 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                                yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(8),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(5)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));
                        }
break;
case 44:
//#line 309 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(6)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));}
break;
case 45:
//#line 311 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(7)),new NodoControl("else fun", (ArbolSintactico)val_peek(3))));}
break;
case 46:
//#line 314 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF FUN", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                }
break;
case 47:
//#line 317 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(6)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));}
break;
case 48:
//#line 320 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF FUN", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );}
break;
case 49:
//#line 322 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 50:
//#line 323 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 51:
//#line 324 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 52:
//#line 325 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 53:
//#line 326 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 54:
//#line 327 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 55:
//#line 328 "gramaticaTomi.y"
{yyerror("Se esperaba then ");}
break;
case 56:
//#line 329 "gramaticaTomi.y"
{yyerror("Se esperaba ) ");}
break;
case 57:
//#line 330 "gramaticaTomi.y"
{yyerror("Se esperaba una condicion ");}
break;
case 58:
//#line 332 "gramaticaTomi.y"
{System.out.println("Sentencia WHEN");}
break;
case 59:
//#line 333 "gramaticaTomi.y"
{System.out.println("Sentencia WHEN");}
break;
case 60:
//#line 334 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 61:
//#line 335 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 62:
//#line 336 "gramaticaTomi.y"
{yyerror("Se esperaba then ");}
break;
case 63:
//#line 337 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 64:
//#line 338 "gramaticaTomi.y"
{yyerror("Se esperaba condicion");}
break;
case 65:
//#line 339 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 66:
//#line 341 "gramaticaTomi.y"
{
    yyval = new NodoComun("While con Etiqueta Funcion",new NodoControl("Etiqueta", new NodoHoja(val_peek(12).sval)) , new NodoComun("While", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                        System.out.println("Sentencia WHILE con etiqueta y con llaves");}
break;
case 67:
//#line 344 "gramaticaTomi.y"
{System.out.println("Sentencia WHILE con etiqueta y sin llaves");
                    yyval = new NodoComun("While con Etiqueta Funcion",new NodoControl("Etiqueta", new NodoHoja(val_peek(10).sval)) , new NodoComun("While", (ArbolSintactico) val_peek(6), new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );}
break;
case 68:
//#line 346 "gramaticaTomi.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 69:
//#line 349 "gramaticaTomi.y"
{
                    yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");
                }
break;
case 70:
//#line 353 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 71:
//#line 354 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 72:
//#line 355 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 73:
//#line 356 "gramaticaTomi.y"
{yyerror("Se esperaba una asignacion");}
break;
case 74:
//#line 357 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 75:
//#line 358 "gramaticaTomi.y"
{yyerror("Se esperaba :");}
break;
case 76:
//#line 359 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 77:
//#line 360 "gramaticaTomi.y"
{yyerror("Se esperaba una condicion");}
break;
case 78:
//#line 361 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 79:
//#line 363 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                                        yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                                                                                                       }
break;
case 80:
//#line 366 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                                        yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                                                                                                       }
break;
case 81:
//#line 369 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                                                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                                                                                                                                }
break;
case 82:
//#line 372 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                                                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                                                                                                                                }
break;
case 83:
//#line 375 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 84:
//#line 376 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 85:
//#line 377 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 86:
//#line 378 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 87:
//#line 379 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 88:
//#line 380 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 89:
//#line 381 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 90:
//#line 382 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 91:
//#line 385 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 92:
//#line 388 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 93:
//#line 391 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 94:
//#line 394 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 95:
//#line 395 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 96:
//#line 396 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 97:
//#line 397 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 98:
//#line 398 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 99:
//#line 399 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 100:
//#line 400 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 103:
//#line 404 "gramaticaTomi.y"
{yyerror("Se esperaba ;");}
break;
case 114:
//#line 418 "gramaticaTomi.y"
{System.out.println("Sentencia WHEN");}
break;
case 115:
//#line 419 "gramaticaTomi.y"
{System.out.println("Sentencia WHEN");}
break;
case 116:
//#line 420 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 117:
//#line 421 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 118:
//#line 422 "gramaticaTomi.y"
{yyerror("Se esperaba then ");}
break;
case 119:
//#line 423 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 120:
//#line 424 "gramaticaTomi.y"
{yyerror("Se esperaba condicion");}
break;
case 121:
//#line 425 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 122:
//#line 428 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 123:
//#line 433 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 124:
//#line 438 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 125:
//#line 443 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 126:
//#line 448 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 127:
//#line 453 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 128:
//#line 457 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 129:
//#line 458 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 130:
//#line 459 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 131:
//#line 460 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 132:
//#line 461 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 133:
//#line 462 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 134:
//#line 463 "gramaticaTomi.y"
{yyerror("Se esperaba then ");}
break;
case 135:
//#line 464 "gramaticaTomi.y"
{yyerror("Se esperaba ) ");}
break;
case 136:
//#line 465 "gramaticaTomi.y"
{yyerror("Se esperaba una condicion ");}
break;
case 137:
//#line 466 "gramaticaTomi.y"
{yyerror("Se esperaba ( ");}
break;
case 138:
//#line 468 "gramaticaTomi.y"
{yyval = new NodoControl("Retorno", (ArbolSintactico)val_peek(1));
                                                NodoHoja retorno = new NodoHoja("Retorno");
                                                retorno.setLinea(AnalizadorLexico.getLineaAct());
                                                retorno.setTipo(((ArbolSintactico)val_peek(1)).getTipo());
                                                retornos.add(retorno);
                                                }
break;
case 140:
//#line 477 "gramaticaTomi.y"
{yyerror("No esta permitido el tipo declarado");}
break;
case 141:
//#line 480 "gramaticaTomi.y"
{System.out.println("Declaracion de Constante/s");}
break;
case 144:
//#line 486 "gramaticaTomi.y"
{ TablaSimbolos.addAtributo(val_peek(2).sval,"Tipo",TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                TablaSimbolos.addAtributo(val_peek(2).sval,"Uso","Constante");
                                NodoFuncion n = getTopeFuncion();
                                if(!(n == null)){
                                        if(!(n.getNombre().equals("Global"))){
                                                NodoVariableUsada var = new NodoVariableUsada(val_peek(2).sval,AnalizadorLexico.getLineaAct());
                                                n.addVariable(var);
                                                NodoVariableUsada var1 = new NodoVariableUsada(val_peek(0).sval,AnalizadorLexico.getLineaAct());
                                                n.addVariable(var1);
                                        }else{
                                                NodoVariableUsada var = new NodoVariableUsada(val_peek(2).sval,AnalizadorLexico.getLineaAct());
                                                var.setAmbito("Global");
                                                n.addVariable(var);
                                                NodoVariableUsada var1 = new NodoVariableUsada(val_peek(0).sval,AnalizadorLexico.getLineaAct());
                                                var1.setAmbito("Global");
                                                n.addVariable(var1);
                                        }
                                }else{
                                        NodoFuncion global = new NodoFuncion(1);
                                        NodoVariableUsada var = new NodoVariableUsada(val_peek(2).sval,AnalizadorLexico.getLineaAct());
                                        var.setAmbito("Global");
                                        global.setNombre("Global");
                                        global.addVariable(var);
                                        NodoVariableUsada var1 = new NodoVariableUsada(val_peek(0).sval,AnalizadorLexico.getLineaAct());
                                        var1.setAmbito("Global");
                                        global.addVariable(var1);
                                        addFuncionPila(global);
                                }
                                }
break;
case 145:
//#line 515 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 146:
//#line 516 "gramaticaTomi.y"
{yyval = val_peek(0); }
break;
case 147:
//#line 517 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 148:
//#line 518 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 149:
//#line 519 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 150:
//#line 520 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 151:
//#line 521 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 152:
//#line 523 "gramaticaTomi.y"
{
                                 System.out.println("Asignacion");
                                 yyval = new NodoComun(val_peek(1).sval,new NodoHoja(val_peek(2).sval), (ArbolSintactico) val_peek(0));
                                 String s1 = (String) (TablaSimbolos.getAtributo((val_peek(2).sval),"Tipo"));
                                 String s2;
                                 if(TablaSimbolos.existeSimbolo(((ArbolSintactico) val_peek(0)).getLex())) {
                                        s2 = (String) (TablaSimbolos.getAtributo((((ArbolSintactico) val_peek(0)).getLex()),"Tipo"));
                                        ((ArbolSintactico)yyval).setTipo(s2);
                                 }else{
                                        s2 = ((ArbolSintactico)val_peek(0)).getTipo();
                                 }
                                 if(s1 == null){
                                        yyerror("Variable no declarada " + val_peek(2).sval);
                                 }else{
                                        if((s2 == "null")){
                                                yyerror("Falta declarar alguna variable para realizar la asignacion.");
                                        }else{
                                                if(!(s1.equals(s2))){
                                                        yyerror("No se puede realizar una asignacion con tipos diferentes.");
                                                }
                                        }
                                        NodoFuncion n = getTopeFuncion();
                                        if(!(n == null)){
                                                if(!(n.getNombre().equals("Global"))){
                                                        NodoVariableUsada var = new NodoVariableUsada(val_peek(2).sval,AnalizadorLexico.getLineaAct());
                                                        n.addVariable(var);
                                                }else{
                                                        NodoVariableUsada var = new NodoVariableUsada(val_peek(2).sval,AnalizadorLexico.getLineaAct());
                                                        var.setAmbito("Global");
                                                        n.addVariable(var);
                                                }
                                        }else{
                                                NodoFuncion global = new NodoFuncion(1);
                                                NodoVariableUsada var = new NodoVariableUsada(val_peek(2).sval,AnalizadorLexico.getLineaAct());
                                                var.setAmbito("Global");
                                                global.setNombre("Global");
                                                global.addVariable(var);
                                                addFuncionPila(global);
                                        }
                                        
                                 }
                                }
break;
case 153:
//#line 566 "gramaticaTomi.y"
{yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                String s1,s2;
                                 s1 = (String) (TablaSimbolos.getAtributo((((ArbolSintactico) val_peek(2)).getLex()),"Tipo"));
                                 if(s1 != null) {
                                        ((ArbolSintactico)yyval).setTipo(s1);     
                                 }else{
                                        if(TablaSimbolos.existeSimbolo(((ArbolSintactico)val_peek(2)).getLex())){
                                                yyerror("Variable no declarada " + ((ArbolSintactico)val_peek(2)).getLex());
                                                ((ArbolSintactico)yyval).setTipo("null"); 
                                        }
                                 }
                                 s2 = (String) (TablaSimbolos.getAtributo((((ArbolSintactico) val_peek(0)).getLex()),"Tipo"));
                                 if(s2 != null) {
                                       ((ArbolSintactico)yyval).setTipo(s2);
                                 }else{
                                        yyerror("Variable no declarada " + ((ArbolSintactico)val_peek(0)).getLex());
                                        ((ArbolSintactico)yyval).setTipo("null"); 
                                 }
                                 
                                 }
break;
case 154:
//#line 586 "gramaticaTomi.y"
{yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                String s1,s2;
                                s1 = (String) (TablaSimbolos.getAtributo((((ArbolSintactico) val_peek(2)).getLex()),"Tipo"));
                                 if(s1 != null) {
                                        ((ArbolSintactico)yyval).setTipo(s1);     
                                 }else{
                                        if(TablaSimbolos.existeSimbolo(((ArbolSintactico)val_peek(2)).getLex())){
                                                yyerror("Variable no declarada " + ((ArbolSintactico)val_peek(2)).getLex());
                                                ((ArbolSintactico)yyval).setTipo("null"); 
                                        }
                                 }
                                 s2 = (String) (TablaSimbolos.getAtributo((((ArbolSintactico) val_peek(0)).getLex()),"Tipo"));
                                 if(s2 != null) {
                                       ((ArbolSintactico)yyval).setTipo(s2);
                                 }else{
                                        yyerror("Variable no declarada " + ((ArbolSintactico)val_peek(0)).getLex());
                                        ((ArbolSintactico)yyval).setTipo("null"); 
                                 }
                                 }
break;
case 155:
//#line 605 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 156:
//#line 606 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 159:
//#line 611 "gramaticaTomi.y"
{yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                String s1,s2;
                                s1 = (String) (TablaSimbolos.getAtributo((((ArbolSintactico) val_peek(2)).getLex()),"Tipo"));
                                 if(s1 != null) {
                                        ((ArbolSintactico)yyval).setTipo(s1);     
                                 }else{
                                        if(TablaSimbolos.existeSimbolo(((ArbolSintactico)val_peek(2)).getLex())){
                                                yyerror("Variable no declarada " + ((ArbolSintactico)val_peek(2)).getLex());
                                                ((ArbolSintactico)yyval).setTipo("null"); 
                                        }
                                 }
                                 s2 = (String) (TablaSimbolos.getAtributo((((ArbolSintactico) val_peek(0)).getLex()),"Tipo"));
                                 if(s2 != null) {
                                       ((ArbolSintactico)yyval).setTipo(s2);
                                 }else{
                                        yyerror("Variable no declarada " + ((ArbolSintactico)val_peek(0)).getLex());
                                        ((ArbolSintactico)yyval).setTipo("null"); 
                                 }
                                 
                                 }
break;
case 160:
//#line 632 "gramaticaTomi.y"
{
                                 yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                 String s1,s2;
                                 s1 = (String) (TablaSimbolos.getAtributo((((ArbolSintactico) val_peek(2)).getLex()),"Tipo"));
                                 if(s1 != null) {
                                        ((ArbolSintactico)yyval).setTipo(s1);     
                                 }else{
                                        if(TablaSimbolos.existeSimbolo(((ArbolSintactico)val_peek(2)).getLex())){
                                                yyerror("Variable no declarada " + ((ArbolSintactico)val_peek(2)).getLex());
                                                ((ArbolSintactico)yyval).setTipo("null"); 
                                        }
                                 }
                                 s2 = (String) (TablaSimbolos.getAtributo((((ArbolSintactico) val_peek(0)).getLex()),"Tipo"));
                                 if(s2 != null) {
                                       ((ArbolSintactico)yyval).setTipo(s2);
                                 }else{
                                        yyerror("Variable no declarada " + ((ArbolSintactico)val_peek(0)).getLex());
                                        ((ArbolSintactico)yyval).setTipo("null"); 
                                 }
                                }
break;
case 161:
//#line 653 "gramaticaTomi.y"
{
                  yyval = val_peek(0);
                 }
break;
case 162:
//#line 657 "gramaticaTomi.y"
{
            yyval = new NodoHoja(val_peek(0).sval);
            String s = (String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo");
            if (s != null){
                ((ArbolSintactico)yyval).setTipo(s);  
                NodoFuncion n = getTopeFuncion();
                if(!(n == null)){
                        if(!(n.getNombre().equals("Global"))){
                                NodoVariableUsada var = new NodoVariableUsada(val_peek(0).sval,AnalizadorLexico.getLineaAct());
                                n.addVariable(var);
                        }else{
                                NodoVariableUsada var = new NodoVariableUsada(val_peek(0).sval,AnalizadorLexico.getLineaAct());
                                var.setAmbito("Global");
                                n.addVariable(var);
                        }
                }else{
                        NodoFuncion global = new NodoFuncion(1);
                        NodoVariableUsada var = new NodoVariableUsada(val_peek(0).sval,AnalizadorLexico.getLineaAct());
                        var.setAmbito("Global");
                        global.setNombre("Global");
                        global.addVariable(var);
                        addFuncionPila(global);
                }
            }else {
                yyerror("Variable no declarada " + val_peek(0).sval);
            }
                                                                      
           }
break;
case 163:
//#line 685 "gramaticaTomi.y"
{
                yyval = new NodoHoja(val_peek(0).sval);
                String s = (String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo");
                if (s != null){
                        ((ArbolSintactico)yyval).setTipo(s);  
                }else {
                        yyerror("Variable no declarada " + val_peek(0).sval);
                }
              }
break;
case 164:
//#line 695 "gramaticaTomi.y"
{  chequearRangoI32(val_peek(0).sval);}
break;
case 165:
//#line 696 "gramaticaTomi.y"
{}
break;
case 166:
//#line 697 "gramaticaTomi.y"
{chequearRangoI32Neg(val_peek(0).sval);}
break;
case 168:
//#line 701 "gramaticaTomi.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");}
break;
case 169:
//#line 704 "gramaticaTomi.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");}
break;
case 170:
//#line 707 "gramaticaTomi.y"
{yyval = new NodoComun("IF", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                                                                                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");}
break;
case 171:
//#line 709 "gramaticaTomi.y"
{yyval = new NodoComun("IF", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                                                                                        System.out.println("Sentencia IF sin corchetes y sin else");}
break;
case 172:
//#line 711 "gramaticaTomi.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF con corchetes y else");}
break;
case 173:
//#line 714 "gramaticaTomi.y"
{
                                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                                        System.out.println("Sentencia IF con corchetes y sin else");}
break;
case 174:
//#line 717 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 175:
//#line 718 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 176:
//#line 719 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 177:
//#line 720 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 178:
//#line 721 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 179:
//#line 722 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 180:
//#line 723 "gramaticaTomi.y"
{yyerror("Se esperaba then ");}
break;
case 181:
//#line 724 "gramaticaTomi.y"
{yyerror("Se esperaba ) ");}
break;
case 182:
//#line 725 "gramaticaTomi.y"
{yyerror("Se esperaba una condicion ");}
break;
case 183:
//#line 726 "gramaticaTomi.y"
{yyerror("Se esperaba ( ");}
break;
case 184:
//#line 731 "gramaticaTomi.y"
{
                        yyval= new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                        if (!((((ArbolSintactico)val_peek(2)).getTipo()).equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                               yyerror("error en la comparacion entre expresiones de distintos tipos");
                        }
                }
break;
case 185:
//#line 737 "gramaticaTomi.y"
{yyerror("Se esperaba otra expresion para comparar.");}
break;
case 186:
//#line 738 "gramaticaTomi.y"
{yyerror("Se esperaba un tipo de comparacion.");}
break;
case 187:
//#line 740 "gramaticaTomi.y"
{yyval= val_peek(0);}
break;
case 188:
//#line 741 "gramaticaTomi.y"
{yyval= val_peek(0);}
break;
case 189:
//#line 742 "gramaticaTomi.y"
{yyval= val_peek(0);}
break;
case 190:
//#line 743 "gramaticaTomi.y"
{yyval= val_peek(0);}
break;
case 191:
//#line 744 "gramaticaTomi.y"
{yyval= val_peek(0);}
break;
case 192:
//#line 746 "gramaticaTomi.y"
{yyval=new NodoHoja("Fin");}
break;
case 193:
//#line 747 "gramaticaTomi.y"
{
                                                                yyval=new NodoComun("Bloque Ejecutable", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                                                                }
break;
case 194:
//#line 750 "gramaticaTomi.y"
{yyerror("Se esperaba ;");}
break;
case 195:
//#line 752 "gramaticaTomi.y"
{
                        yyval = new NodoControl(val_peek(3).sval, (ArbolSintactico) new NodoHoja(val_peek(1).sval));
                        System.out.println("Sentencia OUT");}
break;
case 196:
//#line 755 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 197:
//#line 756 "gramaticaTomi.y"
{yyerror("Se esperaba una CADENA");}
break;
case 198:
//#line 757 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 199:
//#line 759 "gramaticaTomi.y"
{
                        yyval = new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 200:
//#line 762 "gramaticaTomi.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 201:
//#line 765 "gramaticaTomi.y"
{yyerror("Se esperaba } en el when");}
break;
case 202:
//#line 766 "gramaticaTomi.y"
{yyerror("Se esperaba { en el when");}
break;
case 203:
//#line 767 "gramaticaTomi.y"
{yyerror("Se esperaba then en el when");}
break;
case 204:
//#line 768 "gramaticaTomi.y"
{yyerror("Se esperaba condicion en el when");}
break;
case 205:
//#line 769 "gramaticaTomi.y"
{yyerror("Se esperaba ( en el when");}
break;
case 206:
//#line 770 "gramaticaTomi.y"
{yyerror("Se esperaba ) en el when");}
break;
case 207:
//#line 771 "gramaticaTomi.y"
{yyerror("Se esperaba then en el when");}
break;
case 208:
//#line 773 "gramaticaTomi.y"
{
                        yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(12).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                        System.out.println("Sentencia WHILE con etiqueta y con llaves");}
break;
case 209:
//#line 776 "gramaticaTomi.y"
{
                        yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(10).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );
                        System.out.println("Sentencia WHILE con etiqueta y sin llaves");}
break;
case 210:
//#line 779 "gramaticaTomi.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 211:
//#line 782 "gramaticaTomi.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");}
break;
case 212:
//#line 785 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 213:
//#line 786 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 214:
//#line 787 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 215:
//#line 788 "gramaticaTomi.y"
{yyerror("Se esperaba una asignacion");}
break;
case 216:
//#line 789 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 217:
//#line 790 "gramaticaTomi.y"
{yyerror("Se esperaba :");}
break;
case 218:
//#line 791 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 219:
//#line 792 "gramaticaTomi.y"
{yyerror("Se esperaba una condicion");}
break;
case 220:
//#line 793 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 221:
//#line 795 "gramaticaTomi.y"
{yyval=new NodoHoja("Fin");}
break;
case 222:
//#line 796 "gramaticaTomi.y"
{
                yyval = new NodoComun("Bloque Break con Continue",(ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                }
break;
case 223:
//#line 799 "gramaticaTomi.y"
{yyerror("Se esperaba ;");}
break;
case 224:
//#line 802 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 225:
//#line 803 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 226:
//#line 804 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 227:
//#line 805 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 228:
//#line 806 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 229:
//#line 807 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 230:
//#line 808 "gramaticaTomi.y"
{yyval = new NodoControl("Continue",(ArbolSintactico)val_peek(0));}
break;
case 231:
//#line 809 "gramaticaTomi.y"
{yyval = new NodoHoja("Break");}
break;
case 232:
//#line 810 "gramaticaTomi.y"
{yyval = new NodoControl("Break", new NodoHoja(val_peek(0).sval));}
break;
case 233:
//#line 812 "gramaticaTomi.y"
{yyval = new NodoHoja("Fin");}
break;
case 234:
//#line 813 "gramaticaTomi.y"
{yyval = new NodoControl("Tag", new NodoHoja(val_peek(0).sval) );}
break;
case 235:
//#line 815 "gramaticaTomi.y"
{System.out.println("Sentencia WHEN");}
break;
case 236:
//#line 816 "gramaticaTomi.y"
{System.out.println("Sentencia WHEN");}
break;
case 237:
//#line 817 "gramaticaTomi.y"
{yyerror("Se esperaba } en el when");}
break;
case 238:
//#line 818 "gramaticaTomi.y"
{yyerror("Se esperaba { en el when");}
break;
case 239:
//#line 819 "gramaticaTomi.y"
{yyerror("Se esperaba then en el when");}
break;
case 240:
//#line 820 "gramaticaTomi.y"
{yyerror("Se esperaba condicion en el when");}
break;
case 241:
//#line 821 "gramaticaTomi.y"
{yyerror("Se esperaba ( en el when");}
break;
case 242:
//#line 822 "gramaticaTomi.y"
{yyerror("Se esperaba ) en el when");}
break;
case 243:
//#line 823 "gramaticaTomi.y"
{yyerror("Se esperaba then en el when");}
break;
case 244:
//#line 826 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 245:
//#line 831 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 246:
//#line 836 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 247:
//#line 841 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 248:
//#line 846 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 249:
//#line 851 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 250:
//#line 855 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 251:
//#line 856 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 252:
//#line 857 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 253:
//#line 858 "gramaticaTomi.y"
{yyerror("Se esperaba end_if ");}
break;
case 254:
//#line 859 "gramaticaTomi.y"
{yyerror("Se esperaba } ");}
break;
case 255:
//#line 860 "gramaticaTomi.y"
{yyerror("Se esperaba { ");}
break;
case 256:
//#line 861 "gramaticaTomi.y"
{yyerror("Se esperaba then ");}
break;
case 257:
//#line 862 "gramaticaTomi.y"
{yyerror("Se esperaba ) ");}
break;
case 258:
//#line 863 "gramaticaTomi.y"
{yyerror("Se esperaba una condicion ");}
break;
case 259:
//#line 864 "gramaticaTomi.y"
{yyerror("Se esperaba ( ");}
break;
case 260:
//#line 867 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                                        yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                                                                                                       }
break;
case 261:
//#line 870 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                                        yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                                                                                                       }
break;
case 262:
//#line 873 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                                                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                                                                                                                                }
break;
case 263:
//#line 876 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                                                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                                                                                                                                }
break;
case 264:
//#line 879 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 265:
//#line 880 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 266:
//#line 881 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 267:
//#line 882 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 268:
//#line 883 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 269:
//#line 884 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 270:
//#line 885 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 271:
//#line 886 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 272:
//#line 889 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 273:
//#line 892 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 274:
//#line 895 "gramaticaTomi.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 275:
//#line 898 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 276:
//#line 899 "gramaticaTomi.y"
{yyerror("Se esperaba }");}
break;
case 277:
//#line 900 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 278:
//#line 901 "gramaticaTomi.y"
{yyerror("Se esperaba {");}
break;
case 279:
//#line 902 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 280:
//#line 903 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 281:
//#line 904 "gramaticaTomi.y"
{yyerror("Se esperaba (");}
break;
case 282:
//#line 907 "gramaticaTomi.y"
{yyval = new NodoHoja(val_peek(0).sval);}
break;
case 283:
//#line 908 "gramaticaTomi.y"
{yyval=new NodoHoja(val_peek(0).sval);
                        String s = (String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo");
                        if (s != null){
                                
                                ((ArbolSintactico)yyval).setTipo(s);  
                                NodoFuncion n = getTopeFuncion();
                                if(!(n == null)){
                                        if(!(n.getNombre().equals("Global"))){
                                                NodoVariableUsada var = new NodoVariableUsada(val_peek(0).sval,AnalizadorLexico.getLineaAct());
                                                n.addVariable(var);
                                        }else{
                                                NodoVariableUsada var = new NodoVariableUsada(val_peek(0).sval,AnalizadorLexico.getLineaAct());
                                                var.setAmbito("Global");
                                                n.addVariable(var);
                                        }
                                }else{
                                        NodoFuncion global = new NodoFuncion(1);
                                        NodoVariableUsada var = new NodoVariableUsada(val_peek(0).sval,AnalizadorLexico.getLineaAct());
                                        var.setAmbito("Global");
                                        global.setNombre("Global");
                                        global.addVariable(var);
                                        addFuncionPila(global);
                                }
                        }else {
                                
                                yyerror("Variable no declarada " + val_peek(0).sval);
                        }
                     }
break;
case 284:
//#line 937 "gramaticaTomi.y"
{yyval=new NodoComun("llamado funcion",(ArbolSintactico)val_peek(3),(ArbolSintactico)val_peek(1));}
break;
case 285:
//#line 938 "gramaticaTomi.y"
{yyval=new NodoComun("llamado funcion",(ArbolSintactico)val_peek(1),new NodoHoja("Un solo parametro"));}
break;
case 286:
//#line 939 "gramaticaTomi.y"
{yyval=new NodoHoja("llamado funcion sin parametros");}
break;
case 287:
//#line 940 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 288:
//#line 941 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
case 289:
//#line 942 "gramaticaTomi.y"
{yyerror("Se esperaba )");}
break;
//#line 3085 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 * @throws IOException
 */
public void run() throws IOException
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
