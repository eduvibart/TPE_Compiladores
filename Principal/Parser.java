//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package Principal;
import java.io.IOException;
import AnalizadorLexico.AnalizadorLexico;
import AnalizadorLexico.Token;
import GeneracionCodigoIntermedio.*;
//#line 23 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IF=257;
public final static short THEN=258;
public final static short ELSE=259;
public final static short END_IF=260;
public final static short OUT=261;
public final static short FUN=262;
public final static short RETURN=263;
public final static short BREAK=264;
public final static short WHEN=265;
public final static short WHILE=266;
public final static short FOR=267;
public final static short CONTINUE=268;
public final static short ID=269;
public final static short I32=270;
public final static short F32=271;
public final static short PUNTO=272;
public final static short PARENT_A=273;
public final static short PARENT_C=274;
public final static short COMILLA=275;
public final static short COMA=276;
public final static short DOSPUNTOS=277;
public final static short PUNTOCOMA=278;
public final static short IGUAL=279;
public final static short MAYOR=280;
public final static short MENOR=281;
public final static short MENORIGUAL=282;
public final static short MAYORIGUAL=283;
public final static short LLAVE_A=284;
public final static short LLAVE_C=285;
public final static short EXCL=286;
public final static short DIST=287;
public final static short ASIG=288;
public final static short CADENA=289;
public final static short COMENT=290;
public final static short CONST=291;
public final static short SUMA=292;
public final static short RESTA=293;
public final static short MULT=294;
public final static short DIV=295;
public final static short ENTERO=296;
public final static short FLOAT=297;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    1,    2,    2,    2,    3,    3,    4,    4,
    4,    9,    9,    6,    6,   10,   10,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,   12,   12,
   12,   13,   13,   13,   13,   13,   13,   13,   13,   13,
   13,   13,   16,   16,   16,   16,   16,   16,   16,   16,
   16,   16,   16,   16,   18,   18,   18,   18,   18,   18,
   18,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   19,   19,   19,   19,   19,   19,   23,   23,
   23,   25,   25,   25,   25,   25,   25,   25,   25,   25,
   25,   26,   26,   26,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   21,   11,   11,    8,   30,   30,    5,
    5,    5,    5,    5,    5,    5,   14,   29,   29,   29,
   29,   29,   29,   35,   35,   35,   36,   36,   28,   28,
   28,   28,   31,   31,   31,   31,   31,   31,   31,   31,
   31,   31,   31,   31,   31,   31,   31,   31,   22,   22,
   22,   38,   38,   38,   38,   38,   37,   37,   37,   17,
   17,   17,   17,   32,   32,   32,   32,   32,   32,   32,
   32,   34,   34,   34,   34,   34,   34,   34,   34,   34,
   34,   34,   39,   39,   39,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   27,   27,   41,   41,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   24,   24,
   42,   42,   15,   15,   15,   15,   15,   15,
};
final static short yylen[] = {                            2,
    4,    1,    1,    0,    3,    2,    1,    1,    1,    1,
    1,    1,    1,    2,    2,    3,    1,   12,   10,    9,
   12,   10,    9,    8,    7,    5,    3,    2,    0,    3,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,   13,    9,   13,   12,   10,    9,    8,    6,
    5,    4,    3,    2,    8,    8,    6,    5,    4,    3,
    8,   13,   11,   11,    9,    8,    7,    6,    5,    4,
    3,    2,    9,    7,    7,    5,    4,    2,    0,    3,
    3,    1,    1,    1,    1,    1,    1,    2,    1,    2,
    1,   13,    9,   13,   12,   10,    9,    8,    6,    5,
    4,    3,    2,    4,    2,    2,    2,    3,    1,    1,
    1,    1,    1,    1,    1,    1,    3,    3,    3,    1,
    1,    3,    3,    3,    3,    1,    1,    1,    1,    1,
    2,    2,   12,   12,   11,    8,   13,    9,   13,   12,
   10,    9,    8,    6,    5,    4,    3,    2,    3,    3,
    3,    1,    1,    1,    1,    1,    0,    3,    2,    4,
    4,    3,    2,    8,    8,    8,    8,    8,    8,    7,
    5,   13,   11,   11,    9,    8,    7,    6,    5,    4,
    3,    2,    0,    3,    2,    1,    1,    1,    1,    1,
    1,    2,    1,    2,    0,    2,   13,    9,    9,    9,
    7,    6,    3,    7,    7,    5,    4,    2,    6,    6,
    1,    1,    6,    4,    3,    6,    4,    3,
};
final static short yydefred[] = {                         0,
    2,    3,    0,    0,    4,    0,    0,    0,    0,    0,
    0,    0,    0,   12,   13,    1,    0,    0,    7,    8,
    9,   10,   11,    0,  110,  116,  112,  111,  113,  114,
  115,  148,    0,  163,    0,   28,    0,    0,    0,  182,
    0,  208,    0,   17,    0,    0,    0,    0,    0,  109,
    0,    5,    0,  147,    0,    0,  129,  130,  121,    0,
  128,    0,    0,    0,    0,  126,  162,    0,   27,    0,
    0,    0,    0,  181,    0,    0,    0,  218,  212,  215,
  211,    0,  203,    0,    0,    0,    0,    0,  131,  132,
  146,    0,    0,  152,  153,  154,  155,  156,    0,    0,
    0,    0,    0,    0,    0,  161,  160,    0,    0,    0,
    0,    0,    0,    0,    0,  180,    0,    0,  207,    0,
  217,  214,    0,    0,    0,   16,  108,  145,    0,    0,
  127,    0,    0,  150,    0,  122,  123,  124,  125,  106,
    0,  105,   26,    0,    0,    0,    0,    4,    0,    0,
  179,    0,    0,  206,  183,    0,    0,    0,  144,    0,
  157,    0,    0,    0,    0,    4,    4,    0,    4,    4,
    4,  178,    0,    0,    0,  216,  213,    0,  202,    0,
    0,    0,   29,    0,   25,    0,    0,    0,  170,    0,
    0,    0,  177,    0,    0,    0,  205,    0,    0,    0,
    0,  204,  186,  188,  189,  191,  190,    0,  187,    0,
  201,  183,  143,    0,    0,    0,  136,    0,   29,   24,
    0,  169,  168,  167,  166,  165,  164,  176,    0,  209,
  210,    0,  194,    0,  192,  184,    0,    0,  142,    0,
  138,  158,  157,    0,    0,    0,    0,    0,    0,    0,
   20,   32,   33,   34,    0,   35,   36,   37,   38,   39,
   40,   41,   42,    0,   23,    0,  175,  183,    0,  196,
    0,  200,  199,  141,  157,    0,    0,    0,   54,    0,
    0,    0,    0,   72,    0,   78,    0,    0,   30,   19,
   22,   29,    0,    0,    0,    0,    0,    0,  135,   53,
    0,    0,    0,   60,    0,   71,    0,    0,    0,    0,
    0,  174,  173,    0,  183,  140,    0,  134,  133,   52,
    0,  104,    0,   59,    0,   70,    0,   77,    0,    0,
    0,   21,   18,  183,    0,  139,  137,   51,    0,    0,
   58,    0,   69,    0,   76,   79,    0,    0,    0,  172,
   50,   29,   29,   57,   29,   68,    0,    0,    0,    0,
    0,    0,    0,    0,   67,    0,   75,    0,    0,    0,
    0,   74,   82,   84,   85,   87,   86,   91,    0,   83,
    0,   79,    0,  198,   49,    0,   61,   56,   55,   66,
    0,  103,    0,   90,   88,   81,   80,    0,    0,  183,
   48,    0,   44,   65,   79,  102,    0,    0,   73,    0,
   47,   29,    0,  101,    0,    0,    0,    0,   64,   63,
  100,    0,   79,  197,   46,    0,   99,   79,    0,   45,
   43,    0,   62,   98,    0,   97,    0,   93,   96,   79,
    0,   95,    0,   94,   92,
};
final static short yydgoto[] = {                          3,
    4,    6,   18,   19,   20,   21,   22,   23,   24,   48,
  111,  218,  255,   25,   59,  258,   27,  260,  261,  262,
  263,   60,  358,   77,  379,  380,  235,   61,   62,   51,
   28,   29,   63,   64,   65,   66,  181,  101,  175,  208,
  209,   82,
};
final static short yysindex[] = {                      -239,
    0,    0,    0, -188,    0,  744,  -54,   60,  -57,  116,
  119,  138,  -51,    0,    0,    0, -159, -142,    0,    0,
    0,    0,    0, -130,    0,    0,    0,    0,    0,    0,
    0,    0, -182,    0, -245,    0,  150,   -9,   33,    0,
  107,    0, -159,    0, -231,  269,   -9, -114,  -73,    0,
  -30,    0, -114,    0,  221, -281,    0,    0,    0, -184,
    0,  209, -113,  -18, -214,    0,    0, -104,    0,  -31,
   -8,   27, -217,    0,  -22,   44,    9,    0,    0,    0,
    0,  -81,    0,   55,   70, -115,   83, -159,    0,    0,
    0,   13,   -9,    0,    0,    0,    0,    0, -194, -194,
  121,  241,  241, -194, -194,    0,    0,  110,   72,  126,
  -46,  147,  162,  156,  163,    0, -216,   -9,    0, -238,
    0,    0, -163,   -9, -159,    0,    0,    0, 1115, -115,
    0, -214, -214,    0, -115,    0,    0,    0,    0,    0,
  115,    0,    0,  178,  381,  184,  187,    0,  216, -237,
    0,  171,  245,    0,    0,   30,  258,   34,    0,   19,
    0,  282,  279,  115,   68,    0,    0,  755,    0,    0,
    0,    0,   11,  228,  965,    0,    0,  321,    0, -206,
   54,  356,    0,  317,    0, -180,  782,  793,    0,  820,
  831,  641,    0,   79,  241,  241,    0,  339,  241,  362,
  151,    0,    0,    0,    0,    0,    0,  363,    0,  375,
    0,    0,    0,  316,  391,  928,    0,  679,    0,    0,
  128,    0,    0,    0,    0,    0,    0,    0, -167,    0,
    0,   -9,    0,  401,    0,    0, -159,  980,    0, 1122,
    0,    0,    0,  394,  177,  403,  191,  197,  202,  -44,
    0,    0,    0,    0,  396,    0,    0,    0,    0,    0,
    0,    0,    0,  706,    0, -155,    0,    0,  404,    0,
  405,    0,    0,    0,    0,  399, -233,  420,    0,  141,
   -9,   -9,  176,    0,  185,    0, -159,  281,    0,    0,
    0,    0,  995,  423,  402, 1025,  427,  431,    0,    0,
   80,  -11,  409,    0,   81,    0,   82,   88,  429,  430,
  536,    0,    0,  416,    0,    0,  247,    0,    0,    0,
  205,    0,  443,    0,  218,    0, -129,    0, -144,   -9,
 -159,    0,    0,    0, 1075,    0,    0,    0, -143,  421,
    0, -125,    0,  206,    0,    0,  433,  434, 1088,    0,
    0,    0,    0,    0,    0,    0,  179,  862,  432,  426,
  377,  553,  717,  580,    0,   94,    0,  211,  241,  362,
  172,    0,    0,    0,    0,    0,    0,    0, -236,    0,
  441,    0,  439,    0,    0,  318,    0,    0,    0,    0,
 -103,    0,  190,    0,    0,    0,    0, -159, 1039,    0,
    0,  -90,    0,    0,    0,    0,  135,  453,    0, 1101,
    0,    0,  876,    0,  237,  444,  469,  597,    0,    0,
    0,  -67,    0,    0,    0,  305,    0,    0, 1062,    0,
    0,  899,    0,    0,  354,    0,  -60,    0,    0,    0,
  913,    0,  343,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  668,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  455,    0,    0,
  482,    0,  509,    0,  248,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  288,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  397,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, -219,
    0,  326,  364,    0,   39,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  428,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  935,  950,
    0,    0,    0,    0,    0,    0,    0, 1010,    0,    0,
    0,    0,    0,    0, 1032,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  624,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -135, -134,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,  200,    0,    0,  -98, -213, -195, -191,  -41,  680,
  570, -198,    0,  -17,   -5,    0,   67, -350, -304, -294,
 -168,  -32, -370, -122,    0,    0,  360,  -35,  -45,    0,
    0, -161,   16,   87,  486,  519, -230,    0, -208,    0,
    0,  608,
};
final static int YYTABLESIZE=1406;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         50,
   26,   86,  158,  238,  252,   71,   73,  375,   75,   81,
   67,  399,  277,  205,   89,   90,    1,  154,  170,  396,
  264,   30,  253,    7,   78,   76,  254,    8,  110,    2,
  162,   10,   11,   12,  413,  160,  151,   79,  151,  151,
  114,  397,   80,   68,  296,  155,  171,  130,  375,  211,
  252,  298,  429,  376,  151,  135,  115,  432,  151,  293,
  152,   56,  375,  377,   57,   58,  136,  137,  253,  441,
  127,   91,  254,   54,  131,  220,  205,  212,  375,  104,
  105,  375,  215,   11,   12,  153,   55,   81,  267,   92,
  375,  157,   31,  311,  376,    5,  221,  252,   56,  163,
  291,   57,   58,  110,  377,   79,  335,   76,  376,   49,
   56,  345,  351,   57,   58,  253,  268,  244,  377,  254,
   89,  195,  184,   26,  376,  349,  343,  376,  292,   56,
  354,  205,   57,   58,  377,   52,  376,  377,   44,  346,
  352,  276,   89,  195,   30,  102,  377,  344,  252,  252,
  252,  106,  404,  362,  363,  194,  364,  203,  355,  230,
  231,   87,   26,  233,  308,  411,  253,  253,  253,  107,
  254,  254,  254,  205,  121,   26,   99,  100,  215,  266,
  405,   26,   26,   30,   26,   26,   26,  205,  427,  378,
  206,  410,  122,  412,  123,  439,   30,  215,   36,  269,
  256,   32,   30,   30,  252,   30,   30,   30,  348,  143,
   26,   37,  257,  418,   47,   31,  428,   44,   33,  271,
  203,   45,  253,  440,   44,   46,  254,  144,   45,  145,
  378,   30,  288,  116,   26,  302,   47,  108,   14,   15,
  103,  204,  109,   47,  378,   88,  256,  301,  205,  303,
  305,  117,  307,  206,   31,   30,   11,   12,  257,   55,
  378,  207,  322,  378,  119,  112,  193,   31,  128,   76,
  129,   26,  378,   31,   31,  203,   31,   31,   31,   49,
   99,  100,  120,   56,  259,  176,   57,   58,   72,  179,
   26,   45,   30,  256,  149,   46,  149,  347,   11,   12,
  113,   55,   31,  177,  204,  257,   47,  180,  206,  213,
    7,   30,  149,   76,    8,   34,  149,  203,   10,   11,
   12,  118,  160,  185,  207,   56,   31,  124,   57,   58,
  259,  203,   35,  394,  228,  320,  324,  326,  214,  366,
  373,  186,  125,  328,  256,  256,  256,  168,  141,  390,
  206,  126,  229,  321,  325,  327,  257,  257,  257,  204,
  407,  329,   74,   31,  206,  187,  188,  391,  190,  191,
  192,   38,   11,   12,   40,   55,  134,  259,  140,  207,
  408,  373,   31,  265,   14,   15,   11,   12,   39,   55,
  414,   41,  203,   42,  142,  373,  300,   14,   15,   56,
  256,  204,   57,   58,  146,   69,   11,   12,  415,   55,
   43,  373,  257,   56,  373,  204,   57,   58,  149,  147,
  150,  207,   70,  373,  374,  206,  172,   46,  259,  259,
  259,  304,  279,   56,  365,  207,   57,   58,   47,  148,
  306,   11,   12,  173,   55,  406,  282,   49,  288,  280,
   11,   12,  284,   55,  164,   11,   12,  286,   55,   47,
  338,  356,  339,  283,   93,  374,  392,  166,   56,  285,
  167,   57,   58,  341,  287,  342,  204,   56,  357,  374,
   57,   58,   56,  393,  259,   57,   58,   94,   95,   96,
   97,   98,  421,   45,  422,  374,  207,   46,  374,  169,
   99,  100,  336,  127,  127,  127,  337,  374,  127,  127,
  127,  127,  127,  127,  127,  127,  127,  127,  127,  195,
  196,  127,  174,  127,   83,  127,  127,  127,  127,  127,
  127,  178,  127,   56,   84,   85,   57,   58,  127,  127,
  127,  127,  127,  120,  120,  120,  309,  310,  120,  120,
  120,  120,  120,  120,  120,  120,  120,  120,  120,  182,
  430,  120,  183,  120,  431,  120,  120,  120,  120,  120,
  120,  239,  120,  401,  240,  241,  402,  403,  120,  120,
  120,  118,  118,  118,  132,  133,  118,  118,  118,  118,
  118,  118,  118,  118,  118,  118,  118,  210,  444,  118,
  219,  118,  445,  118,  118,  118,  118,  118,  118,  436,
  118,  232,  437,  438,  216,  217,  118,  118,  118,  119,
  119,  119,  138,  139,  119,  119,  119,  119,  119,  119,
  119,  119,  119,  119,  119,  383,  384,  119,  234,  119,
  236,  119,  119,  119,  119,  119,  119,  237,  119,  108,
   14,   15,  117,  117,  119,  119,  119,  117,  117,  117,
  117,  117,  117,  117,  117,  117,  117,  117,  242,  270,
  117,  278,  117,  289,  117,  281,  297,  294,  295,  299,
  314,  117,  323,  171,  171,  315,  318,  117,  171,  171,
  319,  171,  171,  171,  171,  171,  171,  171,  171,  334,
  340,  330,  331,   53,  353,  171,  359,  360,  381,  382,
   15,   15,  171,  398,  165,   15,   15,   15,  171,   15,
   15,   15,  400,   15,   15,   15,  416,  423,  424,  395,
  156,    0,   15,    0,    0,    0,    0,  107,  107,   15,
    0,    0,  107,  107,  107,   15,  107,  107,  107,    0,
  107,  107,  107,    0,    0,    0,    0,    0,    0,  107,
    0,    0,    0,    0,   14,   14,  107,    0,    0,   14,
   14,   14,  107,   14,   14,   14,    0,   14,   14,   14,
    0,    0,    0,    0,    0,    0,   14,    0,    0,    0,
    0,  332,  245,   14,    0,    0,    8,    9,  246,   14,
  247,  248,  249,    0,  250,   14,   15,    0,  385,  245,
    0,    0,    0,    8,    9,  246,    0,  247,  248,  249,
  333,  250,   14,   15,    0,    0,   17,    0,    0,    0,
    0,    0,    0,    0,    0,  388,  245,  386,    0,    0,
    8,    9,  246,   17,  247,  248,  249,    0,  250,   14,
   15,    0,  425,  245,    0,    0,    0,    8,    9,  246,
    0,  247,  248,  249,  389,  250,   14,   15,    0,    0,
   17,    0,    0,    0,    0,    0,    0,    0,    0,   31,
   31,  426,    0,    0,   31,   31,   31,   17,   31,   31,
   31,    0,   31,   31,   31,    0,  226,    7,    0,    0,
    0,    8,    9,    0,    0,   10,   11,   12,   31,   13,
   14,   15,    0,    0,   31,    0,    0,    0,    0,    0,
    0,    0,    0,    6,    6,  227,    0,    0,    6,    6,
    0,   17,    6,    6,    6,  245,    6,    6,    6,    8,
    9,  246,    0,  247,  248,  249,    0,  250,   14,   15,
    0,    0,    6,    0,    0,    0,    0,    0,    6,    0,
    0,    0,  245,  251,    0,    0,    8,    9,  246,   17,
  247,  248,  249,  245,  250,   14,   15,    8,    9,  246,
    0,  247,  248,  249,    0,  250,   14,   15,    0,    0,
  290,    0,    0,    0,    0,    0,   17,    0,    0,    0,
    7,  387,    0,    0,    8,    9,    0,   17,   10,   11,
   12,    7,   13,   14,   15,    8,    9,    0,    0,   10,
   11,   12,    0,   13,   14,   15,    0,    0,   16,    0,
    0,    0,    0,    0,   17,    0,    0,    0,    7,  189,
    0,    0,    8,    9,    0,   17,   10,   11,   12,    7,
   13,   14,   15,    8,    9,    0,    0,   10,   11,   12,
    0,   13,   14,   15,    0,    0,  222,    0,    0,    0,
    0,    0,   17,    0,    0,    0,    7,  223,    0,    0,
    8,    9,    0,   17,   10,   11,   12,    7,   13,   14,
   15,    8,    9,    0,    0,   10,   11,   12,    0,   13,
   14,   15,    0,    0,  224,    0,    0,    0,    0,    0,
   17,    0,    0,    0,    0,  225,    0,  367,  368,    0,
    0,   17,    8,    0,  246,  369,  247,  248,  249,  370,
  371,  419,  368,    0,    0,    0,    8,    0,  246,  369,
  247,  248,  249,  370,  371,    0,  372,    0,    0,    0,
    0,    0,    0,    0,  434,  368,    0,    0,    0,    8,
  420,  246,  369,  247,  248,  249,  370,  371,  442,  368,
    0,    0,    0,    8,    0,  246,  369,  247,  248,  249,
  370,  371,    0,  435,    7,    0,    0,    0,    8,    0,
  193,  193,   10,   11,   12,  193,  160,  443,  193,  193,
  193,  193,  193,  193,    0,  195,  195,    0,    0,    0,
  195,  243,  193,  195,  195,  195,  195,  195,  195,  193,
  197,  198,    0,    0,    0,    8,    0,  195,  199,   10,
   11,   12,  200,  201,  195,  272,  198,    0,    0,    0,
    8,    0,    0,  199,   10,   11,   12,  200,  201,  202,
  312,  198,    0,    0,    0,    8,    0,    0,  199,   10,
   11,   12,  200,  201,  273,  185,  185,    0,    0,    0,
  185,    0,    0,  185,  185,  185,  185,  185,  185,  313,
  316,    7,    0,    0,    0,    8,    0,  159,  159,   10,
   11,   12,  159,  160,  185,  368,  159,  159,  159,    8,
  159,  246,  369,  247,  248,  249,  370,  371,    0,  317,
    0,    0,    0,    0,    0,    0,  159,    0,  368,    0,
    0,    0,    8,  409,  246,  369,  247,  248,  249,  370,
  371,  198,    0,    0,    0,    8,    0,    0,  199,   10,
   11,   12,  200,  201,  198,    0,  433,    0,    8,    0,
    0,  199,   10,   11,   12,  200,  201,  198,    0,  350,
    0,    8,    0,    0,  199,   10,   11,   12,  200,  201,
  159,    7,  361,    0,    0,    8,    0,  274,    7,   10,
   11,   12,    8,  160,    0,  417,   10,   11,   12,    0,
  160,    0,    0,    0,    0,    0,    0,    0,  161,    0,
    0,    0,    0,    0,    0,  275,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         17,
    6,   47,  125,  212,  218,   38,   39,  358,   41,   45,
  256,  382,  243,  175,  296,  297,  256,  256,  256,  256,
  219,    6,  218,  257,  256,   43,  218,  261,   70,  269,
  129,  265,  266,  267,  405,  269,  256,  269,  258,  256,
  258,  278,  274,  289,  275,  284,  284,   93,  399,  256,
  264,  285,  423,  358,  274,  101,  274,  428,  278,  268,
  277,  293,  413,  358,  296,  297,  102,  103,  264,  440,
   88,  256,  264,  256,  269,  256,  238,  284,  429,  294,
  295,  432,  181,  266,  267,  118,  269,  123,  256,  274,
  441,  124,    6,  292,  399,  284,  277,  311,  293,  141,
  256,  296,  297,  145,  399,  269,  315,  125,  413,  269,
  293,  256,  256,  296,  297,  311,  284,  216,  413,  311,
  256,  256,  164,  129,  429,  334,  256,  432,  284,  293,
  256,  293,  296,  297,  429,  278,  441,  432,  269,  284,
  284,  240,  278,  278,  129,  259,  441,  277,  362,  363,
  364,  256,  256,  352,  353,  173,  355,  175,  284,  195,
  196,  276,  168,  199,  287,  256,  362,  363,  364,  274,
  362,  363,  364,  335,  256,  181,  292,  293,  277,  221,
  284,  187,  188,  168,  190,  191,  192,  349,  256,  358,
  175,  400,  274,  284,  276,  256,  181,  296,  256,  232,
  218,  256,  187,  188,  418,  190,  191,  192,  331,  256,
  216,  269,  218,  412,  288,  129,  284,  269,  273,  237,
  238,  273,  418,  284,  269,  277,  418,  274,  273,  276,
  399,  216,  277,  256,  240,  281,  288,  269,  270,  271,
  259,  175,  274,  288,  413,  276,  264,  280,  410,  282,
  283,  274,  285,  238,  168,  240,  266,  267,  264,  269,
  429,  175,  274,  432,  256,  274,  256,  181,  256,  287,
  258,  277,  441,  187,  188,  293,  190,  191,  192,  269,
  292,  293,  274,  293,  218,  256,  296,  297,  256,  256,
  296,  273,  277,  311,  256,  277,  258,  330,  266,  267,
  274,  269,  216,  274,  238,  311,  288,  274,  293,  256,
  257,  296,  274,  331,  261,  256,  278,  335,  265,  266,
  267,  278,  269,  256,  238,  293,  240,  273,  296,  297,
  264,  349,  273,  369,  256,  256,  256,  256,  285,  357,
  358,  274,  273,  256,  362,  363,  364,  148,  277,  256,
  335,  269,  274,  274,  274,  274,  362,  363,  364,  293,
  393,  274,  256,  277,  349,  166,  167,  274,  169,  170,
  171,  256,  266,  267,  256,  269,  256,  311,  269,  293,
  398,  399,  296,  256,  270,  271,  266,  267,  273,  269,
  256,  273,  410,  256,  269,  413,  256,  270,  271,  293,
  418,  335,  296,  297,  258,  256,  266,  267,  274,  269,
  273,  429,  418,  293,  432,  349,  296,  297,  256,  258,
  258,  335,  273,  441,  358,  410,  256,  277,  362,  363,
  364,  256,  256,  293,  256,  349,  296,  297,  288,  284,
  256,  266,  267,  273,  269,  256,  256,  269,  277,  273,
  266,  267,  256,  269,  277,  266,  267,  256,  269,  288,
  256,  256,  258,  273,  256,  399,  256,  284,  293,  273,
  284,  296,  297,  256,  273,  258,  410,  293,  273,  413,
  296,  297,  293,  273,  418,  296,  297,  279,  280,  281,
  282,  283,  256,  273,  258,  429,  410,  277,  432,  284,
  292,  293,  256,  256,  257,  258,  260,  441,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  292,
  293,  274,  278,  276,  256,  278,  279,  280,  281,  282,
  283,  274,  285,  293,  266,  267,  296,  297,  291,  292,
  293,  294,  295,  256,  257,  258,  266,  267,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  270,  271,  278,
  256,  274,  284,  276,  260,  278,  279,  280,  281,  282,
  283,  256,  285,  256,  259,  260,  259,  260,  291,  292,
  293,  256,  257,  258,   99,  100,  261,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,  277,  256,  274,
  284,  276,  260,  278,  279,  280,  281,  282,  283,  256,
  285,  273,  259,  260,  259,  260,  291,  292,  293,  256,
  257,  258,  104,  105,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  270,  271,  259,  260,  274,  277,  276,
  278,  278,  279,  280,  281,  282,  283,  273,  285,  269,
  270,  271,  256,  257,  291,  292,  293,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  270,  271,  278,  269,
  274,  278,  276,  278,  278,  273,  278,  274,  274,  260,
  258,  285,  274,  256,  257,  284,  260,  291,  261,  262,
  260,  264,  265,  266,  267,  268,  269,  270,  271,  284,
  258,  273,  273,   24,  284,  278,  274,  274,  277,  284,
  256,  257,  285,  273,  145,  261,  262,  263,  291,  265,
  266,  267,  284,  269,  270,  271,  274,  284,  260,  370,
  123,   -1,  278,   -1,   -1,   -1,   -1,  256,  257,  285,
   -1,   -1,  261,  262,  263,  291,  265,  266,  267,   -1,
  269,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,  278,
   -1,   -1,   -1,   -1,  256,  257,  285,   -1,   -1,  261,
  262,  263,  291,  265,  266,  267,   -1,  269,  270,  271,
   -1,   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,
   -1,  256,  257,  285,   -1,   -1,  261,  262,  263,  291,
  265,  266,  267,   -1,  269,  270,  271,   -1,  256,  257,
   -1,   -1,   -1,  261,  262,  263,   -1,  265,  266,  267,
  285,  269,  270,  271,   -1,   -1,  291,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  257,  285,   -1,   -1,
  261,  262,  263,  291,  265,  266,  267,   -1,  269,  270,
  271,   -1,  256,  257,   -1,   -1,   -1,  261,  262,  263,
   -1,  265,  266,  267,  285,  269,  270,  271,   -1,   -1,
  291,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  257,  285,   -1,   -1,  261,  262,  263,  291,  265,  266,
  267,   -1,  269,  270,  271,   -1,  256,  257,   -1,   -1,
   -1,  261,  262,   -1,   -1,  265,  266,  267,  285,  269,
  270,  271,   -1,   -1,  291,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,  285,   -1,   -1,  261,  262,
   -1,  291,  265,  266,  267,  257,  269,  270,  271,  261,
  262,  263,   -1,  265,  266,  267,   -1,  269,  270,  271,
   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,  291,   -1,
   -1,   -1,  257,  285,   -1,   -1,  261,  262,  263,  291,
  265,  266,  267,  257,  269,  270,  271,  261,  262,  263,
   -1,  265,  266,  267,   -1,  269,  270,  271,   -1,   -1,
  285,   -1,   -1,   -1,   -1,   -1,  291,   -1,   -1,   -1,
  257,  285,   -1,   -1,  261,  262,   -1,  291,  265,  266,
  267,  257,  269,  270,  271,  261,  262,   -1,   -1,  265,
  266,  267,   -1,  269,  270,  271,   -1,   -1,  285,   -1,
   -1,   -1,   -1,   -1,  291,   -1,   -1,   -1,  257,  285,
   -1,   -1,  261,  262,   -1,  291,  265,  266,  267,  257,
  269,  270,  271,  261,  262,   -1,   -1,  265,  266,  267,
   -1,  269,  270,  271,   -1,   -1,  285,   -1,   -1,   -1,
   -1,   -1,  291,   -1,   -1,   -1,  257,  285,   -1,   -1,
  261,  262,   -1,  291,  265,  266,  267,  257,  269,  270,
  271,  261,  262,   -1,   -1,  265,  266,  267,   -1,  269,
  270,  271,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,
  291,   -1,   -1,   -1,   -1,  285,   -1,  256,  257,   -1,
   -1,  291,  261,   -1,  263,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,
  265,  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
  285,  263,  264,  265,  266,  267,  268,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,
  268,  269,   -1,  285,  257,   -1,   -1,   -1,  261,   -1,
  256,  257,  265,  266,  267,  261,  269,  285,  264,  265,
  266,  267,  268,  269,   -1,  256,  257,   -1,   -1,   -1,
  261,  284,  278,  264,  265,  266,  267,  268,  269,  285,
  256,  257,   -1,   -1,   -1,  261,   -1,  278,  264,  265,
  266,  267,  268,  269,  285,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,  285,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,  285,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,  285,
  256,  257,   -1,   -1,   -1,  261,   -1,  256,  257,  265,
  266,  267,  261,  269,  285,  257,  265,  266,  267,  261,
  269,  263,  264,  265,  266,  267,  268,  269,   -1,  285,
   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,  257,   -1,
   -1,   -1,  261,  285,  263,  264,  265,  266,  267,  268,
  269,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,  257,   -1,  285,   -1,  261,   -1,
   -1,  264,  265,  266,  267,  268,  269,  257,   -1,  285,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
  256,  257,  285,   -1,   -1,  261,   -1,  256,  257,  265,
  266,  267,  261,  269,   -1,  285,  265,  266,  267,   -1,
  269,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,   -1,
   -1,   -1,   -1,   -1,   -1,  284,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=297;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"IF","THEN","ELSE","END_IF","OUT","FUN","RETURN","BREAK","WHEN",
"WHILE","FOR","CONTINUE","ID","I32","F32","PUNTO","PARENT_A","PARENT_C",
"COMILLA","COMA","DOSPUNTOS","PUNTOCOMA","IGUAL","MAYOR","MENOR","MENORIGUAL",
"MAYORIGUAL","LLAVE_A","LLAVE_C","EXCL","DIST","ASIG","CADENA","COMENT","CONST",
"SUMA","RESTA","MULT","DIV","ENTERO","FLOAT",
};
final static String yyrule[] = {
"$accept : program",
"program : nombre_program LLAVE_A bloque_sentencias LLAVE_C",
"program : error",
"nombre_program : ID",
"bloque_sentencias :",
"bloque_sentencias : bloque_sentencias sentencia PUNTOCOMA",
"bloque_sentencias : bloque_sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_decl_datos",
"sentencia_declarativa : sentencia_decl_fun",
"sentencia_declarativa : lista_const",
"tipo : I32",
"tipo : F32",
"sentencia_decl_datos : tipo list_var",
"sentencia_decl_datos : ID list_var",
"list_var : list_var COMA ID",
"list_var : ID",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun error",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo error",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS error",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C error",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro error",
"sentencia_decl_fun : FUN ID PARENT_A parametro error",
"sentencia_decl_fun : FUN ID error",
"sentencia_decl_fun : FUN error",
"cuerpo_fun :",
"cuerpo_fun : cuerpo_fun sentencias_fun PUNTOCOMA",
"cuerpo_fun : cuerpo_fun sentencias_fun",
"sentencias_fun : sentencia_decl_datos",
"sentencias_fun : sentencia_decl_fun",
"sentencias_fun : lista_const",
"sentencias_fun : asignacion",
"sentencias_fun : llamado_func",
"sentencias_fun : sentencia_if_fun",
"sentencias_fun : sentencia_out",
"sentencias_fun : sentencia_when_fun",
"sentencias_fun : sentencia_for_fun",
"sentencias_fun : sentencia_while_fun",
"sentencias_fun : retorno",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_fun : IF PARENT_A condicion error",
"sentencia_if_fun : IF PARENT_A error",
"sentencia_if_fun : IF error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_fun : WHEN PARENT_A condicion error",
"sentencia_when_fun : WHEN PARENT_A error",
"sentencia_when_fun : WHEN error condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion error",
"sentencia_while_fun : WHILE PARENT_A error",
"sentencia_while_fun : WHILE error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A encabezado_for PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A encabezado_for PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A encabezado_for PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A encabezado_for PARENT_C error",
"sentencia_for_fun : FOR PARENT_A encabezado_for error",
"sentencia_for_fun : FOR error",
"cuerpo_fun_break :",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break PUNTOCOMA",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break error",
"sentencias_fun_break : asignacion",
"sentencias_fun_break : sentencia_if_break_fun",
"sentencias_fun_break : sentencia_out",
"sentencias_fun_break : sentencia_when_fun",
"sentencias_fun_break : sentencia_while_fun",
"sentencias_fun_break : sentencia_for_fun",
"sentencias_fun_break : CONTINUE tag",
"sentencias_fun_break : BREAK",
"sentencias_fun_break : BREAK cte",
"sentencias_fun_break : retorno",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break_fun : IF PARENT_A condicion error",
"sentencia_if_break_fun : IF PARENT_A error",
"sentencia_if_break_fun : IF error",
"retorno : RETURN PARENT_A expresion PARENT_C",
"parametro : tipo ID",
"parametro : ID ID",
"lista_const : CONST lista_asignacion",
"lista_asignacion : lista_asignacion COMA asignacion",
"lista_asignacion : asignacion",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : sentencia_if",
"sentencia_ejecutable : sentencia_out",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : sentencia_for",
"sentencia_ejecutable : sentencia_while",
"sentencia_ejecutable : llamado_func",
"asignacion : ID ASIG expresion",
"expresion : expresion SUMA termino",
"expresion : expresion RESTA termino",
"expresion : termino",
"expresion : llamado_func",
"expresion : sentencia_for ELSE cte",
"expresion : sentencia_while ELSE cte",
"termino : termino MULT factor",
"termino : termino DIV factor",
"termino : factor",
"factor : ID",
"factor : cte",
"cte : ENTERO",
"cte : FLOAT",
"cte : RESTA ENTERO",
"cte : RESTA FLOAT",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if : IF PARENT_A condicion PARENT_C error",
"sentencia_if : IF PARENT_A condicion error",
"sentencia_if : IF PARENT_A error",
"sentencia_if : IF error",
"condicion : expresion comparacion expresion",
"condicion : expresion comparacion error",
"condicion : expresion error expresion",
"comparacion : IGUAL",
"comparacion : MAYOR",
"comparacion : MENOR",
"comparacion : MENORIGUAL",
"comparacion : MAYORIGUAL",
"bloque_ejecutable :",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable PUNTOCOMA",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"sentencia_out : OUT PARENT_A CADENA PARENT_C",
"sentencia_out : OUT PARENT_A CADENA error",
"sentencia_out : OUT PARENT_A error",
"sentencia_out : OUT error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sentencias LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sentencias error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN error bloque_sentencias LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C error LLAVE_A bloque_sentencias LLAVE_C",
"sentencia_when : WHEN PARENT_A error PARENT_C THEN LLAVE_A bloque_sentencias LLAVE_C",
"sentencia_when : WHEN error condicion PARENT_C THEN LLAVE_A bloque_sentencias LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion THEN LLAVE_A bloque_sentencias LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C error",
"sentencia_while : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion error",
"sentencia_while : WHILE PARENT_A error",
"sentencia_while : WHILE error",
"bloque_break_continue :",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue PUNTOCOMA",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue",
"ejecutables_break_continue : asignacion",
"ejecutables_break_continue : sentencia_if_break",
"ejecutables_break_continue : sentencia_out",
"ejecutables_break_continue : sentencia_when",
"ejecutables_break_continue : sentencia_while",
"ejecutables_break_continue : sentencia_for",
"ejecutables_break_continue : CONTINUE tag",
"ejecutables_break_continue : BREAK",
"ejecutables_break_continue : BREAK cte",
"tag :",
"tag : DOSPUNTOS ID",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A encabezado_for PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A encabezado_for PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A encabezado_for PARENT_C error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A encabezado_for error",
"sentencia_for : ID DOSPUNTOS error",
"sentencia_for : FOR PARENT_A encabezado_for PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A encabezado_for PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A encabezado_for PARENT_C error",
"sentencia_for : FOR PARENT_A encabezado_for error",
"sentencia_for : FOR error",
"encabezado_for : asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte",
"encabezado_for : asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte",
"param_real : cte",
"param_real : ID",
"llamado_func : ID PARENT_A param_real COMA param_real PARENT_C",
"llamado_func : ID PARENT_A param_real PARENT_C",
"llamado_func : ID PARENT_A PARENT_C",
"llamado_func : ID PARENT_A param_real COMA param_real error",
"llamado_func : ID PARENT_A param_real error",
"llamado_func : ID PARENT_A error",
};

//#line 357 ".\gramatica.y"
private NodoControl raiz;
private String ambitoActual = "Global";

void yyerror(String mensaje){
        System.out.println("Linea"+ AnalizadorLexico.getLineaAct() +"| Error sintactico: " + mensaje);
}
void chequearRangoI32(String sval){
  String s = "2147483647";
  long l = Long.valueOf(s);
  if(Long.valueOf(sval) > l){
    yyerror("La constante esta fuera de rango");
  }
}

int yylex() throws IOException{
        Token t = AnalizadorLexico.getToken();
        this.yylval = new ParserVal(t.getLexema());
        //if(t.getId() != -1){
        //  System.out.println("Id: " + t.getId()+" Lexema: " + t.getLexema());
        //}else
        //  System.out.println("TERMINO LA EJECUCION");
        return t.getId();
}
public NodoControl getRaiz(){
	return raiz;
}
//#line 906 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse() throws IOException
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 ".\gramatica.y"
{raiz = new NodoControl("PROGRAMA",(ArbolSintactico)val_peek(1));
                                                            System.out.println("Raiz---$$ : " + yyval + " $1 :" + val_peek(3));
                                                            System.out.println("Raiz : " + raiz);
                                                           }
break;
case 2:
//#line 21 ".\gramatica.y"
{yyerror("Hay un error sintactico en la entrada que arrastra errores");}
break;
case 4:
//#line 25 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 5:
//#line 26 ".\gramatica.y"
{
                                                        yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                                                        System.out.println("BloqueSentencia---$$ : " + yyval + " $1 :" + val_peek(2));
                                                        }
break;
case 6:
//#line 30 ".\gramatica.y"
{yyerror("Se esperaba ;");}
break;
case 7:
//#line 32 ".\gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa");}
break;
case 8:
//#line 33 ".\gramatica.y"
{yyval = val_peek(0);
                                System.out.println("Sentencia---$$ : " + yyval + " $1 :" + val_peek(0));
                                }
break;
case 12:
//#line 41 ".\gramatica.y"
{
            yyval = new NodoHoja("Entero");
            ((NodoHoja)yyval).setTipo("Entero");
           }
break;
case 13:
//#line 45 ".\gramatica.y"
{
            yyval = new NodoHoja("Float");
            ((NodoHoja)yyval).setTipo("Float");
           }
break;
case 14:
//#line 50 ".\gramatica.y"
{System.out.println("Declaracion de datos");
                                      for (String s : ((NodoTipos)val_peek(0)).getList()){
                                        TablaSimbolos.addAtributo(s,"Tipo",((ArbolSintactico) val_peek(1)).getTipo());
                                        TablaSimbolos.addAtributo(s,"Ambito",ambitoActual);
                                      }
                                     }
break;
case 15:
//#line 56 ".\gramatica.y"
{yyerror("No esta permitido el tipo declarado");}
break;
case 16:
//#line 58 ".\gramatica.y"
{
                            yyval=val_peek(2);
                            ((NodoTipos)yyval).add((String)val_peek(0).sval);
                            }
break;
case 17:
//#line 62 ".\gramatica.y"
{
               yyval=new NodoTipos((String)val_peek(0).sval);
              }
break;
case 18:
//#line 66 ".\gramatica.y"
{System.out.println("Declaracion de Funcion");}
break;
case 19:
//#line 67 ".\gramatica.y"
{System.out.println("Declaracion de Funcion");}
break;
case 20:
//#line 68 ".\gramatica.y"
{System.out.println("Declaracion de Funcion");}
break;
case 21:
//#line 69 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 22:
//#line 70 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 23:
//#line 71 ".\gramatica.y"
{yyerror("El tipo declarado no esta permitido");}
break;
case 24:
//#line 72 ".\gramatica.y"
{yyerror("Se esperaba :");}
break;
case 25:
//#line 73 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 26:
//#line 74 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 27:
//#line 75 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 28:
//#line 76 ".\gramatica.y"
{yyerror("Se esperaba un nombre de funcion");}
break;
case 31:
//#line 80 ".\gramatica.y"
{System.out.println("Se esperaba ;");}
break;
case 43:
//#line 94 ".\gramatica.y"
{System.out.println("Sentencia IF");}
break;
case 44:
//#line 95 ".\gramatica.y"
{System.out.println("Sentencia IF");}
break;
case 45:
//#line 96 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 46:
//#line 97 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 47:
//#line 98 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 48:
//#line 99 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 49:
//#line 100 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 50:
//#line 101 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 51:
//#line 102 ".\gramatica.y"
{yyerror("Se esperaba then ");}
break;
case 52:
//#line 103 ".\gramatica.y"
{yyerror("Se esperaba ) ");}
break;
case 53:
//#line 104 ".\gramatica.y"
{yyerror("Se esperaba una condicion ");}
break;
case 54:
//#line 105 ".\gramatica.y"
{yyerror("Se esperaba ( ");}
break;
case 55:
//#line 107 ".\gramatica.y"
{System.out.println("Sentencia WHEN");}
break;
case 56:
//#line 108 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 57:
//#line 109 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 58:
//#line 110 ".\gramatica.y"
{yyerror("Se esperaba then ");}
break;
case 59:
//#line 111 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 60:
//#line 112 ".\gramatica.y"
{yyerror("Se esperaba condicion");}
break;
case 61:
//#line 113 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 62:
//#line 115 ".\gramatica.y"
{System.out.println("Sentencia WHILE");}
break;
case 63:
//#line 116 ".\gramatica.y"
{System.out.println("Sentencia WHILE");}
break;
case 64:
//#line 117 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 65:
//#line 118 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 66:
//#line 119 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 67:
//#line 120 ".\gramatica.y"
{yyerror("Se esperaba una asignacion");}
break;
case 68:
//#line 121 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 69:
//#line 122 ".\gramatica.y"
{yyerror("Se esperaba :");}
break;
case 70:
//#line 123 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 71:
//#line 124 ".\gramatica.y"
{yyerror("Se esperaba una condicion");}
break;
case 72:
//#line 125 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 73:
//#line 127 ".\gramatica.y"
{System.out.println("Sentencia FOR");}
break;
case 74:
//#line 128 ".\gramatica.y"
{System.out.println("Sentencia FOR");}
break;
case 75:
//#line 129 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 76:
//#line 130 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 77:
//#line 131 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 78:
//#line 132 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 81:
//#line 136 ".\gramatica.y"
{yyerror("Se esperaba ;");}
break;
case 92:
//#line 150 ".\gramatica.y"
{System.out.println("Sentencia IF");}
break;
case 93:
//#line 151 ".\gramatica.y"
{System.out.println("Sentencia IF");}
break;
case 94:
//#line 152 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 95:
//#line 153 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 96:
//#line 154 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 97:
//#line 155 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 98:
//#line 156 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 99:
//#line 157 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 100:
//#line 158 ".\gramatica.y"
{yyerror("Se esperaba then ");}
break;
case 101:
//#line 159 ".\gramatica.y"
{yyerror("Se esperaba ) ");}
break;
case 102:
//#line 160 ".\gramatica.y"
{yyerror("Se esperaba una condicion ");}
break;
case 103:
//#line 161 ".\gramatica.y"
{yyerror("Se esperaba ( ");}
break;
case 106:
//#line 166 ".\gramatica.y"
{yyerror("No esta permitido el tipo declarado");}
break;
case 107:
//#line 169 ".\gramatica.y"
{System.out.println("Declaracion de Constante/s");}
break;
case 110:
//#line 174 ".\gramatica.y"
{yyval = val_peek(0);
                                   System.out.println("SentenciaEjecutable---$$ : " + yyval + " $1 :" + val_peek(0));
                                  }
break;
case 111:
//#line 177 ".\gramatica.y"
{
                        yyval = val_peek(0);
                        }
break;
case 117:
//#line 186 ".\gramatica.y"
{
                                 System.out.println("Asignacion");
                                 yyval = new NodoComun(val_peek(1).sval,new NodoHoja(val_peek(2).sval), (ArbolSintactico) val_peek(0));
                                 System.out.println("Asignacino---$$ : " + yyval + " $1 :" + val_peek(2)+" $3 :" + val_peek(0));
                                }
break;
case 118:
//#line 192 ".\gramatica.y"
{
                                   yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                   System.out.println("ExpresionSuma---$$ : " + yyval + " $1 :" + val_peek(2)+" $3 :" + val_peek(0));
                                  }
break;
case 119:
//#line 196 ".\gramatica.y"
{
                                   yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                   System.out.println("ExpresionResta---$$ : " + yyval + " $1 :" + val_peek(2)+" $3 :" + val_peek(0));
                                  }
break;
case 120:
//#line 200 ".\gramatica.y"
{
                   yyval = val_peek(0);
                   System.out.println("ExpresionTermino---$$ : " + yyval + " $1 :" + val_peek(0));
                  }
break;
case 124:
//#line 209 ".\gramatica.y"
{
                                yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                System.out.println("TerminoMult---$$ : " + yyval + " $1 :" + val_peek(2)+" $3 :" + val_peek(0));
                                }
break;
case 125:
//#line 214 ".\gramatica.y"
{
                                 yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                 System.out.println("TerminoDiv---$$ : " + yyval + " $1 :" + val_peek(2)+" $3 :" + val_peek(0));
                                }
break;
case 126:
//#line 219 ".\gramatica.y"
{
                  yyval = val_peek(0);
                  System.out.println("TerminoFactor---$$ : " + yyval + " $1 :" + val_peek(0));
                 }
break;
case 127:
//#line 224 ".\gramatica.y"
{
            yyval = new NodoHoja(val_peek(0).sval);
            System.out.println("FactorID----$$ : " + yyval + " $1 :" + val_peek(0));                                                             
           }
break;
case 128:
//#line 228 ".\gramatica.y"
{
               yyval = new NodoHoja(val_peek(0).sval);
               System.out.println("factorCTE---$$ : " + yyval + " $1 :" + val_peek(0));
              }
break;
case 129:
//#line 233 ".\gramatica.y"
{  chequearRangoI32(val_peek(0).sval);}
break;
case 133:
//#line 239 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");}
break;
case 134:
//#line 242 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");}
break;
case 135:
//#line 245 ".\gramatica.y"
{yyval = new NodoComun("IF", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                                                                                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");}
break;
case 136:
//#line 247 ".\gramatica.y"
{yyval = new NodoComun("IF", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                                                                                        System.out.println("Sentencia IF sin corchetes y sin else");}
break;
case 137:
//#line 249 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF con corchetes y else");}
break;
case 138:
//#line 252 ".\gramatica.y"
{
                                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                                        System.out.println("Sentencia IF con corchetes y sin else");}
break;
case 139:
//#line 255 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 140:
//#line 256 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 141:
//#line 257 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 142:
//#line 258 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 143:
//#line 259 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 144:
//#line 260 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 145:
//#line 261 ".\gramatica.y"
{yyerror("Se esperaba then ");}
break;
case 146:
//#line 262 ".\gramatica.y"
{yyerror("Se esperaba ) ");}
break;
case 147:
//#line 263 ".\gramatica.y"
{yyerror("Se esperaba una condicion ");}
break;
case 148:
//#line 264 ".\gramatica.y"
{yyerror("Se esperaba ( ");}
break;
case 149:
//#line 267 ".\gramatica.y"
{yyval= new NodoControl("Condicion", new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0)));}
break;
case 150:
//#line 268 ".\gramatica.y"
{yyerror("Se esperaba otra expresion para comparar.");}
break;
case 151:
//#line 269 ".\gramatica.y"
{yyerror("Se esperaba un tipo de comparacion.");}
break;
case 152:
//#line 271 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 153:
//#line 272 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 154:
//#line 273 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 155:
//#line 274 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 156:
//#line 275 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 157:
//#line 277 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 158:
//#line 278 ".\gramatica.y"
{
                                                                yyval=new NodoComun("Bloque Ejecutable", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                                                                }
break;
case 159:
//#line 281 ".\gramatica.y"
{yyerror("Se esperaba ;");}
break;
case 160:
//#line 283 ".\gramatica.y"
{System.out.println("Sentencia OUT");}
break;
case 161:
//#line 284 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 162:
//#line 285 ".\gramatica.y"
{yyerror("Se esperaba una CADENA");}
break;
case 163:
//#line 286 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 164:
//#line 288 ".\gramatica.y"
{System.out.println("Sentencia WHEN");}
break;
case 165:
//#line 289 ".\gramatica.y"
{yyerror("Se esperaba } en el when");}
break;
case 166:
//#line 290 ".\gramatica.y"
{yyerror("Se esperaba { en el when");}
break;
case 167:
//#line 291 ".\gramatica.y"
{yyerror("Se esperaba then en el when");}
break;
case 168:
//#line 292 ".\gramatica.y"
{yyerror("Se esperaba condicion en el when");}
break;
case 169:
//#line 293 ".\gramatica.y"
{yyerror("Se esperaba ( en el when");}
break;
case 170:
//#line 294 ".\gramatica.y"
{yyerror("Se esperaba ) en el when");}
break;
case 171:
//#line 295 ".\gramatica.y"
{yyerror("Se esperaba then en el when");}
break;
case 172:
//#line 297 ".\gramatica.y"
{System.out.println("Sentencia WHILE");}
break;
case 173:
//#line 298 ".\gramatica.y"
{System.out.println("Sentencia WHILE");}
break;
case 174:
//#line 299 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 175:
//#line 300 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 176:
//#line 301 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 177:
//#line 302 ".\gramatica.y"
{yyerror("Se esperaba una asignacion");}
break;
case 178:
//#line 303 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 179:
//#line 304 ".\gramatica.y"
{yyerror("Se esperaba :");}
break;
case 180:
//#line 305 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 181:
//#line 306 ".\gramatica.y"
{yyerror("Se esperaba una condicion");}
break;
case 182:
//#line 307 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 185:
//#line 311 ".\gramatica.y"
{yyerror("Se esperaba ;");}
break;
case 197:
//#line 328 ".\gramatica.y"
{System.out.println("Sentencia IF");}
break;
case 198:
//#line 329 ".\gramatica.y"
{System.out.println("Sentencia IF");}
break;
case 199:
//#line 331 ".\gramatica.y"
{System.out.println("Sentencia FOR");}
break;
case 200:
//#line 332 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 201:
//#line 333 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 202:
//#line 334 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 203:
//#line 335 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 204:
//#line 336 ".\gramatica.y"
{System.out.println("Sentencia FOR");}
break;
case 205:
//#line 337 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 206:
//#line 338 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 207:
//#line 339 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 208:
//#line 340 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 216:
//#line 352 ".\gramatica.y"
{System.out.println("Se esperaba )");}
break;
case 217:
//#line 353 ".\gramatica.y"
{System.out.println("Se esperaba )");}
break;
case 218:
//#line 354 ".\gramatica.y"
{System.out.println("Se esperaba )");}
break;
//#line 1739 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 * @throws IOException
 */
public void run() throws IOException
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
