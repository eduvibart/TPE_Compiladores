//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package Principal;
import java.io.IOException;
import AnalizadorLexico.AnalizadorLexico;
import AnalizadorLexico.Token;
import GeneracionCodigoIntermedio.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

//#line 28 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IF=257;
public final static short THEN=258;
public final static short ELSE=259;
public final static short END_IF=260;
public final static short OUT=261;
public final static short FUN=262;
public final static short RETURN=263;
public final static short BREAK=264;
public final static short WHEN=265;
public final static short WHILE=266;
public final static short FOR=267;
public final static short CONTINUE=268;
public final static short ID=269;
public final static short I32=270;
public final static short F32=271;
public final static short PUNTO=272;
public final static short PARENT_A=273;
public final static short PARENT_C=274;
public final static short COMILLA=275;
public final static short COMA=276;
public final static short DOSPUNTOS=277;
public final static short PUNTOCOMA=278;
public final static short IGUAL=279;
public final static short MAYOR=280;
public final static short MENOR=281;
public final static short MENORIGUAL=282;
public final static short MAYORIGUAL=283;
public final static short LLAVE_A=284;
public final static short LLAVE_C=285;
public final static short EXCL=286;
public final static short DIST=287;
public final static short ASIG=288;
public final static short CADENA=289;
public final static short COMENT=290;
public final static short CONST=291;
public final static short SUMA=292;
public final static short RESTA=293;
public final static short MULT=294;
public final static short DIV=295;
public final static short ENTERO=296;
public final static short FLOAT=297;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    1,    2,    2,    2,    3,    3,    4,    4,
    4,    9,    9,    6,    6,   10,   10,   11,   11,   11,
   11,   11,   11,   11,   11,   11,    7,    7,    7,   13,
   13,   13,   14,   14,   14,   14,   14,   14,   14,   14,
   14,   14,   14,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   19,   19,
   19,   19,   19,   19,   19,   19,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   24,   24,   24,   25,   25,   25,   25,   25,   25,   25,
   25,   25,   25,   28,   28,   28,   28,   28,   28,   28,
   28,   27,   27,   27,   27,   27,   27,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   22,   12,   12,
    8,   31,   31,   32,    5,    5,    5,    5,    5,    5,
    5,   15,   30,   30,   30,   30,   30,   30,   37,   37,
   37,   38,   38,   26,   26,   26,   26,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   23,   23,   23,   40,   40,   40,   40,
   40,   39,   39,   39,   18,   18,   18,   18,   34,   34,
   34,   34,   34,   34,   34,   34,   34,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   41,   41,   41,   42,   42,   42,   42,   42,   42,   42,
   42,   42,   29,   29,   44,   44,   44,   44,   44,   44,
   44,   44,   44,   43,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   43,   43,   43,   43,   43,   43,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   45,   45,   16,   16,   16,   16,   16,   16,
};
final static short yylen[] = {                            2,
    4,    1,    1,    0,    3,    2,    1,    1,    1,    1,
    1,    1,    1,    2,    2,    3,    1,    9,    7,    6,
    9,    8,    7,    5,    3,    2,    4,    4,    2,    0,
    3,    3,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,   11,   13,   13,    8,   13,    9,   13,
   12,   10,    9,    8,    6,    5,    4,    3,    8,    6,
    8,    6,    5,    4,    3,    8,   13,   11,   13,   11,
   10,    9,    8,    7,    6,    5,    4,   11,    9,   11,
    9,    8,    7,    6,    5,    4,    3,    2,   14,   14,
   12,   12,   14,   14,   12,   12,   11,   11,    3,   12,
   12,   10,   10,   12,   12,   10,   10,    9,    9,    2,
    0,    3,    3,    1,    1,    1,    1,    1,    1,    2,
    1,    2,    1,    8,    6,    8,    6,    5,    4,    3,
    8,   11,   12,   12,    8,   13,    9,   13,   12,   10,
    9,    8,    6,    5,    4,    3,    2,    4,    2,    2,
    2,    3,    1,    3,    1,    1,    1,    1,    1,    1,
    1,    3,    3,    3,    1,    1,    3,    3,    3,    3,
    1,    1,    1,    1,    1,    2,    2,   12,   12,   11,
    8,   13,    9,   13,   12,   10,    9,    8,    6,    5,
    4,    3,    2,    3,    3,    3,    1,    1,    1,    1,
    1,    0,    3,    2,    4,    4,    3,    2,    8,    6,
    8,    8,    8,    8,    8,    7,    5,   13,   11,   11,
    9,   11,    9,    8,    7,    6,    5,    4,    3,    2,
    0,    3,    2,    1,    1,    1,    1,    1,    1,    2,
    1,    2,    0,    2,    8,    6,    8,    8,    8,    8,
    8,    7,    5,   12,   12,   11,    8,   13,    9,   13,
   12,   10,    9,    8,    6,    5,    4,    3,    2,   14,
   14,   12,   12,   14,   14,   12,   12,   11,   11,    3,
   12,   12,   10,   10,   12,   12,   10,   10,    9,    9,
    2,    1,    1,    6,    4,    3,    6,    4,    3,
};
final static short yydefred[] = {                         0,
    2,    3,    0,    0,    4,    0,    0,    0,    0,    0,
    0,    0,    0,   12,   13,    1,    0,    0,    7,    8,
    9,   10,   11,    0,    0,  155,  161,  157,  156,  158,
  159,  160,  193,    0,  208,    0,   26,    0,    0,    0,
  230,    0,  291,    0,   17,    0,    0,    0,    0,    0,
    0,  153,    5,    0,   29,   30,  192,    0,    0,  174,
  175,  166,    0,  173,    0,    0,    0,    0,  171,  207,
    0,   25,    0,    0,    0,    0,  229,    0,    0,    0,
  299,  293,  296,  292,    0,  280,    0,    0,    0,    0,
    0,    0,    0,  176,  177,  191,    0,    0,  197,  198,
  199,  200,  201,    0,    0,    0,    0,    0,    0,    0,
  206,  205,    0,    0,    0,    0,    0,    0,    0,    0,
  228,    0,    0,  298,  295,    0,    0,    0,   16,  154,
  152,   28,    0,    0,    0,    0,    0,    0,   27,   33,
   34,   35,    0,   36,   37,   38,   39,   40,   41,   42,
   43,  190,    0,    0,  172,    0,    0,  195,    0,  167,
  168,  169,  170,  150,    0,  149,   24,    0,    0,    0,
    0,  202,    0,    0,  227,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   88,    0,  110,    0,    0,   32,
   31,  189,    0,  202,    0,   20,    0,    0,  202,  202,
    0,  202,  202,  202,  210,  226,    0,    0,  297,  294,
    0,    0,   58,    0,    0,    0,   65,    0,   87,    0,
    0,   99,    0,    0,    0,    0,   19,   23,    0,    0,
    0,  216,    0,    0,    0,    0,  225,    0,    0,    0,
    0,    0,   57,    0,  148,    0,   64,    0,   86,    0,
    0,   77,    0,    0,  188,    0,    0,  181,   22,    0,
  215,  214,  203,  213,  212,  211,  209,  224,    0,    0,
    0,    0,    0,   56,    0,    0,   63,    0,   85,    0,
    0,   76,    0,    0,  187,    0,  183,  202,    0,   21,
   18,  223,    0,    0,    0,    0,    0,  231,  234,  236,
  239,  238,  221,  235,  237,  289,    0,  290,    0,    0,
    0,    0,   55,   30,    0,   30,   62,   30,   60,   84,
    0,    0,   75,    0,    0,  186,  202,    0,    0,    0,
  269,    0,  242,    0,    0,    0,  240,    0,  287,  231,
  283,  288,  231,  284,    0,    0,    0,    0,    0,    0,
    0,   83,    0,    0,    0,   74,    0,    0,    0,    0,
    0,  180,  268,    0,    0,    0,    0,  244,  222,  220,
    0,    0,    0,  231,  219,  278,    0,  279,    0,   54,
    0,    0,   47,   66,   61,   59,   82,    0,    0,    0,
   73,    0,    0,  185,    0,  179,  178,  267,    0,    0,
    0,    0,    0,  232,  285,  281,  286,  282,    0,  276,
  231,  272,  277,  231,  273,   53,    0,   49,    0,   30,
    0,   81,    0,    0,    0,    0,    0,  111,  114,  116,
  119,  118,  123,   79,  115,  117,  108,    0,  109,    0,
   72,    0,    0,    0,  184,  182,  266,    0,    0,    0,
  231,    0,    0,  218,    0,    0,   52,   30,    0,    0,
    0,  147,    0,  122,    0,    0,  120,    0,  106,  111,
  102,  107,  111,  103,   71,    0,    0,    0,  265,  231,
    0,  231,  231,    0,  231,  231,  231,  246,  274,  270,
  275,  271,    0,    0,    0,   44,  146,    0,    0,  130,
    0,   80,   78,    0,    0,    0,   70,  111,   68,   97,
    0,   98,    0,    0,    0,    0,    0,  252,    0,    0,
    0,   51,    0,    0,    0,  145,    0,    0,  129,    0,
  113,  112,  104,  100,  105,  101,    0,   95,  111,   91,
   96,  111,   92,  264,    0,    0,  257,  251,  250,  249,
  248,  247,  245,   50,   48,   45,   46,  144,    0,    0,
  128,    0,   69,   67,    0,    0,  263,    0,  259,  231,
    0,  143,  111,    0,  111,  127,  111,  125,   93,   89,
   94,   90,  262,  231,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  256,  142,    0,    0,  135,  131,
  126,  124,  261,    0,  255,  254,  141,    0,  137,  111,
    0,  260,  258,  140,  111,    0,    0,    0,    0,    0,
    0,  132,  139,    0,  133,  134,  138,  136,
};
final static short yydgoto[] = {                          3,
    4,    6,   18,   19,  233,  140,  141,  142,   24,   49,
   25,  116,   93,  143,  299,   62,  146,  300,  148,  431,
  432,  433,   63,  468,  504,   64,  435,  436,  337,   65,
   51,   52,   29,   30,  301,  302,   68,   69,  201,  106,
  338,  371,  304,  305,   85,
};
final static short yysindex[] = {                       -51,
    0,    0,    0, -277,    0, 1107, -172, -157,  200, -149,
  -99,  -93,  -27,    0,    0,    0, -193, -205,    0,    0,
    0,    0,    0, -181, -251,    0,    0,    0,    0,    0,
    0,    0,    0, -187,    0, -232,    0,  -41, -164,  -59,
    0,   44,    0, -117,    0, -234,   63, -164, -191, -144,
 -112,    0,    0, -191,    0,    0,    0, -265, -159,    0,
    0,    0, -161,    0, -228,  -88,  -53,    4,    0,    0,
 -148,    0,  270,  -78,  -58, -107,    0,  -57,  -47,   30,
    0,    0,    0,    0,  -95,    0,  -42,  -18,  301,    5,
  283, -193,  399,    0,    0,    0,    9, -164,    0,    0,
    0,    0,    0, -267, -267,   82,  283,  283, -267, -267,
    0,    0,   59,  106,   66,  -63,  139,  145,  129,  232,
    0, -196, -164,    0,    0, -199, -164, -117,    0,    0,
    0,    0,  150,  155,  -29,   -2,   49,  -20,    0,    0,
    0,    0, -235,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  361,  301,    0,    4,    4,    0,  301,    0,
    0,    0,    0,    0,  337,    0,    0,  187,  382,  192,
  198,    0,  201, 1940,    0,   77,  213,  -54,  242,  241,
  103, -164, -164,  148,    0,  170,    0, -117,  261,    0,
    0,    0,  238,    0,  268,    0,  337,  -35,    0,    0,
  164,    0,    0,    0,    0,    0,  253,  339,    0,    0,
  275, -164,    0,  -34, -108,  284,    0,   -4,    0,    7,
  286,    0,  146,  288, 1499,  434,    0,    0, -184,  695,
 1960,    0,  297, 1971, 1982, 1513,    0,   32,  283,  283,
  308,  310,    0,  384,    0,  381,    0,  391,    0, -166,
 -164,    0,  205, -117,    0,   98,  181,    0,    0,    8,
    0,    0,    0,    0,    0,    0,    0,    0,  619,   38,
   46, -117,  408,    0,  516,  330,    0,  532,    0,  151,
  370,    0,   47,  376,    0, 1947,    0,    0,  380,    0,
    0,    0,  179,  283,  195,  386,  220,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1715,    0, 1736,  414,
  283,  283,    0,    0,  404,    0,    0,    0,    0,    0,
  267,  410,    0, -165, -164,    0,    0,  413, 1993,  448,
    0,  217,    0, -164,  237,  450,    0, 1338,    0,    0,
    0,    0,    0,    0, 2020,   58,   69,  910,  451,  334,
  927,    0,   78,  283,  283,    0,  204,  445, 1520,  467,
  477,    0,    0,  100,  468,  469,   19,    0,    0,    0,
  447, 1360, 1374,    0,    0,    0, 1750,    0, 1771,    0,
 -125, 1079,    0,    0,    0,    0,    0, 1557,  115,  117,
    0,  269,  420,    0,  295,    0,    0,    0,  401,  483,
  487,  462,  415,    0,    0,    0,    0,    0,  465,    0,
    0,    0,    0,    0,    0,    0, -237,    0,  492,    0,
  474,    0,  219,  283,  223,  386,  247,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1571,    0, 1593,
    0,  121,  283,  283,    0,    0,    0, 1785,  471,  472,
    0,  476, 1806,    0, 1396, 1410,    0,    0, 1134, 1090,
  502,    0,  276,    0, -164,  281,    0, 1176,    0,    0,
    0,    0,    0,    0,    0, 1607,  124,  132,    0,    0,
  485,    0,    0, 1861,    0,    0,    0,    0,    0,    0,
    0,    0,  954,  486,  488,    0,    0,  136,  493,    0,
  166,    0,    0, -217, 1190, 1213,    0,    0,    0,    0,
 1629,    0, 1643, 1432,  455, 1874, 1887,    0, 1900, 1913,
 1446,    0,  364,  508,  509,    0,  425,  512,    0,  429,
    0,    0,    0,    0,    0,    0, 1227,    0,    0,    0,
    0,    0,    0,    0,  327, 2033,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1665,  491,
    0, 1679,    0,    0, 1250, 1264,    0, 1820,    0,    0,
  506,    0,    0,  514,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  518, 1926,  511, 1287,  457, 1834,
 1301, 1468,  530,  544,    0,    0,  356, 2007,    0,    0,
    0,    0,    0,  377,    0,    0,    0, 1701,    0,    0,
  527,    0,    0,    0,    0,  528, 1848,  548, 1324,  550,
  551,    0,    0,  378,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1145,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  971,    0,
  998,    0,    0, 1025,    0,    0,    0,  640,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  734,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  680,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -116,    0,  772,  814,    0,  -86,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1052,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1534,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  576,    0,  852,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1482,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -207,    0, -200,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  883,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,    0,    0,    0,    3,  807,  808,  809,  -69,  793,
    0,  649, -303, -261,   -6,   61,    0,  130,    0,  -92,
  -75,  -66,   -8, -450, -372,  255,    0,    0,  400,  -23,
    0,  733,    0,    0,  523,  638,  570,  630, -158,    0,
 -337, -259,    0,    0,  701,
};
final static int YYTABLESIZE=2317;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         26,
  149,  155,  372,  115,   55,  373,    5,   46,   20,  303,
  348,   47,  350,  315,  351,  434,  319,  150,  457,  505,
  190,   81,  506,   70,   89,   59,  151,   98,   60,   61,
   74,   76,   56,   78,   82,  225,  409,   80,  531,   83,
  230,  231,  191,  234,  235,  236,  458,  341,  121,  344,
   99,  100,  101,  102,  103,  243,   71,  537,   59,  175,
  532,   60,   61,  104,  105,  471,   27,  474,   57,   82,
  121,  259,   53,  455,  154,   50,  456,  243,   11,   12,
  176,   58,  159,   33,   90,  375,  144,   45,  565,  279,
  356,  566,  260,   59,   96,  196,   60,   61,   35,  115,
   34,   11,   12,  509,   58,   59,   39,  111,   60,   61,
  280,  357,   97,  484,  177,   36,  460,  412,  179,  415,
  421,  180,  588,   40,  590,  112,  591,  227,   59,  329,
  416,   60,   61,  417,  418,   28,   94,   95,  540,  196,
  543,  196,  514,   91,  516,  517,   26,  519,  520,  521,
  119,   79,  419,  145,  493,  195,   41,  196,  215,  617,
  124,  196,   43,   92,  619,  245,  120,   26,  359,  194,
  107,  194,  214,   42,  216,  218,  205,  220,  125,   44,
  126,  221,  149,  104,  105,  149,  574,  194,  481,  578,
  291,  194,  167,  488,   26,  117,   75,  494,  121,  150,
  238,  209,  150,  242,    1,  108,   11,   12,  151,   58,
  168,  151,  169,   27,   72,  118,  122,    2,   26,  210,
  228,  243,  147,   26,   26,  611,  183,   26,   26,   26,
  127,   73,  586,   59,   27,  616,   60,   61,  229,  244,
   48,   45,  281,  184,  283,   46,  592,  284,   45,   47,
   26,  247,   46,  185,  128,  149,  189,  149,  149,  289,
   48,   27,  249,  290,  152,  310,  153,   48,  144,  248,
  186,  144,  150,  129,  150,  150,  402,   14,   15,   26,
  250,  151,   28,  151,  151,   27,  571,  268,  328,  149,
   27,   27,  403,  306,   27,   27,   27,  109,  110,   77,
   84,  308,  323,   28,  187,  269,  150,  123,  585,   11,
   12,  307,   58,  376,  353,  151,  358,   27,   86,  309,
  324,  188,   26,  364,  378,  365,  367,  164,   87,   88,
   28,  377,  206,  387,  166,  145,   59,  158,  145,   60,
   61,  144,  379,  144,  144,  130,   27,   11,   12,  207,
   58,  388,   26,  285,   28,  398,  286,  287,  213,   28,
   28,  160,  161,   28,   28,   28,  149,  149,   11,   12,
  437,   58,  439,  399,   59,  144,  475,   60,   61,  510,
   84,  429,  165,  150,  150,  442,   28,  512,  438,   27,
  440,  526,  151,  151,  476,   59,  170,  511,   60,   61,
  149,  252,  171,  217,  147,  513,  320,  147,  145,  527,
  145,  145,  172,   11,   12,   28,   58,  150,  253,   27,
    7,  529,  181,  321,    8,  219,  151,  182,   10,   11,
   12,  429,  193,  429,  331,   11,   12,    7,   58,  530,
   59,    8,  145,   60,   61,   10,   11,   12,  232,  193,
  334,  332,  144,  144,  498,   37,  499,  501,   28,  391,
  282,  429,   59,  197,  288,   60,   61,  335,   38,  429,
   11,   12,  363,   58,  462,  199,  392,  147,  465,  147,
  147,  200,   11,   12,  202,   58,  144,  173,   28,  174,
  208,  463,  366,  270,  271,  466,   47,   59,  429,  429,
   60,   61,   11,   12,  429,   58,  429,   48,  237,   59,
   46,  147,   60,   61,   47,  211,  222,  430,  212,  145,
  145,   79,  352,  189,  441,   48,  223,  224,   31,   59,
  429,  497,   60,   61,   48,   79,  500,   79,  113,   14,
   15,   11,   12,  114,   58,  226,   11,   12,  333,   58,
  445,  241,  429,  145,  446,  429,   66,  246,  429,  429,
  254,   66,   66,  251,   66,  346,  347,  430,   59,  430,
   66,   60,   61,   59,  263,   59,   60,   61,   60,   61,
  272,  429,  567,  429,  429,  568,  569,  273,  147,  147,
  133,  429,  104,  105,    8,    9,  134,  430,  135,  136,
  137,  429,  138,   14,   15,  430,   14,   15,  389,  390,
  429,  607,  429,  316,  608,  609,  192,    7,  384,  554,
   66,    8,  147,  555,   17,   10,   11,   12,   66,  193,
  239,  240,  612,  627,  430,  430,  613,  628,  276,  274,
  430,  275,  430,   32,  194,   66,  277,  322,  278,   66,
  113,   14,   15,  325,  132,  133,  447,  330,  448,    8,
    9,  134,  336,  135,  136,  137,  430,  138,   14,   15,
  452,   67,  453,  156,  157,   31,   67,   67,  464,   67,
  558,  349,  559,  139,  561,   67,  562,  345,  430,   17,
  360,  430,  257,  258,  430,  430,   31,  477,  478,  311,
  312,  354,  355,   66,   66,   66,   66,  362,   66,  382,
  383,  443,  444,  546,  547,  598,  599,  430,  368,  430,
  430,  293,  393,   31,  404,    8,  396,  430,  294,  295,
   11,   12,  296,  297,   66,   67,  397,  430,  162,  163,
  449,  400,  401,   67,  450,  451,  430,   31,  430,  454,
  459,  461,   31,   31,  482,  483,   31,   31,   31,  485,
   67,  496,  515,  524,   67,  525,  528,  556,  557,  560,
  595,  313,  133,   66,  575,   66,    8,    9,  134,   31,
  135,  136,  137,  587,  138,   14,   15,  317,  133,  605,
   32,  589,    8,    9,  134,  593,  135,  136,  137,  314,
  138,   14,   15,  606,  618,  620,   17,  622,   31,  625,
  626,   32,   21,   22,   23,  318,   54,  198,   67,   67,
   67,   67,   17,   67,  131,  467,  178,    0,    0,    0,
    0,  241,  241,    0,  241,    0,  241,  241,   32,  241,
  241,  241,  241,  241,  241,  241,  241,   66,    0,   67,
    0,   31,    0,  241,   66,    0,   66,   66,    0,    0,
  241,    0,   32,    0,    0,    0,  241,   32,   32,    0,
    0,   32,   32,   32,  292,  293,    0,    0,    0,    8,
    0,   31,  294,  295,   11,   12,  296,  297,   67,    0,
   67,    0,    0,    0,   32,  172,  172,  172,  172,    0,
  172,  172,  298,  172,  172,  172,  172,  172,  172,  172,
  172,    0,    0,  172,    0,    0,    0,  172,  172,  172,
  172,  172,  172,   32,  172,    0,    0,    0,    0,    0,
  172,  172,  172,  172,  172,  162,  162,    0,  162,    0,
  162,  162,    0,  162,  162,  162,  162,  162,  162,  162,
  162,    7,    0,  162,    0,    8,    0,  162,    0,   10,
   11,   12,   67,  193,  162,    0,   32,    0,    0,   67,
  162,   67,   67,    0,    0,    0,    0,    0,    0,  261,
    0,    0,    0,    0,    0,   66,    0,   66,   66,  165,
  165,  165,  165,    0,  165,  165,   32,  165,  165,  165,
  165,  165,  165,  165,  165,    0,    0,  165,    0,    0,
    0,  165,  165,  165,  165,  165,  165,    0,  165,    0,
    0,    0,    0,    0,  165,  165,  165,  163,  163,  163,
  163,    0,  163,  163,    0,  163,  163,  163,  163,  163,
  163,  163,  163,    0,    0,  163,    0,    0,    0,  163,
  163,  163,  163,  163,  163,    0,  163,    0,    0,    0,
    0,    0,  163,  163,  163,    0,    0,    0,    0,  164,
  164,  164,  164,    0,  164,  164,    0,  164,  164,  164,
  164,  164,  164,  164,  164,    0,    0,  164,    0,    0,
    0,  164,  164,  164,  164,  164,  164,    0,  164,    0,
   67,    0,   67,   67,  164,  164,  164,  243,  243,    0,
  243,    0,  243,  243,    0,  243,  243,  243,  243,  243,
  243,  243,  243,    0,    0,    0,    0,    0,    0,  243,
    0,    0,    0,    0,    0,    0,  243,    0,  253,  253,
    0,  253,  243,  253,  253,    0,  253,  253,  253,  253,
  253,  253,  253,  253,    0,    0,    0,    0,    0,    0,
  253,    0,    0,    0,    0,  380,  133,  253,    0,    0,
    8,    9,  134,  253,  135,  136,  137,    0,  138,   14,
   15,    0,  385,  133,    0,    0,    0,    8,    9,  134,
    0,  135,  136,  137,  381,  138,   14,   15,    0,    0,
   17,    0,    0,    0,    0,    0,    0,    0,    0,  522,
  133,  386,    0,    0,    8,    9,  134,   17,  135,  136,
  137,    0,  138,   14,   15,    0,   15,   15,    0,    0,
    0,   15,   15,    0,    0,   15,   15,   15,  523,   15,
   15,   15,    0,    0,   17,    0,    0,    0,   15,    0,
    0,    0,    0,  151,  151,   15,    0,    0,  151,  151,
    0,   15,  151,  151,  151,    0,  151,  151,  151,    0,
    0,    0,    0,    0,    0,  151,    0,    0,    0,    0,
   14,   14,  151,    0,    0,   14,   14,    0,  151,   14,
   14,   14,    0,   14,   14,   14,    0,    0,    0,    0,
    0,    0,   14,    0,    0,    0,    0,  217,  217,   14,
    0,    0,  217,  217,    0,   14,  217,  217,  217,    0,
  217,  217,  217,    0,    0,    0,    0,    0,    0,  217,
    0,    0,    0,    0,    0,  133,  217,    0,    0,    8,
    9,  134,  217,  135,  136,  137,  133,  138,   14,   15,
    8,    9,  134,    0,  135,  136,  137,    0,  138,   14,
   15,    0,  420,    7,    0,    0,    0,    8,    9,   17,
    0,   10,   11,   12,  495,   13,   14,   15,    0,    0,
   17,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  133,   16,    0,    0,    8,    9,  134,   17,  135,  136,
  137,    6,  138,   14,   15,    6,    6,    0,    0,    6,
    6,    6,    0,    6,    6,    6,    0,    0,    0,    0,
    0,    0,    0,    0,   17,    0,    0,    0,    0,    6,
    0,  502,  423,    0,    0,    6,    8,    0,  134,  424,
  425,  136,  137,  426,  427,  533,  423,    0,    0,    0,
    8,    0,  134,  424,  425,  136,  137,  426,  427,    0,
  503,    0,    0,    0,    0,    0,    0,    0,  535,  423,
    0,    0,    0,    8,  534,  134,  424,  425,  136,  137,
  426,  427,  563,  423,    0,    0,    0,    8,    0,  134,
  424,  425,  136,  137,  426,  427,    0,  536,    0,    0,
    0,    0,    0,    0,    0,  579,  423,    0,    0,    0,
    8,  564,  134,  424,  425,  136,  137,  426,  427,  581,
  423,    0,    0,    0,    8,    0,  134,  424,  425,  136,
  137,  426,  427,    0,  580,    0,    0,    0,    0,    0,
    0,    0,  596,  423,    0,    0,    0,    8,  582,  134,
  424,  425,  136,  137,  426,  427,  601,  423,    0,    0,
    0,    8,    0,  134,  424,  425,  136,  137,  426,  427,
    0,  597,    0,    0,    0,    0,    0,    0,    0,  623,
  423,    0,    0,    0,    8,  602,  134,  424,  425,  136,
  137,  426,  427,  369,  293,    0,    0,    0,    8,    0,
    0,  294,  295,   11,   12,  296,  297,    0,  624,    0,
    0,    0,    0,    0,    0,  405,  293,    0,    0,    0,
    8,    0,  370,  294,  295,   11,   12,  296,  297,  407,
  293,    0,    0,    0,    8,    0,    0,  294,  295,   11,
   12,  296,  297,    0,  406,    0,    0,    0,    0,    0,
    0,  489,  293,    0,    0,    0,    8,    0,  408,  294,
  295,   11,   12,  296,  297,  491,  293,    0,    0,    0,
    8,    0,    0,  294,  295,   11,   12,  296,  297,    0,
  490,    0,    0,    0,    0,    0,    0,  544,  293,    0,
    0,    0,    8,    0,  492,  294,  295,   11,   12,  296,
  297,  552,  293,    0,    0,    0,    8,    0,    0,  294,
  295,   11,   12,  296,  297,    0,  545,    0,    0,    0,
    0,    0,    0,  603,  293,    0,    0,    0,    8,    0,
  553,  294,  295,   11,   12,  296,  297,  233,  233,    0,
    0,    0,  233,    0,    0,  233,  233,  233,  233,  233,
  233,    0,  604,    0,  255,    7,    0,    0,    0,    8,
    0,    0,    0,   10,   11,   12,  233,  193,  266,    7,
    0,    0,    0,    8,    0,  394,    7,   10,   11,   12,
    8,  193,    0,  256,   10,   11,   12,    0,  193,  204,
  204,    0,    0,    0,  204,    0,    0,  267,  204,  204,
  204,    0,  204,    0,  395,    0,    0,    0,    0,    0,
    0,    0,  422,  423,    0,    0,    0,    8,  204,  134,
  424,  425,  136,  137,  426,  427,  469,  423,    0,    0,
    0,    8,    0,  134,  424,  425,  136,  137,  426,  427,
  428,    0,    0,    0,    0,    0,    0,    0,  472,  423,
    0,    0,    0,    8,  470,  134,  424,  425,  136,  137,
  426,  427,  507,  423,    0,    0,    0,    8,    0,  134,
  424,  425,  136,  137,  426,  427,  473,    0,    0,    0,
    0,    0,    0,    0,  538,  423,    0,    0,    0,    8,
  508,  134,  424,  425,  136,  137,  426,  427,  541,  423,
    0,    0,    0,    8,    0,  134,  424,  425,  136,  137,
  426,  427,  539,    0,    0,    0,    0,    0,    0,    0,
  572,  423,    0,    0,    0,    8,  542,  134,  424,  425,
  136,  137,  426,  427,  576,  423,    0,    0,    0,    8,
    0,  134,  424,  425,  136,  137,  426,  427,  573,    0,
    0,    0,    0,    0,    0,    0,  614,  423,    0,    0,
    0,    8,  577,  134,  424,  425,  136,  137,  426,  427,
  339,  293,    0,    0,    0,    8,    0,    0,  294,  295,
   11,   12,  296,  297,  615,    0,    0,    0,    0,    0,
    0,  342,  293,    0,    0,    0,    8,    0,  340,  294,
  295,   11,   12,  296,  297,  410,  293,    0,    0,    0,
    8,    0,    0,  294,  295,   11,   12,  296,  297,  343,
    0,    0,    0,    0,    0,    0,  413,  293,    0,    0,
    0,    8,    0,  411,  294,  295,   11,   12,  296,  297,
  479,  293,    0,    0,    0,    8,    0,    0,  294,  295,
   11,   12,  296,  297,  414,    0,    0,    0,    0,    0,
    0,  486,  293,    0,    0,    0,    8,    0,  480,  294,
  295,   11,   12,  296,  297,  583,  293,    0,    0,    0,
    8,    0,    0,  294,  295,   11,   12,  296,  297,  487,
  423,    0,    0,    0,    8,    0,  134,  424,  425,  136,
  137,  426,  427,  584,  423,    0,    0,    0,    8,    0,
  134,  424,  425,  136,  137,  426,  427,  293,  600,    0,
    0,    8,    0,    0,  294,  295,   11,   12,  296,  297,
  293,    0,  621,    0,    8,    0,    0,  294,  295,   11,
   12,  296,  297,  293,    0,  518,    0,    8,    0,    0,
  294,  295,   11,   12,  296,  297,  293,    0,  548,    0,
    8,    0,    0,  294,  295,   11,   12,  296,  297,  293,
    0,  549,    0,    8,    0,    0,  294,  295,   11,   12,
  296,  297,  293,    0,  550,    0,    8,    0,    0,  294,
  295,   11,   12,  296,  297,  203,    7,  551,    0,    0,
    8,    0,  326,    7,   10,   11,   12,    8,  193,    0,
  594,   10,   11,   12,    0,  193,    7,    0,    0,    0,
    8,    0,    0,  204,   10,   11,   12,    7,  193,    0,
  327,    8,    0,    0,    0,   10,   11,   12,    7,  193,
    0,    0,    8,    0,  262,    0,   10,   11,   12,    7,
  193,    0,    0,    8,    0,  264,    0,   10,   11,   12,
    0,  193,    0,  423,    0,    0,  265,    8,    0,  134,
  424,  425,  136,  137,  426,  427,  293,  361,    0,    0,
    8,    0,    0,  294,  295,   11,   12,  296,  297,  293,
  610,    0,    0,    8,    0,    0,  294,  295,   11,   12,
  296,  297,    0,  374,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  570,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          6,
   93,  269,  340,   73,  256,  343,  284,  273,    6,  269,
  314,  277,  316,  275,  318,  388,  278,   93,  256,  470,
  256,  256,  473,  256,   48,  293,   93,  256,  296,  297,
   39,   40,  284,   42,  269,  194,  374,   44,  256,  274,
  199,  200,  278,  202,  203,  204,  284,  307,  256,  309,
  279,  280,  281,  282,  283,  256,  289,  508,  293,  256,
  278,  296,  297,  292,  293,  438,    6,  440,  256,  269,
  278,  256,  278,  411,   98,  269,  414,  278,  266,  267,
  277,  269,  106,  256,  276,  345,   93,  269,  539,  256,
  256,  542,  277,  293,  256,  165,  296,  297,  256,  169,
  273,  266,  267,  476,  269,  293,  256,  256,  296,  297,
  277,  277,  274,  451,  123,  273,  420,  377,  127,  379,
  382,  128,  573,  273,  575,  274,  577,  197,  293,  288,
  256,  296,  297,  259,  260,    6,  296,  297,  511,  256,
  513,  258,  480,  288,  482,  483,  153,  485,  486,  487,
  258,  269,  278,   93,  458,  153,  256,  274,  182,  610,
  256,  278,  256,  276,  615,  274,  274,  174,  327,  256,
  259,  258,  181,  273,  183,  184,  174,  186,  274,  273,
  276,  188,  275,  292,  293,  278,  559,  274,  448,  562,
  260,  278,  256,  453,  201,  274,  256,  459,  256,  275,
  207,  256,  278,  212,  256,  259,  266,  267,  275,  269,
  274,  278,  276,  153,  256,  274,  274,  269,  225,  274,
  256,  256,   93,  230,  231,  598,  256,  234,  235,  236,
  273,  273,  570,  293,  174,  608,  296,  297,  274,  274,
  288,  269,  251,  273,  253,  273,  584,  254,  269,  277,
  257,  256,  273,  256,  273,  348,  277,  350,  351,  257,
  288,  201,  256,  256,  256,  272,  258,  288,  275,  274,
  273,  278,  348,  269,  350,  351,  258,  270,  271,  286,
  274,  348,  153,  350,  351,  225,  546,  256,  286,  382,
  230,  231,  274,  256,  234,  235,  236,  294,  295,  256,
   46,  256,  256,  174,  256,  274,  382,  278,  568,  266,
  267,  274,  269,  256,  321,  382,  325,  257,  256,  274,
  274,  273,  329,  332,  256,  334,  335,  269,  266,  267,
  201,  274,  256,  256,  269,  275,  293,  256,  278,  296,
  297,  348,  274,  350,  351,   91,  286,  266,  267,  273,
  269,  274,  359,  256,  225,  256,  259,  260,  256,  230,
  231,  107,  108,  234,  235,  236,  459,  460,  266,  267,
  256,  269,  256,  274,  293,  382,  256,  296,  297,  256,
  126,  388,  277,  459,  460,  392,  257,  256,  274,  329,
  274,  256,  459,  460,  274,  293,  258,  274,  296,  297,
  493,  256,  258,  256,  275,  274,  256,  278,  348,  274,
  350,  351,  284,  266,  267,  286,  269,  493,  273,  359,
  257,  256,  273,  273,  261,  256,  493,  273,  265,  266,
  267,  438,  269,  440,  256,  266,  267,  257,  269,  274,
  293,  261,  382,  296,  297,  265,  266,  267,  285,  269,
  256,  273,  459,  460,  463,  256,  465,  466,  329,  256,
  256,  468,  293,  277,  284,  296,  297,  273,  269,  476,
  266,  267,  256,  269,  256,  284,  273,  348,  256,  350,
  351,  284,  266,  267,  284,  269,  493,  256,  359,  258,
  278,  273,  256,  239,  240,  273,  277,  293,  505,  506,
  296,  297,  266,  267,  511,  269,  513,  288,  256,  293,
  273,  382,  296,  297,  277,  274,  256,  388,  278,  459,
  460,  269,  256,  277,  256,  288,  266,  267,    6,  293,
  537,  256,  296,  297,  288,  269,  256,  269,  269,  270,
  271,  266,  267,  274,  269,  278,  266,  267,  294,  269,
  256,  277,  559,  493,  260,  562,   34,  274,  565,  566,
  273,   39,   40,  278,   42,  311,  312,  438,  293,  440,
   48,  296,  297,  293,  278,  293,  296,  297,  296,  297,
  273,  588,  256,  590,  591,  259,  260,  278,  459,  460,
  257,  598,  292,  293,  261,  262,  263,  468,  265,  266,
  267,  608,  269,  270,  271,  476,  270,  271,  354,  355,
  617,  256,  619,  284,  259,  260,  256,  257,  285,  256,
   98,  261,  493,  260,  291,  265,  266,  267,  106,  269,
  292,  293,  256,  256,  505,  506,  260,  260,  258,  256,
  511,  258,  513,    6,  284,  123,  256,  278,  258,  127,
  269,  270,  271,  278,  256,  257,  256,  278,  258,  261,
  262,  263,  277,  265,  266,  267,  537,  269,  270,  271,
  256,   34,  258,  104,  105,  153,   39,   40,  424,   42,
  256,  278,  258,  285,  256,   48,  258,  274,  559,  291,
  278,  562,  259,  260,  565,  566,  174,  443,  444,  292,
  293,  292,  293,  181,  182,  183,  184,  260,  186,  259,
  260,  292,  293,  259,  260,  259,  260,  588,  269,  590,
  591,  257,  278,  201,  278,  261,  260,  598,  264,  265,
  266,  267,  268,  269,  212,   98,  260,  608,  109,  110,
  258,  274,  274,  106,  258,  284,  617,  225,  619,  285,
  259,  278,  230,  231,  284,  284,  234,  235,  236,  284,
  123,  260,  278,  278,  127,  278,  274,  260,  260,  258,
  260,  256,  257,  251,  284,  253,  261,  262,  263,  257,
  265,  266,  267,  278,  269,  270,  271,  256,  257,  260,
  153,  278,  261,  262,  263,  278,  265,  266,  267,  284,
  269,  270,  271,  260,  278,  278,  291,  260,  286,  260,
  260,  174,    6,    6,    6,  284,   24,  169,  181,  182,
  183,  184,  291,  186,   92,  426,  126,   -1,   -1,   -1,
   -1,  256,  257,   -1,  259,   -1,  261,  262,  201,  264,
  265,  266,  267,  268,  269,  270,  271,  325,   -1,  212,
   -1,  329,   -1,  278,  332,   -1,  334,  335,   -1,   -1,
  285,   -1,  225,   -1,   -1,   -1,  291,  230,  231,   -1,
   -1,  234,  235,  236,  256,  257,   -1,   -1,   -1,  261,
   -1,  359,  264,  265,  266,  267,  268,  269,  251,   -1,
  253,   -1,   -1,   -1,  257,  256,  257,  258,  259,   -1,
  261,  262,  284,  264,  265,  266,  267,  268,  269,  270,
  271,   -1,   -1,  274,   -1,   -1,   -1,  278,  279,  280,
  281,  282,  283,  286,  285,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,  294,  295,  256,  257,   -1,  259,   -1,
  261,  262,   -1,  264,  265,  266,  267,  268,  269,  270,
  271,  257,   -1,  274,   -1,  261,   -1,  278,   -1,  265,
  266,  267,  325,  269,  285,   -1,  329,   -1,   -1,  332,
  291,  334,  335,   -1,   -1,   -1,   -1,   -1,   -1,  285,
   -1,   -1,   -1,   -1,   -1,  463,   -1,  465,  466,  256,
  257,  258,  259,   -1,  261,  262,  359,  264,  265,  266,
  267,  268,  269,  270,  271,   -1,   -1,  274,   -1,   -1,
   -1,  278,  279,  280,  281,  282,  283,   -1,  285,   -1,
   -1,   -1,   -1,   -1,  291,  292,  293,  256,  257,  258,
  259,   -1,  261,  262,   -1,  264,  265,  266,  267,  268,
  269,  270,  271,   -1,   -1,  274,   -1,   -1,   -1,  278,
  279,  280,  281,  282,  283,   -1,  285,   -1,   -1,   -1,
   -1,   -1,  291,  292,  293,   -1,   -1,   -1,   -1,  256,
  257,  258,  259,   -1,  261,  262,   -1,  264,  265,  266,
  267,  268,  269,  270,  271,   -1,   -1,  274,   -1,   -1,
   -1,  278,  279,  280,  281,  282,  283,   -1,  285,   -1,
  463,   -1,  465,  466,  291,  292,  293,  256,  257,   -1,
  259,   -1,  261,  262,   -1,  264,  265,  266,  267,  268,
  269,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,  278,
   -1,   -1,   -1,   -1,   -1,   -1,  285,   -1,  256,  257,
   -1,  259,  291,  261,  262,   -1,  264,  265,  266,  267,
  268,  269,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,
  278,   -1,   -1,   -1,   -1,  256,  257,  285,   -1,   -1,
  261,  262,  263,  291,  265,  266,  267,   -1,  269,  270,
  271,   -1,  256,  257,   -1,   -1,   -1,  261,  262,  263,
   -1,  265,  266,  267,  285,  269,  270,  271,   -1,   -1,
  291,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  257,  285,   -1,   -1,  261,  262,  263,  291,  265,  266,
  267,   -1,  269,  270,  271,   -1,  256,  257,   -1,   -1,
   -1,  261,  262,   -1,   -1,  265,  266,  267,  285,  269,
  270,  271,   -1,   -1,  291,   -1,   -1,   -1,  278,   -1,
   -1,   -1,   -1,  256,  257,  285,   -1,   -1,  261,  262,
   -1,  291,  265,  266,  267,   -1,  269,  270,  271,   -1,
   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,
  256,  257,  285,   -1,   -1,  261,  262,   -1,  291,  265,
  266,  267,   -1,  269,  270,  271,   -1,   -1,   -1,   -1,
   -1,   -1,  278,   -1,   -1,   -1,   -1,  256,  257,  285,
   -1,   -1,  261,  262,   -1,  291,  265,  266,  267,   -1,
  269,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,  278,
   -1,   -1,   -1,   -1,   -1,  257,  285,   -1,   -1,  261,
  262,  263,  291,  265,  266,  267,  257,  269,  270,  271,
  261,  262,  263,   -1,  265,  266,  267,   -1,  269,  270,
  271,   -1,  284,  257,   -1,   -1,   -1,  261,  262,  291,
   -1,  265,  266,  267,  285,  269,  270,  271,   -1,   -1,
  291,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,  285,   -1,   -1,  261,  262,  263,  291,  265,  266,
  267,  257,  269,  270,  271,  261,  262,   -1,   -1,  265,
  266,  267,   -1,  269,  270,  271,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  291,   -1,   -1,   -1,   -1,  285,
   -1,  256,  257,   -1,   -1,  291,  261,   -1,  263,  264,
  265,  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,  263,  264,  265,  266,  267,  268,  269,   -1,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,  285,  263,  264,  265,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,  263,
  264,  265,  266,  267,  268,  269,   -1,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
  261,  285,  263,  264,  265,  266,  267,  268,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,
  267,  268,  269,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,  285,  263,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,  263,  264,  265,  266,  267,  268,  269,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  257,   -1,   -1,   -1,  261,  285,  263,  264,  265,  266,
  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
   -1,  264,  265,  266,  267,  268,  269,   -1,  285,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,  285,  264,  265,  266,  267,  268,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,  266,
  267,  268,  269,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  285,  264,
  265,  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,   -1,
  285,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,  285,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,
  285,  264,  265,  266,  267,  268,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,
  269,   -1,  285,   -1,  256,  257,   -1,   -1,   -1,  261,
   -1,   -1,   -1,  265,  266,  267,  285,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,  256,  257,  265,  266,  267,
  261,  269,   -1,  285,  265,  266,  267,   -1,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,   -1,  285,  265,  266,
  267,   -1,  269,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,  285,  263,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,  263,  264,  265,  266,  267,  268,  269,
  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,  284,  263,  264,  265,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,  263,
  264,  265,  266,  267,  268,  269,  284,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
  284,  263,  264,  265,  266,  267,  268,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,
  268,  269,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,  284,  263,  264,  265,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,  263,  264,  265,  266,  267,  268,  269,  284,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,  284,  263,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  284,  264,
  265,  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,  284,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,   -1,  284,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  284,  264,
  265,  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,  284,
  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,
  267,  268,  269,  284,  257,   -1,   -1,   -1,  261,   -1,
  263,  264,  265,  266,  267,  268,  269,  257,  285,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
  257,   -1,  285,   -1,  261,   -1,   -1,  264,  265,  266,
  267,  268,  269,  257,   -1,  285,   -1,  261,   -1,   -1,
  264,  265,  266,  267,  268,  269,  257,   -1,  285,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,  257,
   -1,  285,   -1,  261,   -1,   -1,  264,  265,  266,  267,
  268,  269,  257,   -1,  285,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  256,  257,  285,   -1,   -1,
  261,   -1,  256,  257,  265,  266,  267,  261,  269,   -1,
  285,  265,  266,  267,   -1,  269,  257,   -1,   -1,   -1,
  261,   -1,   -1,  284,  265,  266,  267,  257,  269,   -1,
  284,  261,   -1,   -1,   -1,  265,  266,  267,  257,  269,
   -1,   -1,  261,   -1,  285,   -1,  265,  266,  267,  257,
  269,   -1,   -1,  261,   -1,  285,   -1,  265,  266,  267,
   -1,  269,   -1,  257,   -1,   -1,  285,  261,   -1,  263,
  264,  265,  266,  267,  268,  269,  257,  285,   -1,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,  257,
  284,   -1,   -1,  261,   -1,   -1,  264,  265,  266,  267,
  268,  269,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  284,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=297;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"IF","THEN","ELSE","END_IF","OUT","FUN","RETURN","BREAK","WHEN",
"WHILE","FOR","CONTINUE","ID","I32","F32","PUNTO","PARENT_A","PARENT_C",
"COMILLA","COMA","DOSPUNTOS","PUNTOCOMA","IGUAL","MAYOR","MENOR","MENORIGUAL",
"MAYORIGUAL","LLAVE_A","LLAVE_C","EXCL","DIST","ASIG","CADENA","COMENT","CONST",
"SUMA","RESTA","MULT","DIV","ENTERO","FLOAT",
};
final static String yyrule[] = {
"$accept : program",
"program : nombre_program LLAVE_A bloque_sentencias LLAVE_C",
"program : error",
"nombre_program : ID",
"bloque_sentencias :",
"bloque_sentencias : bloque_sentencias sentencia PUNTOCOMA",
"bloque_sentencias : bloque_sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_decl_datos",
"sentencia_declarativa : sentencia_decl_fun",
"sentencia_declarativa : lista_const",
"tipo : I32",
"tipo : F32",
"sentencia_decl_datos : tipo list_var",
"sentencia_decl_datos : ID list_var",
"list_var : list_var COMA ID",
"list_var : ID",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro error",
"encabezado_fun : FUN ID PARENT_A parametro error",
"encabezado_fun : FUN ID error",
"encabezado_fun : FUN error",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun error",
"sentencia_decl_fun : encabezado_fun error",
"cuerpo_fun :",
"cuerpo_fun : cuerpo_fun sentencias_fun PUNTOCOMA",
"cuerpo_fun : cuerpo_fun sentencias_fun error",
"sentencias_fun : sentencia_decl_datos",
"sentencias_fun : sentencia_decl_fun",
"sentencias_fun : lista_const",
"sentencias_fun : asignacion",
"sentencias_fun : llamado_func",
"sentencias_fun : sentencia_if_fun",
"sentencias_fun : sentencia_out",
"sentencias_fun : sentencia_when_fun",
"sentencias_fun : sentencia_for_fun",
"sentencias_fun : sentencia_while_fun",
"sentencias_fun : retorno",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_fun : IF PARENT_A condicion error",
"sentencia_if_fun : IF PARENT_A error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_fun : WHEN PARENT_A condicion error",
"sentencia_when_fun : WHEN PARENT_A error",
"sentencia_when_fun : WHEN error condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion error",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A error",
"sentencia_while_fun : ID DOSPUNTOS WHILE error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion error",
"sentencia_while_fun : WHILE PARENT_A error",
"sentencia_while_fun : WHILE error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for_fun : ID DOSPUNTOS error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for_fun : FOR error",
"cuerpo_fun_break :",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break PUNTOCOMA",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break error",
"sentencias_fun_break : asignacion",
"sentencias_fun_break : sentencia_if_break_fun",
"sentencias_fun_break : sentencia_out",
"sentencias_fun_break : sentencia_when_break_fun",
"sentencias_fun_break : sentencia_while_fun",
"sentencias_fun_break : sentencia_for_fun",
"sentencias_fun_break : CONTINUE tag",
"sentencias_fun_break : BREAK",
"sentencias_fun_break : BREAK cte",
"sentencias_fun_break : retorno",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun_break",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_break_fun : WHEN PARENT_A condicion error",
"sentencia_when_break_fun : WHEN PARENT_A error",
"sentencia_when_break_fun : WHEN error condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break_fun : IF PARENT_A condicion error",
"sentencia_if_break_fun : IF PARENT_A error",
"sentencia_if_break_fun : IF error",
"retorno : RETURN PARENT_A expresion PARENT_C",
"parametro : tipo ID",
"parametro : ID ID",
"lista_const : CONST lista_asignacion",
"lista_asignacion : lista_asignacion COMA asignacion_const",
"lista_asignacion : asignacion_const",
"asignacion_const : ID ASIG cte",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : sentencia_if",
"sentencia_ejecutable : sentencia_out",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : sentencia_for",
"sentencia_ejecutable : sentencia_while",
"sentencia_ejecutable : llamado_func",
"asignacion : ID ASIG expresion",
"expresion : expresion SUMA termino",
"expresion : expresion RESTA termino",
"expresion : termino",
"expresion : llamado_func",
"expresion : sentencia_for ELSE cte",
"expresion : sentencia_while ELSE cte",
"termino : termino MULT factor",
"termino : termino DIV factor",
"termino : factor",
"factor : ID",
"factor : cte",
"cte : ENTERO",
"cte : FLOAT",
"cte : RESTA ENTERO",
"cte : RESTA FLOAT",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if : IF PARENT_A condicion PARENT_C error",
"sentencia_if : IF PARENT_A condicion error",
"sentencia_if : IF PARENT_A error",
"sentencia_if : IF error",
"condicion : expresion comparacion expresion",
"condicion : expresion comparacion error",
"condicion : expresion error expresion",
"comparacion : IGUAL",
"comparacion : MAYOR",
"comparacion : MENOR",
"comparacion : MENORIGUAL",
"comparacion : MAYORIGUAL",
"bloque_ejecutable :",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable PUNTOCOMA",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"sentencia_out : OUT PARENT_A CADENA PARENT_C",
"sentencia_out : OUT PARENT_A CADENA error",
"sentencia_out : OUT PARENT_A error",
"sentencia_out : OUT error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN sentencia_ejecutable",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN error bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C error LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A error PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN error condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C error",
"sentencia_while : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion error",
"sentencia_while : WHILE PARENT_A error",
"sentencia_while : WHILE error",
"bloque_break_continue :",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue PUNTOCOMA",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue",
"ejecutables_break_continue : asignacion",
"ejecutables_break_continue : sentencia_if_break",
"ejecutables_break_continue : sentencia_out",
"ejecutables_break_continue : sentencia_when_break",
"ejecutables_break_continue : sentencia_while",
"ejecutables_break_continue : sentencia_for",
"ejecutables_break_continue : CONTINUE tag",
"ejecutables_break_continue : BREAK",
"ejecutables_break_continue : BREAK cte",
"tag :",
"tag : DOSPUNTOS ID",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN ejecutables_break_continue",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN error bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C error LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A error PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN error condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion error",
"sentencia_if_break : IF PARENT_A error",
"sentencia_if_break : IF error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C ejecutables_break_continue",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C ejecutables_break_continue",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for : ID DOSPUNTOS error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for : FOR error",
"param_real : cte",
"param_real : ID",
"llamado_func : ID PARENT_A param_real COMA param_real PARENT_C",
"llamado_func : ID PARENT_A param_real PARENT_C",
"llamado_func : ID PARENT_A PARENT_C",
"llamado_func : ID PARENT_A param_real COMA param_real error",
"llamado_func : ID PARENT_A param_real error",
"llamado_func : ID PARENT_A error",
};

//#line 951 ".\gramatica.y"
private NodoControl raiz;
private Map<String,ArbolSintactico> funciones = new HashMap<String,ArbolSintactico>();
private static HashMap<Integer,ArrayList<String>> erroresSintacticos = new HashMap<Integer,ArrayList<String>>();
public String ambitoActual = "Global";
private List<String> tipoActual = new ArrayList<String>();


void yyerror(String mensaje){
        if (erroresSintacticos.get(AnalizadorLexico.getLineaAct())== null){
                ArrayList<String> mnsj = new ArrayList<String>();
                mnsj.add(mensaje); 
                erroresSintacticos.put(AnalizadorLexico.getLineaAct(), mnsj);
        }
        else{
                erroresSintacticos.get(AnalizadorLexico.getLineaAct()).add(mensaje);
        }
}

static HashMap<Integer,ArrayList<String>> getErroresSintacticos(){
        return erroresSintacticos;
}
void chequearRangoI32(String sval){
  String s = "2147483647";
  long l = Long.valueOf(s);
  if(Long.valueOf(sval) > l){
    yyerror("La constante esta fuera de rango");
  }
}

void chequearRangoI32Neg(String sval){
       String s = "2147483648";
        long l = Long.valueOf(s);
        if(Long.valueOf(sval) > l){
                yyerror("La constante esta fuera de rango");
  } 
}

int yylex() throws IOException{
        Token t = AnalizadorLexico.getToken();
        this.yylval = new ParserVal(t.getLexema());
        //if(t.getId() != -1){
        //  System.out.println("Id: " + t.getId()+" Lexema: " + t.getLexema());
        //}else
        //  System.out.println("TERMINO LA EJECUCION");
        return t.getId();
}
public NodoControl getRaiz(){
	return raiz;
}
public Map<String,ArbolSintactico> getFuncion(){
        return funciones;
}

void actualizarAmbito(String lex, String amb){
        TablaSimbolos.addAtributo(lex,"Ambito",amb);
}
public String getTipoActual(){
        if(!this.tipoActual.isEmpty()){
                return (this.tipoActual.get(tipoActual.size()-1));
        }
        return null;
}
public void cambiarTipoActual(String f){
        tipoActual.add(f);
}
public void removeTipoActual(){
        if(!this.tipoActual.isEmpty()){
                this.tipoActual.remove(tipoActual.size()-1);
        }
}
public String buscarAmbito(String ambitoActual,String lexema){
        String ambito = ambitoActual;
        while(!TablaSimbolos.existeSimbolo(lexema+":"+ambito)){
                if(ambito.equals("Global")){
                        yyerror("La variable " + lexema + " no se encuentra declarada en el ambito " + ambitoActual);
                        ambito = "";
                        break;
                }else{
                        char [] a = ambito.toCharArray();
                        for (int i = a.length;i>=0;i--){
                                if(a[i-1] == ':'){
                                        ambito = ambito.substring(0,i-1);
                                        break;
                                }
                        }
                }
        }
        return ambito;
}
//#line 1307 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse() throws IOException
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 22 ".\gramatica.y"
{
                                                                raiz = new NodoControl("PROGRAMA",(ArbolSintactico)val_peek(1));  
                                                                TablaSimbolos.removeAtributo(val_peek(3).sval);
                                                        }
break;
case 2:
//#line 28 ".\gramatica.y"
{yyerror("Hay un error sintactico en la entrada que arrastra errores");}
break;
case 4:
//#line 32 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 5:
//#line 33 ".\gramatica.y"
{
                                                        yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                                                        }
break;
case 6:
//#line 36 ".\gramatica.y"
{
                                yyval = new NodoControl("Error",(ArbolSintactico)null);
                                yyerror("Se esperaba ;");
                        }
break;
case 7:
//#line 41 ".\gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa");}
break;
case 8:
//#line 42 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 10:
//#line 45 ".\gramatica.y"
{funciones.put((String)((ArbolSintactico)val_peek(0)).getLex(),(ArbolSintactico)val_peek(0));}
break;
case 12:
//#line 48 ".\gramatica.y"
{
            yyval = new NodoHoja("Entero");
            ((NodoHoja)yyval).setTipo("Entero");
           }
break;
case 13:
//#line 52 ".\gramatica.y"
{
            yyval = new NodoHoja("Float");
            ((NodoHoja)yyval).setTipo("Float");
           }
break;
case 14:
//#line 57 ".\gramatica.y"
{  System.out.println("Declaracion de datos");
                                        for (String s : ((NodoTipos)val_peek(0)).getList()){
                                                String ambito = ambitoActual;
                                                while(TablaSimbolos.existeSimbolo(s+":"+ambito)){
                                                        if(ambito.equals("Global")){
                                                                yyerror("La variable " + s + " ya se encuentra declarada en el ambito " + ambitoActual);
                                                                ambito = "";
                                                                break;
                                                        }else{
                                                                char [] a = ambito.toCharArray();
                                                                for (int i = a.length;i>=0;i--){
                                                                        if(a[i-1] == ':'){
                                                                        ambito = ambito.substring(0,i-1);
                                                                        break;
                                                                }
                                                        }
                                                }
                                        }  
                                        if(ambito.equals(ambitoActual)){
                                                TablaSimbolos.addNuevoSimbolo(s+":"+ambito);
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Id",TablaSimbolos.getAtributo(s,"Id"));
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Tipo",((ArbolSintactico) val_peek(1)).getTipo());
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Linea",AnalizadorLexico.getLineaAct());
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Uso","Variable");
                                                TablaSimbolos.removeAtributo(s);
                                        }
                                        

                                        }
                                        yyval = val_peek(0);
                                }
break;
case 15:
//#line 88 ".\gramatica.y"
{yyerror("No esta permitido el tipo declarado");}
break;
case 16:
//#line 90 ".\gramatica.y"
{
                            yyval=val_peek(2);
                            ((NodoTipos)yyval).add((String)val_peek(0).sval);
                            }
break;
case 17:
//#line 94 ".\gramatica.y"
{
               yyval=new NodoTipos((String)val_peek(0).sval);
              }
break;
case 18:
//#line 98 ".\gramatica.y"
{       

                        if(!TablaSimbolos.existeSimbolo(val_peek(7).sval+ ":" + ambitoActual)){
                                yyval = new ParserVal(val_peek(7).sval);
                                TablaSimbolos.addNuevoSimbolo(val_peek(7).sval+ ":" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(7).sval+ ":" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(7).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(7).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(7).sval);
                                TablaSimbolos.addAtributo(val_peek(7).sval+":"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addAtributo(val_peek(7).sval +":"+ambitoActual,"Parametro1",((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual +":"+ val_peek(7).sval);
                                TablaSimbolos.addAtributo(val_peek(7).sval +":"+ambitoActual,"Parametro2",((ArbolSintactico)val_peek(3)).getLex()+ ":"+ ambitoActual +":"+ val_peek(7).sval);
                                ambitoActual += ":"+val_peek(7).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                /*Agrego los parametros en la tabla de simbolos*/
                                TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual);
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(5)).getTipo());
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual,"Uso","Variable");
                                TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual);
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Uso","Variable");

                        }else{
                                yyerror("La funcion " + val_peek(7).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += ":"+val_peek(7).sval;
                        }
                        
}
break;
case 19:
//#line 125 ".\gramatica.y"
{
                        if(!TablaSimbolos.existeSimbolo(val_peek(5).sval+ ":" + ambitoActual)){
                                yyval = new ParserVal(val_peek(5).sval);
                                TablaSimbolos.addNuevoSimbolo(val_peek(5).sval+ ":" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(5).sval+ ":" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(5).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(5).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(5).sval);
                                TablaSimbolos.addAtributo(val_peek(5).sval+":"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addAtributo(val_peek(5).sval +":"+ambitoActual,"Parametro1", ((ArbolSintactico)val_peek(3)).getLex()+ ":"+ ambitoActual +":"+ val_peek(5).sval);
                                ambitoActual += ":"+val_peek(5).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                /*Agrego el parametro en la tabla de simbolos*/
                                TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual);
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Uso","Variable");

                        }else{
                                yyerror("La funcion " + val_peek(5).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += ":"+val_peek(5).sval;
                        }
                }
break;
case 20:
//#line 146 ".\gramatica.y"
{
                        if(!TablaSimbolos.existeSimbolo(val_peek(4).sval+ ":" + ambitoActual)){
                                yyval = new ParserVal(val_peek(4).sval);
                                TablaSimbolos.addNuevoSimbolo(val_peek(4).sval+ ":" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(4).sval+ ":" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(4).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(4).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(4).sval);
                                TablaSimbolos.addAtributo(val_peek(4).sval+":"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                ambitoActual += ":"+val_peek(4).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());

                        }else{
                                yyerror("La funcion " + val_peek(4).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += ":"+val_peek(4).sval;
                        }
                }
break;
case 21:
//#line 163 ".\gramatica.y"
{yyerror("El tipo declarado no esta permitido");}
break;
case 22:
//#line 164 ".\gramatica.y"
{yyerror("Se esperaba :");}
break;
case 23:
//#line 165 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 24:
//#line 166 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 25:
//#line 167 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 26:
//#line 168 ".\gramatica.y"
{yyerror("Se esperaba un nombre de funcion");}
break;
case 27:
//#line 172 ".\gramatica.y"
{
                                System.out.println("Declaracion de Funcion");
                                yyval = new NodoControl("Funcion:"+val_peek(3).sval,(ArbolSintactico)val_peek(1));
                                char [] a = ambitoActual.toCharArray();
                                for (int i = a.length;i>=0;i--){
                                        if(a[i-1] == ':'){
                                                ambitoActual = ambitoActual.substring(0,i-1);
                                                break;
                                        }
                                }
                                removeTipoActual();
                        }
break;
case 28:
//#line 184 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 29:
//#line 185 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 30:
//#line 187 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 31:
//#line 188 ".\gramatica.y"
{yyval=new NodoComun("Sentencia_Funcion", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));}
break;
case 32:
//#line 189 ".\gramatica.y"
{yyerror("Se esperaba ;");}
break;
case 33:
//#line 191 ".\gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa Datos");}
break;
case 34:
//#line 192 ".\gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa Funcion");}
break;
case 35:
//#line 193 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 36:
//#line 194 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 37:
//#line 195 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 38:
//#line 196 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 39:
//#line 197 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 40:
//#line 198 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 41:
//#line 199 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 42:
//#line 200 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 43:
//#line 201 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 44:
//#line 203 ".\gramatica.y"
{System.out.println("Sentencia IF");
                                yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(8),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(5)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));
                        }
break;
case 45:
//#line 206 ".\gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(6)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));}
break;
case 46:
//#line 208 ".\gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(7)),new NodoControl("else fun", (ArbolSintactico)val_peek(3))));}
break;
case 47:
//#line 211 ".\gramatica.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF FUN", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                }
break;
case 48:
//#line 214 ".\gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(6)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));}
break;
case 49:
//#line 217 ".\gramatica.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF FUN", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );}
break;
case 50:
//#line 219 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 51:
//#line 220 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 52:
//#line 221 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 53:
//#line 222 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 54:
//#line 223 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 55:
//#line 224 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 56:
//#line 225 ".\gramatica.y"
{yyerror("Se esperaba then ");}
break;
case 57:
//#line 226 ".\gramatica.y"
{yyerror("Se esperaba ) ");}
break;
case 58:
//#line 227 ".\gramatica.y"
{yyerror("Se esperaba una condicion ");}
break;
case 59:
//#line 229 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 60:
//#line 232 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 61:
//#line 235 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 62:
//#line 236 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 63:
//#line 237 ".\gramatica.y"
{yyerror("Se esperaba then ");}
break;
case 64:
//#line 238 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 65:
//#line 239 ".\gramatica.y"
{yyerror("Se esperaba condicion");}
break;
case 66:
//#line 240 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 67:
//#line 243 ".\gramatica.y"
{
                                yyval = new NodoComun("While con Etiqueta Funcion",new NodoControl("Etiqueta", new NodoHoja(val_peek(12).sval)) , new NodoComun("While", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                                System.out.println("Sentencia WHILE con etiqueta y con llaves");
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(12).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(12).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(12).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(12).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(12).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(12).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(12).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 68:
//#line 257 ".\gramatica.y"
{
                                System.out.println("Sentencia WHILE con etiqueta y sin llaves");
                                yyval = new NodoComun("While con Etiqueta Funcion",new NodoControl("Etiqueta", new NodoHoja(val_peek(10).sval)) , new NodoComun("While", (ArbolSintactico) val_peek(6), new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(10).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(10).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(10).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(10).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(10).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(10).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(10).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 69:
//#line 270 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 70:
//#line 271 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 71:
//#line 272 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 72:
//#line 273 ".\gramatica.y"
{yyerror("Se esperaba una asignacion");}
break;
case 73:
//#line 274 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 74:
//#line 275 ".\gramatica.y"
{yyerror("Se esperaba :");}
break;
case 75:
//#line 276 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 76:
//#line 277 ".\gramatica.y"
{yyerror("Se esperaba una condicion");}
break;
case 77:
//#line 278 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 78:
//#line 279 ".\gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 79:
//#line 282 ".\gramatica.y"
{
                    yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");
                }
break;
case 80:
//#line 286 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 81:
//#line 287 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 82:
//#line 288 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 83:
//#line 289 ".\gramatica.y"
{yyerror("Se esperaba una asignacion");}
break;
case 84:
//#line 290 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 85:
//#line 291 ".\gramatica.y"
{yyerror("Se esperaba :");}
break;
case 86:
//#line 292 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 87:
//#line 293 ".\gramatica.y"
{yyerror("Se esperaba una condicion");}
break;
case 88:
//#line 294 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 89:
//#line 297 ".\gramatica.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(13).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(13).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(13).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(13).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 90:
//#line 311 ".\gramatica.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(13).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(13).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(13).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(13).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 91:
//#line 325 ".\gramatica.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(11).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(11).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(11).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(11).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 92:
//#line 339 ".\gramatica.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(11).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(11).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(11).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(11).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 93:
//#line 352 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 94:
//#line 353 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 95:
//#line 354 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 96:
//#line 355 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 97:
//#line 356 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 98:
//#line 357 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 99:
//#line 358 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 100:
//#line 359 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 101:
//#line 362 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 102:
//#line 365 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 103:
//#line 368 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 104:
//#line 371 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 105:
//#line 372 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 106:
//#line 373 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 107:
//#line 374 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 108:
//#line 375 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 109:
//#line 376 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 110:
//#line 377 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 111:
//#line 379 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 112:
//#line 380 ".\gramatica.y"
{yyval=new NodoComun("Sentencia_Funcion_Break", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));}
break;
case 113:
//#line 381 ".\gramatica.y"
{yyerror("Se esperaba ;");}
break;
case 114:
//#line 383 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 115:
//#line 384 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 116:
//#line 385 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 117:
//#line 386 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 118:
//#line 387 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 119:
//#line 388 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 120:
//#line 389 ".\gramatica.y"
{yyval = new NodoControl("Continue",(ArbolSintactico)val_peek(0));}
break;
case 121:
//#line 390 ".\gramatica.y"
{yyval = new NodoHoja("Break");}
break;
case 122:
//#line 391 ".\gramatica.y"
{yyval = new NodoControl("Break", new NodoHoja(val_peek(0).sval));}
break;
case 123:
//#line 392 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 124:
//#line 395 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 125:
//#line 398 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 126:
//#line 401 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 127:
//#line 402 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 128:
//#line 403 ".\gramatica.y"
{yyerror("Se esperaba then ");}
break;
case 129:
//#line 404 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 130:
//#line 405 ".\gramatica.y"
{yyerror("Se esperaba condicion");}
break;
case 131:
//#line 406 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 132:
//#line 409 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 133:
//#line 414 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 134:
//#line 419 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 135:
//#line 424 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 136:
//#line 429 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 137:
//#line 434 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 138:
//#line 438 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 139:
//#line 439 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 140:
//#line 440 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 141:
//#line 441 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 142:
//#line 442 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 143:
//#line 443 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 144:
//#line 444 ".\gramatica.y"
{yyerror("Se esperaba then ");}
break;
case 145:
//#line 445 ".\gramatica.y"
{yyerror("Se esperaba ) ");}
break;
case 146:
//#line 446 ".\gramatica.y"
{yyerror("Se esperaba una condicion ");}
break;
case 147:
//#line 447 ".\gramatica.y"
{yyerror("Se esperaba ( ");}
break;
case 148:
//#line 449 ".\gramatica.y"
{yyval = new NodoControl("Retorno", (ArbolSintactico)val_peek(1));
                                                String tipoRet = ((ArbolSintactico)val_peek(1)).getTipo();
                                                if(!ambitoActual.equals("Global")){
                                                        String tipoFun = getTipoActual();
                                                        if(!tipoRet.equals(tipoFun)){
                                                                yyerror("El retorno debe ser del mismo tipo que el retorno de la funcion.");
                                                        }
                                                }else{
                                                        yyerror("El retorno puede estar solo dentro de una funcion.");
                                                }
                                        }
break;
case 149:
//#line 462 ".\gramatica.y"
{    yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(1)).getTipo());
}
break;
case 150:
//#line 465 ".\gramatica.y"
{yyerror("No esta permitido el tipo declarado");}
break;
case 151:
//#line 468 ".\gramatica.y"
{System.out.println("Declaracion de Constante/s");}
break;
case 154:
//#line 474 ".\gramatica.y"
{ 
                                String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                                if(ambito.equals(ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(2).sval+":"+ambito);
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambito,"Id",TablaSimbolos.getAtributo(val_peek(2).sval,"Id"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambito,"Tipo",((ArbolSintactico) val_peek(2)).getTipo());
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambito,"Linea",AnalizadorLexico.getLineaAct());
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambito,"Uso","Variable");
                                }
                        }
break;
case 155:
//#line 485 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 156:
//#line 486 ".\gramatica.y"
{yyval = val_peek(0); }
break;
case 157:
//#line 487 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 158:
//#line 488 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 159:
//#line 489 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 160:
//#line 490 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 161:
//#line 491 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 162:
//#line 493 ".\gramatica.y"
{
                                        System.out.println("Asignacion");
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,new NodoHoja(val_peek(2).sval), (ArbolSintactico) val_peek(0));
                                        String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                                        String tipoS1 = "";
                                        if(!ambito.equals("")){
                                                if(((String)TablaSimbolos.getAtributo(val_peek(2).sval+":"+ambito, "Uso")).equals("Variable")){
                                                        tipoS1 = (String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo");
                                                        ((ArbolSintactico)yyval).setTipo(tipoS1);
                                                }
                                                else {
                                                        yyerror(val_peek(2).sval+" no es una variable.");
                                                }
                                        }
                                        String tipoS3 = ((ArbolSintactico)val_peek(0)).getTipo();
                                        if(!(tipoS1.equals(tipoS3))){
                                                yyerror("No se puede realizar una asignacion con tipos diferentes.");
                                        }
                                        
                                }
break;
case 163:
//#line 514 ".\gramatica.y"
{     
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));

                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una suma con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                        
                                 }
break;
case 164:
//#line 524 ".\gramatica.y"
{yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una resta con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                 }
break;
case 165:
//#line 531 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 166:
//#line 532 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 169:
//#line 537 ".\gramatica.y"
{ 
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una multiplicacion con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 170:
//#line 546 ".\gramatica.y"
{
                                        yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una division con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 171:
//#line 555 ".\gramatica.y"
{
                  yyval = val_peek(0);
                 }
break;
case 172:
//#line 559 ".\gramatica.y"
{
                yyval = new NodoHoja(val_peek(0).sval);
                String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                if((!ambito.equals(""))){
                        if(((String)TablaSimbolos.getAtributo(val_peek(0).sval+":"+ambito, "Uso")).equals("Variable")){
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +":"+ ambito,"Tipo"));
                        }
                        else{
                                yyerror(val_peek(0).sval+" no es una variable");
                        }
                }
           }
break;
case 173:
//#line 572 ".\gramatica.y"
{
                yyval = new NodoHoja(val_peek(0).sval);
                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
              }
break;
case 174:
//#line 577 ".\gramatica.y"
{  chequearRangoI32(val_peek(0).sval);}
break;
case 175:
//#line 578 ".\gramatica.y"
{}
break;
case 176:
//#line 579 ".\gramatica.y"
{chequearRangoI32Neg(val_peek(0).sval);}
break;
case 178:
//#line 583 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                                                                                                                                }
break;
case 179:
//#line 587 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");}
break;
case 180:
//#line 590 ".\gramatica.y"
{yyval = new NodoComun("IF", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                                                                                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");}
break;
case 181:
//#line 592 ".\gramatica.y"
{yyval = new NodoComun("IF", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                                                                                        System.out.println("Sentencia IF sin corchetes y sin else");}
break;
case 182:
//#line 594 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF con corchetes y else");}
break;
case 183:
//#line 597 ".\gramatica.y"
{
                                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                                        System.out.println("Sentencia IF con corchetes y sin else");}
break;
case 184:
//#line 600 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 185:
//#line 601 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 186:
//#line 602 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 187:
//#line 603 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 188:
//#line 604 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 189:
//#line 605 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 190:
//#line 606 ".\gramatica.y"
{yyerror("Se esperaba then ");}
break;
case 191:
//#line 607 ".\gramatica.y"
{yyerror("Se esperaba ) ");}
break;
case 192:
//#line 608 ".\gramatica.y"
{yyerror("Se esperaba una condicion ");}
break;
case 193:
//#line 609 ".\gramatica.y"
{yyerror("Se esperaba ( ");}
break;
case 194:
//#line 614 ".\gramatica.y"
{
                        yyval= new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                        if (!((((ArbolSintactico)val_peek(2)).getTipo()).equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                               yyerror("error en la comparacion entre expresiones de distintos tipos");
                        }
                }
break;
case 195:
//#line 620 ".\gramatica.y"
{yyerror("Se esperaba otra expresion para comparar.");}
break;
case 196:
//#line 621 ".\gramatica.y"
{yyerror("Se esperaba un tipo de comparacion.");}
break;
case 197:
//#line 623 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 198:
//#line 624 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 199:
//#line 625 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 200:
//#line 626 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 201:
//#line 627 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 202:
//#line 629 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 203:
//#line 630 ".\gramatica.y"
{
                                                                yyval=new NodoComun("Bloque Ejecutable", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                                                                }
break;
case 204:
//#line 633 ".\gramatica.y"
{yyerror("Se esperaba ;");}
break;
case 205:
//#line 635 ".\gramatica.y"
{
                        yyval = new NodoControl(val_peek(3).sval, (ArbolSintactico) new NodoHoja(val_peek(1).sval));
                        System.out.println("Sentencia OUT");}
break;
case 206:
//#line 638 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 207:
//#line 639 ".\gramatica.y"
{yyerror("Se esperaba una CADENA");}
break;
case 208:
//#line 640 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 209:
//#line 642 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 210:
//#line 645 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 211:
//#line 648 ".\gramatica.y"
{yyerror("Se esperaba } en el when");}
break;
case 212:
//#line 649 ".\gramatica.y"
{yyerror("Se esperaba { en el when");}
break;
case 213:
//#line 650 ".\gramatica.y"
{yyerror("Se esperaba then en el when");}
break;
case 214:
//#line 651 ".\gramatica.y"
{yyerror("Se esperaba condicion en el when");}
break;
case 215:
//#line 652 ".\gramatica.y"
{yyerror("Se esperaba ( en el when");}
break;
case 216:
//#line 653 ".\gramatica.y"
{yyerror("Se esperaba ) en el when");}
break;
case 217:
//#line 654 ".\gramatica.y"
{yyerror("Se esperaba then en el when");}
break;
case 218:
//#line 657 ".\gramatica.y"
{
                                yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(12).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(12).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(12).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(12).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(12).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(12).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(12).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(12).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        
                                System.out.println("Sentencia WHILE con etiqueta y con llaves");
                        }
break;
case 219:
//#line 671 ".\gramatica.y"
{
                        yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(10).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );
                        if(!TablaSimbolos.existeSimbolo(val_peek(10).sval+ ":" + ambitoActual)){
                                TablaSimbolos.addNuevoSimbolo(val_peek(10).sval+ ":" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(10).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                TablaSimbolos.addAtributo(val_peek(10).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(10).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(10).sval);
                        }else{
                                yyerror("La etiqueta '" + val_peek(10).sval + "' ya existe en el ambito " + ambitoActual);
                        }
                        
                        System.out.println("Sentencia WHILE con etiqueta y sin llaves");}
break;
case 220:
//#line 683 ".\gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 221:
//#line 686 ".\gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");}
break;
case 222:
//#line 689 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 223:
//#line 690 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 224:
//#line 691 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 225:
//#line 692 ".\gramatica.y"
{yyerror("Se esperaba una asignacion");}
break;
case 226:
//#line 693 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 227:
//#line 694 ".\gramatica.y"
{yyerror("Se esperaba :");}
break;
case 228:
//#line 695 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 229:
//#line 696 ".\gramatica.y"
{yyerror("Se esperaba una condicion");}
break;
case 230:
//#line 697 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 231:
//#line 699 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 232:
//#line 700 ".\gramatica.y"
{
                yyval = new NodoComun("Bloque Break con Continue",(ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                }
break;
case 233:
//#line 703 ".\gramatica.y"
{yyerror("Se esperaba ;");}
break;
case 234:
//#line 706 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 235:
//#line 707 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 236:
//#line 708 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 237:
//#line 709 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 238:
//#line 710 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 239:
//#line 711 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 240:
//#line 712 ".\gramatica.y"
{yyval = new NodoControl("Continue",(ArbolSintactico)val_peek(0));}
break;
case 241:
//#line 713 ".\gramatica.y"
{yyval = new NodoHoja("Break");}
break;
case 242:
//#line 714 ".\gramatica.y"
{yyval = new NodoControl("Break", new NodoHoja(val_peek(0).sval));}
break;
case 243:
//#line 716 ".\gramatica.y"
{yyval = new NodoHoja("Fin");}
break;
case 244:
//#line 717 ".\gramatica.y"
{yyval = new NodoControl("Tag", new NodoHoja(val_peek(0).sval) );}
break;
case 245:
//#line 719 ".\gramatica.y"
{System.out.println("Sentencia WHEN");}
break;
case 246:
//#line 720 ".\gramatica.y"
{System.out.println("Sentencia WHEN");}
break;
case 247:
//#line 721 ".\gramatica.y"
{yyerror("Se esperaba } en el when");}
break;
case 248:
//#line 722 ".\gramatica.y"
{yyerror("Se esperaba { en el when");}
break;
case 249:
//#line 723 ".\gramatica.y"
{yyerror("Se esperaba then en el when");}
break;
case 250:
//#line 724 ".\gramatica.y"
{yyerror("Se esperaba condicion en el when");}
break;
case 251:
//#line 725 ".\gramatica.y"
{yyerror("Se esperaba ( en el when");}
break;
case 252:
//#line 726 ".\gramatica.y"
{yyerror("Se esperaba ) en el when");}
break;
case 253:
//#line 727 ".\gramatica.y"
{yyerror("Se esperaba then en el when");}
break;
case 254:
//#line 730 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 255:
//#line 735 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 256:
//#line 740 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 257:
//#line 745 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 258:
//#line 750 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 259:
//#line 755 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 260:
//#line 759 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 261:
//#line 760 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 262:
//#line 761 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 263:
//#line 762 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 264:
//#line 763 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 265:
//#line 764 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 266:
//#line 765 ".\gramatica.y"
{yyerror("Se esperaba then ");}
break;
case 267:
//#line 766 ".\gramatica.y"
{yyerror("Se esperaba ) ");}
break;
case 268:
//#line 767 ".\gramatica.y"
{yyerror("Se esperaba una condicion ");}
break;
case 269:
//#line 768 ".\gramatica.y"
{yyerror("Se esperaba ( ");}
break;
case 270:
//#line 772 ".\gramatica.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(13).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(13).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(13).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(13).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 271:
//#line 786 ".\gramatica.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(13).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(13).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(13).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(13).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(13).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 272:
//#line 800 ".\gramatica.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(11).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(11).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(11).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(11).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 273:
//#line 814 ".\gramatica.y"
{
                                System.out.println("Sentencia FOR");
                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                        
                                if(!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(11).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(11).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(11).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(11).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(11).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 274:
//#line 827 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 275:
//#line 828 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 276:
//#line 829 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 277:
//#line 830 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 278:
//#line 831 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 279:
//#line 832 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 280:
//#line 833 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 281:
//#line 834 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 282:
//#line 837 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 283:
//#line 840 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 284:
//#line 843 ".\gramatica.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 285:
//#line 846 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 286:
//#line 847 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 287:
//#line 848 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 288:
//#line 849 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 289:
//#line 850 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 290:
//#line 851 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 291:
//#line 852 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 292:
//#line 855 ".\gramatica.y"
{
                        yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                }
break;
case 293:
//#line 860 ".\gramatica.y"
{yyval=new NodoHoja(val_peek(0).sval);
                        String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        if(!ambito.equals("")){
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +":"+ ambito,"Tipo"));
                        }
                     }
break;
case 294:
//#line 867 ".\gramatica.y"
{
                                                        yyval=new NodoComun("llamado funcion",(ArbolSintactico)val_peek(3),(ArbolSintactico)val_peek(1));
                                                        
                                                        String ambito = buscarAmbito(ambitoActual,val_peek(5).sval);
                                                        if (!ambito.equals("") ){
                                                                if( !TablaSimbolos.getAtributo(val_peek(5).sval+":"+ambito,"Uso").equals("Funcion") ){
                                                                        yyerror("La funcion "+val_peek(5).sval+" no fue declarada");
                                                                }else{
                                                                        String par1 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +":"+ ambito,"Parametro1");
                                                                        String par2 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +":"+ ambito,"Parametro2");
                                                                        if(par1 != null)
                                                                                if(par2 != null){
                                                                                        String tipoS3 = (String) ((ArbolSintactico) val_peek(3) ).getTipo();
                                                                                        if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") ) )){
                                                                                                String nombreS3 = ((ArbolSintactico) val_peek(3)).getLex();
                                                                                                yyerror("El tipo del parametro"+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                                                                        }
                                                                                        String tipoS5 = (String) ((ArbolSintactico) val_peek(1)).getTipo();
                                                                                        if( !(tipoS5.equals((String)TablaSimbolos.getAtributo(par2,"Tipo") ))){
                                                                                                String nombreS5 = ((ArbolSintactico) val_peek(1)).getLex();
                                                                                                yyerror("El tipo del parametro"+ nombreS5+" no coincide con el tipo declarado en la funcion.");
                                                                                        }
                                                                                }else{
                                                                                        yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                                }
                                                                        else{
                                                                                yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                        }
                                                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(5).sval +":"+ ambito,"Tipo"));
                                                                }
                                                        }
                                                }
break;
case 295:
//#line 899 ".\gramatica.y"
{System.out.println("Llamado fun 1 parametro");
                yyval=new NodoComun("llamado funcion",(ArbolSintactico)val_peek(1),new NodoHoja("Un solo parametro"));
            String ambito = buscarAmbito(ambitoActual,val_peek(3).sval);
            if (!ambito.equals("")){
                if (!TablaSimbolos.getAtributo(val_peek(3).sval+":"+ambito,"Uso").equals("Funcion")){
                        yyerror("La funcion "+val_peek(3).sval+" no fue declarada");
                }else{
                        String par1 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +":"+ ambito,"Parametro1");
                        String par2 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +":"+ ambito,"Parametro2");
                        if(par2 ==null){
                                if(par1!=null){
                                        String tipoS3 = (String) ((ArbolSintactico) val_peek(1) ).getTipo();
                                        if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") )) ){
                                                String nombreS3 = ((ArbolSintactico) val_peek(1)).getLex();
                                                yyerror("El tipo del parametro"+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                        }
                                }else{
                                        yyerror("La funcion esta declarada sin parametros.");
                                }
                        }else{
                                yyerror("La funcion esta declarada con dos parametros.");
                        }
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(3).sval +":"+ ambito,"Tipo"));
                }
            }
        }
break;
case 296:
//#line 925 ".\gramatica.y"
{yyval=new NodoHoja("llamado funcion sin parametros");
                String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                if (!ambito.equals("") ){
                        if (TablaSimbolos.getAtributo(val_peek(2).sval+":"+ambito,"Uso").equals("Funcion")){
                                yyerror("La funcion "+val_peek(2).sval+" no fue declarada");
                                
                        }else{
                                String par1 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Parametro1");
                                String par2 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Parametro2");
                                if(par2 != null){
                                        if(par1 == null){
                                                yyerror("La funcion esta declarada con un parametro.");
                                        }
                                }else{
                                        yyerror("La funcion esta declarada con dos parametros.");
                                }
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                        }
                }       
        }
break;
case 297:
//#line 945 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 298:
//#line 946 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 299:
//#line 947 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
//#line 3156 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 * @throws IOException
 */
public void run() throws IOException
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
