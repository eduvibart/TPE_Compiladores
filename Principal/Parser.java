//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramaticaTomi.y"
package Principal;
import java.io.IOException;
import AnalizadorLexico.AnalizadorLexico;
import AnalizadorLexico.Token;
import GeneracionCodigoIntermedio.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

//#line 28 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IF=257;
public final static short THEN=258;
public final static short ELSE=259;
public final static short END_IF=260;
public final static short OUT=261;
public final static short FUN=262;
public final static short RETURN=263;
public final static short BREAK=264;
public final static short WHEN=265;
public final static short WHILE=266;
public final static short FOR=267;
public final static short CONTINUE=268;
public final static short ID=269;
public final static short I32=270;
public final static short F32=271;
public final static short PUNTO=272;
public final static short PARENT_A=273;
public final static short PARENT_C=274;
public final static short COMILLA=275;
public final static short COMA=276;
public final static short DOSPUNTOS=277;
public final static short PUNTOCOMA=278;
public final static short IGUAL=279;
public final static short MAYOR=280;
public final static short MENOR=281;
public final static short MENORIGUAL=282;
public final static short MAYORIGUAL=283;
public final static short LLAVE_A=284;
public final static short LLAVE_C=285;
public final static short EXCL=286;
public final static short DIST=287;
public final static short ASIG=288;
public final static short CADENA=289;
public final static short COMENT=290;
public final static short CONST=291;
public final static short SUMA=292;
public final static short RESTA=293;
public final static short MULT=294;
public final static short DIV=295;
public final static short ENTERO=296;
public final static short FLOAT=297;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    1,    2,    2,    2,    3,    3,
    4,    4,    4,    9,    9,    6,    6,   10,   10,   11,
   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
   11,   11,   11,   11,    7,    7,    7,   13,   13,   13,
   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
   14,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   19,   19,   19,   19,
   19,   19,   19,   19,   24,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   25,   25,   25,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   26,   31,   31,   31,   31,   31,   31,
   31,   31,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   22,   22,   22,
   22,   12,   12,    8,   33,   33,   34,   34,   34,    5,
    5,    5,    5,    5,    5,    5,   15,   15,   15,   28,
   28,   28,   28,   28,   28,   28,   28,   28,   39,   39,
   39,   39,   39,   40,   40,   40,   29,   29,   29,   29,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   23,   23,   23,   27,   27,
   27,   27,   27,   27,   41,   41,   41,   18,   18,   18,
   18,   36,   36,   36,   36,   36,   36,   36,   36,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   42,   42,   42,   43,   43,   43,   43,   43,
   43,   43,   43,   43,   32,   32,   32,   45,   45,   45,
   45,   45,   45,   45,   45,   44,   44,   44,   44,   44,
   44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
   44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   46,   46,   16,   16,   16,   16,
   16,   16,   16,
};
final static short yylen[] = {                            2,
    4,    4,    4,    4,    1,    0,    3,    3,    1,    1,
    1,    1,    1,    1,    1,    2,    2,    3,    1,    9,
    7,    6,    9,    7,    6,    8,    6,    5,    7,    5,
    4,    6,    3,    2,    4,    4,    2,    0,    3,    3,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,   11,   13,   13,    8,   13,    9,   13,   12,   10,
    9,    8,   12,   11,    9,    8,    7,    6,    5,    4,
    3,    2,   11,   10,   12,   11,    8,    6,    8,    6,
    5,    4,    3,    2,    2,   12,   10,   11,    9,   12,
   10,    9,    8,    7,    6,    5,    4,    3,   11,    9,
    8,    7,    6,    5,    4,    3,    2,   17,   17,   15,
   15,   16,   16,   14,   14,   17,   15,   14,   17,   15,
   14,   13,   13,   12,   11,   10,    9,    8,    7,    6,
    5,    4,    3,   16,   14,   13,   16,   14,   13,   12,
   12,   11,   10,    9,    8,    7,    6,    5,    4,    3,
    2,    0,    3,    3,    1,    1,    1,    1,    1,    1,
    2,    1,    2,    1,    8,    6,    8,    6,    5,    4,
    3,    2,   11,   12,   12,    8,   13,    9,   13,   12,
   10,    9,    8,   12,   11,    9,    8,    7,   12,   11,
   11,   10,    6,    5,    4,    3,    2,    4,    4,    3,
    2,    2,    2,    2,    3,    1,    3,    3,    2,    1,
    1,    1,    1,    1,    1,    1,    3,    2,    3,    3,
    3,    1,    3,    3,    3,    3,    3,    3,    3,    3,
    1,    3,    3,    1,    1,    1,    1,    1,    2,    2,
   12,   12,   11,    8,   13,    9,   13,   12,   10,    9,
    8,   12,   11,    9,    8,    7,   11,   10,   12,   11,
    6,    5,    4,    3,    2,    3,    3,    2,    1,    1,
    1,    1,    1,    1,    0,    3,    2,    4,    4,    3,
    2,    8,    6,    8,    6,    5,    4,    3,    2,   12,
   10,   11,    9,   11,    9,    8,    7,    6,    5,    4,
    3,    2,    0,    3,    2,    1,    1,    1,    1,    1,
    1,    2,    1,    2,    0,    2,    2,    8,    6,    8,
    6,    5,    4,    3,    2,   12,   12,   11,    8,   13,
    9,   13,   12,   10,    9,    8,   12,   11,    9,    8,
    7,   11,   10,   12,   11,    6,    5,    4,    3,    2,
   17,   17,   15,   15,   16,   16,   14,   14,   17,   15,
   14,   17,   15,   14,   13,   13,   12,   11,   10,    9,
    8,    7,    6,    5,    4,    3,   16,   14,   13,   16,
   14,   13,   12,   12,   11,   10,    9,    8,    7,    6,
    5,    4,    3,    2,    1,    1,    6,    4,    3,    6,
    4,    3,    5,
};
final static short yydefred[] = {                         0,
    0,    5,    0,    0,    6,    6,    6,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   14,   15,    4,
    0,    0,    9,   10,   11,   12,   13,    0,    0,  210,
  216,  212,    0,  211,  213,  214,  215,    3,    2,    1,
  265,    0,  281,    0,   34,    0,  289,    0,  302,    0,
  394,    0,  218,    0,   85,    0,    0,    0,  206,    8,
    7,   17,   19,    0,   37,   38,    0,    0,  264,    0,
    0,  237,  238,  236,    0,    0,  235,    0,    0,    0,
  231,  280,    0,   33,    0,  288,    0,  301,    0,  393,
    0,  402,  396,  399,  395,    0,  219,    0,  209,    0,
    0,    0,    0,    0,  376,    0,  239,  240,  263,    0,
  268,  269,  270,  271,  272,  273,  274,    0,    0,    0,
    0,    0,    0,    0,  279,  278,   31,    0,    0,    0,
  287,    0,  300,    0,  392,    0,  401,  398,    0,  208,
  207,  205,   18,   36,    0,    0,    0,    0,    0,   35,
   41,   42,   43,    0,   44,   45,   46,   47,   48,   49,
   50,   51,    0,    0,  375,    0,  262,    0,  225,    0,
    0,  226,    0,  267,    0,  227,  223,  228,  224,  232,
  229,  233,  230,   28,    0,  203,  202,   30,    0,    0,
  286,    0,  299,    0,  391,    0,  403,    0,   72,    0,
  201,    0,   84,    0,  107,    0,  151,    0,   40,   39,
    0,    0,    0,  374,    0,  261,  275,    0,   25,   22,
   27,    0,   32,    0,  285,  275,  283,  298,    0,  390,
    0,  400,  397,   71,    0,  200,    0,   83,    0,  106,
    0,  150,    0,   98,    0,  133,    0,    0,  373,    0,
    0,  256,    0,   24,   21,   29,    0,    0,  297,    0,
    0,  389,    0,   70,    0,  199,  198,   82,    0,  105,
    0,  149,    0,   97,    0,  132,    0,    0,  372,    0,
  251,    0,    0,  255,    0,  244,   26,    0,  284,  282,
  296,    0,  388,    0,   69,    0,   81,    0,  104,    0,
  148,    0,   96,    0,  131,    0,    0,  371,    0,  250,
    0,  246,  276,  254,  275,    0,   23,   20,  295,    0,
    0,    0,    0,    0,  303,  306,  308,  311,  310,  293,
  307,  309,  387,    0,   68,   38,    0,   80,   38,   78,
  103,    0,  147,    0,   95,    0,  130,    0,    0,  370,
    0,  249,  275,    0,    0,  258,    0,  350,    0,  314,
  325,    0,    0,  312,    0,  386,    0,    0,   67,    0,
    0,  102,    0,  146,    0,   94,    0,  129,    0,  303,
  291,  369,    0,    0,  260,    0,  253,    0,  257,  243,
  349,    0,  324,    0,  317,  316,  294,  292,    0,  385,
    0,    0,   62,    0,   66,    0,   55,   79,   77,  101,
    0,  145,    0,   93,    0,  128,    0,    0,  368,    0,
  248,    0,  259,  242,  252,  241,  348,    0,  323,    0,
  304,  383,    0,  384,    0,   61,    0,   57,    0,   65,
   38,    0,  100,    0,    0,    0,    0,  152,  155,  157,
  160,  159,  164,   89,  156,  158,  144,    0,   92,    0,
  127,    0,  290,  367,    0,    0,  247,  245,  347,    0,
  322,    0,  382,    0,  379,    0,   60,   38,    0,    0,
    0,   74,    0,  197,    0,  163,  172,    0,  161,    0,
  143,    0,   91,  152,   87,  126,    0,  365,    0,  366,
    0,  346,  303,    0,  321,  303,  319,  381,  303,  358,
  378,  303,  357,    0,   76,    0,    0,   64,    0,   73,
   52,  196,    0,  171,    0,   99,   88,    0,  142,    0,
    0,    0,  125,    0,  364,    0,  361,    0,    0,  341,
    0,    0,    0,    0,   59,    0,   75,    0,   63,    0,
  195,    0,  170,    0,  154,  153,  140,    0,  141,    0,
   90,   86,  124,    0,    0,  363,  303,  353,  360,  303,
  354,  336,    0,  340,    0,  329,  320,  318,  380,  355,
  377,  356,   58,   56,   53,   54,  194,    0,  169,    0,
  139,    0,  136,    0,  122,    0,  123,    0,    0,    0,
  335,    0,  331,  339,  303,    0,  193,  152,    0,  168,
  152,  166,  138,  152,  115,  135,  152,  114,  121,    0,
  118,    0,  362,  351,  359,  352,  334,  303,    0,    0,
  343,    0,    0,  188,    0,    0,    0,    0,  120,  152,
  110,  117,  152,  111,    0,  345,    0,  338,    0,  342,
  328,  183,    0,  187,    0,  176,  167,  165,  137,  112,
  134,  113,    0,    0,  333,    0,  344,  327,  337,  326,
  182,    0,  178,  186,  152,    0,  119,  108,  116,  109,
  332,  330,  181,  152,    0,    0,  192,    0,    0,  190,
    0,  185,    0,  191,  173,  180,    0,  189,  174,  184,
  175,  179,  177,
};
final static short yydgoto[] = {                          3,
    4,    8,   22,   23,  283,  151,  152,  153,   28,   64,
   29,  130,  103,  154,  326,   74,  157,  327,  159,  451,
  452,  453,   75,   33,  490,  528,  120,   76,   77,  455,
  456,  364,   58,   59,   34,   35,  328,  329,   80,   81,
  251,  365,  399,  331,  332,   96,
};
final static short yysindex[] = {                       138,
 -237,    0,    0,  -19,    0,    0,    0,  497,  974,  823,
   68,  253,  293,  379,  535,  595, -122,    0,    0,    0,
 -199, -150,    0,    0,    0,    0,    0,  367,  -18,    0,
    0,    0, -226,    0,    0,    0,    0,    0,    0,    0,
    0, -241,    0, -250,    0,  607,    0, -221,    0, -205,
    0,  402,    0,  207,    0, -185, -235, -106,    0,    0,
    0,    0,    0,  -56,    0,    0,   20,  617,    0, -100,
  484,    0,    0,    0, -220,  433,    0,  -27,   70,  511,
    0,    0,  -77,    0,  331,    0,   61,    0,  265,    0,
 -153,    0,    0,    0,    0,  303,    0,  667,    0, -207,
 -199,  -29,  622,  250,    0,  428,    0,    0,    0,  237,
    0,    0,    0,    0,    0,    0,    0,  -25,   58, -173,
 -143,   11,  115,  181,    0,    0,    0, -197,  643,  315,
    0,  332,    0, -137,    0, -239,    0,    0,  307,    0,
    0,    0,    0,    0,  647,  649,  650,  676,  677,    0,
    0,    0,    0, -147,    0,    0,    0,    0,    0,    0,
    0,    0,  670,   94,    0, -108,    0,  593,    0,  122,
  511,    0,  511,    0,  667,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  475,    0,    0,    0,  -21,  514,
    0, 1832,    0,  688,    0,  -92,    0,  353,    0, -152,
    0,  -98,    0,  -51,    0,  -39,    0,  645,    0,    0,
  690,  692,    1,    0, -229,    0,    0,  -89,    0,    0,
    0,  714,    0,  365,    0,    0,    0,    0,  738,    0,
  760,    0,    0,    0,  388,    0, -224,    0,  426,    0,
  429,    0,  -66,    0,  -33,    0,  767,  127,    0,    5,
  991,    0,  295,    0,    0,    0,   75, 1425,    0,  -64,
  443,    0,  454,    0,  440,    0,    0,    0,  609,    0,
  157,    0, -223,    0,  445,    0,  -63,  169,    0,  793,
    0,  583,  188,    0, 1846,    0,    0,  776,    0,    0,
    0, 1662,    0,   13,    0,  711,    0,  807,    0,  736,
    0,   19,    0,  246,    0, -218,  279,    0,  496,    0,
 1853,    0,    0,    0,    0,   38,    0,    0,    0,  747,
  850,  748,  297, -159,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -191,    0,    0,  121,    0,    0,    0,
    0,  802,    0,  827,    0,  749,    0,  126,  838,    0,
   77,    0,    0,  131, 1439,    0,  106,    0,  124,    0,
    0,  158,  831,    0, 1250,    0, -171,  854,    0,  892,
  871,    0,  453,    0,  615,    0,  857,    0,  862,    0,
    0,    0, -131, 1446,    0,  325,    0,  337,    0,    0,
    0,  455,    0,  468,    0,    0,    0,    0,  305,    0,
  276,  314,    0,   80,    0,  898,    0,    0,    0,    0,
 1483,    0,  193,    0,  476,    0,  675, 1815,    0,   45,
    0,  409,    0,    0,    0,    0,    0,  652,    0,  713,
    0,    0,  482,    0,  487,    0,  914,    0,  336,    0,
    0,  145,    0,  771,  850,  772,  297,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    3,    0, 1497,
    0,  232,    0,    0,  322,  352,    0,    0,    0, 1676,
    0, 1697,    0, 1711,    0, 1732,    0,    0,  150,  532,
  930,    0,  616,    0,  264,    0,    0,  271,    0, 1066,
    0,   56,    0,    0,    0,    0,   72,    0,  495,    0,
  499,    0,    0,  170,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  947,    0,  360,  385,    0,  183,    0,
    0,    0,  516,    0,  530,    0,    0,  189,    0,  357,
  364, 1080,    0,   64,    0, 1746,    0, 1767, 1264,    0,
  963, 1286, 1300, 1322,    0,  644,    0,  371,    0,  378,
    0, 1019,    0, 1030,    0,    0,    0,  551,    0,  555,
    0,    0,    0,  390,  395,    0,    0,    0,    0,    0,
    0,    0,  968,    0, 1781,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1519,    0, 1533,
    0, 1555,    0, 1569,    0,  581,    0,  596, 1336, 1358,
    0, 1802,    0,    0,    0,  190,    0,    0,  201,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1591,
    0, 1605,    0,    0,    0,    0,    0,    0,  202, 1372,
    0,  841, 1103,    0,  970, 1117, 1140, 1154,    0,    0,
    0,    0,    0,    0, 1394,    0,  893,    0,  918,    0,
    0,    0,  990,    0, 1627,    0,    0,    0,    0,    0,
    0,    0, 1177, 1191,    0,  934,    0,    0,    0,    0,
    0, 1641,    0,    0,    0,  209,    0,    0,    0,    0,
    0,    0,    0,    0,  214, 1214,    0,  946, 1228,    0,
  951,    0,  977,    0,    0,    0,  995,    0,    0,    0,
    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  219,    0,    0,
    0,    0,    0,  227,    0,    0,    0,    0,    0,  553,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  660,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1005,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  553,
  732,    0,  774,    0,  600,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1460,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1028,    0, 1043,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1408,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  257,    0,  278,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0, 1044,    0,    0,   14,  423, 1272, 1306,  -80,    0,
    0,  505, -302, -280,   -8,   34,    0,    4,    0,  -95,
  -84,  -45,  -41,   85, -465, -381, -243,  -46,  -23,    0,
    0,  196,    0,  629,    0,    0,  502,  624, 1011,  958,
 -215, -376, -289,    0,    0,  626,
};
final static int YYTABLESIZE=2137;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         30,
   30,   30,  330,  418,  129,   82,   87,  160,   89,   98,
  258,   32,   32,   32,   69,  337,  195,  340,  161,  294,
   99,   24,   24,   24,   15,   16,  249,   70,  532,  454,
   95,  266,  301,  368,   86,  109,  371,  347,   83,   67,
   68,   31,   31,   31,   15,   16,    5,   70,  140,  267,
   88,   71,  100,  110,   72,   73,  196,  162,  184,  381,
   15,   16,  164,   70,  366,  351,  250,  118,  119,   57,
   97,   71,  302,  175,   72,   73,  141,  348,  495,  185,
   15,   16,  174,   70,  400,   71,  367,   71,   72,   73,
   72,   73,   15,   16,  155,   70,   53,  177,  179,  355,
  118,  119,  135,  234,  220,   60,  158,   71,  209,  129,
   72,   73,  176,   15,   16,   95,   70,   55,  193,   71,
  401,  402,   72,   73,  419,  442,  539,   61,   56,  542,
  210,  413,  543,   53,  136,  544,  156,  384,  481,  194,
   71,  255,  633,   72,   73,  636,  420,  214,  637,   71,
   54,  638,   72,   73,   55,  237,  479,  236,  235,   30,
  118,  119,  239,  230,  241,   56,  252,   15,   16,  101,
   70,   32,   54,  462,  663,  514,   55,  664,  125,  215,
  504,  218,  507,   30,  510,  231,  513,  163,  253,  272,
  599,   53,  305,  600,   71,   32,  126,   72,   73,  517,
  160,   31,  160,  275,  238,  227,  609,  318,  612,  686,
  615,  161,  618,  161,   15,   16,  240,   70,  689,  102,
  261,  273,  274,   56,  306,   31,   15,   16,  630,   70,
  169,  121,   15,   16,  221,   70,    6,   65,  641,  143,
  644,   71,   30,  170,   72,   73,  568,  334,  571,   30,
  162,  645,  162,   71,   32,  222,   72,   73,  491,   71,
  279,   32,   72,   73,    7,   66,  178,   71,  333,  307,
   72,   73,  160,  676,  343,  160,   30,  248,   15,   16,
  492,   70,  280,  161,   31,  606,  161,  155,   32,  155,
  685,   31,  104,  356,  118,  119,  344,  360,  316,  158,
  464,  158,   30,   71,  383,   71,   72,   73,   72,   73,
  160,  529,  629,  172,   32,  357,  131,  392,   31,  563,
  394,  161,  162,   41,  354,  162,  170,  533,  122,  156,
  287,  156,  382,  373,  132,  436,  465,  466,  437,  438,
   42,  160,   15,   16,   31,   70,   30,  530,  531,  534,
   71,  288,  161,   72,   73,  564,  565,  439,   32,  155,
  162,  389,  155,  118,  119,  390,  458,  213,  415,   71,
  180,  158,   72,   73,  158,   30,  369,  433,  435,  391,
  163,  378,  163,  170,  160,  160,  385,   32,   31,   15,
   16,  162,   70,    1,   54,  161,  161,  155,  370,  278,
  482,  156,  449,  379,  156,  515,    2,   71,  386,  158,
   72,   73,  299,  393,  450,  497,   71,   31,  160,   72,
   73,  486,  483,   15,   16,  540,   70,  516,  155,  161,
   25,   25,   25,  300,  162,  162,  182,  260,  549,  156,
  158,  499,  501,  523,  555,  631,  525,  541,  457,  170,
   71,  449,  163,   72,   73,  163,  634,  646,   15,   16,
  550,   70,   92,  450,  687,  313,  556,  632,  162,  690,
  156,  155,  155,   71,  204,   93,   72,   73,  635,  647,
   94,  449,   16,  158,  158,   71,  688,  496,   72,   73,
  163,  691,  167,  450,  168,  163,  204,   15,   16,   71,
   70,  345,   72,   73,   16,  155,  558,  560,   43,   36,
   36,   36,  162,  156,  156,   15,   16,  158,   70,  522,
  133,  163,  346,  449,   71,   44,  524,   72,   73,   15,
   16,  432,   70,  315,  162,  450,   15,   16,  134,   70,
  596,  598,   71,   78,  163,   72,   73,  156,   45,   78,
  284,   78,  349,  285,  286,  315,   71,   78,  137,   72,
   73,   46,  197,   71,  163,  163,   72,   73,   71,  434,
  188,   72,   73,  363,  163,   93,  138,  498,  139,  449,
  423,  449,  431,  449,  424,  449,  127,  191,  189,  192,
  190,  450,  425,  450,  480,  450,  426,  450,  163,   71,
   18,   19,   72,   73,  128,   78,   71,  500,  232,   72,
   73,  449,  557,  449,   71,  547,  163,   72,   73,  559,
  256,   78,   62,  450,  449,  450,  233,  449,  449,  449,
  585,   37,   37,   37,   47,   63,  450,  586,  257,  450,
  450,  450,  489,  264,   71,  595,  449,   72,   73,   71,
  597,   48,   72,   73,  449,  449,   71,   90,  450,   72,
   73,  265,  548,  449,  467,   79,  450,  450,  468,   36,
   91,   79,  163,   79,  163,  450,  163,  449,  163,   79,
  449,  268,   71,  165,  270,   72,   73,   71,  111,  450,
   72,   73,  450,   36,  224,  295,  166,  296,  291,  269,
  303,   78,  271,   78,  163,   78,  163,   78,  410,  293,
  427,  112,  113,  114,  115,  116,  292,  163,  304,  117,
  163,  163,  163,  429,  118,  119,  411,   79,  428,  142,
  219,  459,  112,  113,  114,  115,  116,  473,    0,  163,
  117,  430,  475,   79,   18,   19,   78,  163,  163,  460,
  535,  350,   36,   11,  537,  474,  163,   12,   13,   36,
  476,   14,   15,   16,  198,   17,   18,   19,  536,  223,
  163,  551,  538,  163,  112,  113,  114,  115,  116,  107,
  108,   20,  117,   18,   19,  553,   36,   21,  145,  552,
   49,   37,   12,   13,  146,   78,  147,  148,  149,    0,
   17,   18,   19,  554,  123,  124,  591,   50,  234,  234,
  593,  234,   36,  234,    0,   37,  234,  234,  234,  234,
  234,  234,   21,   79,  592,   79,  234,   79,  594,   79,
  234,  234,  234,  234,  234,  234,  619,  234,  310,  234,
    0,  311,  312,    0,  234,  234,  234,  234,  216,   11,
   51,  621,   78,   12,  620,  266,   36,   14,   15,   16,
   78,   17,   84,   78,  297,    0,  298,   52,   79,  622,
  412,  520,  105,  266,   37,  521,  217,  144,  145,   85,
    0,   37,   12,   13,  146,   36,  147,  148,  149,  106,
   17,   18,   19,  112,  113,  114,  115,  116,  186,  583,
  242,  117,  199,  584,  201,  203,  150,  469,   37,  470,
    0,  187,   21,  243,   78,  222,  222,   79,  222,  200,
  222,  202,  204,  222,  222,  222,  222,  222,  222,    0,
  461,  205,  207,  222,   37,  211,  212,  222,  222,  222,
  222,  222,  222,  228,  222,  244,  222,  246,  206,  208,
    0,  222,  222,  112,  113,  114,  115,  116,  118,  119,
  229,  117,  245,   78,  247,    0,  335,  145,  471,  254,
  472,   12,   13,  146,   79,  147,  148,  149,   37,   17,
   18,   19,   79,   18,   19,   79,   78,  220,  220,   78,
  220,  341,  220,  259,  336,  220,  220,  220,  220,  220,
  220,   21,  358,  361,  376,  220,  260,   37,  342,  220,
  220,  220,  220,  220,  220,  262,  220,    0,  220,  359,
  362,  377,  276,  220,  220,    0,  484,  487,  263,  221,
  221,  317,  221,    0,  221,  277,   79,  221,  221,  221,
  221,  221,  221,  485,  488,   18,   19,  221,  308,    9,
   10,  221,  221,  221,  221,  221,  221,  372,  221,    0,
  221,  309,  338,  145,    0,  221,  221,   12,   13,  146,
  260,  147,  148,  149,    0,   17,   18,   19,   39,   11,
  181,  183,  374,   12,   13,   79,  395,   14,   15,   16,
  339,   17,   18,   19,  320,  375,  650,   21,   12,  396,
  651,  321,  322,   15,   16,  323,  324,   40,   79,  403,
  145,   79,  414,   21,   12,   13,  146,  416,  147,  148,
  149,  380,   17,   18,   19,  260,  408,  145,  171,  173,
  417,   12,   13,  146,    0,  147,  148,  149,  404,   17,
   18,   19,   71,    0,   21,   72,   73,  405,  667,    0,
  406,  407,  668,  440,  145,  409,    0,    0,   12,   13,
  146,   21,  147,  148,  149,    0,   17,   18,   19,  477,
  145,    0,    0,  669,   12,   13,  146,  670,  147,  148,
  149,  441,   17,   18,   19,  518,  145,    0,   21,  681,
   12,   13,  146,  682,  147,  148,  149,  478,   17,   18,
   19,  694,  545,  145,   21,  695,  698,   12,   13,  146,
  699,  147,  148,  149,  519,   17,   18,   19,  574,    0,
   21,  575,  576,  601,    0,  654,  602,  603,  655,  656,
   11,  546,  700,    0,   12,   13,  701,   21,   14,   15,
   16,    0,   17,   18,   19,  671,  281,   11,  672,  673,
  702,   12,    0,    0,  703,   14,   15,   16,   38,   17,
  217,  217,    0,  217,   21,  217,    0,    0,  217,  217,
  217,  217,  217,  217,  587,  282,  588,    0,  217,   26,
   26,   26,  217,  313,  313,  589,  313,  590,  313,  217,
    0,  313,  313,  313,  313,  313,  313,    0,  315,  315,
    0,  315,    0,  315,    0,  313,  315,  315,  315,  315,
  315,  315,  313,   27,   27,   27,    0,    0,    0,    0,
  315,  526,  444,    0,    0,    0,   12,  315,  146,  445,
  446,  148,  149,  447,  324,  561,  444,    0,    0,    0,
   12,    0,  146,  445,  446,  148,  149,  447,  324,    0,
  527,    0,    0,    0,    0,    0,    0,    0,  652,  444,
    0,    0,    0,   12,  562,  146,  445,  446,  148,  149,
  447,  324,  657,  444,    0,    0,    0,   12,    0,  146,
  445,  446,  148,  149,  447,  324,    0,  653,    0,    0,
    0,    0,    0,    0,    0,  659,  444,    0,    0,    0,
   12,  658,  146,  445,  446,  148,  149,  447,  324,  661,
  444,    0,    0,    0,   12,    0,  146,  445,  446,  148,
  149,  447,  324,    0,  660,    0,    0,    0,    0,    0,
    0,    0,  677,  444,    0,    0,    0,   12,  662,  146,
  445,  446,  148,  149,  447,  324,  679,  444,    0,    0,
    0,   12,    0,  146,  445,  446,  148,  149,  447,  324,
    0,  678,    0,    0,    0,    0,    0,    0,    0,  692,
  444,    0,    0,    0,   12,  680,  146,  445,  446,  148,
  149,  447,  324,  696,  444,    0,    0,    0,   12,    0,
  146,  445,  446,  148,  149,  447,  324,    0,  693,    0,
    0,    0,    0,    0,    0,  397,  320,    0,    0,    0,
   12,    0,  697,  321,  322,   15,   16,  323,  324,  572,
  320,    0,    0,    0,   12,    0,    0,  321,  322,   15,
   16,  323,  324,    0,  398,    0,    0,    0,    0,    0,
    0,  577,  320,    0,    0,    0,   12,    0,  573,  321,
  322,   15,   16,  323,  324,  579,  320,    0,    0,    0,
   12,    0,    0,  321,  322,   15,   16,  323,  324,    0,
  578,    0,    0,    0,    0,    0,    0,  581,  320,    0,
    0,    0,   12,    0,  580,  321,  322,   15,   16,  323,
  324,  623,  320,    0,    0,    0,   12,    0,    0,  321,
  322,   15,   16,  323,  324,    0,  582,    0,    0,    0,
    0,    0,    0,  625,  320,    0,    0,    0,   12,    0,
  624,  321,  322,   15,   16,  323,  324,  648,  320,    0,
    0,    0,   12,    0,    0,  321,  322,   15,   16,  323,
  324,    0,  626,    0,    0,    0,    0,    0,    0,  665,
  320,    0,    0,    0,   12,    0,  649,  321,  322,   15,
   16,  323,  324,  305,  305,    0,    0,    0,  305,    0,
    0,  305,  305,  305,  305,  305,  305,    0,  666,    0,
  289,   11,    0,    0,    0,   12,    0,    0,    0,   14,
   15,   16,  305,   17,  387,   11,    0,    0,    0,   12,
    0,  421,   11,   14,   15,   16,   12,   17,    0,  290,
   14,   15,   16,    0,   17,  277,  277,    0,    0,    0,
  277,    0,    0,  388,  277,  277,  277,    0,  277,    0,
  422,    0,    0,    0,    0,    0,    0,    0,  443,  444,
    0,    0,    0,   12,  277,  146,  445,  446,  148,  149,
  447,  324,  493,  444,    0,    0,    0,   12,    0,  146,
  445,  446,  148,  149,  447,  324,  448,    0,    0,    0,
    0,    0,    0,    0,  607,  444,    0,    0,    0,   12,
  494,  146,  445,  446,  148,  149,  447,  324,  610,  444,
    0,    0,    0,   12,    0,  146,  445,  446,  148,  149,
  447,  324,  608,    0,    0,    0,    0,    0,    0,    0,
  613,  444,    0,    0,    0,   12,  611,  146,  445,  446,
  148,  149,  447,  324,  616,  444,    0,    0,    0,   12,
    0,  146,  445,  446,  148,  149,  447,  324,  614,    0,
    0,    0,    0,    0,    0,    0,  639,  444,    0,    0,
    0,   12,  617,  146,  445,  446,  148,  149,  447,  324,
  642,  444,    0,    0,    0,   12,    0,  146,  445,  446,
  148,  149,  447,  324,  640,    0,    0,    0,    0,    0,
    0,    0,  674,  444,    0,    0,    0,   12,  643,  146,
  445,  446,  148,  149,  447,  324,  683,  444,    0,    0,
    0,   12,    0,  146,  445,  446,  148,  149,  447,  324,
  675,    0,    0,    0,    0,    0,    0,  319,  320,    0,
    0,    0,   12,    0,  684,  321,  322,   15,   16,  323,
  324,  502,  320,    0,    0,    0,   12,    0,    0,  321,
  322,   15,   16,  323,  324,  325,    0,    0,    0,    0,
    0,    0,  505,  320,    0,    0,    0,   12,    0,  503,
  321,  322,   15,   16,  323,  324,  508,  320,    0,    0,
    0,   12,    0,    0,  321,  322,   15,   16,  323,  324,
  506,    0,    0,    0,    0,    0,    0,  511,  320,    0,
    0,    0,   12,    0,  509,  321,  322,   15,   16,  323,
  324,  566,  320,    0,    0,    0,   12,    0,    0,  321,
  322,   15,   16,  323,  324,  512,    0,    0,    0,    0,
    0,    0,  569,  320,    0,    0,    0,   12,    0,  567,
  321,  322,   15,   16,  323,  324,  604,  320,    0,    0,
    0,   12,    0,    0,  321,  322,   15,   16,  323,  324,
  570,    0,    0,    0,    0,    0,    0,  627,  320,    0,
    0,    0,   12,    0,  605,  321,  322,   15,   16,  323,
  324,  320,    0,    0,    0,   12,    0,    0,  321,  322,
   15,   16,  323,  324,    0,  628,    0,  225,   11,    0,
    0,    0,   12,    0,    0,    0,   14,   15,   16,  463,
   17,  314,   11,    0,    0,    0,   12,    0,  352,   11,
   14,   15,   16,   12,   17,  226,    0,   14,   15,   16,
    0,   17,    0,    0,    0,    0,    0,    0,    0,  315,
    0,    0,    0,    0,    0,    0,  353,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          8,
    9,   10,  292,  380,   85,  256,   48,  103,   50,   56,
  226,    8,    9,   10,  256,  296,  256,  298,  103,  263,
  256,    8,    9,   10,  266,  267,  256,  269,  494,  411,
   54,  256,  256,  336,  256,  256,  339,  256,  289,  266,
  267,    8,    9,   10,  266,  267,  284,  269,  256,  274,
  256,  293,  288,  274,  296,  297,  296,  103,  256,  349,
  266,  267,  104,  269,  256,  309,  296,  292,  293,  269,
  256,  293,  296,  120,  296,  297,  100,  296,  460,  277,
  266,  267,  256,  269,  256,  293,  278,  293,  296,  297,
  296,  297,  266,  267,  103,  269,  256,  121,  122,  315,
  292,  293,  256,  256,  185,  256,  103,  293,  256,  190,
  296,  297,  256,  266,  267,  139,  269,  277,  256,  293,
  292,  293,  296,  297,  256,  406,  503,  278,  288,  506,
  278,  375,  509,  256,  288,  512,  103,  353,  441,  277,
  293,  222,  608,  296,  297,  611,  278,  256,  614,  293,
  273,  617,  296,  297,  277,  202,  437,  256,  200,  168,
  292,  293,  204,  256,  206,  288,  256,  266,  267,  276,
  269,  168,  273,  417,  640,  478,  277,  643,  256,  288,
  470,  168,  472,  192,  474,  278,  476,  103,  278,  256,
  567,  256,  256,  570,  293,  192,  274,  296,  297,  480,
  296,  168,  298,  245,  256,  192,  588,  288,  590,  675,
  592,  296,  594,  298,  266,  267,  256,  269,  684,  276,
  229,  288,  256,  288,  288,  192,  266,  267,  605,  269,
  256,  259,  266,  267,  256,  269,  256,  256,  620,  269,
  622,  293,  251,  269,  296,  297,  536,  294,  538,  258,
  296,  628,  298,  293,  251,  277,  296,  297,  256,  293,
  256,  258,  296,  297,  284,  284,  256,  293,  256,  278,
  296,  297,  368,  655,  256,  371,  285,  277,  266,  267,
  278,  269,  278,  368,  251,  575,  371,  296,  285,  298,
  672,  258,  273,  256,  292,  293,  278,  321,  285,  296,
  256,  298,  311,  293,  351,  293,  296,  297,  296,  297,
  406,  256,  602,  256,  311,  278,  256,  359,  285,  256,
  362,  406,  368,  256,  311,  371,  269,  256,  259,  296,
  256,  298,  256,  342,  274,  256,  292,  293,  259,  260,
  273,  437,  266,  267,  311,  269,  355,  292,  293,  278,
  293,  277,  437,  296,  297,  292,  293,  278,  355,  368,
  406,  256,  371,  292,  293,  260,  413,  274,  377,  293,
  256,  368,  296,  297,  371,  384,  256,  401,  402,  256,
  296,  256,  298,  269,  480,  481,  256,  384,  355,  266,
  267,  437,  269,  256,  273,  480,  481,  406,  278,  273,
  256,  368,  411,  278,  371,  256,  269,  293,  278,  406,
  296,  297,  256,  256,  411,  462,  293,  384,  514,  296,
  297,  445,  278,  266,  267,  256,  269,  278,  437,  514,
    8,    9,   10,  277,  480,  481,  256,  269,  256,  406,
  437,  465,  466,  485,  256,  256,  488,  278,  256,  269,
  293,  460,  368,  296,  297,  371,  256,  256,  266,  267,
  278,  269,  256,  460,  256,  278,  278,  278,  514,  256,
  437,  480,  481,  293,  256,  269,  296,  297,  278,  278,
  274,  490,  256,  480,  481,  293,  278,  256,  296,  297,
  406,  278,  256,  490,  258,  411,  278,  266,  267,  293,
  269,  256,  296,  297,  278,  514,  530,  531,  256,    8,
    9,   10,  256,  480,  481,  266,  267,  514,  269,  256,
  256,  437,  277,  532,  293,  273,  256,  296,  297,  266,
  267,  256,  269,  256,  278,  532,  266,  267,  274,  269,
  564,  565,  293,   42,  460,  296,  297,  514,  256,   48,
  256,   50,  274,  259,  260,  278,  293,   56,  256,  296,
  297,  269,  256,  293,  480,  481,  296,  297,  293,  256,
  256,  296,  297,  277,  490,  269,  274,  256,  276,  588,
  256,  590,  278,  592,  260,  594,  256,  256,  274,  258,
  276,  588,  256,  590,  259,  592,  260,  594,  514,  293,
  270,  271,  296,  297,  274,  104,  293,  256,  256,  296,
  297,  620,  256,  622,  293,  256,  532,  296,  297,  256,
  256,  120,  256,  620,  633,  622,  274,  636,  637,  638,
  260,    8,    9,   10,  256,  269,  633,  260,  274,  636,
  637,  638,  447,  256,  293,  256,  655,  296,  297,  293,
  256,  273,  296,  297,  663,  664,  293,  256,  655,  296,
  297,  274,  278,  672,  256,   42,  663,  664,  260,  168,
  269,   48,  588,   50,  590,  672,  592,  686,  594,   56,
  689,  256,  293,  256,  256,  296,  297,  293,  256,  686,
  296,  297,  689,  192,  190,  256,  269,  258,  256,  274,
  256,  200,  274,  202,  620,  204,  622,  206,  256,  256,
  256,  279,  280,  281,  282,  283,  274,  633,  274,  287,
  636,  637,  638,  256,  292,  293,  274,  104,  274,  101,
  256,  256,  279,  280,  281,  282,  283,  256,   -1,  655,
  287,  274,  256,  120,  270,  271,  245,  663,  664,  274,
  256,  256,  251,  257,  256,  274,  672,  261,  262,  258,
  274,  265,  266,  267,  139,  269,  270,  271,  274,  256,
  686,  256,  274,  689,  279,  280,  281,  282,  283,  296,
  297,  285,  287,  270,  271,  256,  285,  291,  257,  274,
  256,  168,  261,  262,  263,  294,  265,  266,  267,   -1,
  269,  270,  271,  274,  294,  295,  256,  273,  256,  257,
  256,  259,  311,  261,   -1,  192,  264,  265,  266,  267,
  268,  269,  291,  200,  274,  202,  274,  204,  274,  206,
  278,  279,  280,  281,  282,  283,  256,  285,  256,  287,
   -1,  259,  260,   -1,  292,  293,  294,  295,  256,  257,
  256,  256,  351,  261,  274,  256,  355,  265,  266,  267,
  359,  269,  256,  362,  256,   -1,  258,  273,  245,  274,
  256,  256,  256,  274,  251,  260,  284,  256,  257,  273,
   -1,  258,  261,  262,  263,  384,  265,  266,  267,  273,
  269,  270,  271,  279,  280,  281,  282,  283,  256,  256,
  256,  287,  256,  260,  256,  256,  285,  256,  285,  258,
   -1,  269,  291,  269,  413,  256,  257,  294,  259,  273,
  261,  273,  273,  264,  265,  266,  267,  268,  269,   -1,
  256,  256,  256,  274,  311,  266,  267,  278,  279,  280,
  281,  282,  283,  256,  285,  256,  287,  256,  273,  273,
   -1,  292,  293,  279,  280,  281,  282,  283,  292,  293,
  273,  287,  273,  462,  273,   -1,  256,  257,  256,  256,
  258,  261,  262,  263,  351,  265,  266,  267,  355,  269,
  270,  271,  359,  270,  271,  362,  485,  256,  257,  488,
  259,  256,  261,  256,  284,  264,  265,  266,  267,  268,
  269,  291,  256,  256,  256,  274,  269,  384,  273,  278,
  279,  280,  281,  282,  283,  256,  285,   -1,  287,  273,
  273,  273,  256,  292,  293,   -1,  256,  256,  269,  256,
  257,  256,  259,   -1,  261,  269,  413,  264,  265,  266,
  267,  268,  269,  273,  273,  270,  271,  274,  256,    6,
    7,  278,  279,  280,  281,  282,  283,  256,  285,   -1,
  287,  269,  256,  257,   -1,  292,  293,  261,  262,  263,
  269,  265,  266,  267,   -1,  269,  270,  271,  256,  257,
  123,  124,  256,  261,  262,  462,  256,  265,  266,  267,
  284,  269,  270,  271,  257,  269,  256,  291,  261,  269,
  260,  264,  265,  266,  267,  268,  269,  285,  485,  256,
  257,  488,  256,  291,  261,  262,  263,  256,  265,  266,
  267,  284,  269,  270,  271,  269,  256,  257,  118,  119,
  269,  261,  262,  263,   -1,  265,  266,  267,  285,  269,
  270,  271,  293,   -1,  291,  296,  297,  256,  256,   -1,
  259,  260,  260,  256,  257,  285,   -1,   -1,  261,  262,
  263,  291,  265,  266,  267,   -1,  269,  270,  271,  256,
  257,   -1,   -1,  256,  261,  262,  263,  260,  265,  266,
  267,  284,  269,  270,  271,  256,  257,   -1,  291,  256,
  261,  262,  263,  260,  265,  266,  267,  284,  269,  270,
  271,  256,  256,  257,  291,  260,  256,  261,  262,  263,
  260,  265,  266,  267,  285,  269,  270,  271,  256,   -1,
  291,  259,  260,  256,   -1,  256,  259,  260,  259,  260,
  257,  285,  256,   -1,  261,  262,  260,  291,  265,  266,
  267,   -1,  269,  270,  271,  256,  256,  257,  259,  260,
  256,  261,   -1,   -1,  260,  265,  266,  267,  285,  269,
  256,  257,   -1,  259,  291,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,  256,  285,  258,   -1,  274,    8,
    9,   10,  278,  256,  257,  256,  259,  258,  261,  285,
   -1,  264,  265,  266,  267,  268,  269,   -1,  256,  257,
   -1,  259,   -1,  261,   -1,  278,  264,  265,  266,  267,
  268,  269,  285,    8,    9,   10,   -1,   -1,   -1,   -1,
  278,  256,  257,   -1,   -1,   -1,  261,  285,  263,  264,
  265,  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,  263,  264,  265,  266,  267,  268,  269,   -1,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,  285,  263,  264,  265,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,  263,
  264,  265,  266,  267,  268,  269,   -1,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
  261,  285,  263,  264,  265,  266,  267,  268,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,
  267,  268,  269,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,  285,  263,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,  263,  264,  265,  266,  267,  268,  269,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  257,   -1,   -1,   -1,  261,  285,  263,  264,  265,  266,
  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
  263,  264,  265,  266,  267,  268,  269,   -1,  285,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,  285,  264,  265,  266,  267,  268,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,  266,
  267,  268,  269,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  285,  264,
  265,  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,   -1,
  285,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,  285,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,
  285,  264,  265,  266,  267,  268,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,
  269,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  257,   -1,   -1,   -1,  261,   -1,  285,  264,  265,  266,
  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
   -1,  264,  265,  266,  267,  268,  269,   -1,  285,   -1,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,   -1,  265,
  266,  267,  285,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,  256,  257,  265,  266,  267,  261,  269,   -1,  285,
  265,  266,  267,   -1,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  285,  265,  266,  267,   -1,  269,   -1,
  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,  285,  263,  264,  265,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,  263,
  264,  265,  266,  267,  268,  269,  284,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
  284,  263,  264,  265,  266,  267,  268,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,
  268,  269,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,  284,  263,  264,  265,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,  263,  264,  265,  266,  267,  268,  269,  284,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,  284,  263,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,
  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,  284,  263,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,  263,  264,  265,  266,  267,  268,  269,
  284,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,  284,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  284,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
  284,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,  284,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  284,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
  284,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,  284,  264,  265,  266,  267,  268,
  269,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,   -1,  284,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,   -1,  265,  266,  267,  285,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,  256,  257,
  265,  266,  267,  261,  269,  284,   -1,  265,  266,  267,
   -1,  269,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  284,
   -1,   -1,   -1,   -1,   -1,   -1,  284,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=297;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"IF","THEN","ELSE","END_IF","OUT","FUN","RETURN","BREAK","WHEN",
"WHILE","FOR","CONTINUE","ID","I32","F32","PUNTO","PARENT_A","PARENT_C",
"COMILLA","COMA","DOSPUNTOS","PUNTOCOMA","IGUAL","MAYOR","MENOR","MENORIGUAL",
"MAYORIGUAL","LLAVE_A","LLAVE_C","EXCL","DIST","ASIG","CADENA","COMENT","CONST",
"SUMA","RESTA","MULT","DIV","ENTERO","FLOAT",
};
final static String yyrule[] = {
"$accept : program",
"program : nombre_program LLAVE_A bloque_sentencias LLAVE_C",
"program : nombre_program LLAVE_A bloque_sentencias error",
"program : nombre_program error bloque_sentencias LLAVE_C",
"program : error LLAVE_A bloque_sentencias LLAVE_C",
"nombre_program : ID",
"bloque_sentencias :",
"bloque_sentencias : bloque_sentencias sentencia PUNTOCOMA",
"bloque_sentencias : bloque_sentencias sentencia error",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_decl_datos",
"sentencia_declarativa : sentencia_decl_fun",
"sentencia_declarativa : lista_const",
"tipo : I32",
"tipo : F32",
"sentencia_decl_datos : tipo list_var",
"sentencia_decl_datos : tipo error",
"list_var : list_var COMA ID",
"list_var : ID",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro error",
"encabezado_fun : FUN ID PARENT_A parametro error",
"encabezado_fun : FUN ID PARENT_A error",
"encabezado_fun : FUN ID PARENT_A parametro COMA error",
"encabezado_fun : FUN ID error",
"encabezado_fun : FUN error",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun error",
"sentencia_decl_fun : encabezado_fun error",
"cuerpo_fun :",
"cuerpo_fun : cuerpo_fun sentencias_fun PUNTOCOMA",
"cuerpo_fun : cuerpo_fun sentencias_fun error",
"sentencias_fun : sentencia_decl_datos",
"sentencias_fun : sentencia_decl_fun",
"sentencias_fun : lista_const",
"sentencias_fun : asignacion",
"sentencias_fun : llamado_func",
"sentencias_fun : sentencia_if_fun",
"sentencias_fun : sentencia_out",
"sentencias_fun : sentencia_when_fun",
"sentencias_fun : sentencia_for_fun",
"sentencias_fun : sentencia_while_fun",
"sentencias_fun : retorno",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_fun : IF PARENT_A condicion error",
"sentencia_if_fun : IF PARENT_A error",
"sentencia_if_fun : IF error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE sentencias_fun error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_fun : WHEN PARENT_A condicion error",
"sentencia_when_fun : WHEN PARENT_A error",
"sentencia_when_fun : WHEN error",
"etiqueta : ID DOSPUNTOS",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion error",
"sentencia_while_fun : etiqueta WHILE PARENT_A error",
"sentencia_while_fun : etiqueta WHILE error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion error",
"sentencia_while_fun : WHILE PARENT_A error",
"sentencia_while_fun : WHILE error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID error",
"sentencia_for_fun : etiqueta FOR PARENT_A error",
"sentencia_for_fun : etiqueta FOR error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO error",
"sentencia_for_fun : FOR PARENT_A ID ASIG error",
"sentencia_for_fun : FOR PARENT_A ID error",
"sentencia_for_fun : FOR PARENT_A error",
"sentencia_for_fun : FOR error",
"cuerpo_fun_break :",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break PUNTOCOMA",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break error",
"sentencias_fun_break : asignacion",
"sentencias_fun_break : sentencia_if_break_fun",
"sentencias_fun_break : sentencia_out",
"sentencias_fun_break : sentencia_when_break_fun",
"sentencias_fun_break : sentencia_while_fun",
"sentencias_fun_break : sentencia_for_fun",
"sentencias_fun_break : CONTINUE tag",
"sentencias_fun_break : BREAK",
"sentencias_fun_break : BREAK cte",
"sentencias_fun_break : retorno",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun_break",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_break_fun : WHEN PARENT_A condicion error",
"sentencia_when_break_fun : WHEN PARENT_A error",
"sentencia_when_break_fun : WHEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break_fun : IF PARENT_A condicion error",
"sentencia_if_break_fun : IF PARENT_A error",
"sentencia_if_break_fun : IF error",
"retorno : RETURN PARENT_A expresion PARENT_C",
"retorno : RETURN PARENT_A expresion error",
"retorno : RETURN PARENT_A error",
"retorno : RETURN error",
"parametro : tipo ID",
"parametro : tipo error",
"lista_const : CONST lista_asignacion",
"lista_asignacion : lista_asignacion COMA asignacion_const",
"lista_asignacion : asignacion_const",
"asignacion_const : ID ASIG cte",
"asignacion_const : ID ASIG error",
"asignacion_const : ID error",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : sentencia_if",
"sentencia_ejecutable : sentencia_out",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : sentencia_for",
"sentencia_ejecutable : sentencia_while",
"sentencia_ejecutable : llamado_func",
"asignacion : ID ASIG expresion",
"asignacion : ID error",
"asignacion : ID ASIG error",
"expresion : expresion SUMA termino",
"expresion : expresion RESTA termino",
"expresion : termino",
"expresion : sentencia_for ELSE cte",
"expresion : sentencia_while ELSE cte",
"expresion : expresion SUMA error",
"expresion : expresion RESTA error",
"expresion : sentencia_for ELSE error",
"expresion : sentencia_while ELSE error",
"termino : termino MULT factor",
"termino : termino DIV factor",
"termino : factor",
"termino : termino MULT error",
"termino : termino DIV error",
"factor : ID",
"factor : cte",
"factor : llamado_func",
"cte : ENTERO",
"cte : FLOAT",
"cte : RESTA ENTERO",
"cte : RESTA FLOAT",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if : IF PARENT_A condicion PARENT_C error",
"sentencia_if : IF PARENT_A condicion error",
"sentencia_if : IF PARENT_A error",
"sentencia_if : IF error",
"condicion : expresion comparacion expresion",
"condicion : expresion comparacion error",
"condicion : expresion error",
"comparacion : IGUAL",
"comparacion : MAYOR",
"comparacion : MENOR",
"comparacion : MENORIGUAL",
"comparacion : MAYORIGUAL",
"comparacion : DIST",
"bloque_ejecutable :",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable PUNTOCOMA",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"sentencia_out : OUT PARENT_A CADENA PARENT_C",
"sentencia_out : OUT PARENT_A CADENA error",
"sentencia_out : OUT PARENT_A error",
"sentencia_out : OUT error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN sentencia_ejecutable",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when : WHEN PARENT_A condicion error",
"sentencia_when : WHEN PARENT_A error",
"sentencia_when : WHEN error",
"sentencia_while : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion error",
"sentencia_while : WHILE PARENT_A error",
"sentencia_while : WHILE error",
"bloque_break_continue :",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue PUNTOCOMA",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue",
"ejecutables_break_continue : asignacion",
"ejecutables_break_continue : sentencia_if_break",
"ejecutables_break_continue : sentencia_out",
"ejecutables_break_continue : sentencia_when_break",
"ejecutables_break_continue : sentencia_while",
"ejecutables_break_continue : sentencia_for",
"ejecutables_break_continue : CONTINUE tag",
"ejecutables_break_continue : BREAK",
"ejecutables_break_continue : BREAK cte",
"tag :",
"tag : DOSPUNTOS ID",
"tag : DOSPUNTOS error",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN ejecutables_break_continue",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_break : WHEN PARENT_A condicion error",
"sentencia_when_break : WHEN PARENT_A error",
"sentencia_when_break : WHEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion error",
"sentencia_if_break : IF PARENT_A error",
"sentencia_if_break : IF error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C ejecutables_break_continue",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C ejecutables_break_continue",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG error",
"sentencia_for : etiqueta FOR PARENT_A ID error",
"sentencia_for : etiqueta FOR PARENT_A error",
"sentencia_for : etiqueta FOR error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO error",
"sentencia_for : FOR PARENT_A ID ASIG error",
"sentencia_for : FOR PARENT_A ID error",
"sentencia_for : FOR PARENT_A error",
"sentencia_for : FOR error",
"param_real : cte",
"param_real : ID",
"llamado_func : ID PARENT_A param_real COMA param_real PARENT_C",
"llamado_func : ID PARENT_A param_real PARENT_C",
"llamado_func : ID PARENT_A PARENT_C",
"llamado_func : ID PARENT_A param_real COMA param_real error",
"llamado_func : ID PARENT_A param_real error",
"llamado_func : ID PARENT_A error",
"llamado_func : ID PARENT_A param_real COMA error",
};

//#line 1783 "gramaticaTomi.y"
private NodoControl raiz;
private Map<String,ArbolSintactico> funciones = new HashMap<String,ArbolSintactico>();
private static HashMap<Integer,ArrayList<String>> erroresSintacticos = new HashMap<Integer,ArrayList<String>>();
public String ambitoActual = "Global";
private List<String> tipoActual = new ArrayList<String>();


void yyerror(String mensaje){
        if (erroresSintacticos.get(AnalizadorLexico.getLineaAct())== null){
                ArrayList<String> mnsj = new ArrayList<String>();
                mnsj.add(mensaje); 
                erroresSintacticos.put(AnalizadorLexico.getLineaAct(), mnsj);
        }
        else{
                erroresSintacticos.get(AnalizadorLexico.getLineaAct()).add(mensaje);
        }
}

static HashMap<Integer,ArrayList<String>> getErroresSintacticos(){
        return erroresSintacticos;
}
void chequearRangoI32(String sval){
  String s = "2147483647";
  long l = Long.valueOf(s);
  if(Long.valueOf(sval) > l){
    yyerror("La constante esta fuera de rango");
  }
}

void chequearRangoI32Neg(String sval){
       String s = "2147483648";
        long l = Long.valueOf(s);
        if(Long.valueOf(sval) > l){
                yyerror("La constante esta fuera de rango");
  } 
}

int yylex() throws IOException{
        Token t = AnalizadorLexico.getToken();
        this.yylval = new ParserVal(t.getLexema());
        //if(t.getId() != -1){
        //  System.out.println("Id: " + t.getId()+" Lexema: " + t.getLexema());
        //}else
        //  System.out.println("TERMINO LA EJECUCION");
        return t.getId();
}
public NodoControl getRaiz(){
	return raiz;
}
public Map<String,ArbolSintactico> getFuncion(){
        return funciones;
}

void actualizarAmbito(String lex, String amb){
        TablaSimbolos.addAtributo(lex,"Ambito",amb);
}
public String getTipoActual(){
        if(!this.tipoActual.isEmpty()){
                return (this.tipoActual.get(tipoActual.size()-1));
        }
        return null;
}
public void cambiarTipoActual(String f){
        tipoActual.add(f);
}
public void removeTipoActual(){
        if(!this.tipoActual.isEmpty()){
                this.tipoActual.remove(tipoActual.size()-1);
        }
}
public String buscarAmbito(String ambitoActual,String lexema){
        String ambito = ambitoActual;
        while(!TablaSimbolos.existeSimbolo(lexema+":"+ambito)){
                if(ambito.equals("Global")){
                        yyerror("La variable " + lexema + " no se encuentra declarada en el ambito " + ambitoActual);
                        ambito = "";
                        break;
                }else{
                        char [] a = ambito.toCharArray();
                        for (int i = a.length;i>=0;i--){
                                if(a[i-1] == ':'){
                                        ambito = ambito.substring(0,i-1);
                                        break;
                                }
                        }
                }
        }
        return ambito;
}
//#line 1421 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse() throws IOException
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 22 "gramaticaTomi.y"
{
                                                                raiz = new NodoControl("PROGRAMA",(ArbolSintactico)val_peek(1));  
                                                                TablaSimbolos.removeAtributo(val_peek(3).sval);
                                                        }
break;
case 2:
//#line 27 "gramaticaTomi.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba }");}
break;
case 3:
//#line 30 "gramaticaTomi.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba {");}
break;
case 4:
//#line 33 "gramaticaTomi.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba el nombre del programa");}
break;
case 6:
//#line 39 "gramaticaTomi.y"
{yyval=new NodoHoja("Fin");}
break;
case 7:
//#line 40 "gramaticaTomi.y"
{
                                                        yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));
                                                        }
break;
case 8:
//#line 43 "gramaticaTomi.y"
{
                                yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba ;");
                        }
break;
case 9:
//#line 48 "gramaticaTomi.y"
{yyval=new NodoHoja("Sentencia Declarativa");}
break;
case 10:
//#line 49 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 12:
//#line 52 "gramaticaTomi.y"
{funciones.put((String)((ArbolSintactico)val_peek(0)).getLex(),(ArbolSintactico)val_peek(0));}
break;
case 14:
//#line 55 "gramaticaTomi.y"
{
            yyval = new NodoHoja("Entero");
            ((NodoHoja)yyval).setTipo("Entero");
           }
break;
case 15:
//#line 59 "gramaticaTomi.y"
{
            yyval = new NodoHoja("Float");
            ((NodoHoja)yyval).setTipo("Float");
           }
break;
case 16:
//#line 64 "gramaticaTomi.y"
{  System.out.println("Declaracion de datos");
                                        for (String s : ((NodoTipos)val_peek(0)).getList()){
                                                String ambito = ambitoActual;
                                                while(TablaSimbolos.existeSimbolo(s+":"+ambito)){
                                                        if(ambito.equals("Global")){
                                                                yyerror("La variable " + s + " ya se encuentra declarada en el ambito " + ambitoActual);
                                                                ambito = "";
                                                                break;
                                                        }else{
                                                                char [] a = ambito.toCharArray();
                                                                for (int i = a.length;i>=0;i--){
                                                                        if(a[i-1] == ':'){
                                                                        ambito = ambito.substring(0,i-1);
                                                                        break;
                                                                }
                                                        }
                                                }
                                        }  
                                        if(ambito.equals(ambitoActual)){
                                                TablaSimbolos.addNuevoSimbolo(s+":"+ambito);
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Id",TablaSimbolos.getAtributo(s,"Id"));
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Tipo",((ArbolSintactico) val_peek(1)).getTipo());
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Linea",AnalizadorLexico.getLineaAct());
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Uso","Variable");
                                                TablaSimbolos.removeAtributo(s);
                                        }
                                        

                                        }
                                        yyval = val_peek(0);
                                }
break;
case 17:
//#line 95 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("se esperaba lista de identificadores entre comas");}
break;
case 18:
//#line 98 "gramaticaTomi.y"
{
                            yyval=val_peek(2);
                            ((NodoTipos)yyval).add((String)val_peek(0).sval);
                            }
break;
case 19:
//#line 102 "gramaticaTomi.y"
{
               yyval=new NodoTipos((String)val_peek(0).sval);
              }
break;
case 20:
//#line 106 "gramaticaTomi.y"
{       

                                if(!TablaSimbolos.existeSimbolo(val_peek(7).sval+ ":" + ambitoActual)){
                                        yyval = new ParserVal(val_peek(7).sval);
                                        TablaSimbolos.addNuevoSimbolo(val_peek(7).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(7).sval+ ":" + ambitoActual,"Uso","Funcion");
                                        TablaSimbolos.addAtributo(val_peek(7).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(7).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(7).sval);
                                        TablaSimbolos.addAtributo(val_peek(7).sval+":"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                        TablaSimbolos.addAtributo(val_peek(7).sval +":"+ambitoActual,"Parametro1",((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual +":"+ val_peek(7).sval);
                                        TablaSimbolos.addAtributo(val_peek(7).sval +":"+ambitoActual,"Parametro2",((ArbolSintactico)val_peek(3)).getLex()+ ":"+ ambitoActual +":"+ val_peek(7).sval);
                                        ambitoActual += ":"+val_peek(7).sval;
                                        cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                        /*Agrego los parametros en la tabla de simbolos*/
                                        TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual);
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(5)).getTipo());
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual,"Uso","Variable");
                                        TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual);
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Uso","Variable");

                                }else{
                                        yyerror("La funcion " + val_peek(7).sval + " ya existe en el ambito " + ambitoActual);
                                        ambitoActual += ":"+val_peek(7).sval;
                                }
                        
                        }
break;
case 21:
//#line 133 "gramaticaTomi.y"
{
                        if(!TablaSimbolos.existeSimbolo(val_peek(5).sval+ ":" + ambitoActual)){
                                yyval = new ParserVal(val_peek(5).sval);
                                TablaSimbolos.addNuevoSimbolo(val_peek(5).sval+ ":" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(5).sval+ ":" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(5).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(5).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(5).sval);
                                TablaSimbolos.addAtributo(val_peek(5).sval+":"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addAtributo(val_peek(5).sval +":"+ambitoActual,"Parametro1", ((ArbolSintactico)val_peek(3)).getLex()+ ":"+ ambitoActual +":"+ val_peek(5).sval);
                                ambitoActual += ":"+val_peek(5).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                /*Agrego el parametro en la tabla de simbolos*/
                                TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual);
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Uso","Variable");

                        }else{
                                yyerror("La funcion " + val_peek(5).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += ":"+val_peek(5).sval;
                        }
                }
break;
case 22:
//#line 154 "gramaticaTomi.y"
{
                        if(!TablaSimbolos.existeSimbolo(val_peek(4).sval+ ":" + ambitoActual)){
                                yyval = new ParserVal(val_peek(4).sval);
                                TablaSimbolos.addNuevoSimbolo(val_peek(4).sval+ ":" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(4).sval+ ":" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(4).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(4).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(4).sval);
                                TablaSimbolos.addAtributo(val_peek(4).sval+":"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                ambitoActual += ":"+val_peek(4).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());

                        }else{
                                yyerror("La funcion " + val_peek(4).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += ":"+val_peek(4).sval;
                        }
                }
break;
case 23:
//#line 171 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 24:
//#line 174 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 25:
//#line 177 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 26:
//#line 180 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba :");}
break;
case 27:
//#line 183 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba :");}
break;
case 28:
//#line 186 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba :");}
break;
case 29:
//#line 189 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba )");}
break;
case 30:
//#line 192 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba )");}
break;
case 31:
//#line 195 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba )");}
break;
case 32:
//#line 198 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba otro parametro");}
break;
case 33:
//#line 201 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba (");}
break;
case 34:
//#line 204 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba un nombre de funcion");}
break;
case 35:
//#line 209 "gramaticaTomi.y"
{
                                System.out.println("Declaracion de Funcion");
                                yyval = new NodoControl("Funcion:"+val_peek(3).sval,(ArbolSintactico)val_peek(1));
                                char [] a = ambitoActual.toCharArray();
                                for (int i = a.length;i>=0;i--){
                                        if(a[i-1] == ':'){
                                                ambitoActual = ambitoActual.substring(0,i-1);
                                                break;
                                        }
                                }
                                removeTipoActual();
                        }
break;
case 36:
//#line 221 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 37:
//#line 223 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 38:
//#line 226 "gramaticaTomi.y"
{yyval=new NodoHoja("Fin");}
break;
case 39:
//#line 227 "gramaticaTomi.y"
{yyval=new NodoComun("Sentencia_Funcion", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 40:
//#line 228 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 41:
//#line 231 "gramaticaTomi.y"
{yyval=new NodoHoja("Sentencia Declarativa Datos");}
break;
case 42:
//#line 232 "gramaticaTomi.y"
{yyval=new NodoHoja("Sentencia Declarativa Funcion");}
break;
case 43:
//#line 233 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 44:
//#line 234 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 45:
//#line 235 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 46:
//#line 236 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 47:
//#line 237 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 48:
//#line 238 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 49:
//#line 239 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 50:
//#line 240 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 51:
//#line 241 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 52:
//#line 243 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                                yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(8),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(5)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));
                        }
break;
case 53:
//#line 246 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(6)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));}
break;
case 54:
//#line 248 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(7)),new NodoControl("else fun", (ArbolSintactico)val_peek(3))));}
break;
case 55:
//#line 251 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF FUN", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        }
break;
case 56:
//#line 254 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(6)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));}
break;
case 57:
//#line 257 "gramaticaTomi.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF FUN", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );}
break;
case 58:
//#line 259 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 59:
//#line 261 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 60:
//#line 263 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 61:
//#line 265 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 62:
//#line 267 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 63:
//#line 269 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 64:
//#line 271 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 65:
//#line 273 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 66:
//#line 275 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 67:
//#line 277 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 68:
//#line 280 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 69:
//#line 282 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 70:
//#line 284 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 71:
//#line 286 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 72:
//#line 288 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 73:
//#line 291 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 74:
//#line 293 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 75:
//#line 296 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 76:
//#line 298 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 77:
//#line 303 "gramaticaTomi.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 78:
//#line 306 "gramaticaTomi.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 79:
//#line 309 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 80:
//#line 311 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 81:
//#line 313 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 82:
//#line 315 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 83:
//#line 317 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion");}
break;
case 84:
//#line 319 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 85:
//#line 322 "gramaticaTomi.y"
{
                                yyval = new ParserVal(val_peek(1).sval);
                                if(!TablaSimbolos.existeSimbolo(val_peek(1).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(1).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(1).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(1).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(1).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(1).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(1).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 86:
//#line 335 "gramaticaTomi.y"
{
                                yyval = new NodoComun("While con Etiqueta Funcion",new NodoControl("Etiqueta", new NodoHoja(val_peek(11).sval)) , new NodoComun("While", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                                System.out.println("Sentencia WHILE con etiqueta y con llaves");
                        
                                
                        }
break;
case 87:
//#line 342 "gramaticaTomi.y"
{
                                System.out.println("Sentencia WHILE con etiqueta y sin llaves");
                                yyval = new NodoComun("While con Etiqueta Funcion",new NodoControl("Etiqueta", new NodoHoja(val_peek(9).sval)) , new NodoComun("While", (ArbolSintactico) val_peek(6), new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );
                        
                        }
break;
case 88:
//#line 347 "gramaticaTomi.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 89:
//#line 350 "gramaticaTomi.y"
{
                    yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");
                }
break;
case 90:
//#line 354 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 91:
//#line 356 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 92:
//#line 358 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 93:
//#line 360 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 94:
//#line 362 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 95:
//#line 364 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 96:
//#line 366 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 97:
//#line 368 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 98:
//#line 370 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 99:
//#line 372 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 100:
//#line 374 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 101:
//#line 376 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 102:
//#line 378 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 103:
//#line 380 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 104:
//#line 382 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 105:
//#line 384 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 106:
//#line 386 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 107:
//#line 388 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 108:
//#line 393 "gramaticaTomi.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval, id1, new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2, (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)),asignacion ))) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(5).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 109:
//#line 429 "gramaticaTomi.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");                               
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval,id1, new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2, (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion ))) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(5).sval + "' debe ser de tipo entero");
                                }        
                        }
break;
case 110:
//#line 465 "gramaticaTomi.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,id1, new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2, (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion ))) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(3).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 111:
//#line 501 "gramaticaTomi.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable"); 
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,id1, new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2, (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)),asignacion ))) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(3).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 112:
//#line 538 "gramaticaTomi.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                System.out.println((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(4).sval + "' debe ser de tipo entero");
                                }
                }
break;
case 113:
//#line 575 "gramaticaTomi.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(4).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 114:
//#line 610 "gramaticaTomi.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(2).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 115:
//#line 645 "gramaticaTomi.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(2).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 116:
//#line 680 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 117:
//#line 682 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 118:
//#line 684 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 119:
//#line 687 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 120:
//#line 689 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 121:
//#line 691 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 122:
//#line 693 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 123:
//#line 695 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 124:
//#line 698 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 125:
//#line 700 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 126:
//#line 702 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 127:
//#line 704 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 128:
//#line 706 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 129:
//#line 708 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 130:
//#line 710 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 131:
//#line 712 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 132:
//#line 714 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 133:
//#line 716 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 134:
//#line 718 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 135:
//#line 720 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 136:
//#line 722 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 137:
//#line 725 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 138:
//#line 727 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 139:
//#line 729 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 140:
//#line 731 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 141:
//#line 733 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 142:
//#line 736 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 143:
//#line 738 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 144:
//#line 740 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 145:
//#line 742 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 146:
//#line 744 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 147:
//#line 746 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 148:
//#line 748 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 149:
//#line 750 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 150:
//#line 752 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 151:
//#line 754 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 152:
//#line 757 "gramaticaTomi.y"
{yyval=new NodoHoja("Fin");}
break;
case 153:
//#line 758 "gramaticaTomi.y"
{yyval=new NodoComun("Sentencia_Funcion_Break", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 154:
//#line 759 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 155:
//#line 762 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 156:
//#line 763 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 157:
//#line 764 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 158:
//#line 765 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 159:
//#line 766 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 160:
//#line 767 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 161:
//#line 768 "gramaticaTomi.y"
{yyval = new NodoControl("Continue",(ArbolSintactico)val_peek(0));}
break;
case 162:
//#line 769 "gramaticaTomi.y"
{yyval = new NodoHoja("Break");}
break;
case 163:
//#line 770 "gramaticaTomi.y"
{yyval = new NodoControl("Break", new NodoHoja(val_peek(0).sval));}
break;
case 164:
//#line 771 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 165:
//#line 774 "gramaticaTomi.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 166:
//#line 777 "gramaticaTomi.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 167:
//#line 780 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 168:
//#line 782 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 169:
//#line 784 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 170:
//#line 786 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 171:
//#line 788 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion");}
break;
case 172:
//#line 790 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 173:
//#line 794 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 174:
//#line 799 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 175:
//#line 804 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 176:
//#line 809 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 177:
//#line 814 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 178:
//#line 819 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 179:
//#line 823 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 180:
//#line 825 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 181:
//#line 827 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 182:
//#line 829 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 183:
//#line 831 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 184:
//#line 834 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 185:
//#line 836 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 186:
//#line 838 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 187:
//#line 840 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 188:
//#line 842 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 189:
//#line 845 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 190:
//#line 847 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 191:
//#line 850 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 192:
//#line 852 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 193:
//#line 855 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 194:
//#line 857 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 195:
//#line 859 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 196:
//#line 861 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 197:
//#line 863 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 198:
//#line 866 "gramaticaTomi.y"
{yyval = new NodoControl("Retorno", (ArbolSintactico)val_peek(1));
                                                String tipoRet = ((ArbolSintactico)val_peek(1)).getTipo();
                                                if(!ambitoActual.equals("Global")){
                                                        String tipoFun = getTipoActual();
                                                        if(!tipoRet.equals(tipoFun)){
                                                                yyerror("El retorno debe ser del mismo tipo que el retorno de la funcion.");
                                                        }
                                                }else{
                                                        yyerror("El retorno puede estar solo dentro de una funcion.");
                                                }
                                        }
break;
case 199:
//#line 877 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba )");}
break;
case 200:
//#line 879 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion");}
break;
case 201:
//#line 881 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion entre ( )");}
break;
case 202:
//#line 885 "gramaticaTomi.y"
{    yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(1)).getTipo());
}
break;
case 203:
//#line 888 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba identificador");}
break;
case 204:
//#line 892 "gramaticaTomi.y"
{System.out.println("Declaracion de Constante/s");}
break;
case 207:
//#line 898 "gramaticaTomi.y"
{ 
                                if(TablaSimbolos.existeSimbolo(val_peek(2).sval+":"+ambitoActual)){
                                        yyerror("La variable " + val_peek(2).sval + " se encuentra declarada en el ambito " + ambitoActual);
                                }else{
                                        TablaSimbolos.addNuevoSimbolo(val_peek(2).sval+":"+ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(2).sval,"Id"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambitoActual,"Tipo",TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambitoActual,"Linea",AnalizadorLexico.getLineaAct());
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambitoActual,"Uso","Constante");
                                }
                        }
break;
case 208:
//#line 909 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba una constante");}
break;
case 209:
//#line 911 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba una asignacion =:");}
break;
case 210:
//#line 914 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 211:
//#line 915 "gramaticaTomi.y"
{yyval = val_peek(0); }
break;
case 212:
//#line 916 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 213:
//#line 917 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 214:
//#line 918 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 215:
//#line 919 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 216:
//#line 920 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 217:
//#line 922 "gramaticaTomi.y"
{
                                        System.out.println("Asignacion");
                                        String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                                        NodoHoja hoja = new NodoHoja(val_peek(2).sval+":"+ambito);
                                        hoja.setUso((String)TablaSimbolos.getAtributo(val_peek(2).sval+":"+ambito, "Uso"));
                                        hoja.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval, hoja , (ArbolSintactico) val_peek(0));

                                        String tipoS1 = "";
                                        if(!ambito.equals("")){
                                                if(((String)TablaSimbolos.getAtributo(val_peek(2).sval+":"+ambito, "Uso")).equals("Variable")){
                                                        tipoS1 = (String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo");
                                                        ((ArbolSintactico)yyval).setTipo(tipoS1);
                                                }
                                                else {
                                                        yyerror(val_peek(2).sval+" no es una variable.");
                                                }
                                        }
                                        String tipoS3 = ((ArbolSintactico)val_peek(0)).getTipo();
                                        if(!(tipoS1.equals(tipoS3))){
                                                yyerror("No se puede realizar una asignacion con tipos diferentes.");
                                        }
                                        
                                }
break;
case 218:
//#line 946 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba =:");}
break;
case 219:
//#line 948 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion");}
break;
case 220:
//#line 951 "gramaticaTomi.y"
{     
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));

                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una suma con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                        
                                 }
break;
case 221:
//#line 961 "gramaticaTomi.y"
{
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una resta con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                 }
break;
case 222:
//#line 970 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 223:
//#line 971 "gramaticaTomi.y"
{yyval = new NodoComun("For como expresion",(ArbolSintactico)val_peek(2),new NodoHoja(val_peek(0).sval));
                                   ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));     
                                        }
break;
case 224:
//#line 974 "gramaticaTomi.y"
{    yyval = new NodoComun("While como expresion",(ArbolSintactico)val_peek(2),new NodoHoja(val_peek(0).sval));
                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo")); 
                                        }
break;
case 225:
//#line 977 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un termino");}
break;
case 226:
//#line 979 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un termino");}
break;
case 227:
//#line 981 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un constante");}
break;
case 228:
//#line 983 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un constante");}
break;
case 229:
//#line 987 "gramaticaTomi.y"
{ 
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una multiplicacion con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 230:
//#line 996 "gramaticaTomi.y"
{
                                        yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una division con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 231:
//#line 1005 "gramaticaTomi.y"
{
                  yyval = val_peek(0);
                 }
break;
case 232:
//#line 1008 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un factor");}
break;
case 233:
//#line 1010 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un factor");}
break;
case 234:
//#line 1013 "gramaticaTomi.y"
{
                String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                if((!ambito.equals(""))){
                        if(((String)TablaSimbolos.getAtributo(val_peek(0).sval+":"+ambito, "Uso")).equals("Variable")){
                                yyval = new NodoHoja(val_peek(0).sval+":"+ambito);
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +":"+ ambito,"Tipo"));
                                ((ArbolSintactico)yyval).setUso("Variable");
                        }
                        else{
                                yyerror(val_peek(0).sval+" no es una variable");
                        }
                }else{
                        yyval = new NodoHoja("Error");
                }
           }
break;
case 235:
//#line 1029 "gramaticaTomi.y"
{
                yyval = new NodoHoja(val_peek(0).sval);
                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                ((ArbolSintactico)yyval).setUso("Constante");
              }
break;
case 236:
//#line 1035 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 237:
//#line 1037 "gramaticaTomi.y"
{  chequearRangoI32(val_peek(0).sval);}
break;
case 238:
//#line 1038 "gramaticaTomi.y"
{}
break;
case 241:
//#line 1043 "gramaticaTomi.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                                                                                                                                }
break;
case 242:
//#line 1047 "gramaticaTomi.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");}
break;
case 243:
//#line 1050 "gramaticaTomi.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                                                                                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");}
break;
case 244:
//#line 1052 "gramaticaTomi.y"
{yyval = new NodoComun("IF",new NodoControl("Condicion", (ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                                                                                        System.out.println("Sentencia IF sin corchetes y sin else");}
break;
case 245:
//#line 1054 "gramaticaTomi.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF con corchetes y else");}
break;
case 246:
//#line 1057 "gramaticaTomi.y"
{
                                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                                        System.out.println("Sentencia IF con corchetes y sin else");}
break;
case 247:
//#line 1060 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 248:
//#line 1062 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 249:
//#line 1064 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 250:
//#line 1066 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 251:
//#line 1068 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 252:
//#line 1071 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 253:
//#line 1073 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 254:
//#line 1075 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 255:
//#line 1077 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 256:
//#line 1079 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 257:
//#line 1082 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 258:
//#line 1084 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 259:
//#line 1087 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 260:
//#line 1089 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 261:
//#line 1092 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 262:
//#line 1094 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 263:
//#line 1096 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 264:
//#line 1098 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 265:
//#line 1100 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 266:
//#line 1106 "gramaticaTomi.y"
{
                        yyval= new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                        ((ArbolSintactico)yyval).setUso("Condicion");
                        if (!((((ArbolSintactico)val_peek(2)).getTipo()).equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                               yyerror("error en la comparacion entre expresiones de distintos tipos");
                        }
                }
break;
case 267:
//#line 1114 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba otra expresion para comparar.");}
break;
case 268:
//#line 1116 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un tipo de comparacion.");}
break;
case 269:
//#line 1119 "gramaticaTomi.y"
{yyval= val_peek(0);}
break;
case 270:
//#line 1120 "gramaticaTomi.y"
{yyval= val_peek(0);}
break;
case 271:
//#line 1121 "gramaticaTomi.y"
{yyval= val_peek(0);}
break;
case 272:
//#line 1122 "gramaticaTomi.y"
{yyval= val_peek(0);}
break;
case 273:
//#line 1123 "gramaticaTomi.y"
{yyval= val_peek(0);}
break;
case 274:
//#line 1124 "gramaticaTomi.y"
{yyval=val_peek(0);}
break;
case 275:
//#line 1126 "gramaticaTomi.y"
{yyval=new NodoHoja("Fin");}
break;
case 276:
//#line 1127 "gramaticaTomi.y"
{
                                                                yyval=new NodoComun("Bloque Ejecutable", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                                                                }
break;
case 277:
//#line 1130 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 278:
//#line 1133 "gramaticaTomi.y"
{
                        yyval = new NodoControl(val_peek(3).sval, (ArbolSintactico) new NodoHoja(val_peek(1).sval));
                        System.out.println("Sentencia OUT");}
break;
case 279:
//#line 1136 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 280:
//#line 1138 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una CADENA");}
break;
case 281:
//#line 1140 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 282:
//#line 1143 "gramaticaTomi.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 283:
//#line 1146 "gramaticaTomi.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 284:
//#line 1149 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } en el when");}
break;
case 285:
//#line 1151 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { en el when");}
break;
case 286:
//#line 1153 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then en el when");}
break;
case 287:
//#line 1155 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) en el when");}
break;
case 288:
//#line 1157 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion en el when");}
break;
case 289:
//#line 1159 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( en el when");}
break;
case 290:
//#line 1163 "gramaticaTomi.y"
{
                                yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(11).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                        
                        }
break;
case 291:
//#line 1167 "gramaticaTomi.y"
{
                        yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(9).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );
                        
                        }
break;
case 292:
//#line 1171 "gramaticaTomi.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 293:
//#line 1174 "gramaticaTomi.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");}
break;
case 294:
//#line 1177 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 295:
//#line 1179 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 296:
//#line 1181 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 297:
//#line 1183 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 298:
//#line 1185 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 299:
//#line 1187 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 300:
//#line 1189 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 301:
//#line 1191 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 302:
//#line 1193 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 303:
//#line 1196 "gramaticaTomi.y"
{yyval=new NodoHoja("Fin");}
break;
case 304:
//#line 1197 "gramaticaTomi.y"
{
                yyval = new NodoComun("Bloque Break con Continue",(ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));
                }
break;
case 305:
//#line 1200 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba ;");}
break;
case 306:
//#line 1204 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 307:
//#line 1205 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 308:
//#line 1206 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 309:
//#line 1207 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 310:
//#line 1208 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 311:
//#line 1209 "gramaticaTomi.y"
{yyval = val_peek(0);}
break;
case 312:
//#line 1210 "gramaticaTomi.y"
{yyval = new NodoControl("Continue",(ArbolSintactico)val_peek(0));}
break;
case 313:
//#line 1211 "gramaticaTomi.y"
{yyval = new NodoHoja("Break");}
break;
case 314:
//#line 1212 "gramaticaTomi.y"
{yyval = new NodoControl("Break", new NodoHoja(val_peek(0).sval));}
break;
case 315:
//#line 1214 "gramaticaTomi.y"
{yyval = new NodoHoja("Fin");}
break;
case 316:
//#line 1215 "gramaticaTomi.y"
{String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        yyval = new NodoControl("Tag", new NodoHoja(val_peek(0).sval) );
                        if(!ambito.equals("")){
                                if(!TablaSimbolos.getAtributo(val_peek(0).sval +":"+ ambito,"Uso").equals("Etiqueta")){
                                        yyerror(val_peek(0).sval + " no es una etiqueta.");
                                }
                        }else{
                                yyerror("La etiqueta " + val_peek(0).sval + " no esta declarada.");
                        }
                        }
break;
case 317:
//#line 1225 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un identificador");}
break;
case 318:
//#line 1229 "gramaticaTomi.y"
{System.out.println("Sentencia WHEN");}
break;
case 319:
//#line 1230 "gramaticaTomi.y"
{System.out.println("Sentencia WHEN");}
break;
case 320:
//#line 1231 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } en el when");}
break;
case 321:
//#line 1233 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { en el when");}
break;
case 322:
//#line 1235 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then en el when");}
break;
case 323:
//#line 1237 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) en el when");}
break;
case 324:
//#line 1239 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion en el when");}
break;
case 325:
//#line 1241 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( en el when");}
break;
case 326:
//#line 1245 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 327:
//#line 1250 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 328:
//#line 1255 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 329:
//#line 1260 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 330:
//#line 1265 "gramaticaTomi.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 331:
//#line 1270 "gramaticaTomi.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 332:
//#line 1274 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 333:
//#line 1276 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 334:
//#line 1278 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 335:
//#line 1280 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 336:
//#line 1282 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 337:
//#line 1285 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 338:
//#line 1287 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 339:
//#line 1289 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 340:
//#line 1291 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 341:
//#line 1293 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 342:
//#line 1296 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 343:
//#line 1298 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 344:
//#line 1301 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 345:
//#line 1303 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 346:
//#line 1306 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 347:
//#line 1308 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 348:
//#line 1310 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 349:
//#line 1312 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 350:
//#line 1314 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 351:
//#line 1318 "gramaticaTomi.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval, id1, new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2, (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)),asignacion ))) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(5).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 352:
//#line 1354 "gramaticaTomi.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");                               
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval,id1, new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2, (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion ))) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(5).sval + "' debe ser de tipo entero");
                                }        
                        }
break;
case 353:
//#line 1390 "gramaticaTomi.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,id1, new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2, (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion ))) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(3).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 354:
//#line 1426 "gramaticaTomi.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable"); 
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,id1, new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2, (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)),asignacion ))) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(3).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 355:
//#line 1463 "gramaticaTomi.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                System.out.println((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(4).sval + "' debe ser de tipo entero");
                                }
                }
break;
case 356:
//#line 1500 "gramaticaTomi.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(4).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 357:
//#line 1535 "gramaticaTomi.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(2).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 358:
//#line 1570 "gramaticaTomi.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(2).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 359:
//#line 1605 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 360:
//#line 1607 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 361:
//#line 1609 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 362:
//#line 1612 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 363:
//#line 1614 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 364:
//#line 1616 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 365:
//#line 1618 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 366:
//#line 1620 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 367:
//#line 1623 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 368:
//#line 1625 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 369:
//#line 1627 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 370:
//#line 1629 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 371:
//#line 1631 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 372:
//#line 1633 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 373:
//#line 1635 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 374:
//#line 1637 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 375:
//#line 1639 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 376:
//#line 1641 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 377:
//#line 1643 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 378:
//#line 1645 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 379:
//#line 1647 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 380:
//#line 1650 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 381:
//#line 1652 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 382:
//#line 1654 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 383:
//#line 1656 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 384:
//#line 1658 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 385:
//#line 1661 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 386:
//#line 1663 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 387:
//#line 1665 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 388:
//#line 1667 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 389:
//#line 1669 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 390:
//#line 1671 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 391:
//#line 1673 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 392:
//#line 1675 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 393:
//#line 1677 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 394:
//#line 1679 "gramaticaTomi.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 395:
//#line 1683 "gramaticaTomi.y"
{
                        yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                }
break;
case 396:
//#line 1688 "gramaticaTomi.y"
{yyval=new NodoHoja(val_peek(0).sval);
                        String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        if(!ambito.equals("")){
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +":"+ ambito,"Tipo"));
                        }
                     }
break;
case 397:
//#line 1695 "gramaticaTomi.y"
{
                                                        yyval=new NodoComun("llamado funcion",(ArbolSintactico)val_peek(3),(ArbolSintactico)val_peek(1));
                                                        String ambito = buscarAmbito(ambitoActual,val_peek(5).sval);
                                                        if (!ambito.equals("") ){
                                                                if( !TablaSimbolos.getAtributo(val_peek(5).sval+":"+ambito,"Uso").equals("Funcion") ){
                                                                        yyerror("La funcion "+val_peek(5).sval+" no fue declarada");
                                                                }else{
                                                                        String par1 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +":"+ ambito,"Parametro1");
                                                                        String par2 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +":"+ ambito,"Parametro2");
                                                                        if(par1 != null)
                                                                                if(par2 != null){
                                                                                        String tipoS3 = (String) ((ArbolSintactico) val_peek(3) ).getTipo();
                                                                                        if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") ) )){
                                                                                                String nombreS3 = ((ArbolSintactico) val_peek(3)).getLex();
                                                                                                yyerror("El tipo del parametro "+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                                                                        }
                                                                                        String tipoS5 = (String) ((ArbolSintactico) val_peek(1)).getTipo();
                                                                                        if( !(tipoS5.equals((String)TablaSimbolos.getAtributo(par2,"Tipo") ))){
                                                                                                String nombreS5 = ((ArbolSintactico) val_peek(1)).getLex();
                                                                                                yyerror("El tipo del parametro "+ nombreS5+" no coincide con el tipo declarado en la funcion.");
                                                                                        }
                                                                                }else{
                                                                                        yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                                }
                                                                        else{
                                                                                yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                        }
                                                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(5).sval +":"+ ambito,"Tipo"));
                                                                }
                                                        }
                                                }
break;
case 398:
//#line 1726 "gramaticaTomi.y"
{System.out.println("Llamado fun 1 parametro");
                yyval=new NodoComun("llamado funcion",(ArbolSintactico)val_peek(1),new NodoHoja("Un solo parametro"));
            String ambito = buscarAmbito(ambitoActual,val_peek(3).sval);
            if (!ambito.equals("")){
                if (!TablaSimbolos.getAtributo(val_peek(3).sval+":"+ambito,"Uso").equals("Funcion")){
                        yyerror("La funcion "+val_peek(3).sval+" no fue declarada");
                }else{
                        String par1 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +":"+ ambito,"Parametro1");
                        String par2 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +":"+ ambito,"Parametro2");
                        if(par2 ==null){
                                if(par1!=null){
                                        String tipoS3 = (String) ((ArbolSintactico) val_peek(1) ).getTipo();
                                        if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") )) ){
                                                String nombreS3 = ((ArbolSintactico) val_peek(1)).getLex();
                                                yyerror("El tipo del parametro "+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                        }
                                }else{
                                        yyerror("La funcion esta declarada sin parametros.");
                                }
                        }else{
                                yyerror("La funcion esta declarada con dos parametros.");
                        }
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(3).sval +":"+ ambito,"Tipo"));
                }
            }
        }
break;
case 399:
//#line 1752 "gramaticaTomi.y"
{yyval=new NodoHoja("llamado funcion sin parametros");
                String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                if (!ambito.equals("") ){
                        if (!TablaSimbolos.getAtributo(val_peek(2).sval+":"+ambito,"Uso").equals("Funcion")){
                                yyerror("La funcion "+val_peek(2).sval+" no fue declarada");
                                
                        }else{
                                String par1 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Parametro1");
                                String par2 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Parametro2");
                                if(par2 == null){
                                        if(par1 != null){
                                                yyerror("La funcion esta declarada con un parametro.");
                                        }
                                }else{
                                        yyerror("La funcion esta declarada con dos parametros.");
                                }
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                        }
                }       
        }
break;
case 400:
//#line 1772 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 401:
//#line 1774 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 402:
//#line 1776 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 403:
//#line 1778 "gramaticaTomi.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba otro parametro");}
break;
//#line 4385 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 * @throws IOException
 */
public void run() throws IOException
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
