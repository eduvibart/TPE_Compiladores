//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package Principal;
import java.io.IOException;
import AnalizadorLexico.AnalizadorLexico;
import AnalizadorLexico.Token;
import GeneracionCodigoIntermedio.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Stack;

//#line 28 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IF=257;
public final static short THEN=258;
public final static short ELSE=259;
public final static short END_IF=260;
public final static short OUT=261;
public final static short FUN=262;
public final static short RETURN=263;
public final static short BREAK=264;
public final static short WHEN=265;
public final static short WHILE=266;
public final static short FOR=267;
public final static short CONTINUE=268;
public final static short ID=269;
public final static short I32=270;
public final static short F32=271;
public final static short PUNTO=272;
public final static short PARENT_A=273;
public final static short PARENT_C=274;
public final static short COMILLA=275;
public final static short COMA=276;
public final static short DOSPUNTOS=277;
public final static short PUNTOCOMA=278;
public final static short IGUAL=279;
public final static short MAYOR=280;
public final static short MENOR=281;
public final static short MENORIGUAL=282;
public final static short MAYORIGUAL=283;
public final static short LLAVE_A=284;
public final static short LLAVE_C=285;
public final static short EXCL=286;
public final static short DIST=287;
public final static short ASIG=288;
public final static short CADENA=289;
public final static short COMENT=290;
public final static short CONST=291;
public final static short SUMA=292;
public final static short RESTA=293;
public final static short MULT=294;
public final static short DIV=295;
public final static short ENTERO=296;
public final static short FLOAT=297;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    1,    2,    2,    2,    3,    3,
    4,    4,    4,    4,   10,   10,   11,   11,   11,    6,
    6,   12,   12,   13,   13,   13,   13,   13,   13,   13,
   13,   13,   13,   13,   13,   13,   13,   13,    7,    7,
    7,   15,   15,   15,   16,   16,   16,   16,   16,   16,
   16,   16,   16,   16,   16,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   21,   21,   21,   21,   21,   21,   21,   21,   28,   23,
   23,   23,   23,   22,   22,   22,   22,   22,   22,   22,
   22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
   22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
   22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
   22,   22,   22,   22,   22,   22,   22,   30,   30,   30,
   31,   31,   31,   31,   31,   31,   31,   31,   31,   34,
   34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
   34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
   34,   34,   34,   34,   24,   24,   24,   24,   14,   14,
    8,   37,   37,   38,   38,   38,    5,    5,    5,    5,
    5,    5,   17,   17,   17,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   42,   42,   42,   42,   42,   26,
   26,   26,   36,   36,   36,   36,   43,   43,   43,   43,
   43,   43,   43,   43,   43,   43,   43,   43,   43,   43,
   43,   43,   43,   43,   43,   43,   43,   43,   44,   44,
   44,   44,   44,   44,   44,   44,   44,   44,   44,   47,
   47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
   47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
   47,   47,   47,   47,   45,   45,   46,   46,   46,   46,
   46,   46,   39,   39,   39,   39,   39,   39,   39,   39,
   39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
   39,   39,   39,   39,   39,   39,   39,   25,   25,   25,
   27,   27,   27,   27,   27,   27,   48,   48,   48,   20,
   20,   20,   20,    9,    9,    9,    9,    9,    9,    9,
    9,   29,   29,   29,   29,   29,   29,   29,   29,   32,
   32,   32,   32,   32,   32,   32,   32,   41,   41,   41,
   41,   41,   41,   49,   49,   49,   50,   50,   50,   50,
   50,   50,   50,   35,   35,   35,   51,   51,   51,   51,
   51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
   51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
   51,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40,   52,   52,   18,   18,   18,
   18,   18,   18,   18,
};
final static short yylen[] = {                            2,
    4,    4,    4,    4,    1,    0,    3,    3,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    1,    2,
    2,    3,    1,    9,    7,    6,    9,    7,    6,    8,
    6,    5,    7,    5,    4,    6,    3,    2,    4,    4,
    2,    0,    3,    3,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,   11,   13,   13,    8,   13,
    9,   13,   12,   10,    9,    8,   12,   11,    9,    8,
    7,    6,    5,    4,    3,    2,   11,   10,   12,   11,
   10,    8,   10,    8,    7,    6,    3,    2,    2,    4,
    2,    4,    2,   17,   17,   15,   15,   16,   16,   14,
   14,   17,   15,   14,   17,   15,   14,   13,   13,   12,
   11,   10,    9,    8,    7,    6,    5,    4,    3,   16,
   14,   13,   16,   14,   13,   12,   12,   11,   10,    9,
    8,    7,    6,    5,    4,    3,    2,    0,    3,    3,
    1,    1,    1,    1,    1,    2,    1,    2,    1,   11,
   12,   12,    8,   13,    9,   13,   12,   10,    9,    8,
   12,   11,    9,    8,    7,   12,   11,   11,   10,    6,
    5,    4,    3,    2,    4,    4,    3,    2,    2,    2,
    2,    3,    1,    3,    3,    2,    1,    1,    1,    1,
    1,    1,    3,    2,    3,    3,    3,    1,    3,    3,
    3,    3,    3,    3,    3,    3,    1,    3,    3,    1,
    1,    1,    1,    1,    2,    2,   16,   16,   14,   14,
   16,   14,   13,   16,   14,   13,   12,   12,   11,   10,
    9,    8,    7,    6,    5,    4,    3,    2,   11,    9,
   11,    9,    8,    7,    6,    5,    4,    3,    2,   12,
   12,   11,    8,   13,    9,   13,   12,   10,    9,    8,
   12,   11,    9,    8,    7,   11,   10,   12,   11,    6,
    5,    4,    3,    2,    0,    3,    1,    1,    1,    1,
    1,    2,   12,   12,   11,    8,   13,    9,   13,   12,
   10,    9,    8,   12,   11,    9,    8,    7,   11,   10,
   12,   11,    6,    5,    4,    3,    2,    3,    3,    2,
    1,    1,    1,    1,    1,    1,    0,    3,    2,    4,
    4,    3,    2,   10,    8,   10,    8,    7,    6,    3,
    2,    9,    9,    8,    7,    6,    5,    4,    3,    8,
    8,    7,    6,    5,    4,    3,    2,    4,    2,    4,
    2,    4,    2,    0,    3,    2,    1,    1,    1,    1,
    1,    2,    1,    0,    2,    2,   12,   12,   11,    8,
   13,    9,   13,   12,   10,    9,    8,   12,   11,    9,
    8,    7,   11,   10,   12,   11,    6,    5,    4,    3,
    2,   17,   17,   15,   15,   16,   16,   14,   14,   17,
   15,   14,   17,   15,   14,   13,   13,   12,   11,   10,
    9,    8,    7,    6,    5,    4,    3,   16,   14,   13,
   16,   14,   13,   12,   12,   11,   10,    9,    8,    7,
    6,    5,    4,    3,    2,    1,    1,    6,    4,    3,
    6,    4,    3,    5,
};
final static short yydefred[] = {                         0,
    0,    5,    0,    0,    6,    6,    6,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   15,   16,    4,
    0,    0,    9,   10,   11,   12,   13,   14,    0,    0,
  187,  192,  189,    0,    0,    0,  188,  190,  191,    3,
    2,    1,  307,    0,  323,    0,   38,    0,  331,    0,
  347,    0,  435,    0,  194,    0,   89,    0,    0,    0,
  183,    8,    7,   21,   23,    0,   41,   42,    0,    0,
    0,  363,    0,    0,  354,  357,  359,  361,  360,  349,
  358,  353,  354,  351,  306,    0,    0,    0,    0,  213,
  214,  212,    0,  207,    0,  211,    0,    0,    0,  322,
    0,   37,    0,  330,    0,  346,    0,  434,    0,  443,
  437,  440,  436,    0,  195,    0,  186,    0,    0,    0,
    0,  339,    0,  417,    0,  391,    0,    0,  362,    0,
    0,  249,    0,  238,    0,  215,  216,  305,    0,  310,
  311,  312,  313,  314,  315,  316,    0,    0,    0,    0,
    0,    0,    0,  321,  320,   35,    0,    0,    0,    0,
  345,    0,  433,    0,  442,  439,    0,  185,  184,  182,
   22,   40,    0,    0,    0,    0,   39,   45,   46,   47,
    0,   48,   49,   50,   51,   52,   53,   54,   55,    0,
    0,    0,  338,    0,  416,    0,  390,    0,  366,  365,
  348,    0,  352,  350,  248,    0,  237,    0,  304,    0,
  201,    0,  202,    0,  309,    0,  208,  205,  209,  206,
  203,  199,  204,  200,   32,    0,  180,  179,   34,    0,
    0,    0,  344,    0,  432,   19,    0,   17,    0,  444,
    0,   76,    0,  178,    0,   88,    0,  137,    0,   44,
   43,    0,    0,    0,    0,  138,  141,  143,  145,  144,
  149,   91,  142,  138,   93,  337,    0,  415,    0,  389,
    0,  355,  247,    0,  236,    0,  303,  317,    0,   29,
   26,   31,    0,   36,    0,  329,    0,  343,    0,   18,
  431,    0,  441,  438,   75,    0,  177,    0,   87,    0,
  136,    0,  119,    0,  174,    0,  148,  146,    0,    0,
  336,    0,  414,    0,  388,    0,  246,    0,  235,    0,
    0,  298,    0,   28,   25,   33,    0,  328,    0,  342,
    0,    0,  430,    0,   74,    0,  176,  175,    0,  135,
    0,  118,    0,  173,    0,   90,    0,   92,  335,    0,
  413,    0,  387,  354,    0,  245,    0,  234,    0,  293,
    0,    0,  297,    0,  286,   30,    0,  327,    6,  325,
  341,  340,  429,    0,   73,    0,    0,  134,    0,  117,
    0,  172,    0,  140,  139,  334,    0,  412,    0,    0,
  382,    0,  244,    0,  233,    0,  292,    0,  288,  318,
  296,  317,    0,   27,   24,    0,  428,    0,   72,   42,
    0,   86,    0,  133,    0,  116,    0,  171,    0,  333,
  332,  411,    0,  377,    0,  381,    0,  370,  243,    0,
  232,    0,  291,  317,    0,    0,  300,    0,  326,  324,
  427,    0,    0,   71,    0,   85,    0,  132,    0,  115,
    0,  170,  138,    0,  410,    0,  376,    0,  372,  380,
  354,    0,  242,    0,    0,  275,  277,  279,  281,  280,
  240,  278,  231,    0,    0,  302,    0,  295,    0,  299,
  285,  426,    0,    0,   66,    0,   70,    0,   59,   84,
   42,   82,  131,    0,  114,    0,    0,  165,    0,  409,
    0,  375,  354,    0,    0,  384,    0,  274,    0,  282,
    0,  230,    0,  290,    0,  301,  284,  294,  283,  424,
    0,  425,    0,   65,    0,   61,    0,   69,   42,    0,
    0,  130,    0,  113,    0,  160,    0,  164,    0,  153,
  408,    0,    0,    0,  386,    0,  379,    0,  383,  369,
  273,    0,  241,  239,    0,  229,    0,    0,  289,  287,
  423,    0,  420,    0,   64,   42,    0,    0,    0,   78,
    0,   83,   81,  129,    0,  112,    0,  159,    0,  155,
  163,  138,    0,  406,    0,  407,    0,  374,    0,  385,
  368,  378,  367,  272,    0,  276,  227,    0,  228,    0,
  422,  354,  399,  419,  354,  398,    0,   80,    0,    0,
   68,    0,   77,   56,  128,    0,    0,  111,    0,  158,
  138,    0,    0,  169,    0,  405,    0,  402,    0,  373,
  371,  271,    0,  226,    0,  223,    0,    0,    0,   63,
    0,   79,    0,   67,    0,  126,    0,  127,    0,  110,
    0,    0,    0,  167,    0,  162,    0,  168,  150,  404,
  354,  394,  401,  354,  395,  270,  275,    0,  225,  275,
  220,  222,  275,  219,  421,  396,  418,  397,   62,   60,
   57,   58,  125,    0,  122,    0,  108,    0,  109,    0,
  157,    0,  166,  151,  161,  152,    0,    0,    0,  265,
    0,    0,    0,  124,  138,  101,  121,  138,  100,  107,
    0,  104,    0,  156,  154,  403,  392,  400,  393,  260,
    0,  264,    0,  253,  224,  217,  221,  218,    0,    0,
  106,  138,   96,  103,  138,   97,  259,    0,  255,  263,
  275,    0,  123,   98,  120,   99,    0,    0,  258,  275,
    0,    0,  267,    0,  105,   94,  102,   95,    0,  269,
    0,  262,    0,  266,  252,  257,    0,  268,  251,  261,
  250,  256,  254,
};
final static short yydgoto[] = {                          3,
    4,    8,   22,   23,   24,  178,  179,  180,   28,   29,
  239,   66,   30,  159,  121,  181,   76,   92,  184,   77,
  186,  259,  260,  261,   93,   94,  149,   34,   35,  309,
  347,   36,   95,  263,  129,   96,   60,   61,   37,   78,
   79,   97,   98,   99,  511,  555,  472,  321,  130,  202,
   81,  114,
};
final static short yysindex[] = {                       -35,
 -266,    0,    0, -228,    0,    0,    0, 1118, 1145, 1058,
   84,  156,   59,  380,  469,  503, -173,    0,    0,    0,
 -226, -243,    0,    0,    0,    0,    0,    0,  149, -122,
    0,    0,    0,  520, 2032, 1716,    0,    0,    0,    0,
    0,    0,    0, -225,    0, -224,    0,  528,    0, -128,
    0, -203,    0,  189,    0,  232,    0, -187, -153, -214,
    0,    0,    0,    0,    0, -195,    0,    0,  608,  631,
  647,    0, -220, -127,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  677,  707, -131, -115,    0,
    0,    0, -151,    0,  632,    0,  600, -107, -102,    0,
 -118,    0,  396,    0, 2025,    0,    6,    0, -109,    0,
    0,    0,    0,  434,    0,  893,    0, -223, -226,  -98,
  682,    0, -142,    0,  296,    0, -123,  297,    0, 1869,
 1321,    0,  -89,    0,  671,    0,    0,    0,  -21,    0,
    0,    0,    0,    0,    0,    0,  -43,   81,  -81,  223,
  277, -148,  -57,    0,    0,    0, -219,  741,  473,   42,
    0, -137,    0, -103,    0,    0,  295,    0,    0,    0,
    0,    0,  708,  716,  747,  748,    0,    0,    0,    0,
 -160,    0,    0,    0,    0,    0,    0,    0,    0,  668,
 2006, 2019,    0,   71,    0,  -97,    0,  125,    0,    0,
    0,  -77,    0,    0,    0,  401,    0,  -92,    0, 1974,
    0,  600,    0,  600,    0,  893,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  390,    0,    0,    0,   64,
  637,  406,    0,  752,    0,    0, -104,    0, -120,    0,
  425,    0,  -69,    0,  -11,    0,  354,    0,  783,    0,
    0,  753,  787,  705, -220,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   69,    0,   -4,    0,
  700,    0,    0,  244,    0,    1,    0,    0,   44,    0,
    0,    0,  698,    0,  467,    0,  839,    0,  797,    0,
    0,  818,    0,    0,    0,  516,    0,   77,    0, 2025,
    0,  -47,    0,  823,    0,   21,    0,    0, 1729, 1742,
    0,  792,    0,   76,    0, 1756,    0,  794,    0,  128,
 1546,    0,  931,    0,    0,    0,  268,    0, 1085,    0,
   -5,  526,    0,  848,    0,  860,    0,    0,   42,    0,
  375,    0,    8,    0,  532,    0,  129,    0,    0,  851,
    0,  881,    0,    0,  194,    0,  892,    0,  896,    0,
  964,  -67,    0, 1981,    0,    0,  838,    0,    0,    0,
    0,    0,    0,  127,    0,  721,  539,    0,  198,    0,
  423,    0,  891,    0,    0,    0,  553,    0, 1013, 1336,
    0, 1030,    0,  573,    0, 1057,    0, 1995,    0,    0,
    0,    0,  204,    0,    0, 1101,    0, -181,    0,    0,
  217,    0,  922,    0,  897,    0,  221,    0, 1598,    0,
    0,    0,  311,    0, 1062,    0, 1775,    0,    0, 1884,
    0,  345,    0,    0,  230, 1553,    0,   56,    0,    0,
    0, -206,  948,    0, 1074,    0,  771,    0, 1117,    0,
  898,    0,    0,  237,    0,  -18,    0, 1789,    0,    0,
    0,  256,    0,  807,  705,    0,    0,    0,    0,    0,
    0,    0,    0,  109, 1567,    0,  205,    0,  298,    0,
    0,    0,  462,  477,    0,  174,    0,  965,    0,    0,
    0,    0,    0,  416,    0, 1152,  750,    0, 1105,    0,
 -201,    0,    0,  262, 1351,    0,  333,    0,  431,    0,
 1456,    0,  -46,    0,  349,    0,    0,    0,    0,    0,
  587,    0,  598,    0,  981,    0,  -53,    0,    0,  271,
  997,    0,  163,    0,  500,    0, 1122,    0, 1617,    0,
    0,  509,  523, 1366,    0,  476,    0,  492,    0,    0,
    0,  601,    0,    0,  -29,    0,  538,  548,    0,    0,
    0, 1808,    0, 1822,    0,    0,  281, 1156, 1014,    0,
  572,    0,    0,    0,  -26,    0,  294,    0, 1631,    0,
    0,    0,  291,    0,  602,    0,  609,    0,  710,    0,
    0,    0,    0,    0, 1186,    0,    0,  610,    0,  622,
    0,    0,    0,    0,    0,    0, 1041,    0,    7,   -6,
    0,  338,    0,    0,    0,  552,  577,    0,   13,    0,
    0,  340, 1204,    0,  830,    0, 1841,    0, 1855,    0,
    0,    0, 1900,    0, 1914,    0, 1930, 1381, 1396,    0,
  917,    0,   19,    0,   47,    0,  635,    0,  636,    0,
  581,  586, 1218,    0,  932,    0,  943,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  346,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1650,    0, 1664,    0,  642,    0,  644,
    0,  956,    0,    0,    0,    0, 1411, 1426, 1471,    0,
 1134, 1486, 1501,    0,    0,    0,    0,    0,    0,    0,
 1683,    0, 1697,    0,    0,    0,    0,    0,    0,    0,
 1232,    0, 1944,    0,    0,    0,    0,    0, 1238, 1252,
    0,    0,    0,    0,    0,    0,    0, 1960,    0,    0,
    0,  350,    0,    0,    0,    0, 1272, 1286,    0,    0,
  361, 1516,    0,  969,    0,    0,    0,    0, 1531,    0,
  985,    0, 1001,    0,    0,    0, 1018,    0,    0,    0,
    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  365,
    0,    0,    0,    0,    0,  376,    0,    0,    0,    0,
    0,    0, 1306,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  790,    0,    0,
    0,    0,    0,    0,    0,    0,  832,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1184,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1441,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  877,    0,  915,    0,  672,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  378,  381,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1584,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,   23,   -3,    0, -204,    2,   30,   37,    0,  -94,
  379,    0,    0,  122, -403, -349,   -8,  454,    0,   51,
    0, -100,  -85,  -72,  -38,  -30,  -86,  138,  246, -230,
 -175,  392,  -50,    0,  121,  -51,    0,  267,    0,   15,
   68, 1169, -404,  203, -619, -415,    0, -350,  -61,  -32,
    0,  242,
};
final static int YYTABLESIZE=2316;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         31,
   31,   31,   80,   84,  113,  279,  443,  116,  158,   25,
   25,   25,   62,  107,  471,  262,  265,    5,  160,  105,
  187,  131,   38,   38,   38,  469,  411,    6,    9,   10,
   85,  100,  168,  310,   63,  188,  225,   26,   26,   26,
   86,   87,   59,   88,   27,   27,   27,  699,  189,  482,
  702,  436,  106,  703,  541,    7,  128,  226,   33,   33,
   33,  119,   86,   87,  101,   88,  169,   89,  115,   89,
   90,   91,   90,   91,  441,   39,   39,   39,   86,   87,
  120,   88,   55,  475,  194,  483,  484,  531,  198,   89,
  542,  543,   90,   91,  206,  250,  442,  492,  216,   56,
  222,  224,  117,   57,  138,   89,  469,  221,   90,   91,
  147,  148,  182,  193,   58,  113,  362,  251,  233,  218,
  220,  752,  139,   86,   87,  569,   88,  104,   55,  232,
  759,  281,  197,   67,  118,  291,  158,  154,  530,  234,
   88,   56,   86,   87,   89,   88,  163,   90,   91,   57,
   89,  152,  235,   90,   91,  155,  153,  292,  268,  403,
   58,   68,  607,  275,   89,  236,  205,   90,   91,   89,
  171,  185,   90,   91,  215,  567,   86,   87,  164,   88,
  136,  137,  257,  257,   86,   87,  295,   88,  325,  237,
  269,  290,  238,  435,  298,  276,   86,   87,  223,   88,
  272,   31,  307,   89,  296,  568,   90,   91,  340,  556,
  400,   89,  211,  339,   90,   91,  300,  668,  610,  671,
    1,  674,  497,   89,   38,   88,   90,   91,  469,  615,
  469,  362,  469,    2,  209,   89,  210,  500,   90,   91,
  341,  258,  258,  454,  297,  557,  558,  374,  596,   89,
   55,  313,   90,   91,   86,   87,  319,   88,  190,  501,
   33,  161,  642,  380,  236,  616,  617,  345,  650,  236,
  362,  643,  405,  147,  148,  187,  344,   39,  681,  162,
  332,   89,   58,  355,   90,   91,   86,   87,  237,   88,
  188,  238,  390,  237,  469,  381,  238,  469,  469,  322,
  257,  257,  423,  189,  651,  652,  682,  742,  377,  432,
   88,  480,   31,   89,   47,  481,   90,   91,  469,  282,
   31,  323,  751,  408,  311,  370,  266,   48,  190,  190,
   25,  351,  337,  469,   89,   38,  213,   90,   91,   43,
  283,  387,  187,   38,  267,  312,  187,  469,  394,   88,
  338,  623,  285,  352,  469,   31,   44,  188,   26,  258,
  258,  188,  494,  583,  512,   27,  191,  182,  147,  148,
  189,   33,  456,   89,  189,  308,   90,   91,   38,   33,
  270,  474,  407,  358,  384,  170,  513,  187,   39,   31,
  653,  406,   86,   87,  462,   88,   39,   31,  271,  505,
  147,  148,  188,  622,   64,  359,  385,   25,  241,  535,
  257,   45,   38,  510,   33,  189,    0,   65,  574,   89,
   38,  467,   90,   91,  187,  504,  185,   31,   46,  524,
  187,   39,  525,  526,  182,   26,  191,  191,  182,  188,
  575,  544,   27,  533,  108,  188,  190,  190,   33,  391,
   38,  527,  189,  414,  147,  148,   33,  109,  189,  437,
  516,   32,   32,   32,  517,   39,   31,  187,  187,  258,
  552,  392,  444,   39,  729,  415,  450,  730,  217,  182,
  468,  438,  188,  188,  577,  476,   33,  110,  257,   38,
    0,   88,  498,  185,  445,  189,  189,  185,  451,  317,
  111,  747,  467,   39,  748,  112,  187,  477,  706,    0,
  709,  506,  192,  190,  499,   89,  182,  545,   90,   91,
  318,  188,  182,  366,   89,   33,  570,   90,   91,  603,
  257,  606,  219,  507,  189,  733,  608,  736,  185,  546,
  638,    0,   39,  639,  367,   88,  624,  258,  571,  618,
  240,  195,  199,  518,  191,  191,  190,  519,  609,  182,
  182,  468,    0,  111,  196,  200,  455,    0,  625,   89,
  257,  619,   90,   91,  183,  185,   86,   87,    0,   88,
  190,  185,  192,  192,  190,  147,  148,   89,  549,  258,
   90,   91,  550,  644,  662,  654,  665,    0,  182,  697,
  473,  700,  698,   89,  559,  753,   90,   91,  560,  299,
   86,   87,    0,   88,  257,  645,  760,  655,  185,  185,
  181,  191,   88,  701,  467,  190,  467,  754,  467,  258,
  378,   20,  470,  147,  190,   49,  364,   89,  761,    0,
   90,   91,  181,  236,  257,  280,   89,  314,    0,   90,
   91,  156,   50,   20,  320,  147,  273,  185,  364,   18,
   19,  286,  190,   32,  191,   18,   19,  237,  190,  157,
  238,  532,    0,  258,  274,  257,  190,  257,  416,  287,
  293,   86,   87,  468,   88,  468,  551,  468,  191,  165,
  467,  236,  191,  467,  467,    0,   86,   87,  294,   88,
  192,  192,  257,  258,  257,  190,  190,  166,   89,  167,
    0,   90,   91,  470,  467,  237,  190,  520,  238,  379,
  257,  257,  326,   89,   51,    0,   90,   91,  229,  467,
  236,  590,  522,  191,  258,  591,  258,    0,  257,  257,
  327,   52,  191,  467,  190,  236,  230,  592,  231,  468,
  467,  593,  468,  468,  237,  576,    0,  238,   53,  417,
  190,  258,    0,  258,  584,   86,   87,  192,   88,  237,
  191,  335,  238,  468,   32,   54,  191,  236,  586,  258,
  258,  371,   32,  102,  191,   69,   70,  382,  468,  336,
  190,  236,   89,  597,  412,   90,   91,  258,  258,  372,
  103,  237,  468,  599,  238,  383,  236,  646,  420,  468,
  192,    0,  413,  191,  191,  237,  236,   32,  238,    0,
  236,  190,    0,  190,  191,    0,  421,  613,  429,  183,
  237,  614,  648,  238,  192,  470,  687,  470,  192,  470,
  237,  689,  561,  238,  237,  236,  430,  238,  190,  236,
  190,   32,  191,  563,  236,    0,  594,  626,    0,   32,
  562,  521,  523,  122,  628,  634,  190,  190,  191,  237,
    0,  564,  238,  237,  595,  627,  238,  636,  237,  192,
  123,  238,  629,  635,  190,  190,  124,  140,  192,   32,
  683,  685,  284,  150,  151,  637,  183,  710,  191,  712,
  183,  470,  126,  125,  470,  470,   18,   19,  684,  686,
  141,  142,  143,  144,  145,  711,  192,  713,  146,  127,
  585,  587,  192,  147,  148,  470,  207,  308,   32,  191,
  192,  191,  132,   69,  252,  598,  600,  172,  173,  208,
  470,  183,   12,   13,  174,  308,  175,   15,  176,  133,
   17,   18,   19,  324,  470,  315,  191,  316,  191,  192,
  192,  470,  134,  242,    0,  630,  177,   18,   19,  631,
  192,  244,   21,    0,  191,  191,  409,  173,  183,  135,
  243,   12,   13,  174,  183,  175,   15,  176,  245,   17,
   18,   19,  191,  191,  647,  649,  227,   89,  192,    0,
   90,   91,  246,  248,  410,  536,  253,  288,  303,  228,
   12,   21,  174,  254,  192,   15,  176,  255,   74,  247,
  249,  183,  183,    0,  289,  304,  490,  173,    0,  688,
  690,   12,   13,  174,  537,  175,   15,  176,  301,   17,
   18,   19,  305,    0,  192,  210,  210,  349,  210,  356,
  210,  302,  330,  210,  491,  210,  210,  210,  210,  306,
  183,   21,  508,  210,  350,  331,  357,  210,  210,  210,
  210,  210,  210,  333,  210,  192,  210,  192,  342,  509,
    0,  210,  210,  210,  210,  658,  334,  198,  198,  659,
  198,  343,  198,  404,  328,  198,  329,  198,  198,  198,
  198,    0,  192,  373,  192,  198,  386,   18,   19,  198,
  198,  198,  198,  198,  198,  375,  198,  376,  198,  331,
  192,  192,    0,  198,  198,    0,  141,  142,  143,  144,
  145,    0,  196,  196,  146,  196,  388,  196,  192,  192,
  196,    0,  196,  196,  196,  196,  418,  393,  419,  389,
  196,  395,  448,  495,  196,  196,  196,  196,  196,  196,
  331,  196,    0,  196,  396,  449,  496,    0,  196,  196,
  197,  197,  679,  197,    0,  197,  680,  446,  197,  447,
  197,  197,  197,  197,  147,  148,  363,  693,  197,  364,
  365,  694,  197,  197,  197,  197,  197,  197,  695,  197,
    0,  197,  696,  485,  173,    0,  197,  197,   12,   13,
  174,  714,  175,   15,  176,  715,   17,   18,   19,  397,
  528,  173,  398,  399,  764,   12,   13,  174,  765,  175,
   15,  176,  486,   17,   18,   19,  565,  173,   21,    0,
  768,   12,   13,  174,  769,  175,   15,  176,  529,   17,
   18,   19,  572,  173,    0,   21,  770,   12,   13,  174,
  771,  175,   15,  176,  566,   17,   18,   19,  422,  611,
  173,   21,    0,  772,   12,   13,  174,  773,  175,   15,
  176,  573,   17,   18,   19,  426,    0,   21,  427,  428,
    0,  141,  142,  143,  144,  145,  640,  173,  612,  146,
    0,   12,   13,  174,   21,  175,   15,  176,    0,   17,
   18,   19,  431,   41,   11,  212,  214,  457,   12,   13,
  458,  459,   14,   15,   16,  641,   17,   18,   19,  487,
    0,   21,  488,  489,    0,  141,  142,  143,  144,  145,
  368,   11,   42,  146,    0,   12,   13,    0,   21,   14,
   15,   16,    0,   17,   18,   19,  439,   11,    0,    0,
  538,   12,   13,  539,  540,   14,   15,   16,  369,   17,
   18,   19,  493,    0,   11,   21,    0,  578,   12,   13,
  579,  580,   14,   15,   16,  440,   17,   18,   19,  722,
    0,   21,  723,  724,    0,  141,  142,  143,  144,  145,
    0,   11,   20,  146,    0,   12,   13,  534,   21,   14,
   15,   16,  173,   17,   18,   19,   12,   13,  174,    0,
  175,   15,  176,    0,   17,   18,   19,    0,    0,   40,
  141,  142,  143,  144,  145,   21,    0,    0,  146,  193,
  193,  632,  193,  633,  193,    0,   21,  193,    0,  193,
  193,  193,  193,    0,    0,    0,    0,  193,    0,  656,
  253,  193,    0,    0,   12,    0,  174,  254,  193,   15,
  176,  255,   74,  691,  253,    0,    0,    0,   12,    0,
  174,  254,    0,   15,  176,  255,   74,  737,  657,    0,
  738,  739,    0,  743,  253,    0,    0,    0,   12,    0,
  174,  254,  692,   15,  176,  255,   74,  745,  253,    0,
    0,    0,   12,    0,  174,  254,    0,   15,  176,  255,
   74,    0,  744,    0,    0,    0,    0,  755,  253,    0,
    0,    0,   12,    0,  174,  254,  746,   15,  176,  255,
   74,  757,  253,    0,    0,    0,   12,    0,  174,  254,
    0,   15,  176,  255,   74,    0,  756,    0,    0,    0,
    0,  364,  364,    0,    0,    0,  364,    0,    0,  364,
  758,  364,  364,  364,  364,    0,  203,   71,    0,    0,
    0,   12,    0,  364,   72,    0,   15,   16,   73,   74,
  364,  424,   71,    0,    0,    0,   12,    0,    0,   72,
    0,   15,   16,   73,   74,  204,  547,   71,    0,    0,
    0,   12,    0,    0,   72,    0,   15,   16,   73,   74,
  425,  588,   71,    0,    0,    0,   12,    0,    0,   72,
    0,   15,   16,   73,   74,  548,  675,   71,    0,    0,
    0,   12,    0,    0,   72,    0,   15,   16,   73,   74,
  589,  677,   71,    0,    0,    0,   12,    0,    0,   72,
    0,   15,   16,   73,   74,  676,  716,   71,    0,    0,
    0,   12,    0,    0,   72,    0,   15,   16,   73,   74,
  678,  718,   71,    0,    0,    0,   12,    0,    0,   72,
    0,   15,   16,   73,   74,  717,  356,  356,    0,    0,
    0,  356,    0,    0,  356,    0,  356,  356,  356,  356,
  719,  553,  464,    0,    0,    0,   12,    0,    0,  465,
    0,   86,   87,    0,  331,  356,  720,  464,    0,    0,
    0,   12,    0,    0,  465,    0,   86,   87,    0,  331,
  554,  725,  464,    0,    0,    0,   12,    0,    0,  465,
    0,   86,   87,    0,  331,  721,  727,  464,    0,    0,
    0,   12,    0,    0,  465,    0,   86,   87,    0,  331,
  726,  762,  464,    0,    0,    0,   12,    0,    0,  465,
    0,   86,   87,    0,  331,  728,  766,  464,    0,    0,
    0,   12,    0,    0,  465,    0,   86,   87,    0,  331,
  763,  360,   11,    0,    0,    0,   12,    0,  478,   11,
    0,   15,   16,   12,   17,  767,    0,    0,   15,   16,
    0,   17,  514,   11,    0,    0,    0,   12,    0,    0,
  361,    0,   15,   16,    0,   17,    0,  479,    0,  319,
  319,    0,    0,    0,  319,    0,    0,    0,    0,  319,
  319,  515,  319,  452,  253,    0,    0,    0,   12,    0,
  174,  254,    0,   15,  176,  255,   74,    0,  319,    0,
    0,    0,  581,  253,    0,    0,    0,   12,    0,  174,
  254,  453,   15,  176,  255,   74,  620,  253,    0,    0,
    0,   12,    0,  174,  254,    0,   15,  176,  255,   74,
  582,    0,    0,    0,    0,  704,  253,    0,    0,    0,
   12,    0,  174,  254,  621,   15,  176,  255,   74,  707,
  253,    0,    0,    0,   12,    0,  174,  254,    0,   15,
  176,  255,   74,  705,    0,    0,    0,    0,  731,  253,
    0,    0,    0,   12,    0,  174,  254,  708,   15,  176,
  255,   74,  734,  253,    0,    0,    0,   12,    0,  174,
  254,    0,   15,  176,  255,   74,  732,    0,    0,    0,
    0,   82,   71,    0,    0,    0,   12,    0,    0,   72,
  735,   15,   16,   73,   74,  253,    0,    0,    0,   12,
    0,  174,  254,    0,   15,  176,  255,   74,  253,   83,
    0,    0,   12,    0,  174,  254,    0,   15,  176,  255,
   74,  353,   71,  346,    0,    0,   12,    0,    0,   72,
    0,   15,   16,   73,   74,    0,  348,    0,    0,    0,
  460,   71,    0,    0,    0,   12,    0,    0,   72,  354,
   15,   16,   73,   74,  502,   71,    0,    0,    0,   12,
    0,    0,   72,    0,   15,   16,   73,   74,  461,    0,
    0,    0,    0,  601,   71,    0,    0,    0,   12,    0,
    0,   72,  503,   15,   16,   73,   74,  604,   71,    0,
    0,    0,   12,    0,    0,   72,    0,   15,   16,   73,
   74,  602,    0,    0,    0,    0,  660,   71,    0,    0,
    0,   12,    0,    0,   72,  605,   15,   16,   73,   74,
  663,   71,    0,    0,    0,   12,    0,    0,   72,    0,
   15,   16,   73,   74,  661,   71,    0,    0,    0,   12,
    0,    0,   72,    0,   15,   16,   73,   74,  664,  463,
  464,    0,    0,    0,   12,    0,    0,  465,    0,   86,
   87,    0,  331,  201,    0,  666,  464,    0,    0,    0,
   12,    0,    0,  465,    0,   86,   87,  466,  331,  669,
  464,    0,    0,    0,   12,    0,    0,  465,    0,   86,
   87,    0,  331,  667,    0,  672,  464,    0,    0,    0,
   12,    0,    0,  465,    0,   86,   87,  670,  331,  740,
  464,    0,    0,    0,   12,    0,    0,  465,    0,   86,
   87,    0,  331,  673,    0,  749,  464,    0,    0,    0,
   12,    0,    0,  465,    0,   86,   87,  741,  331,  277,
   11,    0,    0,    0,   12,    0,  401,   11,    0,   15,
   16,   12,   17,  750,    0,    0,   15,   16,    0,   17,
  433,   11,    0,    0,    0,   12,    0,  278,    0,    0,
   15,   16,  253,   17,  402,    0,   12,    0,  174,  254,
    0,   15,  176,  255,   74,  253,    0,    0,  434,   12,
    0,  174,  254,    0,   15,  176,  255,   74,   71,  256,
    0,    0,   12,    0,    0,   72,    0,   15,   16,   73,
   74,    0,  264,  141,  142,  143,  144,  145,    0,    0,
    0,  146,    0,    0,    0,   75,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          8,
    9,   10,   35,   36,   56,  210,  410,   58,  103,    8,
    9,   10,  256,   52,  430,  191,  192,  284,  105,   50,
  121,   83,    8,    9,   10,  430,  376,  256,    6,    7,
  256,  256,  256,  264,  278,  121,  256,    8,    9,   10,
  266,  267,  269,  269,    8,    9,   10,  667,  121,  256,
  670,  402,  256,  673,  256,  284,  277,  277,    8,    9,
   10,  276,  266,  267,  289,  269,  118,  293,  256,  293,
  296,  297,  296,  297,  256,    8,    9,   10,  266,  267,
  276,  269,  256,  434,  123,  292,  293,  491,  127,  293,
  292,  293,  296,  297,  133,  256,  278,  447,  149,  273,
  152,  153,  256,  277,  256,  293,  511,  256,  296,  297,
  292,  293,  121,  256,  288,  167,  321,  278,  256,  150,
  151,  741,  274,  266,  267,  529,  269,  256,  256,  160,
  750,  226,  256,  256,  288,  256,  231,  256,  488,  277,
  269,  273,  266,  267,  293,  269,  256,  296,  297,  277,
  293,  259,  256,  296,  297,  274,  259,  278,  256,  364,
  288,  284,  566,  256,  293,  269,  256,  296,  297,  293,
  269,  121,  296,  297,  256,  525,  266,  267,  288,  269,
  296,  297,  191,  192,  266,  267,  256,  269,  283,  293,
  288,  296,  296,  398,  245,  288,  266,  267,  256,  269,
  278,  210,  254,  293,  243,  259,  296,  297,  256,  256,
  278,  293,  256,  300,  296,  297,  247,  633,  568,  635,
  256,  637,  453,  293,  210,  269,  296,  297,  633,  256,
  635,  436,  637,  269,  256,  293,  258,  256,  296,  297,
  288,  191,  192,  419,  256,  292,  293,  334,  278,  293,
  256,  256,  296,  297,  266,  267,  256,  269,  121,  278,
  210,  256,  256,  256,  269,  292,  293,  306,  256,  269,
  475,  278,  367,  292,  293,  376,  256,  210,  260,  274,
  289,  293,  288,  316,  296,  297,  266,  267,  293,  269,
  376,  296,  354,  293,  699,  288,  296,  702,  703,  256,
  309,  310,  389,  376,  292,  293,  260,  723,  339,  396,
  269,  256,  321,  293,  256,  260,  296,  297,  723,  256,
  329,  278,  738,  374,  256,  329,  256,  269,  191,  192,
  329,  256,  256,  738,  293,  321,  256,  296,  297,  256,
  277,  350,  443,  329,  274,  277,  447,  752,  357,  269,
  274,  582,  231,  278,  759,  364,  273,  443,  329,  309,
  310,  447,  449,  539,  256,  329,  121,  376,  292,  293,
  443,  321,  423,  293,  447,  255,  296,  297,  364,  329,
  256,  432,  256,  256,  256,  119,  278,  488,  321,  398,
  621,  369,  266,  267,  427,  269,  329,  406,  274,  461,
  292,  293,  488,  579,  256,  278,  278,  406,  167,  496,
  419,  256,  398,  465,  364,  488,   -1,  269,  256,  293,
  406,  430,  296,  297,  525,  458,  376,  436,  273,  256,
  531,  364,  259,  260,  443,  406,  191,  192,  447,  525,
  278,  503,  406,  494,  256,  531,  309,  310,  398,  256,
  436,  278,  525,  256,  292,  293,  406,  269,  531,  256,
  256,    8,    9,   10,  260,  398,  475,  568,  569,  419,
  509,  278,  256,  406,  705,  278,  256,  708,  256,  488,
  430,  278,  568,  569,  535,  256,  436,  256,  497,  475,
   -1,  269,  256,  443,  278,  568,  569,  447,  278,  256,
  269,  732,  511,  436,  735,  274,  607,  278,  684,   -1,
  686,  256,  121,  376,  278,  293,  525,  256,  296,  297,
  277,  607,  531,  256,  293,  475,  256,  296,  297,  562,
  539,  564,  256,  278,  607,  711,  256,  713,  488,  278,
  602,   -1,  475,  605,  277,  269,  256,  497,  278,  256,
  256,  256,  256,  256,  309,  310,  419,  260,  278,  568,
  569,  511,   -1,  269,  269,  269,  256,   -1,  278,  293,
  579,  278,  296,  297,  121,  525,  266,  267,   -1,  269,
  443,  531,  191,  192,  447,  292,  293,  293,  256,  539,
  296,  297,  260,  256,  627,  256,  629,   -1,  607,  661,
  256,  256,  664,  293,  256,  256,  296,  297,  260,  256,
  266,  267,   -1,  269,  623,  278,  256,  278,  568,  569,
  256,  376,  269,  278,  633,  488,  635,  278,  637,  579,
  256,  256,  430,  256,  497,  256,  256,  293,  278,   -1,
  296,  297,  278,  269,  653,  256,  293,  269,   -1,  296,
  297,  256,  273,  278,  276,  278,  256,  607,  278,  270,
  271,  256,  525,  210,  419,  270,  271,  293,  531,  274,
  296,  256,   -1,  623,  274,  684,  539,  686,  256,  274,
  256,  266,  267,  633,  269,  635,  256,  637,  443,  256,
  699,  269,  447,  702,  703,   -1,  266,  267,  274,  269,
  309,  310,  711,  653,  713,  568,  569,  274,  293,  276,
   -1,  296,  297,  511,  723,  293,  579,  256,  296,  341,
  729,  730,  256,  293,  256,   -1,  296,  297,  256,  738,
  269,  256,  256,  488,  684,  260,  686,   -1,  747,  748,
  274,  273,  497,  752,  607,  269,  274,  256,  276,  699,
  759,  260,  702,  703,  293,  256,   -1,  296,  256,  381,
  623,  711,   -1,  713,  256,  266,  267,  376,  269,  293,
  525,  256,  296,  723,  321,  273,  531,  269,  256,  729,
  730,  256,  329,  256,  539,  266,  267,  256,  738,  274,
  653,  269,  293,  256,  256,  296,  297,  747,  748,  274,
  273,  293,  752,  256,  296,  274,  269,  256,  256,  759,
  419,   -1,  274,  568,  569,  293,  269,  364,  296,   -1,
  269,  684,   -1,  686,  579,   -1,  274,  256,  256,  376,
  293,  260,  256,  296,  443,  633,  256,  635,  447,  637,
  293,  256,  256,  296,  293,  269,  274,  296,  711,  269,
  713,  398,  607,  256,  269,   -1,  256,  256,   -1,  406,
  274,  483,  484,  256,  256,  256,  729,  730,  623,  293,
   -1,  274,  296,  293,  274,  274,  296,  256,  293,  488,
  273,  296,  274,  274,  747,  748,  256,  256,  497,  436,
  256,  256,  256,  294,  295,  274,  443,  256,  653,  256,
  447,  699,  256,  273,  702,  703,  270,  271,  274,  274,
  279,  280,  281,  282,  283,  274,  525,  274,  287,  273,
  542,  543,  531,  292,  293,  723,  256,  256,  475,  684,
  539,  686,  256,  266,  267,  557,  558,  256,  257,  269,
  738,  488,  261,  262,  263,  274,  265,  266,  267,  273,
  269,  270,  271,  256,  752,  256,  711,  258,  713,  568,
  569,  759,  256,  256,   -1,  256,  285,  270,  271,  260,
  579,  256,  291,   -1,  729,  730,  256,  257,  525,  273,
  273,  261,  262,  263,  531,  265,  266,  267,  273,  269,
  270,  271,  747,  748,  616,  617,  256,  293,  607,   -1,
  296,  297,  256,  256,  284,  256,  257,  256,  256,  269,
  261,  291,  263,  264,  623,  266,  267,  268,  269,  273,
  273,  568,  569,   -1,  273,  273,  256,  257,   -1,  651,
  652,  261,  262,  263,  285,  265,  266,  267,  256,  269,
  270,  271,  256,   -1,  653,  256,  257,  256,  259,  256,
  261,  269,  256,  264,  284,  266,  267,  268,  269,  273,
  607,  291,  256,  274,  273,  269,  273,  278,  279,  280,
  281,  282,  283,  256,  285,  684,  287,  686,  256,  273,
   -1,  292,  293,  294,  295,  256,  269,  256,  257,  260,
  259,  269,  261,  256,  256,  264,  258,  266,  267,  268,
  269,   -1,  711,  256,  713,  274,  256,  270,  271,  278,
  279,  280,  281,  282,  283,  256,  285,  258,  287,  269,
  729,  730,   -1,  292,  293,   -1,  279,  280,  281,  282,
  283,   -1,  256,  257,  287,  259,  256,  261,  747,  748,
  264,   -1,  266,  267,  268,  269,  256,  256,  258,  269,
  274,  256,  256,  256,  278,  279,  280,  281,  282,  283,
  269,  285,   -1,  287,  269,  269,  269,   -1,  292,  293,
  256,  257,  256,  259,   -1,  261,  260,  256,  264,  258,
  266,  267,  268,  269,  292,  293,  256,  256,  274,  259,
  260,  260,  278,  279,  280,  281,  282,  283,  256,  285,
   -1,  287,  260,  256,  257,   -1,  292,  293,  261,  262,
  263,  256,  265,  266,  267,  260,  269,  270,  271,  256,
  256,  257,  259,  260,  256,  261,  262,  263,  260,  265,
  266,  267,  285,  269,  270,  271,  256,  257,  291,   -1,
  256,  261,  262,  263,  260,  265,  266,  267,  284,  269,
  270,  271,  256,  257,   -1,  291,  256,  261,  262,  263,
  260,  265,  266,  267,  284,  269,  270,  271,  256,  256,
  257,  291,   -1,  256,  261,  262,  263,  260,  265,  266,
  267,  285,  269,  270,  271,  256,   -1,  291,  259,  260,
   -1,  279,  280,  281,  282,  283,  256,  257,  285,  287,
   -1,  261,  262,  263,  291,  265,  266,  267,   -1,  269,
  270,  271,  256,  256,  257,  147,  148,  256,  261,  262,
  259,  260,  265,  266,  267,  285,  269,  270,  271,  256,
   -1,  291,  259,  260,   -1,  279,  280,  281,  282,  283,
  256,  257,  285,  287,   -1,  261,  262,   -1,  291,  265,
  266,  267,   -1,  269,  270,  271,  256,  257,   -1,   -1,
  256,  261,  262,  259,  260,  265,  266,  267,  284,  269,
  270,  271,  256,   -1,  257,  291,   -1,  256,  261,  262,
  259,  260,  265,  266,  267,  285,  269,  270,  271,  256,
   -1,  291,  259,  260,   -1,  279,  280,  281,  282,  283,
   -1,  257,  285,  287,   -1,  261,  262,  256,  291,  265,
  266,  267,  257,  269,  270,  271,  261,  262,  263,   -1,
  265,  266,  267,   -1,  269,  270,  271,   -1,   -1,  285,
  279,  280,  281,  282,  283,  291,   -1,   -1,  287,  256,
  257,  256,  259,  258,  261,   -1,  291,  264,   -1,  266,
  267,  268,  269,   -1,   -1,   -1,   -1,  274,   -1,  256,
  257,  278,   -1,   -1,  261,   -1,  263,  264,  285,  266,
  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
  263,  264,   -1,  266,  267,  268,  269,  256,  285,   -1,
  259,  260,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,
  263,  264,  285,  266,  267,  268,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,  263,  264,   -1,  266,  267,  268,
  269,   -1,  285,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,  263,  264,  285,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,
   -1,  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  285,  266,  267,  268,  269,   -1,  256,  257,   -1,   -1,
   -1,  261,   -1,  278,  264,   -1,  266,  267,  268,  269,
  285,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
   -1,  266,  267,  268,  269,  285,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,   -1,  266,  267,  268,  269,
  285,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
   -1,  266,  267,  268,  269,  285,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,   -1,  266,  267,  268,  269,
  285,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
   -1,  266,  267,  268,  269,  285,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,   -1,  266,  267,  268,  269,
  285,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
   -1,  266,  267,  268,  269,  285,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,   -1,  266,  267,  268,  269,
  285,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
   -1,  266,  267,   -1,  269,  285,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,   -1,  266,  267,   -1,  269,
  285,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
   -1,  266,  267,   -1,  269,  285,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,   -1,  266,  267,   -1,  269,
  285,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
   -1,  266,  267,   -1,  269,  285,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,   -1,  266,  267,   -1,  269,
  285,  256,  257,   -1,   -1,   -1,  261,   -1,  256,  257,
   -1,  266,  267,  261,  269,  285,   -1,   -1,  266,  267,
   -1,  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  285,   -1,  266,  267,   -1,  269,   -1,  285,   -1,  256,
  257,   -1,   -1,   -1,  261,   -1,   -1,   -1,   -1,  266,
  267,  285,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
  263,  264,   -1,  266,  267,  268,  269,   -1,  285,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  263,
  264,  284,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,  263,  264,   -1,  266,  267,  268,  269,
  284,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,  263,  264,  284,  266,  267,  268,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,  263,  264,   -1,  266,
  267,  268,  269,  284,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,   -1,  263,  264,  284,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,  263,
  264,   -1,  266,  267,  268,  269,  284,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  284,  266,  267,  268,  269,  257,   -1,   -1,   -1,  261,
   -1,  263,  264,   -1,  266,  267,  268,  269,  257,  284,
   -1,   -1,  261,   -1,  263,  264,   -1,  266,  267,  268,
  269,  256,  257,  285,   -1,   -1,  261,   -1,   -1,  264,
   -1,  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  284,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,   -1,  264,   -1,  266,  267,  268,  269,  284,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,
   -1,  264,  284,  266,  267,  268,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,  264,   -1,  266,  267,  268,
  269,  284,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  284,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,
  266,  267,  268,  269,  284,  257,   -1,   -1,   -1,  261,
   -1,   -1,  264,   -1,  266,  267,  268,  269,  284,  256,
  257,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,  266,
  267,   -1,  269,  285,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,   -1,  266,  267,  284,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,  266,
  267,   -1,  269,  284,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,   -1,  266,  267,  284,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,  266,
  267,   -1,  269,  284,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,   -1,  266,  267,  284,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,  256,  257,   -1,  266,
  267,  261,  269,  284,   -1,   -1,  266,  267,   -1,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,  284,   -1,   -1,
  266,  267,  257,  269,  284,   -1,  261,   -1,  263,  264,
   -1,  266,  267,  268,  269,  257,   -1,   -1,  284,  261,
   -1,  263,  264,   -1,  266,  267,  268,  269,  257,  284,
   -1,   -1,  261,   -1,   -1,  264,   -1,  266,  267,  268,
  269,   -1,  284,  279,  280,  281,  282,  283,   -1,   -1,
   -1,  287,   -1,   -1,   -1,  284,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=297;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"IF","THEN","ELSE","END_IF","OUT","FUN","RETURN","BREAK","WHEN",
"WHILE","FOR","CONTINUE","ID","I32","F32","PUNTO","PARENT_A","PARENT_C",
"COMILLA","COMA","DOSPUNTOS","PUNTOCOMA","IGUAL","MAYOR","MENOR","MENORIGUAL",
"MAYORIGUAL","LLAVE_A","LLAVE_C","EXCL","DIST","ASIG","CADENA","COMENT","CONST",
"SUMA","RESTA","MULT","DIV","ENTERO","FLOAT",
};
final static String yyrule[] = {
"$accept : program",
"program : nombre_program LLAVE_A bloque_sentencias LLAVE_C",
"program : nombre_program LLAVE_A bloque_sentencias error",
"program : nombre_program error bloque_sentencias LLAVE_C",
"program : error LLAVE_A bloque_sentencias LLAVE_C",
"nombre_program : ID",
"bloque_sentencias :",
"bloque_sentencias : bloque_sentencias sentencia PUNTOCOMA",
"bloque_sentencias : bloque_sentencias sentencia error",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_decl_datos",
"sentencia_declarativa : sentencia_decl_fun",
"sentencia_declarativa : lista_const",
"sentencia_declarativa : sentencia_when",
"tipo : I32",
"tipo : F32",
"constante_for : ENTERO",
"constante_for : RESTA ENTERO",
"constante_for : ID",
"sentencia_decl_datos : tipo list_var",
"sentencia_decl_datos : tipo error",
"list_var : list_var COMA ID",
"list_var : ID",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro error",
"encabezado_fun : FUN ID PARENT_A parametro error",
"encabezado_fun : FUN ID PARENT_A error",
"encabezado_fun : FUN ID PARENT_A parametro COMA error",
"encabezado_fun : FUN ID error",
"encabezado_fun : FUN error",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun error",
"sentencia_decl_fun : encabezado_fun error",
"cuerpo_fun :",
"cuerpo_fun : cuerpo_fun sentencias_fun PUNTOCOMA",
"cuerpo_fun : cuerpo_fun sentencias_fun error",
"sentencias_fun : sentencia_decl_datos",
"sentencias_fun : sentencia_decl_fun",
"sentencias_fun : lista_const",
"sentencias_fun : asignacion",
"sentencias_fun : llamado_func",
"sentencias_fun : sentencia_if_fun",
"sentencias_fun : sentencia_out",
"sentencias_fun : sentencia_when_fun",
"sentencias_fun : sentencia_for_fun",
"sentencias_fun : sentencia_while_fun",
"sentencias_fun : retorno",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_fun : IF PARENT_A condicion error",
"sentencia_if_fun : IF PARENT_A error",
"sentencia_if_fun : IF error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE sentencias_fun error",
"sentencia_when_fun : WHEN PARENT_A factor comparacion factor PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_when_fun : WHEN PARENT_A factor comparacion factor PARENT_C THEN sentencias_fun",
"sentencia_when_fun : WHEN PARENT_A factor comparacion factor PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_when_fun : WHEN PARENT_A factor comparacion factor PARENT_C THEN error",
"sentencia_when_fun : WHEN PARENT_A factor comparacion factor PARENT_C error",
"sentencia_when_fun : WHEN PARENT_A factor comparacion factor error",
"sentencia_when_fun : WHEN PARENT_A error",
"sentencia_when_fun : WHEN error",
"etiqueta : ID DOSPUNTOS",
"sentencia_while_fun : encabezado_while_etiqueta LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : encabezado_while_etiqueta sentencias_fun_break",
"sentencia_while_fun : encabezado_while LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : encabezado_while sentencias_fun_break",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C sentencias_fun_break",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C sentencias_fun_break",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID error",
"sentencia_for_fun : etiqueta FOR PARENT_A error",
"sentencia_for_fun : etiqueta FOR error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for error",
"sentencia_for_fun : FOR PARENT_A ID ASIG error",
"sentencia_for_fun : FOR PARENT_A ID error",
"sentencia_for_fun : FOR PARENT_A error",
"sentencia_for_fun : FOR error",
"cuerpo_fun_break :",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break PUNTOCOMA",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break error",
"sentencias_fun_break : asignacion",
"sentencias_fun_break : sentencia_if_break_fun",
"sentencias_fun_break : sentencia_out",
"sentencias_fun_break : sentencia_while_fun",
"sentencias_fun_break : sentencia_for_fun",
"sentencias_fun_break : CONTINUE tag",
"sentencias_fun_break : BREAK",
"sentencias_fun_break : BREAK cte",
"sentencias_fun_break : retorno",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break_fun : IF PARENT_A condicion error",
"sentencia_if_break_fun : IF PARENT_A error",
"sentencia_if_break_fun : IF error",
"retorno : RETURN PARENT_A expresion PARENT_C",
"retorno : RETURN PARENT_A expresion error",
"retorno : RETURN PARENT_A error",
"retorno : RETURN error",
"parametro : tipo ID",
"parametro : tipo error",
"lista_const : CONST lista_asignacion",
"lista_asignacion : lista_asignacion COMA asignacion_const",
"lista_asignacion : asignacion_const",
"asignacion_const : ID ASIG cte",
"asignacion_const : ID ASIG error",
"asignacion_const : ID error",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : sentencia_if",
"sentencia_ejecutable : sentencia_out",
"sentencia_ejecutable : sentencia_for",
"sentencia_ejecutable : sentencia_while",
"sentencia_ejecutable : llamado_func",
"asignacion : ID ASIG expresion",
"asignacion : ID error",
"asignacion : ID ASIG error",
"expresion : expresion SUMA termino",
"expresion : expresion RESTA termino",
"expresion : termino",
"expresion : sentencia_for_asig ELSE cte",
"expresion : sentencia_while_asig ELSE cte",
"expresion : expresion SUMA error",
"expresion : expresion RESTA error",
"expresion : sentencia_for_asig ELSE error",
"expresion : sentencia_while_asig ELSE error",
"termino : termino MULT factor",
"termino : termino DIV factor",
"termino : factor",
"termino : termino MULT error",
"termino : termino DIV error",
"factor : ID",
"factor : cte",
"factor : llamado_func",
"cte : ENTERO",
"cte : FLOAT",
"cte : RESTA ENTERO",
"cte : RESTA FLOAT",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A bloque_sent_eje_asig LLAVE_C",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A bloque_sent_eje_asig LLAVE_C",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C sent_eje_asig",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C sent_eje_asig",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A bloque_sent_eje_asig error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A bloque_sent_eje_asig error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for error",
"sentencia_for_asig : FOR PARENT_A ID ASIG error",
"sentencia_for_asig : FOR PARENT_A ID error",
"sentencia_for_asig : FOR PARENT_A error",
"sentencia_for_asig : FOR error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_sent_eje_asig LLAVE_C",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sent_eje_asig",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_sent_eje_asig error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_asig : WHILE PARENT_A condicion error",
"sentencia_while_asig : WHILE PARENT_A error",
"sentencia_while_asig : WHILE error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C error",
"sentencia_if_asig : IF PARENT_A condicion error",
"sentencia_if_asig : IF PARENT_A error",
"sentencia_if_asig : IF error",
"bloque_sent_eje_asig :",
"bloque_sent_eje_asig : bloque_sent_eje_asig sent_eje_asig PUNTOCOMA",
"sent_eje_asig : asignacion",
"sent_eje_asig : sentencia_if_asig",
"sent_eje_asig : sentencia_out",
"sent_eje_asig : sentencia_while_asig",
"sent_eje_asig : sentencia_for_asig",
"sent_eje_asig : BREAK cte",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if : IF PARENT_A condicion PARENT_C error",
"sentencia_if : IF PARENT_A condicion error",
"sentencia_if : IF PARENT_A error",
"sentencia_if : IF error",
"condicion : expresion comparacion expresion",
"condicion : expresion comparacion error",
"condicion : expresion error",
"comparacion : IGUAL",
"comparacion : MAYOR",
"comparacion : MENOR",
"comparacion : MENORIGUAL",
"comparacion : MAYORIGUAL",
"comparacion : DIST",
"bloque_ejecutable :",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable PUNTOCOMA",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"sentencia_out : OUT PARENT_A CADENA PARENT_C",
"sentencia_out : OUT PARENT_A CADENA error",
"sentencia_out : OUT PARENT_A error",
"sentencia_out : OUT error",
"sentencia_when : WHEN PARENT_A factor comparacion factor PARENT_C THEN LLAVE_A bloque_sentencias LLAVE_C",
"sentencia_when : WHEN PARENT_A factor comparacion factor PARENT_C THEN sentencia",
"sentencia_when : WHEN PARENT_A factor comparacion factor PARENT_C THEN LLAVE_A bloque_sentencias error",
"sentencia_when : WHEN PARENT_A factor comparacion factor PARENT_C THEN error",
"sentencia_when : WHEN PARENT_A factor comparacion factor PARENT_C error",
"sentencia_when : WHEN PARENT_A factor comparacion factor error",
"sentencia_when : WHEN PARENT_A error",
"sentencia_when : WHEN error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A error",
"encabezado_while_etiqueta : etiqueta WHILE error",
"encabezado_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C",
"encabezado_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"encabezado_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"encabezado_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"encabezado_while : WHILE PARENT_A condicion PARENT_C error",
"encabezado_while : WHILE PARENT_A condicion error",
"encabezado_while : WHILE PARENT_A error",
"encabezado_while : WHILE error",
"sentencia_while : encabezado_while_etiqueta LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : encabezado_while_etiqueta ejecutables_break_continue",
"sentencia_while : encabezado_while LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : encabezado_while ejecutables_break_continue",
"sentencia_while : encabezado_while LLAVE_A bloque_break_continue error",
"sentencia_while : encabezado_while error",
"bloque_break_continue :",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue PUNTOCOMA",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue",
"ejecutables_break_continue : asignacion",
"ejecutables_break_continue : sentencia_if_break",
"ejecutables_break_continue : sentencia_out",
"ejecutables_break_continue : sentencia_while",
"ejecutables_break_continue : sentencia_for",
"ejecutables_break_continue : CONTINUE tag",
"ejecutables_break_continue : BREAK",
"tag :",
"tag : DOSPUNTOS ID",
"tag : DOSPUNTOS error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion error",
"sentencia_if_break : IF PARENT_A error",
"sentencia_if_break : IF error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C ejecutables_break_continue",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C ejecutables_break_continue",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG error",
"sentencia_for : etiqueta FOR PARENT_A ID error",
"sentencia_for : etiqueta FOR PARENT_A error",
"sentencia_for : etiqueta FOR error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for error",
"sentencia_for : FOR PARENT_A ID ASIG error",
"sentencia_for : FOR PARENT_A ID error",
"sentencia_for : FOR PARENT_A error",
"sentencia_for : FOR error",
"param_real : cte",
"param_real : ID",
"llamado_func : ID PARENT_A param_real COMA param_real PARENT_C",
"llamado_func : ID PARENT_A param_real PARENT_C",
"llamado_func : ID PARENT_A PARENT_C",
"llamado_func : ID PARENT_A param_real COMA param_real error",
"llamado_func : ID PARENT_A param_real error",
"llamado_func : ID PARENT_A error",
"llamado_func : ID PARENT_A param_real COMA error",
};

//#line 2556 "gramatica.y"
private NodoControl raiz;
private List<ArbolSintactico> funciones = new ArrayList<ArbolSintactico>();
private static HashMap<Integer,ArrayList<String>> erroresSintacticos = new HashMap<Integer,ArrayList<String>>();
public String ambitoActual = "Global";
private List<String> tipoActual = new ArrayList<String>();
private List<String> etiquetasAct = new ArrayList<String>();
private boolean hayReturn = false;
private List<LlamadoFun> listLlamadoFun = new ArrayList<LlamadoFun>();
private Stack<List<ArbolSintactico>> stackContinue = new Stack<List<ArbolSintactico>>();

void yyerror(String mensaje){
        if (erroresSintacticos.get(AnalizadorLexico.getLineaAct())== null){
                ArrayList<String> mnsj = new ArrayList<String>();
                mnsj.add(mensaje); 
                erroresSintacticos.put(AnalizadorLexico.getLineaAct(), mnsj);
        }
        else{
                erroresSintacticos.get(AnalizadorLexico.getLineaAct()).add(mensaje);
        }
}
void yyerror(String mensaje,int linea){
        if (erroresSintacticos.get(linea)== null){
                ArrayList<String> mnsj = new ArrayList<String>();
                mnsj.add(mensaje); 
                erroresSintacticos.put(linea, mnsj);
        }
        else{
                erroresSintacticos.get(linea).add(mensaje);
        }
}
static HashMap<Integer,ArrayList<String>> getErroresSintacticos(){
        return erroresSintacticos;
}
void chequearRangoI32(String sval){
  String s = "2147483647";
  long l = Long.valueOf(s);
  if(Long.valueOf(sval) > l){
    yyerror("La constante esta fuera de rango");
  }
}

void chequearRangoI32Neg(String sval){
       String s = "2147483648";
        long l = Long.valueOf(s);
        if(Long.valueOf(sval) > l){
                yyerror("La constante esta fuera de rango");
  } 
}

int yylex() throws IOException{
        Token t = AnalizadorLexico.getToken();
        this.yylval = new ParserVal(t.getLexema());
        //if(t.getId() != -1){
        //  System.out.println("Id: " + t.getId()+" Lexema: " + t.getLexema());
        //}else
        //  System.out.println("TERMINO LA EJECUCION");
        return t.getId();
}
public NodoControl getRaiz(){
	return raiz;
}
public List<ArbolSintactico> getFuncion(){
        return funciones;
}

void actualizarAmbito(String lex, String amb){
        TablaSimbolos.addAtributo(lex,"Ambito",amb);
}
public String getTipoActual(){
        if(!this.tipoActual.isEmpty()){
                return (this.tipoActual.get(tipoActual.size()-1));
        }
        return null;
}
public void cambiarTipoActual(String f){
        tipoActual.add(f);
}
public void removeTipoActual(){
        if(!this.tipoActual.isEmpty()){
                this.tipoActual.remove(tipoActual.size()-1);
        }
}
public String buscarAmbito(String ambitoActual,String lexema){
        String ambito = ambitoActual;
        while(!TablaSimbolos.existeSimbolo(lexema+"@"+ambito)){
                if(ambito.equals("Global")){
                        //yyerror("La variable " + lexema + " no se encuentra declarada en el ambito " + ambitoActual);
                        ambito = "";
                        break;
                }else{
                        char [] a = ambito.toCharArray();
                        for (int i = a.length;i>=0;i--){
                                if(a[i-1] == '@'){
                                        ambito = ambito.substring(0,i-1);
                                        break;
                                }
                        }
                }
        }

        return ambito;
}
public String calcularFloat(String f){
        int i =0;
	char caracter=' ';
	String digito=""; //parte numerica
	String exponente=""; //parte exponencial	
	while (caracter != 'F') {
                if(i<f.length()){
                      caracter = f.charAt(i);
		        digito+= caracter;
		        i++; 
                }else{
                        return f;
                }
	}
        Double d = Double.parseDouble(digito);
	for (int j=i ; j < (f.length()); j++) {
		caracter = f.charAt(j);
		exponente += caracter;
	}
	Double e = Double.parseDouble(exponente);
	Double numero = Math.pow(d, e);
        return numero.toString();	

}
//#line 1566 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse() throws IOException
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 22 "gramatica.y"
{
                                                                raiz = new NodoControl("PROGRAMA",(ArbolSintactico)val_peek(1));  
                                                                TablaSimbolos.removeAtributo(val_peek(3).sval);
                                                                for(LlamadoFun lf : listLlamadoFun){
                                                                        yyerror("La funcion " + lf.getNombre() + " no esta declarada" ,lf.getLinea());
                                                                }
                                                        }
break;
case 2:
//#line 30 "gramatica.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba }");}
break;
case 3:
//#line 33 "gramatica.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba {");}
break;
case 4:
//#line 36 "gramatica.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba el nombre del programa");}
break;
case 6:
//#line 42 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 7:
//#line 43 "gramatica.y"
{
                                                        yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));
                                                        }
break;
case 8:
//#line 46 "gramatica.y"
{
                                yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba ;");
                        }
break;
case 9:
//#line 51 "gramatica.y"
{yyval=val_peek(0);}
break;
case 10:
//#line 52 "gramatica.y"
{yyval = val_peek(0);}
break;
case 11:
//#line 54 "gramatica.y"
{yyval= new NodoHoja("Sentencia Declarativa");}
break;
case 12:
//#line 55 "gramatica.y"
{
                                yyval= new NodoHoja("Sentencia Declarativa");
                                }
break;
case 13:
//#line 58 "gramatica.y"
{yyval= new NodoHoja("Sentencia Declarativa");}
break;
case 14:
//#line 59 "gramatica.y"
{yyval=val_peek(0);}
break;
case 15:
//#line 61 "gramatica.y"
{
            yyval = new NodoHoja("Entero");
            ((NodoHoja)yyval).setTipo("Entero");
           }
break;
case 16:
//#line 65 "gramatica.y"
{
            yyval = new NodoHoja("Float");
            ((NodoHoja)yyval).setTipo("Float");
           }
break;
case 19:
//#line 72 "gramatica.y"
{
                        String ambito=buscarAmbito(ambitoActual, val_peek(0).sval);
                        if (!TablaSimbolos.existeSimbolo(val_peek(0).sval+ "@" + ambito)){
                                yyerror("La constante '" + val_peek(0).sval + "' no fue declarada");
                        }
                        else{ 
                                if(!((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso")).equals("Constante")){
                                        yyerror(val_peek(0).sval+" debe ser una constante");
                                }
                                if(!((String)TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Tipo")).equals("Entero")){
                                        yyerror(val_peek(0).sval+" debe ser de tipo entero");
                                }   
                        }
                }
break;
case 20:
//#line 87 "gramatica.y"
{  System.out.println("Declaracion de datos");
                                        for (String s : ((NodoTipos)val_peek(0)).getList()){
                                                String ambito = ambitoActual;
                                                while(TablaSimbolos.existeSimbolo(s+"@"+ambito)){
                                                        if(ambito.equals("Global")){
                                                                yyerror("La variable " + s + " ya se encuentra declarada en el ambito " + ambitoActual);
                                                                ambito = "";
                                                                break;
                                                        }else{
                                                                char [] a = ambito.toCharArray();
                                                                for (int i = a.length;i>=0;i--){
                                                                        if(a[i-1] == ':'){
                                                                        ambito = ambito.substring(0,i-1);
                                                                        break;
                                                                }
                                                        }
                                                }
                                        }  
                                        if(ambito.equals(ambitoActual)){
                                                TablaSimbolos.addNuevoSimbolo(s+"@"+ambito);
                                                TablaSimbolos.addAtributo(s+"@"+ambito,"Id",TablaSimbolos.getAtributo(s,"Id"));
                                                TablaSimbolos.addAtributo(s+"@"+ambito,"Tipo",((ArbolSintactico) val_peek(1)).getTipo());
                                                TablaSimbolos.addAtributo(s+"@"+ambito,"Linea",AnalizadorLexico.getLineaAct());
                                                TablaSimbolos.addAtributo(s+"@"+ambito,"Uso","Variable");
                                                TablaSimbolos.removeAtributo(s);
                                        }
                                        

                                        }
                                        yyval = val_peek(0);
                                }
break;
case 21:
//#line 118 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("se esperaba lista de identificadores entre comas");}
break;
case 22:
//#line 121 "gramatica.y"
{
                            yyval=val_peek(2);
                            ((NodoTipos)yyval).add((String)val_peek(0).sval);
                            }
break;
case 23:
//#line 125 "gramatica.y"
{
               yyval=new NodoTipos((String)val_peek(0).sval);
              }
break;
case 24:
//#line 129 "gramatica.y"
{       

                                if(!TablaSimbolos.existeSimbolo(val_peek(7).sval+ "@" + ambitoActual)){
                                        yyval = new NodoHoja(val_peek(7).sval);
                                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(0)).getTipo());
                                        TablaSimbolos.addNuevoSimbolo(val_peek(7).sval+ "@" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(7).sval+ "@" + ambitoActual,"Uso","Funcion");
                                        TablaSimbolos.addAtributo(val_peek(7).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(7).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(7).sval);
                                        TablaSimbolos.addAtributo(val_peek(7).sval+"@"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                        TablaSimbolos.addAtributo(val_peek(7).sval +"@"+ambitoActual,"Parametro1",((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual +"@"+ val_peek(7).sval);
                                        TablaSimbolos.addAtributo(val_peek(7).sval +"@"+ambitoActual,"Parametro2",((ArbolSintactico)val_peek(3)).getLex()+ "@"+ ambitoActual +"@"+ val_peek(7).sval);
                                        ambitoActual += "@"+val_peek(7).sval;
                                        cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                        /*Agrego los parametros en la tabla de simbolos*/
                                        TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual);
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(5)).getTipo());
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual,"Uso","Variable");
                                        TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual);
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Uso","Variable");

                                }else{
                                        yyerror("La funcion " + val_peek(7).sval + " ya existe en el ambito " + ambitoActual);
                                        yyval= new NodoHoja("Ya existe un identificador con el nombre de la funcion");
                                        ambitoActual += "@"+val_peek(7).sval;
                                }
                        
                        }
break;
case 25:
//#line 158 "gramatica.y"
{
                        if(!TablaSimbolos.existeSimbolo(val_peek(5).sval+ "@" + ambitoActual)){
                                yyval = new NodoHoja(val_peek(5).sval);
                                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addNuevoSimbolo(val_peek(5).sval+ "@" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(5).sval+ "@" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(5).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(5).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(5).sval);
                                TablaSimbolos.addAtributo(val_peek(5).sval+"@"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addAtributo(val_peek(5).sval +"@"+ambitoActual,"Parametro1", ((ArbolSintactico)val_peek(3)).getLex()+ "@"+ ambitoActual +"@"+ val_peek(5).sval);
                                ambitoActual += "@"+val_peek(5).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                /*Agrego el parametro en la tabla de simbolos*/
                                TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual);
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Uso","Variable");

                        }else{
                                yyerror("La funcion " + val_peek(5).sval + " ya existe en el ambito " + ambitoActual);
                                yyval= new NodoHoja("Ya existe un identificador con el nombre de la funcion");
                                ambitoActual += "@"+val_peek(5).sval;
                        }
                }
break;
case 26:
//#line 181 "gramatica.y"
{
                        if(!TablaSimbolos.existeSimbolo(val_peek(4).sval+ "@" + ambitoActual)){
                                yyval = new NodoHoja(val_peek(4).sval);
                                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addNuevoSimbolo(val_peek(4).sval+ "@" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(4).sval+ "@" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(4).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(4).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(4).sval);
                                TablaSimbolos.addAtributo(val_peek(4).sval+"@"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                ambitoActual += "@"+val_peek(4).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());

                        }else{
                                yyerror("La funcion " + val_peek(4).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += "@"+val_peek(4).sval;
                                yyval= new NodoHoja("Ya existe un identificador con el nombre de la funcion");

                        }
                }
break;
case 27:
//#line 201 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 28:
//#line 204 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 29:
//#line 207 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 30:
//#line 210 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba :");}
break;
case 31:
//#line 213 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba :");}
break;
case 32:
//#line 216 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba :");}
break;
case 33:
//#line 219 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba )");}
break;
case 34:
//#line 222 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba )");}
break;
case 35:
//#line 225 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba )");}
break;
case 36:
//#line 228 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba otro parametro");}
break;
case 37:
//#line 231 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba (");}
break;
case 38:
//#line 234 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba un nombre de funcion");}
break;
case 39:
//#line 239 "gramatica.y"
{
                                System.out.println("Declaracion de Funcion");
                                
                                char [] a = ambitoActual.toCharArray();
                                for (int i = a.length;i>=0;i--){
                                        if(a[i-1] == '@'){
                                                ambitoActual = ambitoActual.substring(0,i-1);
                                                break;
                                        }
                                }
                                NodoControl n = new NodoControl(((ArbolSintactico)val_peek(3)).getLex()+"@"+ambitoActual,(ArbolSintactico)val_peek(1));
                                n.setTipo(((ArbolSintactico)val_peek(3)).getTipo());
                                System.out.println("Nombre fun: " + ((ArbolSintactico)val_peek(3)).getLex());
                                System.out.println("Tipo fun: " + ((ArbolSintactico)val_peek(3)).getTipo());
                                yyval = new NodoControl("Funcion",n);
                                removeTipoActual();
                                funciones.add((ArbolSintactico)yyval);
                                NodoHoja varAux = (new NodoHoja("@aux@"+((ArbolSintactico)val_peek(3)).getLex()+"@"+ambitoActual));
                                varAux.setTipo(n.getTipo());
                                varAux.setUso("variableAuxiliar");
                                List<LlamadoFun> aux = new ArrayList<LlamadoFun>();
                                for(LlamadoFun lf : listLlamadoFun){
                                        aux.add(lf);
                                }
                                for(LlamadoFun lf : aux){
                                        System.out.println("lf.getNombre():"+ lf.getNombre() );
                                        System.out.println("((ArbolSintactico)$1).getLex():" + ((ArbolSintactico)val_peek(3)).getLex());
                                        if( ((ArbolSintactico)val_peek(3)).getLex().equals(lf.getNombre()) ){
                                                System.out.println("AmbitoActual:" + ambitoActual);
                                                String ambitoDecl = buscarAmbito(ambitoActual,lf.getNombre());

                                                if(!ambitoDecl.equals("")){
                                                        if(!TablaSimbolos.getAtributo(lf.getNombre() +"@"+ ambitoDecl,"Uso").equals("Funcion")){
                                                                yyerror("La funcion "+lf.getNombre()+" no fue declarada como tal.");
                                                                listLlamadoFun.remove(lf);
                                                        }
                                                        else{
                                                                String tipoFun = ((ArbolSintactico)val_peek(3)).getTipo(); 
                                                                String par1 = (String) TablaSimbolos.getAtributo(lf.getNombre() +"@"+ ambitoDecl,"Parametro1");
                                                                String par2 = (String) TablaSimbolos.getAtributo(lf.getNombre() +"@"+ ambitoDecl,"Parametro2");
                                                                if(par2!=null){
                                                                        if(lf.getPar2()!=null){
                                                                                if(lf.getPar1()!=null){
                                                                                        if( !(lf.getPar1().getTipo().equals((String)TablaSimbolos.getAtributo(par1,"Tipo") )) ){
                                                                                                yyerror("El tipo del parametro 1 no coincide con el tipo declarado en la funcion.");
                                                                                                break;
                                                                                        }
                                                                                        if( !(lf.getPar2().getTipo().equals((String)TablaSimbolos.getAtributo(par2,"Tipo") )) ){
                                                                                                yyerror("El tipo del parametro 2 no coincide con el tipo declarado en la funcion.");
                                                                                                break;
                                                                                        }
                                                                                }
                                                                        }else{
                                                                                yyerror("La funcion "+  lf.getNombre() + " esta declarada con dos parametros." );
                                                                                break;
                                                                        }
                                                                }else{
                                                                        if(par1!=null){
                                                                                if(lf.getPar2()==null){
                                                                                        if(lf.getPar1()!=null){
                                                                                                if( !(lf.getPar1().getTipo().equals((String)TablaSimbolos.getAtributo(par1,"Tipo") )) ){
                                                                                                        yyerror("El tipo del parametro 1 no coincide con el tipo declarado en la funcion.");
                                                                                                        break;
                                                                                                } 
                                                                                        }else{
                                                                                                yyerror("La funcion "+  lf.getNombre() + " esta declarada con un parametro." );
                                                                                                break;
                                                                                        }
                                                                                }else{
                                                                                        yyerror("La funcion "+  lf.getNombre() + " esta declarada con un parametro." );
                                                                                        break;
                                                                                }
                                                                        }else{
                                                                                if((lf.getPar2()!=null)||(lf.getPar1()!=null)){
                                                                                        yyerror("La funcion "+  lf.getNombre() + " esta declarada sin parametros." );
                                                                                        break;
                                                                                }
                                                                        }
                                                                }
                                                                if(par2!=null){
                                                                        NodoHoja n1 =new NodoHoja(par1);
                                                                        n1.setTipo(lf.getPar1().getTipo());
                                                                        n1.setUso("Variable");
                                                                        NodoComun parametro1 = new NodoComun("=:",n1 , lf.getPar1());
                                                                        NodoHoja n2 =new NodoHoja(par2);
                                                                        n2.setTipo(lf.getPar2().getTipo());
                                                                        n2.setUso("Variable");
                                                                        NodoComun parametro2 = new NodoComun("=:",n2 , lf.getPar2());
                                                                        lf.getArbol().setIzq(parametro1);
                                                                        lf.getArbol().setDer(parametro2);
                                                                }else{
                                                                        if(par1!=null){
                                                                                NodoHoja n1 =new NodoHoja(par1);
                                                                                n1.setTipo(lf.getPar1().getTipo());
                                                                                n1.setUso("Variable");
                                                                                NodoComun parametro1 = new NodoComun("=:",n1 , lf.getPar1());
                                                                                lf.getArbol().setIzq(parametro1);
                                                                        }
                                                                }
                                                                lf.getArbol().getIzq().setLex(lf.getNombre()+"@"+ambitoDecl);
                                                                lf.getArbol().getIzq().setTipo(((ArbolSintactico)val_peek(3)).getTipo());
                                                                listLlamadoFun.remove(lf);
                                                        }
                                                }
                                        }
                                }
}
break;
case 40:
//#line 346 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 41:
//#line 348 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 42:
//#line 351 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 43:
//#line 352 "gramatica.y"
{yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 44:
//#line 353 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 45:
//#line 356 "gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa Datos");}
break;
case 46:
//#line 357 "gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa Funcion");}
break;
case 47:
//#line 358 "gramatica.y"
{yyval = val_peek(0);}
break;
case 48:
//#line 359 "gramatica.y"
{yyval = val_peek(0);}
break;
case 49:
//#line 360 "gramatica.y"
{yyval=val_peek(0);}
break;
case 50:
//#line 361 "gramatica.y"
{yyval=val_peek(0);}
break;
case 51:
//#line 362 "gramatica.y"
{yyval = val_peek(0);}
break;
case 52:
//#line 363 "gramatica.y"
{yyval = val_peek(0);}
break;
case 53:
//#line 364 "gramatica.y"
{yyval=val_peek(0);}
break;
case 54:
//#line 365 "gramatica.y"
{yyval=val_peek(0);}
break;
case 55:
//#line 366 "gramatica.y"
{yyval=val_peek(0);}
break;
case 56:
//#line 369 "gramatica.y"
{System.out.println("Sentencia IF");
                                yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(8)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(5)),new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        }
break;
case 57:
//#line 372 "gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(6)),new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                }
break;
case 58:
//#line 375 "gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(7)),new NodoControl("Else", (ArbolSintactico)val_peek(3))));
                }
break;
case 59:
//#line 378 "gramatica.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                }
break;
case 60:
//#line 381 "gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(6)),new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                }
break;
case 61:
//#line 384 "gramatica.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                }
break;
case 62:
//#line 387 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 63:
//#line 389 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 64:
//#line 391 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 65:
//#line 393 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 66:
//#line 395 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 67:
//#line 397 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 68:
//#line 399 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 69:
//#line 401 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 70:
//#line 403 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 71:
//#line 405 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 72:
//#line 408 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 73:
//#line 410 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 74:
//#line 412 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 75:
//#line 414 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 76:
//#line 416 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 77:
//#line 419 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 78:
//#line 421 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 79:
//#line 424 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 80:
//#line 426 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 81:
//#line 431 "gramatica.y"
{
                String atributoIzq=((ArbolSintactico)val_peek(7)).getLexemaWhen();
                String atributoDer=((ArbolSintactico)val_peek(5)).getLexemaWhen();
                if (!TablaSimbolos.getAtributo(atributoIzq, "Uso" ).equals("Constante")){
                        yyerror(atributoIzq+" no es una constante");
                        yyval = new NodoHoja("Error en el when");

                }else if (!TablaSimbolos.getAtributo(atributoDer, "Uso" ).equals("Constante")){
                        yyerror(atributoDer+" no es una constante");
                        yyval = new NodoHoja("Error en el when");
                }
                else if (!TablaSimbolos.getAtributo(atributoIzq, "Tipo" ).equals(TablaSimbolos.getAtributo(atributoDer, "Tipo" ))){
                        yyerror("Los valores de la condicion del when son de tipos diferentes");
                        yyval = new NodoHoja("Error en el when");
                }else{
                        String s1 =TablaSimbolos.getAtributo(atributoIzq, "Valor")+"";
                        String s2 =TablaSimbolos.getAtributo(atributoDer, "Valor")+"";
                        double valorIzq = Double.parseDouble(s1);
                        double valorDer = Double.parseDouble(s2);
                        switch (val_peek(6).sval){
                                case "=":
                                        if (valorIzq==valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "<":
                                        if (valorIzq < valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case ">":
                                        if (valorIzq > valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "=!":
                                        if (valorIzq != valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "<=":
                                        if (valorIzq <= valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case ">=":
                                        if (valorIzq >= valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                        } 
                }
        }
break;
case 82:
//#line 491 "gramatica.y"
{
                String atributoIzq=((ArbolSintactico)val_peek(5)).getLexemaWhen();
                String atributoDer=((ArbolSintactico)val_peek(3)).getLexemaWhen();
                if (!TablaSimbolos.getAtributo(atributoIzq, "Uso" ).equals("Constante")){
                        yyerror(atributoIzq+" no es una constante");
                        yyval = new NodoHoja("Error en el when");

                }else if (!TablaSimbolos.getAtributo(atributoDer, "Uso" ).equals("Constante")){
                        yyerror(atributoDer+" no es una constante");
                        yyval = new NodoHoja("Error en el when");
                }
                else if (!TablaSimbolos.getAtributo(atributoIzq, "Tipo" ).equals(TablaSimbolos.getAtributo(atributoDer, "Tipo" ))){
                        yyerror("Los valores de la condicion del when son de tipos diferentes");
                        yyval = new NodoHoja("Error en el when");
                }else{
                        String s1 =TablaSimbolos.getAtributo(atributoIzq, "Valor")+"";
                        String s2 =TablaSimbolos.getAtributo(atributoDer, "Valor")+"";
                        double valorIzq = Double.parseDouble(s1);
                        double valorDer = Double.parseDouble(s2);
                        switch (val_peek(4).sval){
                                case "=":
                                        if (valorIzq==valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "<":
                                        if (valorIzq < valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case ">":
                                        if (valorIzq > valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "=!":
                                        if (valorIzq != valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "<=":
                                        if (valorIzq <= valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case ">=":
                                        if (valorIzq >= valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                        } 
                }
        }
break;
case 83:
//#line 552 "gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");
                }
break;
case 84:
//#line 556 "gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");
                }
break;
case 85:
//#line 560 "gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then");
                }
break;
case 86:
//#line 564 "gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");
                }
break;
case 87:
//#line 568 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion en el when");}
break;
case 88:
//#line 570 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( en el when");}
break;
case 89:
//#line 573 "gramatica.y"
{
                                yyval = new ParserVal(val_peek(1).sval);
                                if(!TablaSimbolos.existeSimbolo(val_peek(1).sval+ "@" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(1).sval+ "@" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(1).sval+ "@" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(1).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(1).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(1).sval);
                                        System.out.println("Se agrego la etiqueta: "+val_peek(1).sval + "@" + ambitoActual );
                                        etiquetasAct.add(val_peek(1).sval + "@" + ambitoActual);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(1).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 90:
//#line 588 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().setIzq((ArbolSintactico)val_peek(1));
                                List l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer());
                                }
                                etiquetasAct.remove(((ArbolSintactico)val_peek(3)).getDer().getIzq().getLex());
                                yyval=val_peek(3);
                        }else{
                                yyval = val_peek(3);
                        }
                }
break;
case 91:
//#line 601 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().setIzq((ArbolSintactico)val_peek(0));
                                List l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer());
                                }
                                etiquetasAct.remove(((ArbolSintactico)val_peek(1)).getDer().getIzq().getLex());
                                yyval=val_peek(1);
                        }else{
                                yyval = val_peek(1);
                        }
                }
break;
case 92:
//#line 614 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().setIzq((ArbolSintactico)val_peek(1));
                                List l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer());
                                }
                                yyval = val_peek(3);
                        }else{
                                yyval = val_peek(3);
                        }
                }
break;
case 93:
//#line 626 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().setIzq((ArbolSintactico)val_peek(0));
                                List l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer());
                                }
                                yyval = val_peek(1);
                        }else{
                                yyval = val_peek(1);
                        }
                }
break;
case 94:
//#line 640 "gramatica.y"
{
                               String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval, id1, new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2, (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)),asignacion ))) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
        
                        }
break;
case 95:
//#line 675 "gramatica.y"
{
						String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");                               
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval,id1, new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2, (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion ))) );
                                
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                               
                        }
break;
case 96:
//#line 710 "gramatica.y"
{
						String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,id1, new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2, (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion ))) );
                                
						if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                               
                        }
break;
case 97:
//#line 745 "gramatica.y"
{
					String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable"); 
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,id1, new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2, (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)),asignacion ))) );
                                
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 98:
//#line 781 "gramatica.y"
{
                               String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                System.out.println((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                }
break;
case 99:
//#line 817 "gramatica.y"
{
                               String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                 
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 100:
//#line 851 "gramatica.y"
{
                               String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 101:
//#line 885 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 102:
//#line 919 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 103:
//#line 921 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 104:
//#line 923 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 105:
//#line 926 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 106:
//#line 928 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 107:
//#line 930 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 108:
//#line 932 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 109:
//#line 934 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 110:
//#line 937 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 111:
//#line 939 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 112:
//#line 941 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 113:
//#line 943 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 114:
//#line 945 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 115:
//#line 947 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 116:
//#line 949 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 117:
//#line 951 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 118:
//#line 953 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 119:
//#line 955 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 120:
//#line 957 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 121:
//#line 959 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 122:
//#line 961 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 123:
//#line 964 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 124:
//#line 966 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 125:
//#line 968 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 126:
//#line 970 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 127:
//#line 972 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 128:
//#line 975 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 129:
//#line 977 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 130:
//#line 979 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 131:
//#line 981 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 132:
//#line 983 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 133:
//#line 985 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 134:
//#line 987 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 135:
//#line 989 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 136:
//#line 991 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 137:
//#line 993 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 138:
//#line 996 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 139:
//#line 997 "gramatica.y"
{yyval=new NodoComun("Sentencia_Break", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 140:
//#line 998 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 141:
//#line 1001 "gramatica.y"
{yyval = val_peek(0);}
break;
case 142:
//#line 1002 "gramatica.y"
{yyval = val_peek(0);}
break;
case 143:
//#line 1003 "gramatica.y"
{yyval = val_peek(0);}
break;
case 144:
//#line 1004 "gramatica.y"
{yyval = val_peek(0);}
break;
case 145:
//#line 1005 "gramatica.y"
{yyval = val_peek(0);}
break;
case 146:
//#line 1006 "gramatica.y"
{        boolean b = false;
                                        if(((ArbolSintactico)val_peek(0)).getIzq()!=null){
                                                String tag = ((ArbolSintactico)val_peek(0)).getIzq().getLex() + "@" + ambitoActual;
                                                for(String s : etiquetasAct){
                                                        if( tag.equals(s)){
                                                                b = true;
                                                                break;
                                                        }
                                                }
                                                if(!b){
                                                        yyerror("No se puede saltar al tag " + ((ArbolSintactico)val_peek(0)).getIzq().getLex());
                                                        yyval = new NodoHoja("Error");
                                                }else{
                                                        yyval = new NodoComun("Continue",new NodoHoja("Fin"),(ArbolSintactico)val_peek(0));
                                                        stackContinue.peek().add((ArbolSintactico)yyval);
                                                }
                                        }else{
                                                yyval = new NodoComun("Continue",null,(ArbolSintactico)val_peek(0));
                                        }
                                }
break;
case 147:
//#line 1026 "gramatica.y"
{yyval = new NodoHoja("Break");}
break;
case 148:
//#line 1027 "gramatica.y"
{yyval = new NodoControl("Break", new NodoHoja(val_peek(0).sval));}
break;
case 149:
//#line 1028 "gramatica.y"
{yyval=val_peek(0);}
break;
case 150:
//#line 1033 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 151:
//#line 1038 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 152:
//#line 1043 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 153:
//#line 1048 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 154:
//#line 1053 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 155:
//#line 1058 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 156:
//#line 1062 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 157:
//#line 1064 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 158:
//#line 1066 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 159:
//#line 1068 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 160:
//#line 1070 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 161:
//#line 1073 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 162:
//#line 1075 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 163:
//#line 1077 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 164:
//#line 1079 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 165:
//#line 1081 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 166:
//#line 1084 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 167:
//#line 1086 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 168:
//#line 1089 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 169:
//#line 1091 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 170:
//#line 1094 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 171:
//#line 1096 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 172:
//#line 1098 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 173:
//#line 1100 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 174:
//#line 1102 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 175:
//#line 1105 "gramatica.y"
{yyval = new NodoControl("Retorno", (ArbolSintactico)val_peek(1));
                                                String tipoRet = ((ArbolSintactico)val_peek(1)).getTipo();
                                                if(!ambitoActual.equals("Global")){
                                                        String tipoFun = getTipoActual();
                                                        if(!tipoRet.equals(tipoFun)){
                                                                yyerror("El retorno debe ser del mismo tipo que el retorno de la funcion.");
                                                        }
                                                }else{
                                                        yyerror("El retorno puede estar solo dentro de una funcion.");
                                                }
                                        }
break;
case 176:
//#line 1116 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba )");}
break;
case 177:
//#line 1118 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion");}
break;
case 178:
//#line 1120 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion entre ( )");}
break;
case 179:
//#line 1124 "gramatica.y"
{    yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(1)).getTipo());
}
break;
case 180:
//#line 1127 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba identificador");}
break;
case 181:
//#line 1131 "gramatica.y"
{System.out.println("Declaracion de Constante/s");}
break;
case 184:
//#line 1137 "gramatica.y"
{ 
                                if(TablaSimbolos.existeSimbolo(val_peek(2).sval+"@"+ambitoActual)){
                                        yyerror("La variable " + val_peek(2).sval + " se encuentra declarada en el ambito " + ambitoActual);
                                }else{
                                        TablaSimbolos.addNuevoSimbolo(val_peek(2).sval+"@"+ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(2).sval,"Id"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Tipo",TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Linea",AnalizadorLexico.getLineaAct());
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Uso","Constante");
                                        if (TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo").equals("Entero")){
                                                TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Valor", Long.valueOf(val_peek(0).sval));
                                        }else{
                                                TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Valor", Double.parseDouble(val_peek(0).sval));
                                        }
                                }
                        }
break;
case 185:
//#line 1153 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba una constante");}
break;
case 186:
//#line 1155 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba una asignacion =:");}
break;
case 187:
//#line 1158 "gramatica.y"
{yyval = val_peek(0);}
break;
case 188:
//#line 1159 "gramatica.y"
{yyval = val_peek(0); }
break;
case 189:
//#line 1160 "gramatica.y"
{yyval = val_peek(0);}
break;
case 190:
//#line 1161 "gramatica.y"
{yyval = val_peek(0);}
break;
case 191:
//#line 1162 "gramatica.y"
{yyval = val_peek(0);}
break;
case 192:
//#line 1163 "gramatica.y"
{yyval=val_peek(0);}
break;
case 193:
//#line 1165 "gramatica.y"
{
                                        System.out.println("Asignacion");
                                        String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                                        NodoHoja hoja = new NodoHoja(val_peek(2).sval+"@"+ambito);
                                       
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval, hoja , (ArbolSintactico) val_peek(0));

                                        String tipoS1 = "";
                                        if(!ambito.equals("")){
                                                if(((String)TablaSimbolos.getAtributo(val_peek(2).sval+"@"+ambito, "Uso")).equals("Variable")){
                                                        tipoS1 = (String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo");
                                                        ((ArbolSintactico)yyval).setTipo(tipoS1);
                                                        hoja.setUso((String)TablaSimbolos.getAtributo(val_peek(2).sval+"@"+ambito, "Uso"));
                                                        hoja.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                                }
                                                else {
                                                        yyerror(val_peek(2).sval+" no es una variable.");
                                                }
                                        }
                                        String tipoS3 = ((ArbolSintactico)val_peek(0)).getTipo();
                                        if(!(tipoS1.equals(tipoS3))){
                                                yyerror("No se puede realizar una asignacion con tipos diferentes.");
                                        }
                                        
                                }
break;
case 194:
//#line 1190 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba =:");}
break;
case 195:
//#line 1192 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion");}
break;
case 196:
//#line 1195 "gramatica.y"
{     
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));

                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una suma con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                        
                                 }
break;
case 197:
//#line 1205 "gramatica.y"
{
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una resta con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                 }
break;
case 198:
//#line 1214 "gramatica.y"
{yyval = val_peek(0);}
break;
case 199:
//#line 1215 "gramatica.y"
{
                                        NodoHoja cte = new NodoHoja(val_peek(0).sval);
                                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        yyval = new NodoComun("For como expresion",(ArbolSintactico)val_peek(2),cte);
                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));     
                                       
                                        }
break;
case 200:
//#line 1222 "gramatica.y"
{
                                        NodoHoja cte = new NodoHoja(val_peek(0).sval);
                                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        yyval = new NodoComun("While como expresion",(ArbolSintactico)val_peek(2),cte);
                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo")); 
                                        
                                        }
break;
case 201:
//#line 1229 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un termino");}
break;
case 202:
//#line 1231 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un termino");}
break;
case 203:
//#line 1233 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un constante");}
break;
case 204:
//#line 1235 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un constante");}
break;
case 205:
//#line 1239 "gramatica.y"
{ 
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una multiplicacion con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 206:
//#line 1248 "gramatica.y"
{
                                        yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una division con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 207:
//#line 1257 "gramatica.y"
{
                  yyval = val_peek(0);
                 }
break;
case 208:
//#line 1260 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un factor");}
break;
case 209:
//#line 1262 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un factor");}
break;
case 210:
//#line 1265 "gramatica.y"
{
                String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                if((!ambito.equals(""))){
                        if(((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso")).equals("Variable")
                        || ((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso")).equals("Constante")){
                                yyval = new NodoHoja(val_peek(0).sval+"@"+ambito);
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Tipo"));
                                ((ArbolSintactico)yyval).setUso((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso"));
                        }
                        else{
                                yyerror(val_peek(0).sval+" no es una variable");
                        }
                }else{
                        yyval = new NodoHoja("Error");
                }
           }
break;
case 211:
//#line 1281 "gramatica.y"
{
                yyval = new NodoHoja(val_peek(0).sval);
                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                ((ArbolSintactico)yyval).setUso("Constante");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Uso","Constante");
              }
break;
case 212:
//#line 1288 "gramatica.y"
{yyval=val_peek(0);}
break;
case 213:
//#line 1290 "gramatica.y"
{  
                chequearRangoI32(val_peek(0).sval);
                TablaSimbolos.addNuevoSimbolo((String)val_peek(0).sval);
                TablaSimbolos.addAtributo(val_peek(0).sval, "Uso", "Constante");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Tipo", "Entero");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Valor", (String)val_peek(0).sval);
                }
break;
case 214:
//#line 1297 "gramatica.y"
{  
                TablaSimbolos.addNuevoSimbolo((String)val_peek(0).sval);
                TablaSimbolos.addAtributo(val_peek(0).sval, "Uso", "Constante");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Tipo", "Float");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Valor", (String)val_peek(0).sval);}
break;
case 215:
//#line 1302 "gramatica.y"
{
                yyval=new ParserVal(val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addNuevoSimbolo((String)val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Uso", "Constante");
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Tipo", "Entero");
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Valor", (String)val_peek(1).sval+val_peek(0).sval);
        }
break;
case 216:
//#line 1309 "gramatica.y"
{
                yyval=new ParserVal(val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addNuevoSimbolo((String)val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Uso", "Constante");
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Tipo", "Float");
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Valor", (String)val_peek(1).sval+val_peek(0).sval);
        }
break;
case 217:
//#line 1317 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                System.out.println((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For en asignacion",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }

                }
break;
case 218:
//#line 1353 "gramatica.y"
{
                               String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For en asignacion",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }

                        }
break;
case 219:
//#line 1387 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For en asignacion",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                
if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }

                        }
break;
case 220:
//#line 1421 "gramatica.y"
{
					String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For en asignacion",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                
                               if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }

                        }
break;
case 221:
//#line 1455 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 222:
//#line 1457 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 223:
//#line 1459 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 224:
//#line 1462 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 225:
//#line 1464 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 226:
//#line 1466 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 227:
//#line 1468 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 228:
//#line 1470 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 229:
//#line 1473 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 230:
//#line 1475 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 231:
//#line 1477 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 232:
//#line 1479 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 233:
//#line 1481 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 234:
//#line 1483 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 235:
//#line 1485 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 236:
//#line 1487 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 237:
//#line 1489 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 238:
//#line 1491 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 239:
//#line 1495 "gramatica.y"
{
                        yyval = new NodoComun("While Asignacion", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 240:
//#line 1498 "gramatica.y"
{
                        yyval = new NodoComun("While Asignacion", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");}
break;
case 241:
//#line 1501 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 242:
//#line 1503 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 243:
//#line 1505 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 244:
//#line 1507 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 245:
//#line 1509 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 246:
//#line 1511 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 247:
//#line 1513 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 248:
//#line 1515 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 249:
//#line 1517 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 250:
//#line 1520 "gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                                                                                                                                }
break;
case 251:
//#line 1524 "gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");}
break;
case 252:
//#line 1527 "gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                                                                                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");}
break;
case 253:
//#line 1529 "gramatica.y"
{yyval = new NodoComun("IF",new NodoControl("Condicion", (ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                                                                                        System.out.println("Sentencia IF sin corchetes y sin else");}
break;
case 254:
//#line 1531 "gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF con corchetes y else");}
break;
case 255:
//#line 1534 "gramatica.y"
{
                                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                                        System.out.println("Sentencia IF con corchetes y sin else");}
break;
case 256:
//#line 1537 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 257:
//#line 1539 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 258:
//#line 1541 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 259:
//#line 1543 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 260:
//#line 1545 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 261:
//#line 1548 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 262:
//#line 1550 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 263:
//#line 1552 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 264:
//#line 1554 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 265:
//#line 1556 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 266:
//#line 1559 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 267:
//#line 1561 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 268:
//#line 1564 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 269:
//#line 1566 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 270:
//#line 1569 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 271:
//#line 1571 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 272:
//#line 1573 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 273:
//#line 1575 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 274:
//#line 1577 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 275:
//#line 1580 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 276:
//#line 1581 "gramatica.y"
{yyval=new NodoComun("Bloque Ejecutable Asignacion", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 277:
//#line 1583 "gramatica.y"
{yyval = val_peek(0);}
break;
case 278:
//#line 1584 "gramatica.y"
{yyval = val_peek(0);}
break;
case 279:
//#line 1585 "gramatica.y"
{yyval = val_peek(0);}
break;
case 280:
//#line 1586 "gramatica.y"
{yyval = val_peek(0);}
break;
case 281:
//#line 1587 "gramatica.y"
{yyval = val_peek(0);}
break;
case 282:
//#line 1588 "gramatica.y"
{NodoHoja cte = new NodoHoja(val_peek(0).sval);
                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                        yyval = new NodoControl("Break", cte);}
break;
case 283:
//#line 1592 "gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                                                                                                                                }
break;
case 284:
//#line 1596 "gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");}
break;
case 285:
//#line 1599 "gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                                                                                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");}
break;
case 286:
//#line 1601 "gramatica.y"
{yyval = new NodoComun("IF",new NodoControl("Condicion", (ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                                                                                        System.out.println("Sentencia IF sin corchetes y sin else");}
break;
case 287:
//#line 1603 "gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF con corchetes y else");}
break;
case 288:
//#line 1606 "gramatica.y"
{
                                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                                        System.out.println("Sentencia IF con corchetes y sin else");}
break;
case 289:
//#line 1609 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 290:
//#line 1611 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 291:
//#line 1613 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 292:
//#line 1615 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 293:
//#line 1617 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 294:
//#line 1620 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 295:
//#line 1622 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 296:
//#line 1624 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 297:
//#line 1626 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 298:
//#line 1628 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 299:
//#line 1631 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 300:
//#line 1633 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 301:
//#line 1636 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 302:
//#line 1638 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 303:
//#line 1641 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 304:
//#line 1643 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 305:
//#line 1645 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 306:
//#line 1647 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 307:
//#line 1649 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 308:
//#line 1655 "gramatica.y"
{
                        yyval= new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                        ((ArbolSintactico)yyval).setUso("Condicion");
                        if (!((((ArbolSintactico)val_peek(2)).getTipo()).equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                               yyerror("error en la comparacion entre expresiones de distintos tipos");
                        }
                }
break;
case 309:
//#line 1663 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba otra expresion para comparar.");}
break;
case 310:
//#line 1665 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un tipo de comparacion.");}
break;
case 311:
//#line 1668 "gramatica.y"
{yyval= val_peek(0);}
break;
case 312:
//#line 1669 "gramatica.y"
{yyval= val_peek(0);}
break;
case 313:
//#line 1670 "gramatica.y"
{yyval= val_peek(0);}
break;
case 314:
//#line 1671 "gramatica.y"
{yyval= val_peek(0);}
break;
case 315:
//#line 1672 "gramatica.y"
{yyval= val_peek(0);}
break;
case 316:
//#line 1673 "gramatica.y"
{yyval=val_peek(0);}
break;
case 317:
//#line 1675 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 318:
//#line 1676 "gramatica.y"
{
                                                                yyval=new NodoComun("Bloque Ejecutable", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));
                                                                }
break;
case 319:
//#line 1679 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 320:
//#line 1682 "gramatica.y"
{
                        yyval = new NodoControl(val_peek(3).sval, (ArbolSintactico) new NodoHoja(val_peek(1).sval));
                        System.out.println("Sentencia OUT");}
break;
case 321:
//#line 1685 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 322:
//#line 1687 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una CADENA");}
break;
case 323:
//#line 1689 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 324:
//#line 1692 "gramatica.y"
{
                String atributoIzq=((ArbolSintactico)val_peek(7)).getLexemaWhen();
                String atributoDer=((ArbolSintactico)val_peek(5)).getLexemaWhen();
                if (!TablaSimbolos.getAtributo(atributoIzq, "Uso" ).equals("Constante")){
                        yyerror(atributoIzq+" no es una constante");
                        yyval = new NodoHoja("Error en el when");

                }else if (!TablaSimbolos.getAtributo(atributoDer, "Uso" ).equals("Constante")){
                        yyerror(atributoDer+" no es una constante");
                        yyval = new NodoHoja("Error en el when");
                }
                else if (!TablaSimbolos.getAtributo(atributoIzq, "Tipo" ).equals(TablaSimbolos.getAtributo(atributoDer, "Tipo" ))){
                        yyerror("Los valores de la condicion del when son de tipos diferentes");
                        yyval = new NodoHoja("Error en el when");
                }else{
                        String s1 =TablaSimbolos.getAtributo(atributoIzq, "Valor")+"";
                        String s2 =TablaSimbolos.getAtributo(atributoDer, "Valor")+"";
                        double valorIzq = Double.parseDouble(s1);
                        double valorDer = Double.parseDouble(s2);
                        switch (val_peek(6).sval){
                                case "=":
                                        if (valorIzq==valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "<":
                                        if (valorIzq < valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case ">":
                                        if (valorIzq > valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "=!":
                                        if (valorIzq != valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "<=":
                                        if (valorIzq <= valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case ">=":
                                        if (valorIzq >= valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                        } 
                }
        }
break;
case 325:
//#line 1752 "gramatica.y"
{
                String atributoIzq=((ArbolSintactico)val_peek(5)).getLexemaWhen();
                String atributoDer=((ArbolSintactico)val_peek(3)).getLexemaWhen();
                if (!TablaSimbolos.getAtributo(atributoIzq, "Uso" ).equals("Constante")){
                        yyerror(atributoIzq+" no es una constante");
                        yyval = new NodoHoja("Error en el when");

                }else if (!TablaSimbolos.getAtributo(atributoDer, "Uso" ).equals("Constante")){
                        yyerror(atributoDer+" no es una constante");
                        yyval = new NodoHoja("Error en el when");
                }
                else if (!TablaSimbolos.getAtributo(atributoIzq, "Tipo" ).equals(TablaSimbolos.getAtributo(atributoDer, "Tipo" ))){
                        yyerror("Los valores de la condicion del when son de tipos diferentes");
                        yyval = new NodoHoja("Error en el when");
                }else{
                        String s1 =TablaSimbolos.getAtributo(atributoIzq, "Valor")+"";
                        String s2 =TablaSimbolos.getAtributo(atributoDer, "Valor")+"";
                        double valorIzq = Double.parseDouble(s1);
                        double valorDer = Double.parseDouble(s2);
                        switch (val_peek(4).sval){
                                case "=":
                                        if (valorIzq==valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "<":
                                        if (valorIzq < valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case ">":
                                        if (valorIzq > valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "=!":
                                        if (valorIzq != valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "<=":
                                        if (valorIzq <= valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case ">=":
                                        if (valorIzq >= valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                        } 
                }
        }
break;
case 326:
//#line 1812 "gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");
                }
break;
case 327:
//#line 1816 "gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");
                }
break;
case 328:
//#line 1820 "gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then");
                }
break;
case 329:
//#line 1824 "gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");
                }
break;
case 330:
//#line 1828 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion en el when");}
break;
case 331:
//#line 1830 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( en el when");}
break;
case 332:
//#line 1833 "gramatica.y"
{ 
                        yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(8).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", null, (ArbolSintactico) val_peek(1))) );
                        
                        List l = new ArrayList<ArbolSintactico>();
                        stackContinue.push(l);
                        }
break;
case 333:
//#line 1839 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 334:
//#line 1841 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 335:
//#line 1843 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 336:
//#line 1845 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 337:
//#line 1847 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 338:
//#line 1849 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 339:
//#line 1851 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 340:
//#line 1854 "gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", null, (ArbolSintactico) val_peek(1)) ); 
                        List l = new ArrayList<ArbolSintactico>();
                        stackContinue.push(l);      
                        }
break;
case 341:
//#line 1859 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 342:
//#line 1861 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 343:
//#line 1863 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 344:
//#line 1865 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 345:
//#line 1867 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 346:
//#line 1869 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 347:
//#line 1871 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 348:
//#line 1875 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().setIzq((ArbolSintactico)val_peek(1));
                                List l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer());
                                }
                                etiquetasAct.remove(((ArbolSintactico)val_peek(3)).getDer().getIzq().getLex());
                                yyval=val_peek(3);
                        }else{
                                yyval = val_peek(3);
                        }
                        }
break;
case 349:
//#line 1889 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().setIzq((ArbolSintactico)val_peek(0));
                                List l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer());
                                }
                                etiquetasAct.remove(((ArbolSintactico)val_peek(1)).getDer().getIzq().getLex());
                                yyval = val_peek(1);
                        }else{
                                yyval = val_peek(1);
                        }
                        }
break;
case 350:
//#line 1902 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().setIzq((ArbolSintactico)val_peek(1));
                                List l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer());
                                }
                                yyval = val_peek(3);
                        }else{
                                yyval = val_peek(3);
                        }
                        }
break;
case 351:
//#line 1914 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().setIzq((ArbolSintactico)val_peek(0));
                                List l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer());
                                }
                                yyval = val_peek(1);
                        }else{
                                yyval = val_peek(1);
                        }
                        }
break;
case 352:
//#line 1926 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 353:
//#line 1928 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 354:
//#line 1932 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 355:
//#line 1933 "gramatica.y"
{
                yyval = new NodoComun("Bloque Break con Continue",(ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));
                }
break;
case 356:
//#line 1936 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba ;");}
break;
case 357:
//#line 1940 "gramatica.y"
{yyval = val_peek(0);}
break;
case 358:
//#line 1941 "gramatica.y"
{yyval = val_peek(0);}
break;
case 359:
//#line 1942 "gramatica.y"
{yyval = val_peek(0);}
break;
case 360:
//#line 1943 "gramatica.y"
{yyval = val_peek(0);}
break;
case 361:
//#line 1944 "gramatica.y"
{yyval = val_peek(0);}
break;
case 362:
//#line 1945 "gramatica.y"
{boolean b = false;
                                        if(((ArbolSintactico)val_peek(0)).getIzq()!=null){
                                                String tag = ((ArbolSintactico)val_peek(0)).getIzq().getLex() + "@" + ambitoActual;
                                                for(String s : etiquetasAct){
                                                        if(tag.equals(s)){
                                                                b = true;
                                                                break;
                                                        }
                                                }
                                                if(!b){
                                                        yyerror("No se puede saltar al tag " + ((ArbolSintactico)val_peek(0)).getIzq().getLex());
                                                        yyval = new NodoHoja("Error");
                                                }else{
                                                        yyval = new NodoComun("Continue",new NodoHoja("Fin"),(ArbolSintactico)val_peek(0));
                                                        stackContinue.peek().add((ArbolSintactico)yyval);

                                                }
                                        }else{
                                                yyval = new NodoComun("Continue",new NodoHoja("Fin"),(ArbolSintactico)val_peek(0));
                                        }
                                }
break;
case 363:
//#line 1966 "gramatica.y"
{yyval = new NodoControl("Break",(ArbolSintactico)new NodoHoja("Fin"));}
break;
case 364:
//#line 1968 "gramatica.y"
{yyval = new NodoHoja("Fin");}
break;
case 365:
//#line 1969 "gramatica.y"
{String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        yyval = new NodoControl("Tag", new NodoHoja(val_peek(0).sval) );
                        if(!ambito.equals("")){
                                if(!TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Uso").equals("Etiqueta")){
                                        yyerror(val_peek(0).sval + " no es una etiqueta.");
                                }
                        }else{
                                yyerror("La etiqueta " + val_peek(0).sval + " no esta declarada.");
                        }
                        }
break;
case 366:
//#line 1979 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un identificador");}
break;
case 367:
//#line 1984 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 368:
//#line 1989 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 369:
//#line 1994 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 370:
//#line 1999 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 371:
//#line 2004 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 372:
//#line 2009 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 373:
//#line 2013 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 374:
//#line 2015 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 375:
//#line 2017 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 376:
//#line 2019 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 377:
//#line 2021 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 378:
//#line 2024 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 379:
//#line 2026 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 380:
//#line 2028 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 381:
//#line 2030 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 382:
//#line 2032 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 383:
//#line 2035 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 384:
//#line 2037 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 385:
//#line 2040 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 386:
//#line 2042 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 387:
//#line 2045 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 388:
//#line 2047 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 389:
//#line 2049 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 390:
//#line 2051 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 391:
//#line 2053 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 392:
//#line 2057 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval, id1, new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2, (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)),asignacion ))) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 393:
//#line 2092 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");                               
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval,id1, new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2, (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion ))) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                     
                        }
break;
case 394:
//#line 2127 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,id1, new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2, (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion ))) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 395:
//#line 2162 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable"); 
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,id1, new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2, (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)),asignacion ))) );
                            
					if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 396:
//#line 2198 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                System.out.println((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }

                }
break;
case 397:
//#line 2234 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                
						if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 398:
//#line 2268 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 399:
//#line 2302 "gramatica.y"
{
						String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 400:
//#line 2336 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 401:
//#line 2338 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 402:
//#line 2340 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 403:
//#line 2343 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 404:
//#line 2345 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 405:
//#line 2347 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 406:
//#line 2349 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 407:
//#line 2351 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 408:
//#line 2354 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 409:
//#line 2356 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 410:
//#line 2358 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 411:
//#line 2360 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 412:
//#line 2362 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 413:
//#line 2364 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 414:
//#line 2366 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 415:
//#line 2368 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 416:
//#line 2370 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 417:
//#line 2372 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 418:
//#line 2374 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 419:
//#line 2376 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 420:
//#line 2378 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 421:
//#line 2381 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 422:
//#line 2383 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 423:
//#line 2385 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 424:
//#line 2387 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 425:
//#line 2389 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 426:
//#line 2392 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 427:
//#line 2394 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 428:
//#line 2396 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 429:
//#line 2398 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 430:
//#line 2400 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 431:
//#line 2402 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 432:
//#line 2404 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 433:
//#line 2406 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 434:
//#line 2408 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 435:
//#line 2410 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 436:
//#line 2414 "gramatica.y"
{
                        yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                        ((ArbolSintactico)yyval).setUso("Variable");
                }
break;
case 437:
//#line 2420 "gramatica.y"
{
                        String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        if(!ambito.equals("")){
                                yyval=new NodoHoja(val_peek(0).sval+"@"+ambito);
                                ((ArbolSintactico)yyval).setUso("Variable");
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Tipo"));
                        }else{
                                yyval=new NodoHoja("Error");
                                yyerror("El parametro "+ val_peek(0).sval +" no se encuentra declarado en el ambito "+ambitoActual);
                        }
                     }
break;
case 438:
//#line 2432 "gramatica.y"
{
                                                        
                                                        String ambito = buscarAmbito(ambitoActual,val_peek(5).sval);
                                                        NodoComun parametro1=null;
                                                        NodoComun parametro2=null;
                                                        if (!ambito.equals("") ){
                                                                if( !TablaSimbolos.getAtributo(val_peek(5).sval+"@"+ambito,"Uso").equals("Funcion") ){
                                                                        yyerror("La funcion "+val_peek(5).sval+" no fue declarada");
                                                                }else{
                                                                        String par1 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +"@"+ ambito,"Parametro1");
                                                                        String par2 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +"@"+ ambito,"Parametro2");
                                                                        if(par1 != null)
                                                                                if(par2 != null){
                                                                                        String tipoS3 = (String) ((ArbolSintactico) val_peek(3) ).getTipo();
                                                                                        if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") ) )){
                                                                                                String nombreS3 = ((ArbolSintactico) val_peek(3)).getLex();
                                                                                                yyerror("El tipo del parametro "+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                                                                                break;
                                                                                        }else{
                                                                                                NodoHoja n =new NodoHoja(par1);
                                                                                                n.setTipo(tipoS3);
                                                                                                n.setUso("Variable");
                                                                                                parametro1 = new NodoComun("=:",n , (ArbolSintactico)val_peek(3));
                                                                                        }
                                                                                        String tipoS5 = (String) ((ArbolSintactico) val_peek(1)).getTipo();
                                                                                        if( !(tipoS5.equals((String)TablaSimbolos.getAtributo(par2,"Tipo") ))){
                                                                                                String nombreS5 = ((ArbolSintactico) val_peek(1)).getLex();
                                                                                                yyerror("El tipo del parametro "+ nombreS5+" no coincide con el tipo declarado en la funcion.");
                                                                                                break;
                                                                                        }else{
                                                                                                NodoHoja n =new NodoHoja(par2);
                                                                                                n.setTipo(tipoS5);
                                                                                                n.setUso("Variable");
                                                                                                parametro2 = new NodoComun("=:",n, (ArbolSintactico)val_peek(1));
                                                                                        }
                                                                                }else{
                                                                                        yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                                }
                                                                        else{
                                                                                yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                        }
                                                                        yyval=new NodoControl("Llamado Funcion" ,new NodoComun(val_peek(5).sval+"@"+ambito,(ArbolSintactico)parametro1,(ArbolSintactico)parametro2));
                                                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(5).sval +"@"+ ambito,"Tipo"));
                                                                }
                                                        }else{
                                                                yyval=new NodoControl("Llamado Funcion" ,new NodoComun(val_peek(5).sval+"@"+ambito,null,null));
                                                                LlamadoFun lf = new LlamadoFun(val_peek(5).sval , ambitoActual,(ArbolSintactico)val_peek(3),(ArbolSintactico)val_peek(1),(ArbolSintactico)yyval,AnalizadorLexico.getLineaAct());
                                                                listLlamadoFun.add(lf);
                                                        }
                                                }
break;
case 439:
//#line 2482 "gramatica.y"
{
                
            String ambito = buscarAmbito(ambitoActual,val_peek(3).sval);
            NodoComun parametro1=null;
            if (!ambito.equals("")){
                if (!TablaSimbolos.getAtributo(val_peek(3).sval+"@"+ambito,"Uso").equals("Funcion")){
                        yyerror("La funcion "+val_peek(3).sval+" no fue declarada");
                }else{
                        String par1 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +"@"+ ambito,"Parametro1");
                        String par2 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +"@"+ ambito,"Parametro2");
                        if(par2 ==null){
                                if(par1!=null){
                                        String tipoS3 = (String) ((ArbolSintactico) val_peek(1) ).getTipo();
                                        if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") )) ){
                                                String nombreS3 = ((ArbolSintactico) val_peek(1)).getLex();
                                                yyerror("El tipo del parametro "+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                        }else{
                                                NodoHoja n =new NodoHoja(par1);
                                                n.setTipo(tipoS3);
                                                n.setUso("Variable");
                                                parametro1 = new NodoComun("=:",n , (ArbolSintactico)val_peek(1));
                                        }
                                }else{
                                        yyerror("La funcion esta declarada sin parametros.");
                                }
                        }else{
                                yyerror("La funcion esta declarada con dos parametros.");
                        }
                        yyval=new NodoControl("Llamado Funcion" ,new NodoComun(val_peek(3).sval+"@"+ambito,(ArbolSintactico)parametro1,new NodoHoja("Un solo parametro")));
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(3).sval +"@"+ ambito,"Tipo"));
                }
            }else{
                        yyval=new NodoControl("Llamado Funcion" ,new NodoComun(val_peek(3).sval+"@"+ambito,null,new NodoHoja("Un solo parametro")));
                        LlamadoFun lf = new LlamadoFun(val_peek(3).sval ,ambitoActual,(ArbolSintactico)val_peek(1),null,(ArbolSintactico)yyval,AnalizadorLexico.getLineaAct());
                        listLlamadoFun.add(lf);
            }

        }
break;
case 440:
//#line 2520 "gramatica.y"
{
                String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                if (!ambito.equals("") ){
                        if (!TablaSimbolos.getAtributo(val_peek(2).sval+"@"+ambito,"Uso").equals("Funcion")){
                                yyerror("La funcion "+val_peek(2).sval+" no fue declarada");
                                
                        }else{
                                String par1 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Parametro1");
                                String par2 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Parametro2");
                                if(par2 == null){
                                        if(par1 != null){
                                                yyerror("La funcion esta declarada con un parametro.");
                                        }
                                }else{
                                        yyerror("La funcion esta declarada con dos parametros.");
                                }
                                yyval=new NodoControl("Llamado Funcion", new NodoComun(val_peek(2).sval+"@"+ambito,new NodoHoja("Fin"),new NodoHoja("Fin")));
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                        }
                }else{
                        yyval=new NodoControl("Llamado Funcion" ,new NodoComun(val_peek(2).sval+"@"+ambito,new NodoHoja("Fin"),new NodoHoja("Fin")));
                        LlamadoFun lf = new LlamadoFun(val_peek(2).sval , ambitoActual,null,null,(ArbolSintactico)yyval,AnalizadorLexico.getLineaAct());
                        listLlamadoFun.add(lf);
                }
    
        }
break;
case 441:
//#line 2546 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 442:
//#line 2548 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 443:
//#line 2550 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 444:
//#line 2552 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba otro parametro");}
break;
//#line 5418 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 * @throws IOException
 */
public void run() throws IOException
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
