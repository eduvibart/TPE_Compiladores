//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package Principal;
import java.io.IOException;
import AnalizadorLexico.AnalizadorLexico;
import AnalizadorLexico.Token;
import GeneracionCodigoIntermedio.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Stack;

//#line 28 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IF=257;
public final static short THEN=258;
public final static short ELSE=259;
public final static short END_IF=260;
public final static short OUT=261;
public final static short FUN=262;
public final static short RETURN=263;
public final static short BREAK=264;
public final static short WHEN=265;
public final static short WHILE=266;
public final static short FOR=267;
public final static short CONTINUE=268;
public final static short ID=269;
public final static short I32=270;
public final static short F32=271;
public final static short PUNTO=272;
public final static short PARENT_A=273;
public final static short PARENT_C=274;
public final static short COMILLA=275;
public final static short COMA=276;
public final static short DOSPUNTOS=277;
public final static short PUNTOCOMA=278;
public final static short IGUAL=279;
public final static short MAYOR=280;
public final static short MENOR=281;
public final static short MENORIGUAL=282;
public final static short MAYORIGUAL=283;
public final static short LLAVE_A=284;
public final static short LLAVE_C=285;
public final static short EXCL=286;
public final static short DIST=287;
public final static short ASIG=288;
public final static short CADENA=289;
public final static short COMENT=290;
public final static short CONST=291;
public final static short SUMA=292;
public final static short RESTA=293;
public final static short MULT=294;
public final static short DIV=295;
public final static short ENTERO=296;
public final static short FLOAT=297;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    1,    2,    2,    2,    3,    3,
    4,    4,    4,    4,   10,   10,   11,   11,   11,    6,
    6,   12,   12,   13,   13,   13,   13,   13,   13,   13,
   13,   13,   13,   13,   13,   13,   13,   13,    7,    7,
    7,   15,   15,   15,   16,   16,   16,   16,   16,   16,
   16,   16,   16,   16,   16,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   21,   21,   21,   21,   21,   27,   23,   23,   23,   23,
   22,   22,   22,   22,   22,   22,   29,   29,   29,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   34,   34,
   34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
   34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
   34,   34,   34,   24,   24,   24,   24,   14,   14,    8,
   38,   38,   39,   39,   39,    5,    5,    5,    5,    5,
    5,   17,   17,   17,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   43,   43,   43,   43,   43,   46,   46,
   46,   36,   36,   36,   36,   44,   44,   44,   45,   45,
   45,   49,   49,   49,   49,   49,   49,   49,   49,   49,
   49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
   49,   49,   49,   49,   49,   49,   47,   47,   48,   48,
   48,   48,   48,   48,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   25,
   25,   25,   51,   51,   51,   51,   51,   51,   50,   50,
   50,   20,   20,   20,   20,   26,   26,   26,   26,    9,
    9,    9,    9,    9,   28,   28,   28,   28,   28,   28,
   28,   28,   31,   31,   31,   31,   31,   31,   31,   31,
   42,   42,   42,   42,   42,   42,   52,   52,   52,   53,
   53,   53,   53,   53,   53,   53,   35,   35,   35,   54,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
   54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
   54,   54,   54,   54,   32,   32,   32,   32,   32,   32,
   32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   41,   41,   41,   41,
   41,   41,   41,   41,   55,   55,   18,   18,   18,   18,
   18,   18,   18,
};
final static short yylen[] = {                            2,
    4,    4,    4,    4,    1,    0,    3,    3,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    1,    2,
    2,    3,    1,    9,    7,    6,    9,    7,    6,    8,
    6,    5,    7,    5,    4,    6,    3,    2,    4,    4,
    2,    0,    3,    3,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,   11,   13,   13,    8,   13,
    9,   13,   12,   10,    9,    8,   12,   11,    9,    8,
    7,    6,    5,    4,    3,    2,   11,   10,   12,   11,
    5,    3,    5,    3,    2,    2,    4,    2,    4,    2,
    4,    2,    4,    2,    4,    4,    0,    3,    3,    1,
    1,    1,    1,    1,    2,    1,    2,    1,   11,   12,
   12,    8,   13,    9,   13,   12,   10,    9,    8,   12,
   11,    9,    8,    7,   12,   11,   11,   10,    6,    5,
    4,    3,    2,    4,    4,    3,    2,    2,    2,    2,
    3,    1,    3,    3,    2,    1,    1,    1,    1,    1,
    1,    3,    2,    3,    3,    3,    1,    3,    3,    3,
    3,    3,    3,    3,    3,    1,    3,    3,    1,    1,
    1,    1,    1,    2,    2,    4,    2,    4,    4,    2,
    4,   12,   12,   11,    8,   13,    9,   13,   12,   10,
    9,    8,   12,   11,    9,    8,    7,   11,   10,   12,
   11,    6,    5,    4,    3,    2,    0,    3,    1,    1,
    1,    1,    1,    2,   12,   12,   11,    8,   13,    9,
   13,   12,   10,    9,    8,   12,   11,    9,    8,    7,
   11,   10,   12,   11,    6,    5,    4,    3,    2,    3,
    3,    2,    1,    1,    1,    1,    1,    1,    0,    3,
    2,    4,    4,    3,    2,    6,    6,    3,    2,    5,
    3,    5,    3,    2,    9,    9,    8,    7,    6,    5,
    4,    3,    8,    8,    7,    6,    5,    4,    3,    2,
    4,    2,    4,    2,    4,    2,    0,    3,    2,    1,
    1,    1,    1,    1,    2,    1,    0,    2,    2,   12,
   12,   11,    8,   13,    9,   13,   12,   10,    9,    8,
   12,   11,    9,    8,    7,   11,   10,   12,   11,    6,
    5,    4,    3,    2,   14,   14,   14,   14,   13,   13,
   12,   11,   10,    9,    8,    7,    6,    5,    4,    3,
   13,   13,   13,   13,   12,   12,   11,   10,    9,    8,
    7,    6,    5,    4,    3,    2,    4,    2,    4,    2,
    4,    2,    4,    2,    1,    1,    6,    4,    3,    6,
    4,    3,    5,
};
final static short yydefred[] = {                         0,
    0,    5,    0,    0,    6,    6,    6,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   15,   16,    4,
    0,    0,    9,   10,   11,   12,   13,   14,    0,    0,
  146,  151,  148,    0,    0,    0,    0,    0,    0,  147,
  149,  150,    3,    2,    1,  239,    0,  255,    0,   38,
    0,  259,    0,  280,    0,  356,    0,  153,    0,   86,
    0,    0,    0,  142,    8,    7,   21,   23,    0,   41,
   42,  264,    0,    0,    0,    0,  296,    0,    0,  287,
  290,  292,  294,  293,  282,  291,  286,  287,  284,  362,
  287,  358,  364,  287,  360,  238,    0,    0,  172,  173,
  171,    0,    0,    0,  170,    0,    0,    0,    0,  166,
  254,    0,   37,    0,  258,    0,  279,    0,  355,    0,
  372,  366,  369,  365,    0,  154,    0,  145,    0,    0,
    0,    0,  263,    6,  261,  272,    0,  340,    0,  324,
    0,    0,  295,    0,    0,    0,    0,  174,  175,  237,
    0,    0,    0,    0,  207,  209,  211,  213,  212,  180,
  210,  207,  177,  242,  243,  244,  245,  246,  247,  248,
    0,    0,    0,    0,    0,    0,    0,  253,  252,   35,
    0,    0,    0,    0,  278,    0,  354,    0,  371,  368,
    0,  144,  143,  141,   22,   40,    0,    0,   39,   45,
   46,   47,    0,   48,   49,   50,   51,   52,   53,   54,
   55,    0,    0,    0,    0,    0,    0,  271,    0,  339,
    0,  323,    0,  299,  298,  281,    0,  285,  283,  361,
  357,  363,  359,  236,    0,  206,    0,  214,    0,    0,
  160,    0,  161,    0,  241,    0,  167,  164,  168,  165,
  162,  158,  163,  159,   32,    0,  139,  138,   34,    0,
    0,    0,  277,    0,  353,   19,    0,   17,    0,  373,
    0,   76,    0,  137,    0,   44,   43,   85,    0,    0,
    0,    0,   97,  100,  102,  104,  103,  108,   88,  101,
   97,   90,   97,   92,   97,   94,  262,  260,  270,    0,
  338,    0,  322,    0,  288,  235,  249,    0,  205,    0,
  181,  179,    0,  178,  176,   29,   26,   31,    0,   36,
    0,  257,  256,  276,    0,   18,  352,    0,  370,  367,
   75,    0,  136,    0,   84,   42,   82,  133,    0,  107,
  105,    0,    0,    0,    0,  269,    0,  337,    0,  321,
    0,    0,  230,    0,  204,    0,  208,   28,   25,   33,
    0,  275,    0,  351,    0,   74,    0,  135,  134,    0,
  132,    0,   87,    0,   89,   95,   91,   96,   93,  268,
    0,  336,    0,  320,  287,    0,  225,    0,    0,  229,
    0,  218,  203,    0,   30,    0,  274,  273,  350,    0,
   73,    0,   83,   81,  131,    0,   99,   98,  267,    0,
  335,    0,    0,  315,    0,  224,    0,  220,  250,  228,
  249,    0,  202,  207,    0,   27,   24,  349,    0,   72,
   42,    0,  130,    0,  266,  265,  334,    0,  310,    0,
  314,    0,  303,  223,  249,    0,    0,  232,    0,    0,
  197,    0,  348,    0,    0,   71,    0,  129,   97,    0,
  333,    0,  309,    0,  305,  313,  287,    0,    0,  234,
    0,  227,    0,  231,  217,  192,    0,  196,    0,  185,
  347,    0,    0,   66,    0,   70,    0,   59,    0,  124,
    0,  332,    0,  308,  287,    0,    0,  317,    0,  222,
    0,  233,  216,  226,  215,  191,    0,  187,  195,  207,
    0,  345,    0,  346,    0,   65,    0,   61,    0,   69,
   42,    0,  119,    0,  123,    0,  112,  331,    0,    0,
    0,  319,    0,  312,    0,  316,  302,  221,  219,  190,
  207,    0,    0,  199,    0,  344,  341,  343,  342,   64,
   42,    0,    0,    0,   78,    0,  118,    0,  114,  122,
   97,    0,  329,    0,  330,    0,  307,    0,  318,  301,
  311,  300,    0,  201,    0,  194,    0,  198,  184,    0,
   80,    0,    0,   68,    0,   77,   56,  117,   97,    0,
    0,  128,    0,  328,  325,  327,  326,  306,  304,  189,
    0,  200,  183,  193,  182,   63,    0,   79,    0,   67,
    0,    0,  126,    0,  121,    0,  127,  109,  188,  186,
   62,   60,   57,   58,  116,    0,  125,  110,  120,  111,
  115,  113,
};
final static short yydgoto[] = {                          3,
    4,    8,   22,   23,   24,  200,  201,  202,   28,   29,
  269,   69,   30,  183,  132,  203,   81,  101,  206,   82,
  208,  286,  287,  288,  102,  212,   35,   36,  342,  374,
   37,   38,   39,  290,  143,  105,  106,   63,   64,   40,
   83,   84,  107,  108,  109,  110,  239,  313,  161,  352,
  173,  144,  227,   86,  125,
};
final static short yysindex[] = {                      -223,
 -205,    0,    0, -220,    0,    0,    0, 1129, 1156, 1079,
   47,   58,  -22,  185,  387,  403,  146,    0,    0,    0,
 -187, -219,    0,    0,    0,    0,    0,    0,   20, -163,
    0,    0,    0,  -32,  281, 1799, 1527, 1546, 1560,    0,
    0,    0,    0,    0,    0,    0, -186,    0, -233,    0,
  498,    0, -171,    0, -153,    0,  145,    0,   22,    0,
 -117, -230, -185,    0,    0,    0,    0,    0, -134,    0,
    0,    0, 1096,  503,  504,  535,    0, -160, -199,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, -106,  616,    0,    0,
    0, -129, 1812, 1823,    0,  -90,  771,  -97,  -87,    0,
    0,  -79,    0,  411,    0,  643,    0,  -13,    0, -169,
    0,    0,    0,    0,   72,    0,  552,    0, -162, -187,
  -50,  722,    0,    0,    0,    0,    1,    0,  148,    0,
   91,  347,    0, 1654,  480, 1264, 1278,    0,    0,    0,
  351,  540,  220,  -88,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 -164, -115,  273,  -68,   13,   56,   68,    0,    0,    0,
 -168,  410,  323,  356,    0,    2,    0,  -52,    0,    0,
   30,    0,    0,    0,    0,    0,  544,  545,    0,    0,
    0,    0, -181,    0,    0,    0,    0,    0,    0,    0,
    0,  697, 1747, 1760, 1773, 1786, 1112,    0,   48,    0,
  -33,    0,  116,    0,    0,    0,  -43,    0,    0,    0,
    0,    0,    0,    0, 1715,    0,  325,    0,  585, 1363,
    0,  771,    0,  771,    0,  552,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  469,    0,    0,    0,    7,
  549,  311,    0,  548,    0,    0,  -47,    0, -172,    0,
  349,    0,  375,    0,  381,    0,    0,    0,  518,  550,
  220, -160,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  103,
    0,  156,    0,  718,    0,    0,    0,  -91,    0,  352,
    0,    0,   17,    0,    0,    0,    0,    0,  591,    0,
  355,    0,    0,    0,  495,    0,    0,  497,    0,    0,
    0,  358,    0,  233,    0,    0,    0,    0,  417,    0,
    0, 1574, 1588,  786, 1176,    0,  556,    0,  -60,    0,
 1608, 1425,    0,  395,    0,  802,    0,    0,    0,    0,
  122,    0,  383,    0,  382,    0,  806,    0,    0,  754,
    0,  414,    0,  -14,    0,    0,    0,    0,    0,    0,
  604,    0,  607,    0,    0,   -3,    0,  649,   27,    0,
 1722,    0,    0, 1671,    0,  610,    0,    0,    0,  476,
    0,  970,    0,    0,    0,  821,    0,    0,    0,  433,
    0,  551, 1298,    0,  651,    0, 1736,    0,    0,    0,
    0,   51,    0,    0,   52,    0,    0,    0, -118,    0,
    0,   60,    0, 1480,    0,    0,    0,  501,    0,  676,
    0, 1622,    0,    0,    0,   76, 1439,    0,  173, 1377,
    0,  684,    0, -108,  986,    0,  707,    0,    0,  120,
    0,  162,    0, 1641,    0,    0,    0,  149, 1446,    0,
  530,    0,  554,    0,    0,    0,  721,    0, 1685,    0,
    0,  207,  226,    0,  277,    0, 1003,    0, 1196,    0,
  738,    0,   77,    0,    0,  172, 1312,    0,  583,    0,
  611,    0,    0,    0,    0,    0, 1701,    0,    0,    0,
  179,    0,  445,    0,  452,    0, 1019,    0,   80,    0,
    0,  190,    0,  746,    0, 1494,    0,    0,  227,  337,
 1332,    0,  619,    0,  633,    0,    0,    0,    0,    0,
    0,  216, 1394,    0,  671,    0,    0,    0,    0,    0,
    0,  219,  629, 1035,    0,  705,    0, 1513,    0,    0,
    0,  228,    0,  459,    0,  460,    0,  726,    0,    0,
    0,    0, 1408,    0,  739,    0,  748,    0,    0, 1052,
    0,  107,   88,    0,  254,    0,    0,    0,    0,  271,
 1210,    0,  758,    0,    0,    0,    0,    0,    0,    0,
  772,    0,    0,    0,    0,    0,  773,    0,  111,    0,
  209, 1230,    0,  774,    0,  788,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  801,    0,    0,    0,    0,
    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  275,    0,    0,    0,    0,    0,  312,    0,
    0,    0,    0,    0,    0,    0,    0, 1244,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  819,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  861,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  690,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1346,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  899,    0,  937,    0,  461,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  317,  324,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1460,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,
};
final static short yygindex[] = {                         0,
    0,   25,  405,    0, -197,   31,   35,   42,    0, -103,
 -284,    0,    0,  240, -311, -251,   -8,    4,    0,   -2,
    0, -110,  141,  158,  -51,   64,    0,  348, -276, -147,
  361,  514,  483,    0,  230,  -30,  -45,    0,  424,    0,
   39,   45,  898,  -83,  -69,  -11, -159,  -94,    0, -345,
 -111,  -64,   24,    0,  368,
};
final static int YYTABLESIZE=2107;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         31,
   31,   31,  240,  118,  184,   33,   33,   33,  160,  163,
  182,   32,   32,   32,  343,  127,  344,  349,  345,  158,
  158,  209,  111,  145,  370,  128,  146,  337,  124,  147,
    9,   10,    1,  159,  159,    6,   65,  308,   25,   25,
   25,  116,   26,   26,   26,    2,   41,   41,   41,   27,
   27,   27,   42,   42,   42,  112,   58,  129,   66,   85,
   89,   92,   95,    7,   31,  289,  292,  294,  296,   96,
   33,   34,   34,   34,  276,  447,   32,   60,    5,   15,
   16,   62,   97,  327,  115,  219,  187,  255,   61,  223,
  130,  241,   70,  192,  156,  156,  277,   97,  193,  469,
  157,  157,  117,   25,   97,  328,   98,   26,  256,   99,
  100,   41,   15,   16,   27,   97,  142,   42,  188,  455,
   71,   98,  238,  204,   99,  100,  150,  246,   98,  207,
   98,   99,  100,   99,  100,  205,   34,  453,  126,   98,
  243,  131,   99,  100,  151,  252,  254,  481,   15,   16,
  432,   97,  317,   97,  389,  158,  158,  182,  217,  454,
  124,  176,  248,  250,  353,  164,   59,   58,  209,  159,
  159,  177,  262,  171,  172,   98,  178,   98,   99,  100,
   99,  100,  489,  482,  483,  310,  354,  247,  165,  166,
  167,  168,  169,  422,  179,  382,  170,  513,  515,   61,
   97,  171,  172,  265,  284,  284,  284,  284,   31,  554,
  285,  285,  285,  285,   33,  359,  266,  383,  195,  446,
   32,  332,  301,   72,   98,   73,   31,   99,  100,  334,
  156,  156,   33,   50,  305,  522,  157,  157,   32,  580,
  267,  407,  185,  268,  564,  566,   51,   25,  326,  389,
  340,   26,  414,  400,  302,   41,  218,  263,   27,  209,
  186,   42,  318,  408,  450,  552,   15,   16,  249,   97,
  204,  389,  210,   41,  415,   67,  207,  121,  264,   42,
   34,   97,  205,  319,  591,  270,  460,  372,   68,  211,
  122,  209,  427,   98,  357,  123,   99,  100,  122,  425,
  438,  583,   46,  299,  419,   98,  448,  451,   99,  100,
  158,  251,  612,   48,   98,  456,  363,   99,  100,   47,
  413,  300,   98,  253,  159,   99,  100,  189,  449,  452,
   49,  470,  528,  284,  284,  284,  284,  457,  553,  285,
  285,  285,  285,   31,  209,  190,  222,  191,   98,   33,
  543,   99,  100,  471,  429,   32,   15,   16,  346,   97,
   98,  204,  608,   99,  100,  609,  158,  207,  529,  530,
  623,  303,  410,  205,  386,  490,  209,  395,  562,  347,
  159,  573,   31,   98,  511,  156,   99,  100,   33,  304,
   41,  157,  462,  204,   32,  158,   42,  491,  396,  207,
  119,   58,  497,  220,  498,  205,  209,  103,   31,  159,
  590,  348,  542,  120,   33,  103,  221,  492,   59,  210,
   32,  103,   60,  158,  266,  284,  499,  532,  474,   41,
  531,  285,  475,   61,  544,   42,  211,  159,   31,  493,
   52,  156,  209,  209,   33,  555,  204,  157,  267,  533,
   32,  268,  207,  171,  172,   41,  545,   53,  205,  158,
   31,   42,  512,  103,  103,  468,   33,  556,  624,  209,
  156,  574,   32,  159,  581,  266,  157,  135,  204,  213,
  284,  514,  563,  592,  207,   41,  285,  496,  368,  158,
  205,   42,  214,  575,  266,  266,  582,  103,  156,  267,
  321,  103,  268,  159,  157,  593,  369,   41,  204,  610,
  210,  341,   98,   42,  207,   99,  100,  284,  267,  267,
  205,  268,  268,  285,  171,  172,  613,  211,  245,  104,
  140,  611,  516,  103,  156,  517,  518,  104,   15,   16,
  157,   97,  210,  104,  204,  204,   74,   75,  614,  284,
  207,  207,  140,  194,  519,  285,  205,  205,  271,  211,
  213,  213,  213,  213,  156,   98,  322,   20,   99,  100,
  157,  204,  106,  214,  214,  214,  214,  207,  259,  297,
  309,    0,  284,  205,  323,  104,  104,    0,  285,   20,
   15,   16,  565,   97,  106,  210,  260,  103,  261,  103,
  103,  297,  224,  284,  329,  266,  234,  355,  235,  285,
  360,    0,  211,  366,  216,  225,    0,   98,    0,  104,
   99,  100,  330,  104,   97,  356,  213,  210,  361,  267,
  331,  367,  268,  103,    0,  103,  333,  399,  397,  214,
   15,   16,   54,   97,  211,  215,   15,   16,   98,   97,
  390,   99,  100,  391,  392,  104,  398,  210,   56,   55,
  165,  166,  167,  168,  169,  257,  180,   98,  170,  405,
   99,  100,  371,   98,  211,   57,   99,  100,  258,    0,
   18,   19,   15,   16,  181,   97,    0,  406,  435,  213,
  213,  213,  213,  210,  210,  216,  216,  216,  216,  103,
  546,    0,  214,  214,  214,  214,  436,  548,    0,   98,
  211,  211,   99,  100,  594,  596,  240,  213,  547,  104,
  210,  104,  104,    0,  316,  549,  215,  215,  215,  215,
  214,  428,  595,  597,  240,  228,   76,  211,   18,   19,
   12,   15,   16,   77,   97,   15,   16,   78,   79,  213,
  362,    0,  364,  113,  103,  104,  461,  104,  136,  138,
  103,  216,  214,  154,  229,  365,   15,   16,   98,   97,
  114,   99,  100,  335,  197,  137,  139,    0,   12,   13,
  198,  213,   14,   15,   16,  502,   17,   18,   19,  503,
  140,    0,  215,   98,  214,  236,   99,  100,  103,  272,
  274,  336,  213,  324,  320,  338,  437,  141,   21,  504,
  103,  380,  237,  505,    0,  214,  273,  275,   18,   19,
  325,  104,  339,    0,  216,  216,  216,  216,  381,  165,
  166,  167,  168,  169,  213,    0,  213,  170,  536,  103,
  311,  152,  537,  171,  172,   12,  358,  214,  153,  214,
   15,   16,  216,  154,    0,  215,  215,  215,  215,  409,
   18,   19,  411,    0,  213,  426,  538,  103,    0,  312,
  539,    0,  154,  213,  569,  412,  104,  214,  570,   18,
   19,    0,  104,  215,  216,  197,  214,    0,  571,   12,
   13,  198,  572,   14,   15,   16,    0,   17,   18,   19,
  213,  213,    0,  103,  416,  213,  441,  417,  418,  442,
  443,  148,  149,  214,  214,  215,  216,    0,  214,   21,
  104,  165,  166,  167,  168,  169,  578,  213,    0,  170,
  579,  463,  104,  103,  464,  465,    0,  216,  213,  478,
  214,    0,  479,  480,    0,  152,  152,  215,  152,    0,
  152,  214,  278,  152,  279,  152,  152,  152,  152,  213,
  586,  104,  486,  152,  587,  487,  488,  152,  215,  216,
    0,  216,  214,  350,  152,  351,  506,  196,  197,  507,
  508,  598,   12,   13,  198,  599,   14,   15,   16,  104,
   17,   18,   19,  525,  602,    0,  526,  527,  603,  216,
  215,  557,  215,  604,  558,  559,  199,  605,  216,  403,
  197,    0,   21,  617,   12,   13,  198,  618,   14,   15,
   16,    0,   17,   18,   19,  104,    0,  619,  621,  627,
  215,  620,  622,  628,    0,  216,  216,    0,  404,  215,
  216,  376,  280,  629,   21,    0,   12,  630,  198,  281,
    0,   15,   16,  282,   79,  104,  631,  393,    0,  394,
  632,  401,  216,  402,  174,  175,  215,  215,  242,  244,
  377,  215,    0,  216,  169,  169,  433,  169,  434,  169,
    0,    0,  169,    0,  169,  169,  169,  169,    0,    0,
    0,    0,  169,  215,  216,    0,  169,  169,  169,  169,
  169,  169,    0,  169,  215,  169,    0,    0,    0,    0,
  169,  169,  169,  169,    0,    0,  157,  157,    0,  157,
    0,  157,    0,    0,  157,  215,  157,  157,  157,  157,
    0,    0,    0,    0,  157,    0,    0,    0,  157,  157,
  157,  157,  157,  157,    0,  157,    0,  157,    0,    0,
    0,    0,  157,  157,  155,  155,    0,  155,    0,  155,
    0,    0,  155,    0,  155,  155,  155,  155,    0,    0,
    0,    0,  155,    0,    0,    0,  155,  155,  155,  155,
  155,  155,    0,  155,    0,  155,    0,    0,    0,    0,
  155,  155,  156,  156,    0,  156,    0,  156,    0,    0,
  156,    0,  156,  156,  156,  156,    0,    0,    0,    0,
  156,    0,    0,    0,  156,  156,  156,  156,  156,  156,
    0,  156,    0,  156,    0,  430,  197,    0,  156,  156,
   12,   13,  198,    0,   14,   15,   16,    0,   17,   18,
   19,  484,  197,    0,    0,    0,   12,   13,  198,    0,
   14,   15,   16,  431,   17,   18,   19,    0,  520,  197,
   21,    0,    0,   12,   13,  198,    0,   14,   15,   16,
  485,   17,   18,   19,  550,  197,   21,    0,    0,   12,
   13,  198,    0,   14,   15,   16,  521,   17,   18,   19,
  584,  197,    0,   21,    0,   12,   13,  198,    0,   14,
   15,   16,  551,   17,   18,   19,    0,  606,  197,   21,
    0,    0,   12,   13,  198,    0,   14,   15,   16,  585,
   17,   18,   19,    0,    0,   21,    0,    0,    0,    0,
    0,    0,    0,    0,   44,   11,  607,    0,    0,   12,
   13,    0,   21,   14,   15,   16,    0,   17,   18,   19,
    0,  133,   11,    0,    0,    0,   12,   13,    0,    0,
   14,   15,   16,   45,   17,   18,   19,  297,   11,   21,
    0,    0,   12,   13,    0,    0,   14,   15,   16,  134,
   17,   18,   19,    0,    0,   11,   21,    0,    0,   12,
   13,    0,    0,   14,   15,   16,  298,   17,   18,   19,
    0,    0,   21,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   11,   20,    0,    0,   12,   13,    0,   21,
   14,   15,   16,    0,   17,   18,   19,    0,    0,    0,
    0,  378,  280,    0,    0,    0,   12,    0,  198,  281,
   43,   15,   16,  282,   79,    0,   21,    0,    0,    0,
    0,  523,  280,    0,    0,    0,   12,    0,  198,  281,
  379,   15,   16,  282,   79,  615,  280,    0,    0,    0,
   12,    0,  198,  281,    0,   15,   16,  282,   79,    0,
  524,    0,    0,    0,    0,  625,  280,    0,    0,    0,
   12,    0,  198,  281,  616,   15,   16,  282,   79,  297,
  297,    0,    0,    0,  297,    0,    0,  297,    0,  297,
  297,  297,  297,    0,  626,    0,    0,    0,    0,  230,
   76,  297,    0,    0,   12,    0,    0,   77,  297,   15,
   16,   78,   79,  232,   76,    0,    0,    0,   12,    0,
    0,   77,    0,   15,   16,   78,   79,    0,  231,    0,
    0,    0,    0,  439,   76,    0,    0,    0,   12,    0,
    0,   77,  233,   15,   16,   78,   79,  534,   76,    0,
    0,    0,   12,    0,    0,   77,    0,   15,   16,   78,
   79,    0,  440,    0,    0,    0,    0,  567,   76,    0,
    0,    0,   12,    0,    0,   77,  535,   15,   16,   78,
   79,  289,  289,    0,    0,    0,  289,    0,    0,  289,
    0,  289,  289,  289,  289,    0,  568,    0,  314,  152,
    0,    0,    0,   12,    0,    0,  153,    0,   15,   16,
  289,  154,  476,  152,    0,    0,    0,   12,    0,    0,
  153,    0,   15,   16,    0,  154,    0,  315,    0,  576,
  152,    0,    0,    0,   12,    0,    0,  153,    0,   15,
   16,  477,  154,  600,  152,    0,    0,    0,   12,    0,
    0,  153,    0,   15,   16,    0,  154,    0,  577,    0,
  387,   11,    0,    0,    0,   12,    0,    0,    0,    0,
   15,   16,  601,   17,  472,   11,    0,    0,    0,   12,
    0,  500,   11,    0,   15,   16,   12,   17,    0,  388,
    0,   15,   16,    0,   17,  251,  251,    0,    0,    0,
  251,    0,    0,  473,    0,  251,  251,    0,  251,    0,
  501,    0,    0,    0,    0,  458,  280,    0,    0,    0,
   12,    0,  198,  281,  251,   15,   16,  282,   79,  560,
  280,    0,    0,    0,   12,    0,  198,  281,    0,   15,
   16,  282,   79,  459,    0,    0,    0,    0,  588,  280,
    0,    0,    0,   12,    0,  198,  281,  561,   15,   16,
  282,   79,   87,   76,    0,    0,    0,   12,    0,    0,
   77,    0,   15,   16,   78,   79,  589,    0,    0,    0,
    0,   90,   76,    0,    0,    0,   12,    0,    0,   77,
   88,   15,   16,   78,   79,   93,   76,    0,    0,    0,
   12,    0,    0,   77,    0,   15,   16,   78,   79,   91,
  280,    0,    0,    0,   12,    0,  198,  281,    0,   15,
   16,  282,   79,   94,  280,    0,    0,    0,   12,    0,
  198,  281,    0,   15,   16,  282,   79,    0,  373,    0,
    0,    0,    0,  384,   76,    0,    0,    0,   12,    0,
    0,   77,  375,   15,   16,   78,   79,  466,   76,    0,
    0,    0,   12,    0,    0,   77,    0,   15,   16,   78,
   79,  385,    0,    0,    0,    0,  494,   76,    0,    0,
    0,   12,    0,    0,   77,  467,   15,   16,   78,   79,
   76,    0,    0,    0,   12,    0,    0,   77,    0,   15,
   16,   78,   79,    0,  495,    0,  423,  152,    0,    0,
    0,   12,    0,    0,  153,    0,   15,   16,  226,  154,
  509,  152,    0,    0,    0,   12,    0,    0,  153,    0,
   15,   16,    0,  154,  424,    0,  540,  152,    0,    0,
    0,   12,    0,    0,  153,    0,   15,   16,  510,  154,
  306,   11,    0,    0,    0,   12,    0,  420,   11,    0,
   15,   16,   12,   17,  541,    0,    0,   15,   16,    0,
   17,  444,   11,    0,    0,    0,   12,    0,  307,    0,
    0,   15,   16,  280,   17,  421,    0,   12,    0,  198,
  281,    0,   15,   16,  282,   79,  280,    0,    0,  445,
   12,    0,  198,  281,    0,   15,   16,  282,   79,  280,
  283,    0,    0,   12,    0,  198,  281,    0,   15,   16,
  282,   79,  280,  291,    0,    0,   12,    0,  198,  281,
    0,   15,   16,  282,   79,   76,  293,    0,    0,   12,
    0,    0,   77,    0,   15,   16,   78,   79,  152,  295,
    0,    0,   12,    0,    0,  153,    0,   15,   16,  152,
  154,    0,   80,   12,    0,    0,  153,    0,   15,   16,
    0,  154,    0,    0,    0,  155,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  162,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          8,
    9,   10,  162,   55,  116,    8,    9,   10,  103,  104,
  114,    8,    9,   10,  291,   61,  293,  302,  295,  103,
  104,  132,  256,   88,  336,  256,   91,  279,   59,   94,
    6,    7,  256,  103,  104,  256,  256,  235,    8,    9,
   10,   53,    8,    9,   10,  269,    8,    9,   10,    8,
    9,   10,    8,    9,   10,  289,  256,  288,  278,   36,
   37,   38,   39,  284,   73,  213,  214,  215,  216,  256,
   73,    8,    9,   10,  256,  421,   73,  277,  284,  266,
  267,  269,  269,  256,  256,  137,  256,  256,  288,  141,
  276,  256,  256,  256,  103,  104,  278,  269,  129,  445,
  103,  104,  256,   73,  269,  278,  293,   73,  277,  296,
  297,   73,  266,  267,   73,  269,  277,   73,  288,  431,
  284,  293,  153,  132,  296,  297,  256,  173,  293,  132,
  293,  296,  297,  296,  297,  132,   73,  256,  256,  293,
  256,  276,  296,  297,  274,  176,  177,  256,  266,  267,
  402,  269,  256,  269,  352,  239,  240,  261,  134,  278,
  191,  259,  174,  175,  256,  256,  273,  256,  279,  239,
  240,  259,  184,  292,  293,  293,  256,  293,  296,  297,
  296,  297,  459,  292,  293,  237,  278,  256,  279,  280,
  281,  282,  283,  391,  274,  256,  287,  482,  483,  288,
  269,  292,  293,  256,  213,  214,  215,  216,  217,  521,
  213,  214,  215,  216,  217,  319,  269,  278,  269,  417,
  217,  273,  256,  256,  293,  258,  235,  296,  297,  275,
  239,  240,  235,  256,  278,  487,  239,  240,  235,  551,
  293,  256,  256,  296,  529,  530,  269,  217,  296,  447,
  281,  217,  256,  365,  288,  217,  256,  256,  217,  370,
  274,  217,  256,  278,  424,  517,  266,  267,  256,  269,
  279,  469,  132,  235,  278,  256,  279,  256,  277,  235,
  217,  269,  279,  277,  561,  256,  434,  339,  269,  132,
  269,  402,  396,  293,  278,  274,  296,  297,  269,  394,
  412,  553,  256,  256,  278,  293,  256,  256,  296,  297,
  394,  256,  589,  256,  293,  256,  325,  296,  297,  273,
  385,  274,  293,  256,  394,  296,  297,  256,  278,  278,
  273,  256,  256,  342,  343,  344,  345,  278,  259,  342,
  343,  344,  345,  352,  455,  274,  256,  276,  293,  352,
  510,  296,  297,  278,  400,  352,  266,  267,  256,  269,
  293,  370,  256,  296,  297,  278,  450,  370,  292,  293,
  260,  256,  381,  370,  351,  256,  487,  256,  526,  277,
  450,  541,  391,  293,  479,  394,  296,  297,  391,  274,
  352,  394,  438,  402,  391,  479,  352,  278,  277,  402,
  256,  256,  467,  256,  256,  402,  517,   47,  417,  479,
  558,  256,  507,  269,  417,   55,  269,  256,  273,  279,
  417,   61,  277,  507,  269,  434,  278,  256,  256,  391,
  495,  434,  260,  288,  256,  391,  279,  507,  447,  278,
  256,  450,  553,  554,  447,  256,  455,  450,  293,  278,
  447,  296,  455,  292,  293,  417,  278,  273,  455,  543,
  469,  417,  256,  103,  104,  442,  469,  278,  260,  580,
  479,  256,  469,  543,  256,  269,  479,   73,  487,  132,
  489,  256,  256,  256,  487,  447,  489,  464,  256,  573,
  487,  447,  132,  278,  269,  269,  278,  137,  507,  293,
  261,  141,  296,  573,  507,  278,  274,  469,  517,  256,
  370,  282,  293,  469,  517,  296,  297,  526,  293,  293,
  517,  296,  296,  526,  292,  293,  256,  370,  256,   47,
  256,  278,  256,  173,  543,  259,  260,   55,  266,  267,
  543,  269,  402,   61,  553,  554,  266,  267,  278,  558,
  553,  554,  278,  130,  278,  558,  553,  554,  191,  402,
  213,  214,  215,  216,  573,  293,  256,  256,  296,  297,
  573,  580,  256,  213,  214,  215,  216,  580,  256,  256,
  256,   -1,  591,  580,  274,  103,  104,   -1,  591,  278,
  266,  267,  256,  269,  278,  455,  274,  237,  276,  239,
  240,  278,  256,  612,  256,  269,  256,  256,  258,  612,
  256,   -1,  455,  256,  132,  269,   -1,  293,   -1,  137,
  296,  297,  274,  141,  269,  274,  279,  487,  274,  293,
  256,  274,  296,  273,   -1,  275,  256,  256,  256,  279,
  266,  267,  256,  269,  487,  132,  266,  267,  293,  269,
  256,  296,  297,  259,  260,  173,  274,  517,  256,  273,
  279,  280,  281,  282,  283,  256,  256,  293,  287,  256,
  296,  297,  256,  293,  517,  273,  296,  297,  269,   -1,
  270,  271,  266,  267,  274,  269,   -1,  274,  256,  342,
  343,  344,  345,  553,  554,  213,  214,  215,  216,  339,
  256,   -1,  342,  343,  344,  345,  274,  256,   -1,  293,
  553,  554,  296,  297,  256,  256,  256,  370,  274,  237,
  580,  239,  240,   -1,  256,  274,  213,  214,  215,  216,
  370,  256,  274,  274,  274,  256,  257,  580,  270,  271,
  261,  266,  267,  264,  269,  266,  267,  268,  269,  402,
  256,   -1,  256,  256,  394,  273,  256,  275,  256,  256,
  400,  279,  402,  269,  285,  269,  266,  267,  293,  269,
  273,  296,  297,  256,  257,  273,  273,   -1,  261,  262,
  263,  434,  265,  266,  267,  256,  269,  270,  271,  260,
  256,   -1,  279,  293,  434,  256,  296,  297,  438,  256,
  256,  284,  455,  256,  256,  256,  256,  273,  291,  256,
  450,  256,  273,  260,   -1,  455,  273,  273,  270,  271,
  273,  339,  273,   -1,  342,  343,  344,  345,  273,  279,
  280,  281,  282,  283,  487,   -1,  489,  287,  256,  479,
  256,  257,  260,  292,  293,  261,  256,  487,  264,  489,
  266,  267,  370,  269,   -1,  342,  343,  344,  345,  256,
  270,  271,  256,   -1,  517,  256,  256,  507,   -1,  285,
  260,   -1,  269,  526,  256,  269,  394,  517,  260,  270,
  271,   -1,  400,  370,  402,  257,  526,   -1,  256,  261,
  262,  263,  260,  265,  266,  267,   -1,  269,  270,  271,
  553,  554,   -1,  543,  256,  558,  256,  259,  260,  259,
  260,  296,  297,  553,  554,  402,  434,   -1,  558,  291,
  438,  279,  280,  281,  282,  283,  256,  580,   -1,  287,
  260,  256,  450,  573,  259,  260,   -1,  455,  591,  256,
  580,   -1,  259,  260,   -1,  256,  257,  434,  259,   -1,
  261,  591,  256,  264,  258,  266,  267,  268,  269,  612,
  256,  479,  256,  274,  260,  259,  260,  278,  455,  487,
   -1,  489,  612,  256,  285,  258,  256,  256,  257,  259,
  260,  256,  261,  262,  263,  260,  265,  266,  267,  507,
  269,  270,  271,  256,  256,   -1,  259,  260,  260,  517,
  487,  256,  489,  256,  259,  260,  285,  260,  526,  256,
  257,   -1,  291,  256,  261,  262,  263,  260,  265,  266,
  267,   -1,  269,  270,  271,  543,   -1,  256,  256,  256,
  517,  260,  260,  260,   -1,  553,  554,   -1,  285,  526,
  558,  256,  257,  256,  291,   -1,  261,  260,  263,  264,
   -1,  266,  267,  268,  269,  573,  256,  256,   -1,  258,
  260,  256,  580,  258,  294,  295,  553,  554,  171,  172,
  285,  558,   -1,  591,  256,  257,  256,  259,  258,  261,
   -1,   -1,  264,   -1,  266,  267,  268,  269,   -1,   -1,
   -1,   -1,  274,  580,  612,   -1,  278,  279,  280,  281,
  282,  283,   -1,  285,  591,  287,   -1,   -1,   -1,   -1,
  292,  293,  294,  295,   -1,   -1,  256,  257,   -1,  259,
   -1,  261,   -1,   -1,  264,  612,  266,  267,  268,  269,
   -1,   -1,   -1,   -1,  274,   -1,   -1,   -1,  278,  279,
  280,  281,  282,  283,   -1,  285,   -1,  287,   -1,   -1,
   -1,   -1,  292,  293,  256,  257,   -1,  259,   -1,  261,
   -1,   -1,  264,   -1,  266,  267,  268,  269,   -1,   -1,
   -1,   -1,  274,   -1,   -1,   -1,  278,  279,  280,  281,
  282,  283,   -1,  285,   -1,  287,   -1,   -1,   -1,   -1,
  292,  293,  256,  257,   -1,  259,   -1,  261,   -1,   -1,
  264,   -1,  266,  267,  268,  269,   -1,   -1,   -1,   -1,
  274,   -1,   -1,   -1,  278,  279,  280,  281,  282,  283,
   -1,  285,   -1,  287,   -1,  256,  257,   -1,  292,  293,
  261,  262,  263,   -1,  265,  266,  267,   -1,  269,  270,
  271,  256,  257,   -1,   -1,   -1,  261,  262,  263,   -1,
  265,  266,  267,  284,  269,  270,  271,   -1,  256,  257,
  291,   -1,   -1,  261,  262,  263,   -1,  265,  266,  267,
  285,  269,  270,  271,  256,  257,  291,   -1,   -1,  261,
  262,  263,   -1,  265,  266,  267,  284,  269,  270,  271,
  256,  257,   -1,  291,   -1,  261,  262,  263,   -1,  265,
  266,  267,  284,  269,  270,  271,   -1,  256,  257,  291,
   -1,   -1,  261,  262,  263,   -1,  265,  266,  267,  285,
  269,  270,  271,   -1,   -1,  291,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,  285,   -1,   -1,  261,
  262,   -1,  291,  265,  266,  267,   -1,  269,  270,  271,
   -1,  256,  257,   -1,   -1,   -1,  261,  262,   -1,   -1,
  265,  266,  267,  285,  269,  270,  271,  256,  257,  291,
   -1,   -1,  261,  262,   -1,   -1,  265,  266,  267,  284,
  269,  270,  271,   -1,   -1,  257,  291,   -1,   -1,  261,
  262,   -1,   -1,  265,  266,  267,  285,  269,  270,  271,
   -1,   -1,  291,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  285,   -1,   -1,  261,  262,   -1,  291,
  265,  266,  267,   -1,  269,  270,  271,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,
  285,  266,  267,  268,  269,   -1,  291,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,
  285,  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,  263,  264,   -1,  266,  267,  268,  269,   -1,
  285,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,  263,  264,  285,  266,  267,  268,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,  266,
  267,  268,  269,   -1,  285,   -1,   -1,   -1,   -1,  256,
  257,  278,   -1,   -1,  261,   -1,   -1,  264,  285,  266,
  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
   -1,  264,   -1,  266,  267,  268,  269,   -1,  285,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,
   -1,  264,  285,  266,  267,  268,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,  264,   -1,  266,  267,  268,
  269,   -1,  285,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,  264,  285,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
   -1,  266,  267,  268,  269,   -1,  285,   -1,  256,  257,
   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,  266,  267,
  285,  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  264,   -1,  266,  267,   -1,  269,   -1,  285,   -1,  256,
  257,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,  266,
  267,  285,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
   -1,  264,   -1,  266,  267,   -1,  269,   -1,  285,   -1,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,   -1,   -1,
  266,  267,  285,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,  256,  257,   -1,  266,  267,  261,  269,   -1,  285,
   -1,  266,  267,   -1,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  285,   -1,  266,  267,   -1,  269,   -1,
  285,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,  263,  264,  285,  266,  267,  268,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,  263,  264,   -1,  266,
  267,  268,  269,  284,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,   -1,  263,  264,  284,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  264,   -1,  266,  267,  268,  269,  284,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  284,  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,   -1,  266,  267,  268,  269,  284,
  257,   -1,   -1,   -1,  261,   -1,  263,  264,   -1,  266,
  267,  268,  269,  284,  257,   -1,   -1,   -1,  261,   -1,
  263,  264,   -1,  266,  267,  268,  269,   -1,  285,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,
   -1,  264,  285,  266,  267,  268,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,  264,   -1,  266,  267,  268,
  269,  284,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  284,  266,  267,  268,  269,
  257,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,  266,
  267,  268,  269,   -1,  284,   -1,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,   -1,  266,  267,  285,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,
  266,  267,   -1,  269,  284,   -1,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,   -1,  266,  267,  284,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,  256,  257,   -1,
  266,  267,  261,  269,  284,   -1,   -1,  266,  267,   -1,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,  284,   -1,
   -1,  266,  267,  257,  269,  284,   -1,  261,   -1,  263,
  264,   -1,  266,  267,  268,  269,  257,   -1,   -1,  284,
  261,   -1,  263,  264,   -1,  266,  267,  268,  269,  257,
  284,   -1,   -1,  261,   -1,  263,  264,   -1,  266,  267,
  268,  269,  257,  284,   -1,   -1,  261,   -1,  263,  264,
   -1,  266,  267,  268,  269,  257,  284,   -1,   -1,  261,
   -1,   -1,  264,   -1,  266,  267,  268,  269,  257,  284,
   -1,   -1,  261,   -1,   -1,  264,   -1,  266,  267,  257,
  269,   -1,  284,  261,   -1,   -1,  264,   -1,  266,  267,
   -1,  269,   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  284,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=297;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"IF","THEN","ELSE","END_IF","OUT","FUN","RETURN","BREAK","WHEN",
"WHILE","FOR","CONTINUE","ID","I32","F32","PUNTO","PARENT_A","PARENT_C",
"COMILLA","COMA","DOSPUNTOS","PUNTOCOMA","IGUAL","MAYOR","MENOR","MENORIGUAL",
"MAYORIGUAL","LLAVE_A","LLAVE_C","EXCL","DIST","ASIG","CADENA","COMENT","CONST",
"SUMA","RESTA","MULT","DIV","ENTERO","FLOAT",
};
final static String yyrule[] = {
"$accept : program",
"program : nombre_program LLAVE_A bloque_sentencias LLAVE_C",
"program : nombre_program LLAVE_A bloque_sentencias error",
"program : nombre_program error bloque_sentencias LLAVE_C",
"program : error LLAVE_A bloque_sentencias LLAVE_C",
"nombre_program : ID",
"bloque_sentencias :",
"bloque_sentencias : bloque_sentencias sentencia PUNTOCOMA",
"bloque_sentencias : bloque_sentencias sentencia error",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_decl_datos",
"sentencia_declarativa : sentencia_decl_fun",
"sentencia_declarativa : lista_const",
"sentencia_declarativa : sentencia_when",
"tipo : I32",
"tipo : F32",
"constante_for : ENTERO",
"constante_for : RESTA ENTERO",
"constante_for : ID",
"sentencia_decl_datos : tipo list_var",
"sentencia_decl_datos : tipo error",
"list_var : list_var COMA ID",
"list_var : ID",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro error",
"encabezado_fun : FUN ID PARENT_A parametro error",
"encabezado_fun : FUN ID PARENT_A error",
"encabezado_fun : FUN ID PARENT_A parametro COMA error",
"encabezado_fun : FUN ID error",
"encabezado_fun : FUN error",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun error",
"sentencia_decl_fun : encabezado_fun error",
"cuerpo_fun :",
"cuerpo_fun : cuerpo_fun sentencias_fun PUNTOCOMA",
"cuerpo_fun : cuerpo_fun sentencias_fun error",
"sentencias_fun : sentencia_decl_datos",
"sentencias_fun : sentencia_decl_fun",
"sentencias_fun : lista_const",
"sentencias_fun : asignacion",
"sentencias_fun : llamado_func",
"sentencias_fun : sentencia_if_fun",
"sentencias_fun : sentencia_out",
"sentencias_fun : sentencia_when_fun",
"sentencias_fun : sentencia_for_fun",
"sentencias_fun : sentencia_while_fun",
"sentencias_fun : retorno",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_fun : IF PARENT_A condicion error",
"sentencia_if_fun : IF PARENT_A error",
"sentencia_if_fun : IF error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE sentencias_fun error",
"sentencia_when_fun : encabezado_when THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_when_fun : encabezado_when THEN sentencias_fun",
"sentencia_when_fun : encabezado_when THEN LLAVE_A cuerpo_fun error",
"sentencia_when_fun : encabezado_when THEN error",
"sentencia_when_fun : encabezado_when error",
"etiqueta : ID DOSPUNTOS",
"sentencia_while_fun : encabezado_while_etiqueta LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : encabezado_while_etiqueta sentencias_fun_break",
"sentencia_while_fun : encabezado_while LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : encabezado_while sentencias_fun_break",
"sentencia_for_fun : encabezado_for_etiqueta LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : encabezado_for_etiqueta sentencias_fun_break",
"sentencia_for_fun : encabezado_for LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : encabezado_for sentencias_fun_break",
"sentencia_for_fun : encabezado_for_etiqueta LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : encabezado_for LLAVE_A cuerpo_fun_break error",
"cuerpo_fun_break :",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break PUNTOCOMA",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break error",
"sentencias_fun_break : asignacion",
"sentencias_fun_break : sentencia_if_break_fun",
"sentencias_fun_break : sentencia_out",
"sentencias_fun_break : sentencia_while_fun",
"sentencias_fun_break : sentencia_for_fun",
"sentencias_fun_break : CONTINUE tag",
"sentencias_fun_break : BREAK",
"sentencias_fun_break : BREAK cte",
"sentencias_fun_break : retorno",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break_fun : IF PARENT_A condicion error",
"sentencia_if_break_fun : IF PARENT_A error",
"sentencia_if_break_fun : IF error",
"retorno : RETURN PARENT_A expresion PARENT_C",
"retorno : RETURN PARENT_A expresion error",
"retorno : RETURN PARENT_A error",
"retorno : RETURN error",
"parametro : tipo ID",
"parametro : tipo error",
"lista_const : CONST lista_asignacion",
"lista_asignacion : lista_asignacion COMA asignacion_const",
"lista_asignacion : asignacion_const",
"asignacion_const : ID ASIG cte",
"asignacion_const : ID ASIG error",
"asignacion_const : ID error",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : sentencia_if",
"sentencia_ejecutable : sentencia_out",
"sentencia_ejecutable : sentencia_for",
"sentencia_ejecutable : sentencia_while",
"sentencia_ejecutable : llamado_func",
"asignacion : ID ASIG expresion",
"asignacion : ID error",
"asignacion : ID ASIG error",
"expresion : expresion SUMA termino",
"expresion : expresion RESTA termino",
"expresion : termino",
"expresion : sentencia_for_asig ELSE cte",
"expresion : sentencia_while_asig ELSE cte",
"expresion : expresion SUMA error",
"expresion : expresion RESTA error",
"expresion : sentencia_for_asig ELSE error",
"expresion : sentencia_while_asig ELSE error",
"termino : termino MULT factor",
"termino : termino DIV factor",
"termino : factor",
"termino : termino MULT error",
"termino : termino DIV error",
"factor : ID",
"factor : cte",
"factor : llamado_func",
"cte : ENTERO",
"cte : FLOAT",
"cte : RESTA ENTERO",
"cte : RESTA FLOAT",
"sentencia_for_asig : encabezado_for LLAVE_A bloque_sent_eje_asig LLAVE_C",
"sentencia_for_asig : encabezado_for sent_eje_asig",
"sentencia_for_asig : encabezado_for LLAVE_A bloque_sent_eje_asig error",
"sentencia_while_asig : encabezado_while LLAVE_A bloque_sent_eje_asig LLAVE_C",
"sentencia_while_asig : encabezado_while sent_eje_asig",
"sentencia_while_asig : encabezado_while LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C error",
"sentencia_if_asig : IF PARENT_A condicion error",
"sentencia_if_asig : IF PARENT_A error",
"sentencia_if_asig : IF error",
"bloque_sent_eje_asig :",
"bloque_sent_eje_asig : bloque_sent_eje_asig sent_eje_asig PUNTOCOMA",
"sent_eje_asig : asignacion",
"sent_eje_asig : sentencia_if_asig",
"sent_eje_asig : sentencia_out",
"sent_eje_asig : sentencia_while_asig",
"sent_eje_asig : sentencia_for_asig",
"sent_eje_asig : BREAK cte",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if : IF PARENT_A condicion PARENT_C error",
"sentencia_if : IF PARENT_A condicion error",
"sentencia_if : IF PARENT_A error",
"sentencia_if : IF error",
"condicion : expresion comparacion expresion",
"condicion : expresion comparacion error",
"condicion : expresion error",
"comparacion : IGUAL",
"comparacion : MAYOR",
"comparacion : MENOR",
"comparacion : MENORIGUAL",
"comparacion : MAYORIGUAL",
"comparacion : DIST",
"bloque_ejecutable :",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable PUNTOCOMA",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"sentencia_out : OUT PARENT_A CADENA PARENT_C",
"sentencia_out : OUT PARENT_A CADENA error",
"sentencia_out : OUT PARENT_A error",
"sentencia_out : OUT error",
"encabezado_when : WHEN PARENT_A factor comparacion factor PARENT_C",
"encabezado_when : WHEN PARENT_A factor comparacion factor error",
"encabezado_when : WHEN PARENT_A error",
"encabezado_when : WHEN error",
"sentencia_when : encabezado_when THEN LLAVE_A bloque_sentencias LLAVE_C",
"sentencia_when : encabezado_when THEN sentencia",
"sentencia_when : encabezado_when THEN LLAVE_A bloque_sentencias error",
"sentencia_when : encabezado_when THEN error",
"sentencia_when : encabezado_when error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A error",
"encabezado_while_etiqueta : etiqueta WHILE error",
"encabezado_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C",
"encabezado_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"encabezado_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"encabezado_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"encabezado_while : WHILE PARENT_A condicion PARENT_C error",
"encabezado_while : WHILE PARENT_A condicion error",
"encabezado_while : WHILE PARENT_A error",
"encabezado_while : WHILE error",
"sentencia_while : encabezado_while_etiqueta LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : encabezado_while_etiqueta ejecutables_break_continue",
"sentencia_while : encabezado_while LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : encabezado_while ejecutables_break_continue",
"sentencia_while : encabezado_while LLAVE_A bloque_break_continue error",
"sentencia_while : encabezado_while error",
"bloque_break_continue :",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue PUNTOCOMA",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue",
"ejecutables_break_continue : asignacion",
"ejecutables_break_continue : sentencia_if_break",
"ejecutables_break_continue : sentencia_out",
"ejecutables_break_continue : sentencia_while",
"ejecutables_break_continue : sentencia_for",
"ejecutables_break_continue : CONTINUE tag",
"ejecutables_break_continue : BREAK",
"tag :",
"tag : DOSPUNTOS ID",
"tag : DOSPUNTOS error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion error",
"sentencia_if_break : IF PARENT_A error",
"sentencia_if_break : IF error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A error",
"encabezado_for_etiqueta : etiqueta FOR error",
"encabezado_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C",
"encabezado_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C",
"encabezado_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for error",
"encabezado_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for error",
"encabezado_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"encabezado_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"encabezado_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"encabezado_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion error",
"encabezado_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion error",
"encabezado_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID error",
"encabezado_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA error",
"encabezado_for : FOR PARENT_A ID ASIG constante_for error",
"encabezado_for : FOR PARENT_A ID ASIG error",
"encabezado_for : FOR PARENT_A ID error",
"encabezado_for : FOR PARENT_A error",
"encabezado_for : FOR error",
"sentencia_for : encabezado_for_etiqueta LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : encabezado_for_etiqueta ejecutables_break_continue",
"sentencia_for : encabezado_for LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : encabezado_for ejecutables_break_continue",
"sentencia_for : encabezado_for_etiqueta LLAVE_A bloque_break_continue error",
"sentencia_for : encabezado_for_etiqueta error",
"sentencia_for : encabezado_for LLAVE_A bloque_break_continue error",
"sentencia_for : encabezado_for error",
"param_real : cte",
"param_real : ID",
"llamado_func : ID PARENT_A param_real COMA param_real PARENT_C",
"llamado_func : ID PARENT_A param_real PARENT_C",
"llamado_func : ID PARENT_A PARENT_C",
"llamado_func : ID PARENT_A param_real COMA param_real error",
"llamado_func : ID PARENT_A param_real error",
"llamado_func : ID PARENT_A error",
"llamado_func : ID PARENT_A param_real COMA error",
};

//#line 1432 "gramatica.y"
private NodoControl raiz;
private List<ArbolSintactico> funciones = new ArrayList<ArbolSintactico>();
private static HashMap<Integer,ArrayList<String>> erroresSintacticos = new HashMap<Integer,ArrayList<String>>();
public String ambitoActual = "Global";
private List<String> tipoActual = new ArrayList<String>();
private List<String> etiquetasAct = new ArrayList<String>();
private Stack<Boolean> hayReturn = new Stack<Boolean>();
private Stack<List<ArbolSintactico>> stackContinue = new Stack<List<ArbolSintactico>>();
private Stack<List<String>> stackWhen = new Stack<List<String>>();
void yyerror(String mensaje){
        if (erroresSintacticos.get(AnalizadorLexico.getLineaAct())== null){
                ArrayList<String> mnsj = new ArrayList<String>();
                mnsj.add(mensaje); 
                erroresSintacticos.put(AnalizadorLexico.getLineaAct(), mnsj);
        }
        else{
                erroresSintacticos.get(AnalizadorLexico.getLineaAct()).add(mensaje);
        }
}
void yyerror(String mensaje,int linea){
        if (erroresSintacticos.get(linea)== null){
                ArrayList<String> mnsj = new ArrayList<String>();
                mnsj.add(mensaje); 
                erroresSintacticos.put(linea, mnsj);
        }
        else{
                erroresSintacticos.get(linea).add(mensaje);
        }
}
static HashMap<Integer,ArrayList<String>> getErroresSintacticos(){
        return erroresSintacticos;
}
void chequearRangoI32(String sval){
  String s = "2147483647";
  long l = Long.valueOf(s);
  if(Long.valueOf(sval) > l){
    yyerror("La constante esta fuera de rango");
  }
}

void chequearRangoI32Neg(String sval){
       String s = "2147483648";
        long l = Long.valueOf(s);
        if(Long.valueOf(sval) > l){
                yyerror("La constante esta fuera de rango");
  } 
}

int yylex() throws IOException{
        Token t = AnalizadorLexico.getToken();
        this.yylval = new ParserVal(t.getLexema());
        return t.getId();
}
public NodoControl getRaiz(){
	return raiz;
}
public List<ArbolSintactico> getFuncion(){
        return funciones;
}

void actualizarAmbito(String lex, String amb){
        TablaSimbolos.addAtributo(lex,"Ambito",amb);
}
public String getTipoActual(){
        if(!this.tipoActual.isEmpty()){
                return (this.tipoActual.get(tipoActual.size()-1));
        }
        return null;
}
public void cambiarTipoActual(String f){
        tipoActual.add(f);
}
public void removeTipoActual(){
        if(!this.tipoActual.isEmpty()){
                this.tipoActual.remove(tipoActual.size()-1);
        }
}
public String buscarAmbito(String ambitoActual,String lexema){
        String ambito = ambitoActual;
        while(!TablaSimbolos.existeSimbolo(lexema+"@"+ambito)){
                if(ambito.equals("Global")){
                        //yyerror("La variable " + lexema + " no se encuentra declarada en el ambito " + ambitoActual);
                        ambito = "";
                        break;
                }else{
                        char [] a = ambito.toCharArray();
                        for (int i = a.length;i>=0;i--){
                                if(a[i-1] == '@'){
                                        ambito = ambito.substring(0,i-1);
                                        break;
                                }
                        }
                }
        }
        return ambito;
}
public String calcularFloat(String f){
        int i =0;
	char caracter=' ';
	String digito=""; //parte numerica
	String exponente=""; //parte exponencial	
	while (caracter != 'F') {
                if(i<f.length()){
                      caracter = f.charAt(i);
		        digito+= caracter;
		        i++; 
                }else{
                        return f;
                }
	}
        Double d = Double.parseDouble(digito);
	for (int j=i ; j < (f.length()); j++) {
		caracter = f.charAt(j);
		exponente += caracter;
	}
	Double e = Double.parseDouble(exponente);
	Double numero = Math.pow(d, e);
        return numero.toString();	
}
//#line 1390 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse() throws IOException
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 22 "gramatica.y"
{raiz = new NodoControl("PROGRAMA",(ArbolSintactico)val_peek(1));  TablaSimbolos.removeAtributo(val_peek(3).sval);}
break;
case 2:
//#line 23 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba }");}
break;
case 3:
//#line 24 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba {");}
break;
case 4:
//#line 25 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba el nombre del programa");}
break;
case 6:
//#line 29 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 7:
//#line 30 "gramatica.y"
{yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 8:
//#line 31 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ;"); }
break;
case 9:
//#line 33 "gramatica.y"
{yyval=val_peek(0);}
break;
case 10:
//#line 34 "gramatica.y"
{yyval = val_peek(0);}
break;
case 11:
//#line 36 "gramatica.y"
{yyval= new NodoHoja("Sentencia Declarativa");}
break;
case 12:
//#line 37 "gramatica.y"
{yyval= new NodoHoja("Sentencia Declarativa");}
break;
case 13:
//#line 38 "gramatica.y"
{yyval= new NodoHoja("Sentencia Declarativa");}
break;
case 14:
//#line 39 "gramatica.y"
{yyval=val_peek(0);}
break;
case 15:
//#line 41 "gramatica.y"
{yyval = new NodoHoja("Entero"); ((NodoHoja)yyval).setTipo("Entero");}
break;
case 16:
//#line 42 "gramatica.y"
{yyval = new NodoHoja("Float");((NodoHoja)yyval).setTipo("Float");}
break;
case 19:
//#line 46 "gramatica.y"
{
                        String ambito=buscarAmbito(ambitoActual, val_peek(0).sval);
                        if (!TablaSimbolos.existeSimbolo(val_peek(0).sval+ "@" + ambito)){
                                yyerror("La constante '" + val_peek(0).sval + "' no fue declarada");
                        }
                        else{ 
                                if(!((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso")).equals("Constante")){
                                        yyerror(val_peek(0).sval+" debe ser una constante");
                                }
                                if(!((String)TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Tipo")).equals("Entero")){
                                        yyerror(val_peek(0).sval+" debe ser de tipo entero");
                                }   
                        }
                }
break;
case 20:
//#line 61 "gramatica.y"
{ 
                                        for (String s : ((NodoTipos)val_peek(0)).getList()){
                                                String ambito = ambitoActual;
                                                while(TablaSimbolos.existeSimbolo(s+"@"+ambito)){
                                                        if(ambito.equals("Global")){
                                                                yyerror("La variable " + s + " ya se encuentra declarada en el ambito " + ambitoActual);
                                                                ambito = "";
                                                                break;
                                                        }else{
                                                                char [] a = ambito.toCharArray();
                                                                for (int i = a.length;i>=0;i--){
                                                                        if(a[i-1] == ':'){
                                                                        ambito = ambito.substring(0,i-1);
                                                                        break;
                                                                        }
                                                                }
                                                        }
                                                }  
                                                if(ambito.equals(ambitoActual)){
                                                        if (!stackWhen.empty()){
                                                                List<String> tope=stackWhen.pop();
                                                                tope.add(s+"@"+ambito);
                                                                stackWhen.push(tope);
                                                        }
                                                        TablaSimbolos.addNuevoSimbolo(s+"@"+ambito);
                                                        TablaSimbolos.addAtributo(s+"@"+ambito,"Id",TablaSimbolos.getAtributo(s,"Id"));
                                                        TablaSimbolos.addAtributo(s+"@"+ambito,"Tipo",((ArbolSintactico) val_peek(1)).getTipo());
                                                        TablaSimbolos.addAtributo(s+"@"+ambito,"Linea",AnalizadorLexico.getLineaAct());
                                                        TablaSimbolos.addAtributo(s+"@"+ambito,"Uso","Variable");
                                                        TablaSimbolos.removeAtributo(s);
                                                }
                                        }
                                        yyval = val_peek(0);
                                }
break;
case 21:
//#line 95 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("se esperaba lista de identificadores entre comas");}
break;
case 22:
//#line 97 "gramatica.y"
{yyval=val_peek(2);((NodoTipos)yyval).add((String)val_peek(0).sval);}
break;
case 23:
//#line 98 "gramatica.y"
{yyval=new NodoTipos((String)val_peek(0).sval);}
break;
case 24:
//#line 100 "gramatica.y"
{      
                                if(!TablaSimbolos.existeSimbolo(val_peek(7).sval+ "@" + ambitoActual)){
                                        yyval = new NodoHoja(val_peek(7).sval);
                                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(0)).getTipo());
                                        TablaSimbolos.addNuevoSimbolo(val_peek(7).sval+ "@" + ambitoActual);
                                        if (!stackWhen.empty()){
                                                List<String> tope=stackWhen.pop();
                                                tope.add(val_peek(7).sval+ "@" + ambitoActual);
                                                stackWhen.push(tope);
                                        }   
                                        TablaSimbolos.addAtributo(val_peek(7).sval+ "@" + ambitoActual,"Uso","Funcion");
                                        TablaSimbolos.addAtributo(val_peek(7).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(7).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(7).sval);
                                        TablaSimbolos.addAtributo(val_peek(7).sval+"@"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                        TablaSimbolos.addAtributo(val_peek(7).sval +"@"+ambitoActual,"Parametro1",((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual +"@"+ val_peek(7).sval);
                                        TablaSimbolos.addAtributo(val_peek(7).sval +"@"+ambitoActual,"Parametro2",((ArbolSintactico)val_peek(3)).getLex()+ "@"+ ambitoActual +"@"+ val_peek(7).sval);
                                        ambitoActual += "@"+val_peek(7).sval;
                                        if (!stackWhen.empty()){
                                                List<String> tope=stackWhen.pop();
                                                tope.add(((ArbolSintactico)val_peek(5)).getLexemaWhen() + "@"+ ambitoActual);
                                                tope.add(((ArbolSintactico)val_peek(3)).getLexemaWhen() + "@"+ ambitoActual);
                                                stackWhen.push(tope);
                                        }
                                        cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                        /*Agrego los parametros en la tabla de simbolos*/
                                        TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual);
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(5)).getTipo());
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual,"Uso","Variable");
                                        TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual);
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Uso","Variable");
                                        hayReturn.push(false);
                                }else{
                                        yyerror("La funcion " + val_peek(7).sval + " ya existe en el ambito " + ambitoActual);
                                        yyval= new NodoHoja("Ya existe un identificador con el nombre de la funcion");
                                        ambitoActual += "@"+val_peek(7).sval;
                                }
                        }
break;
case 25:
//#line 138 "gramatica.y"
{
                        if(!TablaSimbolos.existeSimbolo(val_peek(5).sval+ "@" + ambitoActual)){
                                yyval = new NodoHoja(val_peek(5).sval);
                                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addNuevoSimbolo(val_peek(5).sval+ "@" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(5).sval+ "@" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(5).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(5).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(5).sval);
                                TablaSimbolos.addAtributo(val_peek(5).sval+"@"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addAtributo(val_peek(5).sval +"@"+ambitoActual,"Parametro1", ((ArbolSintactico)val_peek(3)).getLex()+ "@"+ ambitoActual +"@"+ val_peek(5).sval);
                                if (!stackWhen.empty()){
                                        List<String> tope=stackWhen.pop();
                                        tope.add(val_peek(5).sval+ "@" + ambitoActual);
                                        stackWhen.push(tope);
                                }
                                ambitoActual += "@"+val_peek(5).sval;
                                if (!stackWhen.empty()){
                                        List<String> tope=stackWhen.pop();
                                        tope.add(((ArbolSintactico)val_peek(3)).getLexemaWhen() + "@"+ ambitoActual);
                                        stackWhen.push(tope);
                                }
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                /*Agrego el parametro en la tabla de simbolos*/
                                TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual);
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Uso","Variable");
                                hayReturn.push(false);

                        }else{
                                yyerror("La funcion " + val_peek(5).sval + " ya existe en el ambito " + ambitoActual);
                                yyval= new NodoHoja("Ya existe un identificador con el nombre de la funcion");
                                ambitoActual += "@"+val_peek(5).sval;
                        }
                }
break;
case 26:
//#line 172 "gramatica.y"
{
                        if(!TablaSimbolos.existeSimbolo(val_peek(4).sval+ "@" + ambitoActual)){
                                yyval = new NodoHoja(val_peek(4).sval);
                                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addNuevoSimbolo(val_peek(4).sval+ "@" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(4).sval+ "@" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(4).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(4).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(4).sval);
                                TablaSimbolos.addAtributo(val_peek(4).sval+"@"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                if (!stackWhen.empty()){
                                        List<String> tope=stackWhen.pop();
                                        tope.add(val_peek(4).sval+ "@" + ambitoActual);
                                        stackWhen.push(tope);
                                }
                                ambitoActual += "@"+val_peek(4).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                hayReturn.push(false);
                        }else{
                                yyerror("La funcion " + val_peek(4).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += "@"+val_peek(4).sval;
                                yyval= new NodoHoja("Ya existe un identificador con el nombre de la funcion");
                        }
                }
break;
case 27:
//#line 195 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");  ambitoActual += "@"+"Error";yyerror("El tipo declarado no esta permitido");}
break;
case 28:
//#line 196 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  ambitoActual += "@"+"Error";yyerror("El tipo declarado no esta permitido");}
break;
case 29:
//#line 197 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");   ambitoActual += "@"+"Error"; yyerror("El tipo declarado no esta permitido");}
break;
case 30:
//#line 198 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  ambitoActual += "@"+"Error"; yyerror("Se esperaba :");}
break;
case 31:
//#line 199 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); ambitoActual += "@"+"Error";yyerror("Se esperaba :");}
break;
case 32:
//#line 200 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); ambitoActual += "@"+"Error";  yyerror("Se esperaba :");}
break;
case 33:
//#line 201 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); ambitoActual += "@"+"Error"; yyerror("Se esperaba )");}
break;
case 34:
//#line 202 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  ambitoActual += "@"+"Error"; yyerror("Se esperaba )");}
break;
case 35:
//#line 203 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  ambitoActual += "@"+"Error"; yyerror("Se esperaba )");}
break;
case 36:
//#line 204 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); ambitoActual += "@"+"Error";yyerror("Se esperaba otro parametro");}
break;
case 37:
//#line 205 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); ambitoActual += "@"+"Error"; yyerror("Se esperaba (");}
break;
case 38:
//#line 206 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba un nombre de funcion");}
break;
case 39:
//#line 208 "gramatica.y"
{
                                if(hayReturn.pop() == true){
                                        char [] a = ambitoActual.toCharArray();
                                        for (int i = a.length;i>=0;i--){
                                                if(a[i-1] == '@'){
                                                        ambitoActual = ambitoActual.substring(0,i-1);
                                                        break;
                                                }
                                        }
                                        NodoControl n = new NodoControl(((ArbolSintactico)val_peek(3)).getLex()+"@"+ambitoActual,(ArbolSintactico)val_peek(1));
                                        n.setTipo(((ArbolSintactico)val_peek(3)).getTipo());
                                        yyval = new NodoControl("Funcion",n);
                                        removeTipoActual();
                                        funciones.add((ArbolSintactico)yyval);
                                        if (!stackWhen.empty()){
                                                List<String> tope=stackWhen.pop();
                                                tope.add("@aux@"+((ArbolSintactico)val_peek(3)).getLex()+"@"+ambitoActual);
                                                stackWhen.push(tope);
                                        }
                                        NodoHoja varAux = (new NodoHoja("@aux@"+((ArbolSintactico)val_peek(3)).getLex()+"@"+ambitoActual));
                                        varAux.setTipo(n.getTipo());
                                        varAux.setUso("variableAuxiliar");
                                }else{
                                        yyerror("La funcion " + ((ArbolSintactico)val_peek(3)).getLex() + " no cuenta con ningun retorno." );
                                }
}
break;
case 40:
//#line 234 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 41:
//#line 235 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba {");}
break;
case 42:
//#line 237 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 43:
//#line 238 "gramatica.y"
{yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 44:
//#line 239 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ;");}
break;
case 45:
//#line 241 "gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa Datos");}
break;
case 46:
//#line 242 "gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa Funcion");}
break;
case 47:
//#line 243 "gramatica.y"
{yyval = val_peek(0);}
break;
case 48:
//#line 244 "gramatica.y"
{yyval = val_peek(0);}
break;
case 49:
//#line 245 "gramatica.y"
{yyval=val_peek(0);}
break;
case 50:
//#line 246 "gramatica.y"
{yyval=val_peek(0);}
break;
case 51:
//#line 247 "gramatica.y"
{yyval = val_peek(0);}
break;
case 52:
//#line 248 "gramatica.y"
{yyval = val_peek(0);}
break;
case 53:
//#line 249 "gramatica.y"
{yyval=val_peek(0);}
break;
case 54:
//#line 250 "gramatica.y"
{yyval=val_peek(0);}
break;
case 55:
//#line 251 "gramatica.y"
{yyval=val_peek(0);}
break;
case 56:
//#line 253 "gramatica.y"
{ yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(8)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(5)),new NodoControl("Else", (ArbolSintactico)val_peek(2))));}
break;
case 57:
//#line 254 "gramatica.y"
{yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(6)),new NodoControl("Else", (ArbolSintactico)val_peek(2))));}
break;
case 58:
//#line 255 "gramatica.y"
{yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(7)),new NodoControl("Else", (ArbolSintactico)val_peek(3))));}
break;
case 59:
//#line 256 "gramatica.y"
{ yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));}
break;
case 60:
//#line 257 "gramatica.y"
{ yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(6)),new NodoControl("Else", (ArbolSintactico)val_peek(2))));}
break;
case 61:
//#line 258 "gramatica.y"
{ yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));}
break;
case 62:
//#line 259 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba end_if ");}
break;
case 63:
//#line 260 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 64:
//#line 261 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba { ");}
break;
case 65:
//#line 262 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba end_if ");}
break;
case 66:
//#line 263 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 67:
//#line 264 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if");}
break;
case 68:
//#line 265 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 69:
//#line 266 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba { ");}
break;
case 70:
//#line 267 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba end_if");}
break;
case 71:
//#line 268 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba ; luego de la sentencia");}
break;
case 72:
//#line 269 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba { ");}
break;
case 73:
//#line 270 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba then ");}
break;
case 74:
//#line 271 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba ) ");}
break;
case 75:
//#line 272 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba una condicion ");}
break;
case 76:
//#line 273 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba (");}
break;
case 77:
//#line 274 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba end_if");}
break;
case 78:
//#line 275 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ; luego de la sentencia");}
break;
case 79:
//#line 276 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if");}
break;
case 80:
//#line 277 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ; luego de la sentencia");}
break;
case 81:
//#line 279 "gramatica.y"
{
                        if (!((ArbolSintactico)val_peek(4)).getLex().equals("No cumple condicion when")){
                                ((ArbolSintactico)val_peek(4)).setIzq((ArbolSintactico)val_peek(1));
                                yyval=(ArbolSintactico)val_peek(4);
                                List<String> tope=stackWhen.pop();
                                if (!stackWhen.empty()){
                                        List<String> whenSuperior=stackWhen.pop();
                                        for(String cadena :tope){
                                                whenSuperior.add(cadena);
                                        }
                                        stackWhen.push(whenSuperior);
                                }
                        }else{   
                                if (((ArbolSintactico)val_peek(4)).getLex().equals("Error sintactico")){
                                        yyval=val_peek(4);
                                }else {
                                        yyval=val_peek(4);
                                        List<String> tope=stackWhen.pop();
                                        for(String cadena :tope){
                                                TablaSimbolos.removeAtributo(cadena);
                                        }
                                }
                        }
                }
break;
case 82:
//#line 303 "gramatica.y"
{
                        if (!((ArbolSintactico)val_peek(2)).getLex().equals("No cumple condicion when")) {
                                ((ArbolSintactico)val_peek(2)).setIzq((ArbolSintactico)val_peek(0));
                                yyval=(ArbolSintactico)val_peek(2);
                                List<String> tope=stackWhen.pop();
                                if (!stackWhen.empty()){
                                        List<String> whenSuperior=stackWhen.pop();
                                        for(String cadena :tope){
                                                whenSuperior.add(cadena);
                                        }
                                        stackWhen.push(whenSuperior);
                                }
                        }else {
                                if (((ArbolSintactico)val_peek(2)).getLex().equals("Error sintactico")){
                                        yyval=val_peek(2);
                                }else {
                                        yyval=val_peek(2);
                                        List<String> tope=stackWhen.pop();
                                        for(String cadena :tope){
                                                TablaSimbolos.removeAtributo(cadena);
                                        }
                                }
                        }
}
break;
case 83:
//#line 327 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba }");}
break;
case 84:
//#line 328 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba {");}
break;
case 85:
//#line 329 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba then");}
break;
case 86:
//#line 331 "gramatica.y"
{
                                yyval = new ParserVal(val_peek(1).sval);
                                if(!TablaSimbolos.existeSimbolo(val_peek(1).sval+ "@" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(1).sval+ "@" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(1).sval+ "@" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(1).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(1).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(1).sval);
                                        etiquetasAct.add(val_peek(1).sval + "@" + ambitoActual);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(1).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 87:
//#line 344 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().setIzq((ArbolSintactico)val_peek(1));
                                List<ArbolSintactico> l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer());
                                }
                                etiquetasAct.remove(((ArbolSintactico)val_peek(3)).getDer().getIzq().getLex());
                                yyval=val_peek(3);
                        }else{
                                yyval = val_peek(3);
                        }
                }
break;
case 88:
//#line 357 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().setIzq((ArbolSintactico)val_peek(0));
                                List<ArbolSintactico> l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer());
                                }
                                etiquetasAct.remove(((ArbolSintactico)val_peek(1)).getDer().getIzq().getLex());
                                yyval=val_peek(1);
                        }else{
                                yyval = val_peek(1);
                        }
                }
break;
case 89:
//#line 370 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().setIzq((ArbolSintactico)val_peek(1));
                                List<ArbolSintactico> l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer());
                                }
                                yyval = val_peek(3);
                        }else{
                                yyval = val_peek(3);
                        }
                }
break;
case 90:
//#line 382 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().setIzq((ArbolSintactico)val_peek(0));
                                List<ArbolSintactico> l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer());
                                }
                                yyval = val_peek(1);
                        }else{
                                yyval = val_peek(1);
                        }
                }
break;
case 91:
//#line 395 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(1));
                                List<ArbolSintactico> l= stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer().getDer());
                                }
                                etiquetasAct.remove(((ArbolSintactico)val_peek(3)).getIzq().getIzq().getLex());
                        }
                        yyval = val_peek(3);
                }
break;
case 92:
//#line 406 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(0));
                                List<ArbolSintactico> l= stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer().getDer());
                                }
                                etiquetasAct.remove(((ArbolSintactico)val_peek(1)).getIzq().getIzq().getLex());
                        }
                        yyval = val_peek(1);
                }
break;
case 93:
//#line 417 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(1));
                                List<ArbolSintactico> l= stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer());
                                }
                        }
                        yyval = val_peek(3);
                }
break;
case 94:
//#line 427 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(0));
                                List<ArbolSintactico> l= stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer());
                                }
                        }
                        yyval = val_peek(1);
                }
break;
case 95:
//#line 437 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba }");}
break;
case 96:
//#line 438 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba }");}
break;
case 97:
//#line 440 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 98:
//#line 441 "gramatica.y"
{yyval=new NodoComun("Sentencia_Break", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 99:
//#line 442 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ;");}
break;
case 100:
//#line 444 "gramatica.y"
{yyval = val_peek(0);}
break;
case 101:
//#line 445 "gramatica.y"
{yyval = val_peek(0);}
break;
case 102:
//#line 446 "gramatica.y"
{yyval = val_peek(0);}
break;
case 103:
//#line 447 "gramatica.y"
{yyval = val_peek(0);}
break;
case 104:
//#line 448 "gramatica.y"
{yyval = val_peek(0);}
break;
case 105:
//#line 449 "gramatica.y"
{        boolean b = false;
                                        if(((ArbolSintactico)val_peek(0)).getIzq()!=null){
                                                String tag = ((ArbolSintactico)val_peek(0)).getIzq().getLex() + "@" + ambitoActual;
                                                for(String s : etiquetasAct){
                                                        if( tag.equals(s)){
                                                                b = true;
                                                                break;
                                                        }
                                                }
                                                if(!b){
                                                        yyerror("No se puede saltar al tag " + ((ArbolSintactico)val_peek(0)).getIzq().getLex());
                                                        yyval = new NodoHoja("Error");
                                                }else{
                                                        yyval = new NodoComun("Continue",new NodoHoja("Fin"),(ArbolSintactico)val_peek(0));
                                                        stackContinue.peek().add((ArbolSintactico)yyval);
                                                }
                                        }else{
                                                yyval = new NodoComun("Continue",null,(ArbolSintactico)val_peek(0));
                                        }
                                }
break;
case 106:
//#line 469 "gramatica.y"
{yyval = new NodoHoja("Break");}
break;
case 107:
//#line 470 "gramatica.y"
{yyval = new NodoControl("Break", new NodoHoja(val_peek(0).sval));}
break;
case 108:
//#line 471 "gramatica.y"
{yyval=val_peek(0);}
break;
case 109:
//#line 473 "gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));}
break;
case 110:
//#line 474 "gramatica.y"
{yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 111:
//#line 475 "gramatica.y"
{yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 112:
//#line 476 "gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );}
break;
case 113:
//#line 477 "gramatica.y"
{yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 114:
//#line 478 "gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));}
break;
case 115:
//#line 479 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 116:
//#line 480 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 117:
//#line 481 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba { ");}
break;
case 118:
//#line 482 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 119:
//#line 483 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba } ");}
break;
case 120:
//#line 484 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 121:
//#line 485 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 122:
//#line 486 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba { ");}
break;
case 123:
//#line 487 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 124:
//#line 488 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ; luego de la sentencia");}
break;
case 125:
//#line 489 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 126:
//#line 490 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ; luego de la sentencia");}
break;
case 127:
//#line 491 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 128:
//#line 492 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ; luego de la sentencia");}
break;
case 129:
//#line 493 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba { ");}
break;
case 130:
//#line 494 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba then ");}
break;
case 131:
//#line 495 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ) ");}
break;
case 132:
//#line 496 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba una condicion ");}
break;
case 133:
//#line 497 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ( ");}
break;
case 134:
//#line 499 "gramatica.y"
{yyval = new NodoControl("Retorno", (ArbolSintactico)val_peek(1));
                                                String tipoRet = ((ArbolSintactico)val_peek(1)).getTipo();
                                                if(!ambitoActual.equals("Global")){
                                                        String tipoFun = getTipoActual();
                                                        if(!tipoRet.equals(tipoFun)){
                                                                yyerror("El retorno debe ser del mismo tipo que el retorno de la funcion.");
                                                        }else{
                                                                hayReturn.pop();
                                                                hayReturn.push(true);
                                                        }
                                                }else{
                                                        yyerror("El retorno puede estar solo dentro de una funcion.");
                                                }
                                        }
break;
case 135:
//#line 513 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba )");}
break;
case 136:
//#line 514 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba expresion");}
break;
case 137:
//#line 515 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba expresion entre ( )");}
break;
case 138:
//#line 517 "gramatica.y"
{    yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(1)).getTipo());}
break;
case 139:
//#line 519 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba identificador");}
break;
case 143:
//#line 526 "gramatica.y"
{ 
                                if(TablaSimbolos.existeSimbolo(val_peek(2).sval+"@"+ambitoActual)){
                                        yyerror("La variable " + val_peek(2).sval + " se encuentra declarada en el ambito " + ambitoActual);
                                }else{
                                        TablaSimbolos.addNuevoSimbolo(val_peek(2).sval+"@"+ambitoActual);
                                        if (!stackWhen.empty()){
                                                List<String> tope=stackWhen.pop();
                                                tope.add(val_peek(2).sval+ "@" + ambitoActual);
                                                stackWhen.push(tope);
                                        }
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(2).sval,"Id"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Tipo",TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Linea",AnalizadorLexico.getLineaAct());
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Uso","Constante");
                                        if (TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo").equals("Entero")){
                                                TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Valor", Long.valueOf(val_peek(0).sval));
                                        }else{
                                                TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Valor", Double.parseDouble(val_peek(0).sval));
                                        }
                                        TablaSimbolos.removeAtributo(val_peek(2).sval);
                                }
                        }
break;
case 144:
//#line 548 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba una constante");}
break;
case 145:
//#line 549 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba una asignacion =:");}
break;
case 146:
//#line 551 "gramatica.y"
{yyval = val_peek(0);}
break;
case 147:
//#line 552 "gramatica.y"
{yyval = val_peek(0); }
break;
case 148:
//#line 553 "gramatica.y"
{yyval = val_peek(0);}
break;
case 149:
//#line 554 "gramatica.y"
{yyval = val_peek(0);}
break;
case 150:
//#line 555 "gramatica.y"
{yyval = val_peek(0);}
break;
case 151:
//#line 556 "gramatica.y"
{yyval=val_peek(0);}
break;
case 152:
//#line 558 "gramatica.y"
{
                                        String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                                        NodoHoja hoja = new NodoHoja(val_peek(2).sval+"@"+ambito);
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval, hoja , (ArbolSintactico) val_peek(0));
                                        String tipoS1 = "";
                                        if(!ambito.equals("")){
                                                if(((String)TablaSimbolos.getAtributo(val_peek(2).sval+"@"+ambito, "Uso")).equals("Variable")){
                                                        tipoS1 = (String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo");
                                                        ((ArbolSintactico)yyval).setTipo(tipoS1);
                                                        hoja.setUso((String)TablaSimbolos.getAtributo(val_peek(2).sval+"@"+ambito, "Uso"));
                                                        hoja.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                                }
                                                else {
                                                        yyerror(val_peek(2).sval+" no es una variable.");
                                                }
                                        }
                                        String tipoS3 = ((ArbolSintactico)val_peek(0)).getTipo();
                                        if(!(tipoS1.equals(tipoS3))){
                                                yyerror("No se puede realizar una asignacion con tipos diferentes.");
                                        }
                                }
break;
case 153:
//#line 579 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba =:");}
break;
case 154:
//#line 580 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba expresion");}
break;
case 155:
//#line 582 "gramatica.y"
{     
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));

                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una suma con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                 }
break;
case 156:
//#line 591 "gramatica.y"
{
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una resta con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                 }
break;
case 157:
//#line 600 "gramatica.y"
{yyval = val_peek(0);}
break;
case 158:
//#line 601 "gramatica.y"
{
                                        NodoHoja cte = new NodoHoja(val_peek(0).sval);
                                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        yyval = new NodoComun("For como expresion",(ArbolSintactico)val_peek(2),cte);
                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));     
                                        }
break;
case 159:
//#line 607 "gramatica.y"
{
                                        NodoHoja cte = new NodoHoja(val_peek(0).sval);
                                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        yyval = new NodoComun("While como expresion",(ArbolSintactico)val_peek(2),cte);
                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo")); 
                                        }
break;
case 160:
//#line 613 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba un termino");}
break;
case 161:
//#line 614 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba un termino");}
break;
case 162:
//#line 615 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba un constante");}
break;
case 163:
//#line 616 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba un constante");}
break;
case 164:
//#line 618 "gramatica.y"
{ 
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una multiplicacion con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 165:
//#line 627 "gramatica.y"
{
                                        yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una division con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 166:
//#line 635 "gramatica.y"
{yyval = val_peek(0);}
break;
case 167:
//#line 636 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba un factor");}
break;
case 168:
//#line 637 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba un factor");}
break;
case 169:
//#line 639 "gramatica.y"
{
                String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                if((!ambito.equals(""))){
                        if(((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso")).equals("Variable")
                        || ((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso")).equals("Constante")){
                                yyval = new NodoHoja(val_peek(0).sval+"@"+ambito);
                                TablaSimbolos.removeAtributo(val_peek(0).sval);
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Tipo"));
                                ((ArbolSintactico)yyval).setUso((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso"));
                        }
                        else{
                                yyerror(val_peek(0).sval+" no es una variable");
                        }
                }else{
                        yyval = new NodoHoja("Error");
                }
           }
break;
case 170:
//#line 656 "gramatica.y"
{
                yyval = new NodoHoja(val_peek(0).sval);
                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                ((ArbolSintactico)yyval).setUso("Constante");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Uso","Constante");
              }
break;
case 171:
//#line 662 "gramatica.y"
{yyval=val_peek(0);}
break;
case 172:
//#line 664 "gramatica.y"
{  
                chequearRangoI32(val_peek(0).sval);
                TablaSimbolos.addNuevoSimbolo((String)val_peek(0).sval);
                TablaSimbolos.addAtributo(val_peek(0).sval, "Uso", "Constante");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Tipo", "Entero");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Valor", (String)val_peek(0).sval);
                }
break;
case 173:
//#line 671 "gramatica.y"
{  
                TablaSimbolos.addNuevoSimbolo((String)val_peek(0).sval);
                TablaSimbolos.addAtributo(val_peek(0).sval, "Uso", "Constante");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Tipo", "Float");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Valor", (String)val_peek(0).sval);}
break;
case 174:
//#line 676 "gramatica.y"
{
                yyval=new ParserVal(val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addNuevoSimbolo((String)val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Uso", "Constante");
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Tipo", "Entero");
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Valor", (String)val_peek(1).sval+val_peek(0).sval);
        }
break;
case 175:
//#line 683 "gramatica.y"
{
                yyval=new ParserVal(val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addNuevoSimbolo((String)val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Uso", "Constante");
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Tipo", "Float");
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Valor", (String)val_peek(1).sval+val_peek(0).sval);
        }
break;
case 176:
//#line 691 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(1));
                                stackContinue.pop();
                        }
                        yyval = val_peek(3);
                }
break;
case 177:
//#line 698 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(0));
                                stackContinue.pop();
                        }
                        yyval = val_peek(1);
                }
break;
case 178:
//#line 705 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba }");}
break;
case 179:
//#line 706 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().setIzq((ArbolSintactico)val_peek(1));
                                stackContinue.pop();
                        }
                        yyval=val_peek(3);
                }
break;
case 180:
//#line 713 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().setIzq((ArbolSintactico)val_peek(0));
                                stackContinue.pop();
                        }
                        yyval=val_peek(1);
                }
break;
case 181:
//#line 720 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba }");}
break;
case 182:
//#line 722 "gramatica.y"
{yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 183:
//#line 723 "gramatica.y"
{yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 184:
//#line 724 "gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));}
break;
case 185:
//#line 725 "gramatica.y"
{yyval = new NodoComun("IF",new NodoControl("Condicion", (ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );}
break;
case 186:
//#line 726 "gramatica.y"
{yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 187:
//#line 727 "gramatica.y"
{ yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));}
break;
case 188:
//#line 728 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 189:
//#line 729 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 190:
//#line 730 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba { ");}
break;
case 191:
//#line 731 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 192:
//#line 732 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 193:
//#line 733 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 194:
//#line 734 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba } ");}
break;
case 195:
//#line 735 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba { ");}
break;
case 196:
//#line 736 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 197:
//#line 737 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ; luego de la sentencia");}
break;
case 198:
//#line 738 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 199:
//#line 739 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ; luego de la sentencia");}
break;
case 200:
//#line 740 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 201:
//#line 741 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ; luego de la sentencia");}
break;
case 202:
//#line 742 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba { ");}
break;
case 203:
//#line 743 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba then ");}
break;
case 204:
//#line 744 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ) ");}
break;
case 205:
//#line 745 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba una condicion ");}
break;
case 206:
//#line 746 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ( ");}
break;
case 207:
//#line 748 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 208:
//#line 749 "gramatica.y"
{yyval=new NodoComun("Bloque Ejecutable Asignacion", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 209:
//#line 751 "gramatica.y"
{yyval = val_peek(0);}
break;
case 210:
//#line 752 "gramatica.y"
{yyval = val_peek(0);}
break;
case 211:
//#line 753 "gramatica.y"
{yyval = val_peek(0);}
break;
case 212:
//#line 754 "gramatica.y"
{yyval = val_peek(0);}
break;
case 213:
//#line 755 "gramatica.y"
{yyval = val_peek(0);}
break;
case 214:
//#line 756 "gramatica.y"
{NodoHoja cte = new NodoHoja(val_peek(0).sval);
                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                        yyval = new NodoControl("Break", cte);}
break;
case 215:
//#line 760 "gramatica.y"
{ yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2))));  }
break;
case 216:
//#line 761 "gramatica.y"
{ yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 217:
//#line 762 "gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));}
break;
case 218:
//#line 763 "gramatica.y"
{yyval = new NodoComun("IF",new NodoControl("Condicion", (ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );}
break;
case 219:
//#line 764 "gramatica.y"
{                                              yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 220:
//#line 765 "gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));}
break;
case 221:
//#line 766 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 222:
//#line 767 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba } ");}
break;
case 223:
//#line 768 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba { ");}
break;
case 224:
//#line 769 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 225:
//#line 770 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba } ");}
break;
case 226:
//#line 771 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 227:
//#line 772 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba } ");}
break;
case 228:
//#line 773 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba { ");}
break;
case 229:
//#line 774 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba end_if ");}
break;
case 230:
//#line 775 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ; luego de la sentencia");}
break;
case 231:
//#line 776 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 232:
//#line 777 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ; luego de la sentencia");}
break;
case 233:
//#line 778 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 234:
//#line 779 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba ; luego de la sentencia");}
break;
case 235:
//#line 780 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba { ");}
break;
case 236:
//#line 781 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba then ");}
break;
case 237:
//#line 782 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba ) ");}
break;
case 238:
//#line 783 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba una condicion ");}
break;
case 239:
//#line 784 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ( ");}
break;
case 240:
//#line 786 "gramatica.y"
{
                        yyval= new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                        ((ArbolSintactico)yyval).setUso("Condicion");
                        if (!((((ArbolSintactico)val_peek(2)).getTipo()).equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                               yyerror("error en la comparacion entre expresiones de distintos tipos");
                        }
                }
break;
case 241:
//#line 794 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba otra expresion para comparar.");}
break;
case 242:
//#line 795 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba un tipo de comparacion.");}
break;
case 243:
//#line 797 "gramatica.y"
{yyval= val_peek(0);}
break;
case 244:
//#line 798 "gramatica.y"
{yyval= val_peek(0);}
break;
case 245:
//#line 799 "gramatica.y"
{yyval= val_peek(0);}
break;
case 246:
//#line 800 "gramatica.y"
{yyval= val_peek(0);}
break;
case 247:
//#line 801 "gramatica.y"
{yyval= val_peek(0);}
break;
case 248:
//#line 802 "gramatica.y"
{yyval=val_peek(0);}
break;
case 249:
//#line 804 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 250:
//#line 805 "gramatica.y"
{yyval=new NodoComun("Bloque Ejecutable", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 251:
//#line 806 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ;");}
break;
case 252:
//#line 808 "gramatica.y"
{  yyval = new NodoControl(val_peek(3).sval, (ArbolSintactico) new NodoHoja(val_peek(1).sval));}
break;
case 253:
//#line 809 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba )");}
break;
case 254:
//#line 810 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba una CADENA");}
break;
case 255:
//#line 811 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba (");}
break;
case 256:
//#line 813 "gramatica.y"
{
                String atributoIzq=((ArbolSintactico)val_peek(3)).getLexemaWhen();
                String atributoDer=((ArbolSintactico)val_peek(1)).getLexemaWhen();
                if (!TablaSimbolos.getAtributo(atributoIzq, "Uso" ).equals("Constante")){
                        yyerror(atributoIzq+" no es una constante");
                        yyval = new NodoHoja("Error en el when");
                }else{   
                        if (!TablaSimbolos.getAtributo(atributoDer, "Uso" ).equals("Constante")){
                                yyerror(atributoDer+" no es una constante");
                                yyval = new NodoHoja("Error en el when");
                        }
                        else{    
                                if (!TablaSimbolos.getAtributo(atributoIzq, "Tipo" ).equals(TablaSimbolos.getAtributo(atributoDer, "Tipo" ))){
                                        yyerror("Los valores de la condicion del when son de tipos diferentes");
                                        yyval = new NodoHoja("Error en el when");
                                }else{
                                        String s1 =TablaSimbolos.getAtributo(atributoIzq, "Valor")+"";
                                        String s2 =TablaSimbolos.getAtributo(atributoDer, "Valor")+"";
                                        double valorIzq = Double.parseDouble(s1);
                                        double valorDer = Double.parseDouble(s2);
                                        switch (val_peek(2).sval){
                                                case "=":
                                                        if (valorIzq==valorDer){
                                                                yyval = new NodoControl("When", new NodoHoja("When sin sentencias"));
                                                        }else{
                                                        yyval = new NodoHoja("No cumple condicion when");   
                                                        }
                                                        break;
                                                case "<":
                                                        if (valorIzq < valorDer){
                                                                yyval = new NodoControl("When", new NodoHoja("When sin sentencias"));
                                                        }else{
                                                                yyval = new NodoHoja("No cumple condicion when");
                                                        }
                                                        break;
                                                case ">":
                                                        if (valorIzq > valorDer){
                                                                yyval = new NodoControl("When", new NodoHoja("When sin sentencias"));
                                                        }else{
                                                                yyval = new NodoHoja("No cumple condicion when");
                                                        }
                                                        break;
                                                case "=!":
                                                        if (valorIzq != valorDer){
                                                                yyval = new NodoControl("When", new NodoHoja("When sin sentencias"));
                                                        }else{
                                                                yyval = new NodoHoja("No cumple condicion when");
                                                        }
                                                        break;
                                                case "<=":
                                                        if (valorIzq <= valorDer){
                                                                yyval = new NodoControl("When", new NodoHoja("When sin sentencias"));
                                                        }else{
                                                        yyval = new NodoHoja("No cumple condicion when");
                                                        }
                                                        break;
                                                case ">=":
                                                        if (valorIzq >= valorDer){
                                                                yyval = new NodoControl("When", new NodoHoja("When sin sentencias"));
                                                        }else{
                                                                yyval = new NodoHoja("No cumple condicion when");
                                                        }
                                                        break;
                                        }
                                }
                                List<String> whenActual = new ArrayList<String>();
                                stackWhen.push(whenActual);
                        }
                }
        }
break;
case 257:
//#line 883 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba )");}
break;
case 258:
//#line 884 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba condicion en el when");}
break;
case 259:
//#line 885 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba ( en el when");}
break;
case 260:
//#line 887 "gramatica.y"
{
                        if (!((ArbolSintactico)val_peek(4)).getLex().equals("No cumple condicion when")){
                                ((ArbolSintactico)val_peek(4)).setIzq((ArbolSintactico)val_peek(1));
                                yyval=(ArbolSintactico)val_peek(4);
                                List<String> tope=stackWhen.pop();
                                if (!stackWhen.empty()){
                                        List<String> whenSuperior=stackWhen.pop();
                                        for(String cadena :tope){
                                                whenSuperior.add(cadena);
                                        }
                                        stackWhen.push(whenSuperior);
                                }
                        }else{  
                                if (((ArbolSintactico)val_peek(4)).getLex().equals("Error sintactico")){
                                        yyval=val_peek(4);
                                }else{
                                        yyval=val_peek(4);
                                        List<String> tope=stackWhen.pop();
                                        for(String cadena :tope){
                                                TablaSimbolos.removeAtributo(cadena);
                                        }
                                }
                        }

}
break;
case 261:
//#line 912 "gramatica.y"
{
                        if (!((ArbolSintactico)val_peek(2)).getLex().equals("No cumple condicion when")){        
                                ((ArbolSintactico)val_peek(2)).setIzq((ArbolSintactico)val_peek(0));
                                yyval=(ArbolSintactico)val_peek(2);
                                List<String> tope=stackWhen.pop();
                                if (!stackWhen.empty()){
                                        List<String> whenSuperior=stackWhen.pop();
                                        for(String cadena :tope){
                                                whenSuperior.add(cadena);
                                        }
                                        stackWhen.push(whenSuperior);
                                }
                        }else if (((ArbolSintactico)val_peek(2)).getLex().equals("Error sintactico")){
                                yyval=val_peek(2);
                        }
                        else {
                                
                                yyval=val_peek(2);
                                List<String> tope=stackWhen.pop();
                                for(String cadena :tope){
                                        TablaSimbolos.removeAtributo(cadena);
                                }
                        }
                }
break;
case 262:
//#line 936 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba }");}
break;
case 263:
//#line 937 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba {");}
break;
case 264:
//#line 938 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba then");}
break;
case 265:
//#line 940 "gramatica.y"
{ 
                        yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(8).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", null, (ArbolSintactico) val_peek(1))) );
                        List<ArbolSintactico> l = new ArrayList<ArbolSintactico>();
                        stackContinue.push(l);
                        }
break;
case 266:
//#line 945 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba )");}
break;
case 267:
//#line 946 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba una asignacion");}
break;
case 268:
//#line 947 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba (");}
break;
case 269:
//#line 948 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba :");}
break;
case 270:
//#line 949 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba )");}
break;
case 271:
//#line 950 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba una condicion");}
break;
case 272:
//#line 951 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba (");}
break;
case 273:
//#line 953 "gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", null, (ArbolSintactico) val_peek(1)) ); 
                        List<ArbolSintactico> l = new ArrayList<ArbolSintactico>();
                        stackContinue.push(l);      
                        }
break;
case 274:
//#line 958 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba )");}
break;
case 275:
//#line 959 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba una asignacion");}
break;
case 276:
//#line 960 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba (");}
break;
case 277:
//#line 961 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba :");}
break;
case 278:
//#line 962 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba )");}
break;
case 279:
//#line 963 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba una condicion");}
break;
case 280:
//#line 964 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba (");}
break;
case 281:
//#line 966 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().setIzq((ArbolSintactico)val_peek(1));
                                List<ArbolSintactico> l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer());
                                }
                                etiquetasAct.remove(((ArbolSintactico)val_peek(3)).getIzq().getIzq().getLex());
                        }
                        yyval=val_peek(3);
                }
break;
case 282:
//#line 977 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().setIzq((ArbolSintactico)val_peek(0));
                                List<ArbolSintactico> l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer());
                                }
                                etiquetasAct.remove(((ArbolSintactico)val_peek(1)).getIzq().getIzq().getLex());
                        }
                        yyval = val_peek(1);
                }
break;
case 283:
//#line 988 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().setIzq((ArbolSintactico)val_peek(1));
                                List<ArbolSintactico> l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer());
                                }
                        }
                        yyval = val_peek(3);
                }
break;
case 284:
//#line 998 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().setIzq((ArbolSintactico)val_peek(0));
                                List<ArbolSintactico> l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer());
                                }
                        }
                        yyval = val_peek(1);
                }
break;
case 285:
//#line 1008 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba }");}
break;
case 286:
//#line 1009 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba {");}
break;
case 287:
//#line 1011 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 288:
//#line 1012 "gramatica.y"
{ yyval = new NodoComun("Bloque Break con Continue",(ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 289:
//#line 1013 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ;");}
break;
case 290:
//#line 1016 "gramatica.y"
{yyval = val_peek(0);}
break;
case 291:
//#line 1017 "gramatica.y"
{yyval = val_peek(0);}
break;
case 292:
//#line 1018 "gramatica.y"
{yyval = val_peek(0);}
break;
case 293:
//#line 1019 "gramatica.y"
{yyval = val_peek(0);}
break;
case 294:
//#line 1020 "gramatica.y"
{yyval = val_peek(0);}
break;
case 295:
//#line 1021 "gramatica.y"
{boolean b = false;
                                        if(((ArbolSintactico)val_peek(0)).getIzq()!=null){
                                                String tag = ((ArbolSintactico)val_peek(0)).getIzq().getLex() + "@" + ambitoActual;
                                                for(String s : etiquetasAct){
                                                        if(tag.equals(s)){
                                                                b = true;
                                                                break;
                                                        }
                                                }
                                                if(!b){
                                                        yyerror("No se puede saltar al tag " + ((ArbolSintactico)val_peek(0)).getIzq().getLex());
                                                        yyval = new NodoHoja("Error");
                                                }else{
                                                        yyval = new NodoComun("Continue",new NodoHoja("Fin"),(ArbolSintactico)val_peek(0));
                                                        stackContinue.peek().add((ArbolSintactico)yyval);

                                                }
                                        }else{
                                                yyval = new NodoComun("Continue",new NodoHoja("Fin"),(ArbolSintactico)val_peek(0));
                                        }
                                }
break;
case 296:
//#line 1042 "gramatica.y"
{yyval = new NodoControl("Break",(ArbolSintactico)new NodoHoja("Fin"));}
break;
case 297:
//#line 1044 "gramatica.y"
{yyval = new NodoHoja("Fin");}
break;
case 298:
//#line 1045 "gramatica.y"
{String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        yyval = new NodoControl("Tag", new NodoHoja(val_peek(0).sval) );
                        if(!ambito.equals("")){
                                if(!TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Uso").equals("Etiqueta")){
                                        yyerror(val_peek(0).sval + " no es una etiqueta.");
                                }
                        }else{
                                yyerror("La etiqueta " + val_peek(0).sval + " no esta declarada.");
                        }
                        }
break;
case 299:
//#line 1055 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba un identificador");}
break;
case 300:
//#line 1057 "gramatica.y"
{ yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2))));  }
break;
case 301:
//#line 1058 "gramatica.y"
{ yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 302:
//#line 1059 "gramatica.y"
{ yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2)))); }
break;
case 303:
//#line 1060 "gramatica.y"
{ yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) ); }
break;
case 304:
//#line 1061 "gramatica.y"
{ yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); }
break;
case 305:
//#line 1062 "gramatica.y"
{ yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));}
break;
case 306:
//#line 1063 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 307:
//#line 1064 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba } ");}
break;
case 308:
//#line 1065 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba { ");}
break;
case 309:
//#line 1066 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 310:
//#line 1067 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba } ");}
break;
case 311:
//#line 1068 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba end_if ");}
break;
case 312:
//#line 1069 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba } ");}
break;
case 313:
//#line 1070 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba { ");}
break;
case 314:
//#line 1071 "gramatica.y"
{yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba end_if ");}
break;
case 315:
//#line 1072 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba ; luego de la sentencia");}
break;
case 316:
//#line 1073 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba end_if ");}
break;
case 317:
//#line 1074 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba ; luego de la sentencia");}
break;
case 318:
//#line 1075 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba end_if ");}
break;
case 319:
//#line 1076 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba ; luego de la sentencia");}
break;
case 320:
//#line 1077 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba { ");}
break;
case 321:
//#line 1078 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba then ");}
break;
case 322:
//#line 1079 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba ) ");}
break;
case 323:
//#line 1080 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba una condicion ");}
break;
case 324:
//#line 1081 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba ( ");}
break;
case 325:
//#line 1083 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(10).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(1).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(1).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(2).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                iterador.setUso("Variable");
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(6).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(6).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(9).sval, id1, new NodoHoja(val_peek(8).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(5).sval,id2, (ArbolSintactico)val_peek(4))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", null),asignacion ))) );
                                
				if (!TablaSimbolos.existeSimbolo(val_peek(10).sval+ "@" + buscarAmbito(ambitoActual, val_peek(10).sval))){
                                        yyerror("La variable '" + val_peek(10).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(10).sval+ "@" + buscarAmbito(ambitoActual, val_peek(10).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(10).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(6).sval.equals(val_peek(10).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                List<ArbolSintactico> l= new ArrayList<ArbolSintactico>();
                                stackContinue.add(l);
                        }
break;
case 326:
//#line 1119 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                iterador.setUso("Variable");
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", null ), asignacion )) );
                                
						if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(10).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                List<ArbolSintactico> l = new ArrayList<ArbolSintactico>();
                                stackContinue.add(l);
                        }
break;
case 327:
//#line 1155 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba )");}
break;
case 328:
//#line 1156 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba )");}
break;
case 329:
//#line 1157 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba constante");}
break;
case 330:
//#line 1158 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba constante");}
break;
case 331:
//#line 1159 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba operador + o -");}
break;
case 332:
//#line 1160 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ; luego de la comparacion");}
break;
case 333:
//#line 1161 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba expresion para comparar");}
break;
case 334:
//#line 1162 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba operador de comparacion");}
break;
case 335:
//#line 1163 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba nombre de variable");}
break;
case 336:
//#line 1164 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ; luego de la asignacion");}
break;
case 337:
//#line 1165 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba numero entero para asignar");}
break;
case 338:
//#line 1166 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba =:");}
break;
case 339:
//#line 1167 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba nombre de variable");}
break;
case 340:
//#line 1168 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba (");}
break;
case 341:
//#line 1170 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(10).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(1).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(1).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(2).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                iterador.setUso("Variable");
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(6).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(6).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(9).sval,id1,new NodoHoja(val_peek(8).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(5).sval,id2,(ArbolSintactico)val_peek(4))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", null), asignacion )) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(10).sval+ "@" + buscarAmbito(ambitoActual, val_peek(10).sval))){
                                        yyerror("La variable '" + val_peek(10).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(10).sval+ "@" + buscarAmbito(ambitoActual, val_peek(9).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(10).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(6).sval.equals(val_peek(10).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                List<ArbolSintactico> l = new ArrayList<ArbolSintactico>();
                                stackContinue.add(l);
                }
break;
case 342:
//#line 1206 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(10).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(1).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(1).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(2).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                iterador.setUso("Variable");
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(6).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(6).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(9).sval,id1,new NodoHoja(val_peek(8).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(5).sval,id2,(ArbolSintactico)val_peek(4))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", null), asignacion )) );
                                
						if (!TablaSimbolos.existeSimbolo(val_peek(10).sval+ "@" + buscarAmbito(ambitoActual, val_peek(10).sval))){
                                        yyerror("La variable '" + val_peek(10).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(10).sval+ "@" + buscarAmbito(ambitoActual, val_peek(9).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(10).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(6).sval.equals(val_peek(10).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                List<ArbolSintactico> l = new ArrayList<ArbolSintactico>();
                                stackContinue.add(l);
                }
break;
case 343:
//#line 1242 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba )");}
break;
case 344:
//#line 1243 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba )");}
break;
case 345:
//#line 1244 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba constante");}
break;
case 346:
//#line 1245 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba constante");}
break;
case 347:
//#line 1246 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba operador + o -");}
break;
case 348:
//#line 1247 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");   yyerror("Se esperaba ; luego de la comparacion");}
break;
case 349:
//#line 1248 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba expresion para comparar");}
break;
case 350:
//#line 1249 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba operador de comparacion");}
break;
case 351:
//#line 1250 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba nombre de variable");}
break;
case 352:
//#line 1251 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba ; luego de la asignacion");}
break;
case 353:
//#line 1252 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba numero entero para asignar");}
break;
case 354:
//#line 1253 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba =:");}
break;
case 355:
//#line 1254 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");  yyerror("Se esperaba nombre de variable");}
break;
case 356:
//#line 1255 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico"); yyerror("Se esperaba (");}
break;
case 357:
//#line 1257 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(1));
                                List<ArbolSintactico> l= stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer().getDer());
                                }
                                etiquetasAct.remove(((ArbolSintactico)val_peek(3)).getIzq().getIzq().getLex());
                        }
                        yyval = val_peek(3);
                        }
break;
case 358:
//#line 1268 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(0));
                                List<ArbolSintactico> l= stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer().getDer());
                                }
                        }
                        yyval = val_peek(1);
                }
break;
case 359:
//#line 1278 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(1));
                                List<ArbolSintactico> l= stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer());
                                }
                        }
                        yyval = val_peek(3);
                }
break;
case 360:
//#line 1288 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(0));
                                List<ArbolSintactico> l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer());
                                }
                        }
                        yyval = val_peek(1);          
                        }
break;
case 361:
//#line 1298 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba }");}
break;
case 362:
//#line 1299 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba {");}
break;
case 363:
//#line 1300 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba }");}
break;
case 364:
//#line 1301 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba {");}
break;
case 365:
//#line 1304 "gramatica.y"
{
                        yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                        ((ArbolSintactico)yyval).setUso("Variable");}
break;
case 366:
//#line 1308 "gramatica.y"
{
                        String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        if(!ambito.equals("")){
                                yyval=new NodoHoja(val_peek(0).sval+"@"+ambito);
                                ((ArbolSintactico)yyval).setUso("Variable");
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Tipo"));
                        }else{
                                yyval=new NodoHoja("Error");
                                yyerror("El parametro "+ val_peek(0).sval +" no se encuentra declarado en el ambito "+ambitoActual);
                        }
                     }
break;
case 367:
//#line 1320 "gramatica.y"
{
                                                        String ambito = buscarAmbito(ambitoActual,val_peek(5).sval);
                                                        NodoComun parametro1=null;
                                                        NodoComun parametro2=null;
                                                        if (!ambito.equals("") ){
                                                                if( !TablaSimbolos.getAtributo(val_peek(5).sval+"@"+ambito,"Uso").equals("Funcion") ){
                                                                        yyerror("La funcion "+val_peek(5).sval+" no fue declarada");
                                                                }else{
                                                                        String par1 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +"@"+ ambito,"Parametro1");
                                                                        String par2 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +"@"+ ambito,"Parametro2");
                                                                        if(par1 != null)
                                                                                if(par2 != null){
                                                                                        String tipoS3 = (String) ((ArbolSintactico) val_peek(3) ).getTipo();
                                                                                        if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") ) )){
                                                                                                String nombreS3 = ((ArbolSintactico) val_peek(3)).getLex();
                                                                                                yyerror("El tipo del parametro "+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                                                                                break;
                                                                                        }else{
                                                                                                NodoHoja n =new NodoHoja(par1);
                                                                                                n.setTipo(tipoS3);
                                                                                                n.setUso("Variable");
                                                                                                parametro1 = new NodoComun("=:",n , (ArbolSintactico)val_peek(3));
                                                                                        }
                                                                                        String tipoS5 = (String) ((ArbolSintactico) val_peek(1)).getTipo();
                                                                                        if( !(tipoS5.equals((String)TablaSimbolos.getAtributo(par2,"Tipo") ))){
                                                                                                String nombreS5 = ((ArbolSintactico) val_peek(1)).getLex();
                                                                                                yyerror("El tipo del parametro "+ nombreS5+" no coincide con el tipo declarado en la funcion.");
                                                                                                break;
                                                                                        }else{
                                                                                                NodoHoja n =new NodoHoja(par2);
                                                                                                n.setTipo(tipoS5);
                                                                                                n.setUso("Variable");
                                                                                                parametro2 = new NodoComun("=:",n, (ArbolSintactico)val_peek(1));
                                                                                        }
                                                                                }else{
                                                                                        yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                                }
                                                                        else{
                                                                                yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                        }
                                                                        yyval=new NodoControl("Llamado Funcion" ,new NodoComun(val_peek(5).sval+"@"+ambito,(ArbolSintactico)parametro1,(ArbolSintactico)parametro2));
                                                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(5).sval +"@"+ ambito,"Tipo"));
                                                                }
                                                        }else{
                                                                yyerror("La funcion " + val_peek(5).sval + " no se encuentra declarada");
                                                                yyval = new NodoHoja("Error sintactico");
                                                        }
                                                }
break;
case 368:
//#line 1368 "gramatica.y"
{
            String ambito = buscarAmbito(ambitoActual,val_peek(3).sval);
            NodoComun parametro1=null;
            if (!ambito.equals("")){
                if (!TablaSimbolos.getAtributo(val_peek(3).sval+"@"+ambito,"Uso").equals("Funcion")){
                        yyerror("La funcion "+val_peek(3).sval+" no fue declarada");
                }else{
                        String par1 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +"@"+ ambito,"Parametro1");
                        String par2 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +"@"+ ambito,"Parametro2");
                        if(par2 ==null){
                                if(par1!=null){
                                        String tipoS3 = (String) ((ArbolSintactico) val_peek(1) ).getTipo();
                                        if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") )) ){
                                                String nombreS3 = ((ArbolSintactico) val_peek(1)).getLex();
                                                yyerror("El tipo del parametro "+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                        }else{
                                                NodoHoja n =new NodoHoja(par1);
                                                n.setTipo(tipoS3);
                                                n.setUso("Variable");
                                                parametro1 = new NodoComun("=:",n , (ArbolSintactico)val_peek(1));
                                        }
                                }else{
                                        yyerror("La funcion esta declarada sin parametros.");
                                }
                        }else{
                                yyerror("La funcion esta declarada con dos parametros.");
                        }
                        yyval=new NodoControl("Llamado Funcion" ,new NodoComun(val_peek(3).sval+"@"+ambito,(ArbolSintactico)parametro1,new NodoHoja("Un solo parametro")));
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(3).sval +"@"+ ambito,"Tipo"));
                }
            }else{
                        yyerror("La funcion " + val_peek(3).sval + " no se encuentra declarada");
                        yyval = new NodoHoja("Error sintactico");
            }
        }
break;
case 369:
//#line 1403 "gramatica.y"
{
                String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                if (!ambito.equals("") ){
                        if (!TablaSimbolos.getAtributo(val_peek(2).sval+"@"+ambito,"Uso").equals("Funcion")){
                                yyerror("La funcion "+val_peek(2).sval+" no fue declarada");
                        }else{
                                String par1 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Parametro1");
                                String par2 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Parametro2");
                                if(par2 == null){
                                        if(par1 != null){
                                                yyerror("La funcion esta declarada con un parametro.");
                                        }
                                }else{
                                        yyerror("La funcion esta declarada con dos parametros.");
                                }
                                yyval=new NodoControl("Llamado Funcion", new NodoComun(val_peek(2).sval+"@"+ambito,new NodoHoja("Fin"),new NodoHoja("Fin")));
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                        }
                }else{
                        yyerror("La funcion " + val_peek(2).sval + " no se encuentra declarada");
                        yyval = new NodoHoja("Error sintactico");
                }
        }
break;
case 370:
//#line 1426 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba )");}
break;
case 371:
//#line 1427 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba )");}
break;
case 372:
//#line 1428 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba )");}
break;
case 373:
//#line 1429 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");yyerror("Se esperaba otro parametro");}
break;
//#line 3985 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 * @throws IOException
 */
public void run() throws IOException
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
