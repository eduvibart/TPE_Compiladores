//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package Principal;
import java.io.IOException;
import AnalizadorLexico.AnalizadorLexico;
import AnalizadorLexico.Token;
import GeneracionCodigoIntermedio.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

//#line 27 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IF=257;
public final static short THEN=258;
public final static short ELSE=259;
public final static short END_IF=260;
public final static short OUT=261;
public final static short FUN=262;
public final static short RETURN=263;
public final static short BREAK=264;
public final static short WHEN=265;
public final static short WHILE=266;
public final static short FOR=267;
public final static short CONTINUE=268;
public final static short ID=269;
public final static short I32=270;
public final static short F32=271;
public final static short PUNTO=272;
public final static short PARENT_A=273;
public final static short PARENT_C=274;
public final static short COMILLA=275;
public final static short COMA=276;
public final static short DOSPUNTOS=277;
public final static short PUNTOCOMA=278;
public final static short IGUAL=279;
public final static short MAYOR=280;
public final static short MENOR=281;
public final static short MENORIGUAL=282;
public final static short MAYORIGUAL=283;
public final static short LLAVE_A=284;
public final static short LLAVE_C=285;
public final static short EXCL=286;
public final static short DIST=287;
public final static short ASIG=288;
public final static short CADENA=289;
public final static short COMENT=290;
public final static short CONST=291;
public final static short SUMA=292;
public final static short RESTA=293;
public final static short MULT=294;
public final static short DIV=295;
public final static short ENTERO=296;
public final static short FLOAT=297;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    1,    2,    2,    2,    3,    3,
    4,    4,    4,    4,   10,   10,   11,   11,   11,    6,
    6,   12,   12,   13,   13,   13,   13,   13,   13,   13,
   13,   13,   13,   13,   13,   13,   13,   13,    7,    7,
    7,   15,   15,   15,   16,   16,   16,   16,   16,   16,
   16,   16,   16,   16,   16,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   21,   21,   21,   21,   21,   21,   21,   21,   26,   23,
   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
   23,   22,   22,   22,   22,   22,   22,   22,   22,   22,
   22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
   22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
   22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
   22,   22,   22,   22,   22,   27,   27,   27,   28,   28,
   28,   28,   28,   28,   28,   28,   28,   28,   32,   32,
   32,   32,   32,   32,   32,   32,   31,   31,   31,   31,
   31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
   31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
   31,   24,   24,   24,   24,   14,   14,    8,   35,   35,
   36,   36,   36,    5,    5,    5,    5,    5,    5,   17,
   17,   17,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   40,   40,   40,   40,   40,   43,   43,   43,   34,
   34,   34,   34,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   42,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   42,   46,   46,   46,   46,
   46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
   46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
   46,   44,   44,   45,   45,   45,   45,   45,   45,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   25,   25,   25,   29,   29,   29,
   29,   29,   29,   47,   47,   47,   20,   20,   20,   20,
    9,    9,    9,    9,    9,    9,    9,    9,   39,   39,
   39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
   39,   48,   48,   48,   49,   49,   49,   49,   49,   49,
   49,   33,   33,   33,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   38,   51,   51,   18,   18,   18,   18,   18,
   18,   18,
};
final static short yylen[] = {                            2,
    4,    4,    4,    4,    1,    0,    3,    3,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    1,    2,
    2,    3,    1,    9,    7,    6,    9,    7,    6,    8,
    6,    5,    7,    5,    4,    6,    3,    2,    4,    4,
    2,    0,    3,    3,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,   11,   13,   13,    8,   13,
    9,   13,   12,   10,    9,    8,   12,   11,    9,    8,
    7,    6,    5,    4,    3,    2,   11,   10,   12,   11,
    8,    6,    8,    6,    5,    4,    3,    2,    2,   12,
   10,   11,    9,   12,   10,    9,    8,    7,    6,    5,
    4,    3,   11,    9,    8,    7,    6,    5,    4,    3,
    2,   17,   17,   15,   15,   16,   16,   14,   14,   17,
   15,   14,   17,   15,   14,   13,   13,   12,   11,   10,
    9,    8,    7,    6,    5,    4,    3,   16,   14,   13,
   16,   14,   13,   12,   12,   11,   10,    9,    8,    7,
    6,    5,    4,    3,    2,    0,    3,    3,    1,    1,
    1,    1,    1,    1,    2,    1,    2,    1,    8,    6,
    8,    6,    5,    4,    3,    2,   11,   12,   12,    8,
   13,    9,   13,   12,   10,    9,    8,   12,   11,    9,
    8,    7,   12,   11,   11,   10,    6,    5,    4,    3,
    2,    4,    4,    3,    2,    2,    2,    2,    3,    1,
    3,    3,    2,    1,    1,    1,    1,    1,    1,    3,
    2,    3,    3,    3,    1,    3,    3,    3,    3,    3,
    3,    3,    3,    1,    3,    3,    1,    1,    1,    1,
    1,    2,    2,   16,   16,   14,   14,   16,   14,   13,
   16,   14,   13,   12,   12,   11,   10,    9,    8,    7,
    6,    5,    4,    3,    2,   11,    9,   11,    9,    8,
    7,    6,    5,    4,    3,    2,   12,   12,   11,    8,
   13,    9,   13,   12,   10,    9,    8,   12,   11,    9,
    8,    7,   11,   10,   12,   11,    6,    5,    4,    3,
    2,    0,    3,    1,    1,    1,    1,    1,    2,   12,
   12,   11,    8,   13,    9,   13,   12,   10,    9,    8,
   12,   11,    9,    8,    7,   11,   10,   12,   11,    6,
    5,    4,    3,    2,    3,    3,    2,    1,    1,    1,
    1,    1,    1,    0,    3,    2,    4,    4,    3,    2,
    8,    6,    8,    6,    5,    4,    3,    2,   12,   10,
   11,    9,   11,    9,    8,    7,    6,    5,    4,    3,
    2,    0,    3,    2,    1,    1,    1,    1,    1,    2,
    1,    0,    2,    2,   12,   12,   11,    8,   13,    9,
   13,   12,   10,    9,    8,   12,   11,    9,    8,    7,
   11,   10,   12,   11,    6,    5,    4,    3,    2,   17,
   17,   15,   15,   16,   16,   14,   14,   17,   15,   14,
   17,   15,   14,   13,   13,   12,   11,   10,    9,    8,
    7,    6,    5,    4,    3,   16,   14,   13,   16,   14,
   13,   12,   12,   11,   10,    9,    8,    7,    6,    5,
    4,    3,    2,    1,    1,    6,    4,    3,    6,    4,
    3,    5,
};
final static short yydefred[] = {                         0,
    0,    5,    0,    0,    6,    6,    6,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   15,   16,    4,
    0,    0,    9,   10,   11,   12,   13,   14,    0,    0,
  214,  219,  216,    0,  215,  217,  218,    3,    2,    1,
  334,    0,  350,    0,   38,    0,  358,    0,  371,    0,
  453,    0,  221,    0,   89,    0,    0,    0,  210,    8,
    7,   21,   23,    0,   41,   42,    0,    0,  333,    0,
    0,    0,    0,  240,  241,  239,    0,    0,  238,    0,
    0,    0,  234,  349,    0,   37,    0,  357,    0,  370,
    0,  452,    0,  461,  455,  458,  454,    0,  222,    0,
  213,    0,    0,    0,    0,    0,  435,    0,  276,    0,
  265,    0,  242,  243,  332,    0,  337,  338,  339,  340,
  341,  342,  343,    0,    0,    0,    0,    0,    0,    0,
  348,  347,   35,    0,    0,    0,  356,    0,  369,    0,
  451,    0,  460,  457,    0,  212,  211,  209,   22,   40,
    0,    0,    0,    0,    0,   39,   45,   46,   47,    0,
   48,   49,   50,   51,   52,   53,   54,   55,    0,    0,
  434,    0,  275,    0,  264,    0,  331,    0,  228,    0,
  229,    0,  336,    0,  235,  232,  236,  233,  230,  226,
  231,  227,   32,    0,  207,  206,   34,    0,    0,  355,
    0,  368,    0,  450,   19,    0,   17,    0,  462,    0,
   76,    0,  205,    0,   88,    0,  111,    0,  155,    0,
   44,   43,    0,    0,    0,  433,    0,  274,    0,  263,
    0,  330,  344,    0,   29,   26,   31,    0,   36,    0,
  354,  344,  352,  367,    0,   18,  449,    0,  459,  456,
   75,    0,  204,    0,   87,    0,  110,    0,  154,    0,
  102,    0,  137,    0,    0,  432,    0,  273,    0,  262,
    0,    0,  325,    0,   28,   25,   33,    0,    0,  366,
    0,    0,  448,    0,   74,    0,  203,  202,   86,    0,
  109,    0,  153,    0,  101,    0,  136,    0,    0,  431,
    0,  272,    0,  261,    0,  320,    0,    0,  324,    0,
  313,   30,    0,  353,  351,  365,    0,  447,    0,   73,
    0,   85,    0,  108,    0,  152,    0,  100,    0,  135,
    0,    0,  430,    0,  271,    0,  260,    0,  319,    0,
  315,  345,  323,  344,    0,   27,   24,  364,    0,  381,
    0,    0,  372,  375,  377,  379,  378,  362,  376,  446,
    0,   72,   42,    0,   84,   42,   82,  107,    0,  151,
    0,   99,    0,  134,    0,    0,  429,    0,  270,    0,
  259,    0,  318,  344,    0,    0,  327,    0,  409,    0,
    0,  380,    0,  445,    0,    0,   71,    0,    0,  106,
    0,  150,    0,   98,    0,  133,    0,  372,  360,  428,
    0,  269,    0,    0,  302,  304,  306,  308,  307,  267,
  305,  258,    0,    0,  329,    0,  322,    0,  326,  312,
  408,    0,  384,  383,  363,  361,    0,  444,    0,    0,
   66,    0,   70,    0,   59,   83,   81,  105,    0,  149,
    0,   97,    0,  132,    0,    0,  427,    0,  301,    0,
  309,    0,  257,    0,  317,    0,  328,  311,  321,  310,
  407,    0,  373,  442,    0,  443,    0,   65,    0,   61,
    0,   69,   42,    0,  104,    0,    0,    0,    0,  156,
  159,  161,  164,  163,  168,   93,  160,  162,  148,    0,
   96,    0,  131,    0,  359,  426,    0,    0,  300,    0,
  268,  266,    0,  256,    0,    0,  316,  314,  406,    0,
  441,    0,  438,    0,   64,   42,    0,    0,    0,   78,
    0,  201,    0,  167,  176,    0,  165,    0,  147,    0,
   95,  156,   91,  130,    0,  424,    0,  425,    0,  299,
    0,  303,  254,    0,  255,    0,  405,  372,    0,  440,
  372,  417,  437,  372,  416,    0,   80,    0,    0,   68,
    0,   77,   56,  200,    0,  175,    0,  103,   92,    0,
  146,    0,    0,    0,  129,    0,  423,    0,  420,    0,
  298,    0,  253,    0,  250,    0,    0,  400,    0,    0,
    0,   63,    0,   79,    0,   67,    0,  199,    0,  174,
    0,  158,  157,  144,    0,  145,    0,   94,   90,  128,
    0,    0,  422,  372,  412,  419,  372,  413,  297,  302,
    0,  252,  302,  247,  249,  302,  246,  395,    0,  399,
    0,  388,  439,  414,  436,  415,   62,   60,   57,   58,
  198,    0,  173,    0,  143,    0,  140,    0,  126,    0,
  127,    0,    0,    0,    0,  292,    0,    0,    0,  394,
    0,  390,  398,  372,    0,  197,  156,    0,  172,  156,
  170,  142,  156,  119,  139,  156,  118,  125,    0,  122,
    0,  421,  410,  418,  411,  287,    0,  291,    0,  280,
  251,  244,  248,  245,  393,  372,    0,    0,  402,    0,
    0,  192,    0,    0,    0,    0,  124,  156,  114,  121,
  156,  115,  286,    0,  282,  290,  302,    0,    0,  404,
    0,  397,    0,  401,  387,  187,    0,  191,    0,  180,
  171,  169,  141,  116,  138,  117,    0,    0,  285,  302,
    0,    0,  294,    0,  392,    0,  403,  386,  396,  385,
  186,    0,  182,  190,  156,    0,  123,  112,  120,  113,
    0,  296,    0,  289,    0,  293,  279,  391,  389,  185,
  156,    0,    0,  196,    0,  284,    0,  295,  278,  288,
  277,    0,  194,    0,  189,    0,  195,  177,  283,  281,
  184,    0,  193,  178,  188,  179,  183,  181,
};
final static short yydgoto[] = {                          3,
    4,    8,   22,   23,  308,  157,  158,  159,   28,   29,
  208,   64,   30,  136,  105,  160,  491,   76,  163,  492,
  165,  493,  494,  495,   77,  169,  538,  580,  126,   78,
  497,  498,  392,   79,   58,   59,   35,  356,  357,   80,
   81,   82,   83,  462,  513,  421,  272,  393,  437,  359,
   98,
};
final static short yysindex[] = {                        36,
 -242,    0,    0, -244,    0,    0,    0,  987, 1014,  976,
 -101,  -28,   82,   70,  185,  438,   96,    0,    0,    0,
 -176, -232,    0,    0,    0,    0,    0,    0,  231, -170,
    0,    0,    0,   92,    0,    0,    0,    0,    0,    0,
    0, -239,    0, -218,    0,  511,    0, -144,    0, -129,
    0,  348,    0,  -98,    0, -106, -201,  -95,    0,    0,
    0,    0,    0,   22,    0,    0,   46,  538,    0,  630,
  635,   55,  546,    0,    0,    0, -190,  774,    0,  854,
   72,  128,    0,    0, -117,    0,  557,    0,  243,    0,
  355,    0, -197,    0,    0,    0,    0,  300,    0,  882,
    0, -215, -176,   97,  807,  583,    0,  577,    0,  273,
    0,  663,    0,    0,    0,    3,    0,    0,    0,    0,
    0,    0,    0, -194,  -23,  294,   37,  107, -180,  -62,
    0,    0,    0, -217,  802,  378,    0,  315,    0, -156,
    0, -164,    0,    0,  150,    0,    0,    0,    0,    0,
  673,  687,  699,  700,  711,    0,    0,    0,    0,  -82,
    0,    0,    0,    0,    0,    0,    0,    0,  958,  171,
    0, -192,    0,  363,    0, -162,    0, 1986,    0,  854,
    0,  854,    0,  882,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  761,    0,    0,    0,  -76,  765,    0,
 2000,    0,  713,    0,    0,  155,    0,  -73,    0,  371,
    0,  343,    0,  426,    0,  441,    0,  446,    0,  806,
    0,    0,  718,  723,  179,    0,  -13,    0,  -35,    0,
  159,    0,    0,  -64,    0,    0,    0,  778,    0,  402,
    0,    0,    0,    0,  864,    0,    0,  876,    0,    0,
    0,  406,    0,  -70,    0,  427,    0,  429,    0, -152,
    0,  490,    0,  881,  270,    0,  -48,    0,  725,    0,
  -46, 1515,    0,  364,    0,    0,    0,  -15, 1522,    0,
 -137,  430,    0,  872,    0,  327,    0,    0,    0,  360,
    0,   31,    0,  184,    0,  443,    0, -109,  192,    0,
  940,    0,  952,    0,  957,    0,  633,  206,    0, 2007,
    0,    0,  789,    0,    0,    0, 1767,    0,  495,    0,
  824,    0,  840,    0,  736,    0,   -9,    0,   40,    0,
  209,  239,    0,  948,    0,  450,    0,  983,    0, 2021,
    0,    0,    0,    0,   -2,    0,    0,    0,  737,    0,
  255, -203,    0,    0,    0,    0,    0,    0,    0,    0,
  -54,    0,    0,   -1,    0,    0,    0,    0,  999,    0,
 1004,    0,  738,    0,    1, 2028,    0,  504,    0, 1896,
    0,  509,    0,    0,   32, 1536,    0, -183,    0,  529,
 1037,    0, 1290,    0, -224,  856,    0,  823,  873,    0,
  453,    0, 1021,    0, 1042,    0, 1056,    0,    0,    0,
  211,    0,  749, 1017,    0,    0,    0,    0,    0,    0,
    0,    0,  259, 1553,    0, -132,    0,  138,    0,    0,
    0,  462,    0,    0,    0,    0,  281,    0,  226,  240,
    0,  153,    0,  900,    0,    0,    0,    0, 1590,    0,
  543,    0,  494,    0, 1041,  605,    0, -186,    0,  551,
    0, 1425,    0, -158,    0,  154,    0,    0,    0,    0,
    0,  393,    0,    0,  547,    0,  567,    0,  916,    0,
  289,    0,    0,   34,    0,  751, 1017,  756,  255,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  372,
    0, 1604,    0,  563,    0,    0,  269,  285,    0,  607,
    0,    0,  352,    0,  339,  345,    0,    0,    0, 1781,
    0, 1800,    0, 1814,    0,    0,  115, 1025,  932,    0,
  548,    0,  568,    0,    0,  601,    0, 1093,    0, -147,
    0,    0,    0,    0,  375,    0,  621,    0,  627,    0,
  470,    0,    0,  631,    0,  632,    0,    0,  151,    0,
    0,    0,    0,    0,    0,  949,    0,  403,  400,    0,
  188,    0,    0,    0,  640,    0,  657,    0,    0,  213,
    0,  476,  497, 1107,    0, -115,    0, 1833,    0, 1847,
    0, 1910,    0, 1926,    0, 1940, 1305,    0, 1059, 1320,
 1335,    0,  698,    0,  424,    0,  460,    0,  662,    0,
  858,    0,    0,    0,  659,    0,  660,    0,    0,    0,
  582,  589,    0,    0,    0,    0,    0,    0,    0,    0,
  216,    0,    0,    0,    0,    0,    0,    0, 1086,    0,
 1866,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1626,    0, 1640,    0, 1662,    0, 1676,    0,  671,
    0,  685, 1350, 1365, 1440,    0, 1121, 1455, 1470,    0,
 1880,    0,    0,    0,  219,    0,    0,  220,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1698,    0,
 1712,    0,    0,    0,    0,    0, 1123,    0, 1956,    0,
    0,    0,    0,    0,    0,    0,  230, 1380,    0,  787,
 1130,    0, 1129, 1144, 1167, 1181,    0,    0,    0,    0,
    0,    0,    0, 1970,    0,    0,    0,  232, 1395,    0,
  828,    0,  844,    0,    0,    0, 1158,    0, 1734,    0,
    0,    0,    0,    0,    0,    0, 1204, 1218,    0,    0,
  245, 1485,    0,  920,    0, 1087,    0,    0,    0,    0,
    0, 1748,    0,    0,    0,  268,    0,    0,    0,    0,
 1500,    0, 1109,    0, 1146,    0,    0,    0,    0,    0,
    0,  275, 1241,    0, 1160,    0, 1165,    0,    0,    0,
    0, 1255,    0, 1166,    0, 1183,    0,    0,    0,    0,
    0, 1195,    0,    0,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  299,    0,    0,
    0,    0,    0,  301,    0,    0,    0,    0,    0,    0,
    0,  643,    0,    0,    0,    0,    0,    0,    0,  683,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1070,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  721,
    0,  759,    0,  697,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1567,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1275,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1410,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  319,    0,  365,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0, 1244,    0,    0,   80,  771, 1343, 1448,    0,  -84,
  233,    0,    0,  488, -341, -313,   -8,   39,    0,    6,
    0,  -96,  -55,  -22,  -43,   25, -521,  -10, -273,  -25,
    0,    0,  201,  -50,    0,  595,    0,   10,   35, 1208,
 -344, -329, 1213, -607, -343,    0, -236, -352, -304,    0,
  580,
};
final static int YYTABLESIZE=2312;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         31,
   31,   31,  135,   97,   89,  279,   91,  364,  166,  367,
  319,    6,  358,   33,   33,   33,   69,   36,   36,   36,
  584,  396,  665,   60,  399,  668,   70,   71,  669,   72,
  100,  438,   34,   34,   34,  418,  420,   84,  193,    7,
  146,    5,   37,   37,   37,   61,   32,   32,   32,  167,
  419,  147,   53,   73,  101,  456,   74,   75,  141,  194,
  378,  179,  170,  226,  382,  115,  174,  439,  440,  506,
   85,  409,  429,   55,   72,  189,  430,   73,  190,  192,
   74,   75,  168,  116,   56,   65,  102,   24,   24,   24,
  142,  204,   57,  230,   97,  227,  161,  514,   73,  202,
  184,   74,   75,  293,  205,  507,  508,  386,  581,  236,
  164,   88,   73,   66,  135,   74,   75,  418,   53,  752,
  203,   70,   71,  467,   72,  231,   90,  468,  206,  451,
  484,  207,  419,  515,  516,  294,   70,   71,  131,   72,
  620,  529,  771,  162,  582,  583,  330,  424,   73,   99,
   56,   74,   75,  276,   41,  711,  132,   94,  714,   70,
   71,  715,   72,   73,  716,  527,   74,   75,  252,   31,
   95,   42,  256,  221,  258,   96,  621,  622,  331,  237,
  103,  504,  247,   33,  566,  287,   73,   36,  254,   74,
   75,  273,   31,  191,   73,  222,  747,   74,   75,  748,
  238,  394,   34,  288,  248,  597,   33,  300,  600,  304,
   36,  601,   37,  274,  569,  559,   32,  562,  296,  565,
  268,  124,  125,  395,  166,   34,  166,   43,  347,  301,
   73,  305,  181,   74,   75,   37,  282,  124,  125,   32,
  312,  269,  266,  783,   44,   72,  370,  418,  631,  418,
  634,  418,  637,  387,  397,  205,  406,  234,  177,  792,
  178,  313,  419,   31,  419,  167,  419,  167,  371,   73,
   31,  663,   74,   75,  664,  388,  398,   33,  407,  206,
  243,   36,  207,  625,   33,  628,  324,  425,   36,  530,
  332,    1,  185,  361,  336,  372,   34,  104,  168,  166,
  168,   31,  166,   34,    2,   72,   37,  325,  354,  426,
   32,  531,  161,   37,  161,   33,  373,   32,  106,   36,
  418,  708,  355,  418,  418,   47,  164,   54,  164,   73,
  129,   31,   74,   75,   34,  419,  675,   45,  419,  419,
  167,   34,   48,  167,   37,   33,  432,  166,   32,   36,
   46,   53,  411,  729,  418,  728,  423,   67,   68,  162,
  401,  162,  187,  461,   34,  149,  707,  354,   54,  419,
  567,  416,   55,  168,   37,   72,  168,   31,   32,  418,
  751,  355,  166,   56,  354,  417,  130,  161,  167,  345,
  161,   33,  568,  469,  419,   36,  453,  470,  355,   73,
   34,  164,   74,   75,  164,  209,  598,  418,  478,  517,
   34,  479,  480,  518,  270,   31,  510,   34,   95,  385,
   37,  168,  419,  167,   32,  500,  418,  205,  599,   33,
  481,  166,  166,   36,  162,  161,  534,  162,  496,  326,
   49,  419,   73,  606,  225,   74,   75,  354,   34,  164,
  246,  206,  205,  416,  207,  265,  168,   50,   37,  267,
  281,  355,   32,  271,  374,  607,  457,  417,  612,  166,
  161,  666,  167,  167,  709,  712,  206,  205,  545,  207,
   34,  474,  162,  342,  164,  730,   62,  753,  458,  575,
  613,  543,  577,  667,  205,  476,  710,  713,  137,   63,
  772,  206,  124,  125,  207,  168,  168,  731,  205,  754,
  167,  354,  376,  354,  463,  354,  138,  162,  206,  161,
  161,  207,  773,  784,  546,  355,  327,  355,  173,  355,
  793,  391,  206,  164,  164,  207,  464,  205,   70,   71,
  548,   72,  299,  168,   34,  785,   34,  528,   34,  183,
  124,  125,  794,  205,  208,  143,   20,  161,  473,   70,
   71,  206,   72,  375,  207,   73,  162,  162,   74,   75,
  200,  164,  201,  144,  166,  145,  208,  206,   20,  354,
  207,  354,  320,  416,  321,  416,   73,  416,  354,   74,
   75,  354,  354,  355,  553,  355,  166,  417,  251,  417,
  555,  417,  355,   92,  162,  355,  355,  205,   70,   71,
  139,   72,   34,  205,   34,  322,   93,  323,  228,  309,
  382,   34,  310,  311,   34,   34,  249,  539,  140,  552,
  585,  206,  354,  197,  207,   73,  229,  206,   74,   75,
  207,  678,  382,  681,  250,  684,  355,  687,  519,  540,
  520,  198,  586,  199,  354,  354,  416,  277,  604,  416,
  416,  285,  354,  124,  125,   34,  124,  125,  355,  355,
  417,  475,  477,  417,  417,  278,  355,  605,  719,  286,
  722,  253,  289,  649,  291,  316,  240,   34,   34,  537,
  416,   70,   71,   51,   72,   34,  255,  148,  328,  354,
  290,  257,  292,  317,  417,  379,   70,   71,  448,   72,
   52,   70,   71,  355,   72,  416,  329,  471,   73,  650,
  354,   74,   75,  380,  210,  591,  449,  592,  766,  417,
    0,  614,   34,   73,  355,  472,   74,   75,   73,  547,
  549,   74,   75,  416,  205,  295,    0,  554,  556,  501,
  360,  782,  616,   34,    0,   70,   71,  417,   72,  410,
   70,   71,  416,   72,  422,  205,   86,  502,  206,   70,
   71,  207,   72,    0,   70,   71,  417,   72,   25,   25,
   25,    0,   73,   87,  431,   74,   75,   73,    0,  206,
   74,   75,  207,  107,   70,   71,   73,   72,  499,   74,
   75,   73,  521,  572,   74,   75,  509,  573,   70,   71,
  108,   72,  133,    0,  615,  617,   70,   71,  544,   72,
  522,   73,  523,  574,   74,   75,   18,   19,   70,   71,
  134,   72,  171,   70,   71,   73,   72,  659,   74,   75,
  524,  113,  114,   73,  661,  172,   74,   75,   70,   71,
  205,   72,    0,  660,  662,   73,  576,  205,   74,   75,
   73,  349,  550,   74,   75,   12,   70,   71,  350,   72,
   15,   16,  351,  352,  206,   73,  587,  207,   74,   75,
  551,  206,  589,    0,  207,  109,  593,  595,  339,  505,
  111,  340,  341,   73,  588,  608,   74,   75,  237,  237,
  590,  237,  110,  237,  594,  596,  237,  112,  237,  237,
  237,  237,  610,  609,  655,  657,  237,  651,  175,  652,
  237,  237,  237,  237,  237,  237,  688,  237,  211,  237,
  611,  176,  656,  658,  237,  237,  237,  237,  225,  225,
  690,  225,  213,  225,  689,  212,  225,    0,  225,  225,
  225,  225,  335,  647,  215,  217,  225,  648,  691,  214,
  225,  225,  225,  225,  225,  225,  219,  225,  244,  225,
  335,  216,  218,  261,  225,  225,  223,  223,  263,  223,
  302,  223,    0,  220,  223,  245,  223,  223,  223,  223,
  262,  368,  389,  404,  223,  264,    0,  303,  223,  223,
  223,  223,  223,  223,  459,  223,  532,  223,  369,  390,
  405,  535,  223,  223,  224,  224,  235,  224,    0,  224,
  239,  460,  224,  533,  224,  224,  224,  224,  536,  117,
   18,   19,  224,  275,   18,   19,  224,  224,  224,  224,
  224,  224,  734,  224,  346,  224,  735,   18,   19,    0,
  224,  224,  118,  119,  120,  121,  122,  195,   18,   19,
  123,  259,  150,  151,    0,  124,  125,   12,   13,  152,
  196,  153,  154,  155,  260,   17,   18,   19,  443,  362,
  151,  444,  445,  757,   12,   13,  152,  758,  153,  154,
  155,  156,   17,   18,   19,  365,  151,   21,    0,  759,
   12,   13,  152,  760,  153,  154,  155,  363,   17,   18,
   19,  441,  151,  653,   21,  654,   12,   13,  152,  280,
  153,  154,  155,  366,   17,   18,   19,  318,  446,  151,
   21,  283,  281,   12,   13,  152,  297,  153,  154,  155,
  442,   17,   18,   19,  284,    0,   21,  127,  128,  298,
  118,  119,  120,  121,  122,  482,  151,  447,  123,    0,
   12,   13,  152,   21,  153,  154,  155,    0,   17,   18,
   19,  525,  151,  124,  125,  776,   12,   13,  152,  777,
  153,  154,  155,  483,   17,   18,   19,  570,  151,    0,
   21,    0,   12,   13,  152,  333,  153,  154,  155,  526,
   17,   18,   19,  377,  602,  151,   21,  335,  334,   12,
   13,  152,  337,  153,  154,  155,  571,   17,   18,   19,
  281,    0,   21,  223,  224,  338,  118,  119,  120,  121,
  122,   39,   11,  603,  123,    0,   12,   13,  381,   21,
   14,   15,   16,   11,   17,   18,   19,   12,   13,    9,
   10,   14,   15,   16,  400,   17,   18,   19,    0,  402,
   40,  118,  119,  120,  121,  122,   21,  281,    0,  123,
   11,   20,  403,    0,   12,   13,  450,   21,   14,   15,
   16,  151,   17,   18,   19,   12,   13,  152,    0,  153,
  154,  155,  433,   17,   18,   19,  503,  452,   38,  118,
  119,  120,  121,  122,   21,  434,    0,  123,    0,   73,
  281,  454,   74,   75,  640,   21,    0,  641,  642,  118,
  119,  120,  121,  122,  455,  220,  220,  123,  220,    0,
  220,  180,  182,  220,    0,  220,  220,  220,  220,  186,
  188,  670,  778,  220,  671,  672,  779,  220,  578,  486,
   26,   26,   26,   12,  220,  152,  487,  488,  154,  155,
  489,  352,  618,  486,  788,    0,    0,   12,  789,  152,
  487,  488,  154,  155,  489,  352,  698,  579,  723,  699,
  700,  724,  725,    0,  738,  736,  486,  739,  740,    0,
   12,  619,  152,  487,  488,  154,  155,  489,  352,  741,
  486,  790,    0,    0,   12,  791,  152,  487,  488,  154,
  155,  489,  352,  761,  737,  797,  762,  763,    0,  798,
  799,  803,  743,  486,  800,  804,    0,   12,  742,  152,
  487,  488,  154,  155,  489,  352,  745,  486,  805,    0,
    0,   12,  806,  152,  487,  488,  154,  155,  489,  352,
  807,  744,    0,    0,  808,   27,   27,   27,    0,  767,
  486,    0,    0,    0,   12,  746,  152,  487,  488,  154,
  155,  489,  352,  769,  486,    0,    0,    0,   12,    0,
  152,  487,  488,  154,  155,  489,  352,    0,  768,    0,
    0,    0,    0,    0,    0,    0,  795,  486,    0,    0,
    0,   12,  770,  152,  487,  488,  154,  155,  489,  352,
  801,  486,    0,    0,    0,   12,    0,  152,  487,  488,
  154,  155,  489,  352,    0,  796,    0,    0,    0,    0,
  382,  382,    0,    0,    0,  382,    0,    0,  382,  802,
  382,  382,  382,  382,    0,  435,  349,    0,    0,    0,
   12,    0,  382,  350,    0,   15,   16,  351,  352,  382,
  638,  349,    0,    0,    0,   12,    0,    0,  350,    0,
   15,   16,  351,  352,  436,  643,  349,    0,    0,    0,
   12,    0,    0,  350,    0,   15,   16,  351,  352,  639,
  645,  349,    0,    0,    0,   12,    0,    0,  350,    0,
   15,   16,  351,  352,  644,  692,  349,    0,    0,    0,
   12,    0,    0,  350,    0,   15,   16,  351,  352,  646,
  694,  349,    0,    0,    0,   12,    0,    0,  350,    0,
   15,   16,  351,  352,  693,  732,  349,    0,    0,    0,
   12,    0,    0,  350,    0,   15,   16,  351,  352,  695,
  755,  349,    0,    0,    0,   12,    0,    0,  350,    0,
   15,   16,  351,  352,  733,  374,  374,    0,    0,    0,
  374,    0,    0,  374,    0,  374,  374,  374,  374,  756,
  511,  413,    0,    0,    0,   12,    0,    0,  414,    0,
   70,   71,    0,  281,  374,  696,  413,    0,    0,    0,
   12,    0,    0,  414,    0,   70,   71,    0,  281,  512,
  701,  413,    0,    0,    0,   12,    0,    0,  414,    0,
   70,   71,    0,  281,  697,  703,  413,    0,    0,    0,
   12,    0,    0,  414,    0,   70,   71,    0,  281,  702,
  774,  413,    0,    0,    0,   12,    0,    0,  414,    0,
   70,   71,    0,  281,  704,  786,  413,    0,    0,    0,
   12,    0,    0,  414,    0,   70,   71,    0,  281,  775,
  306,   11,    0,    0,    0,   12,    0,  314,   11,    0,
   15,   16,   12,   17,  787,    0,    0,   15,   16,    0,
   17,  427,   11,    0,    0,    0,   12,    0,    0,  307,
    0,   15,   16,    0,   17,    0,  315,    0,  465,   11,
    0,    0,    0,   12,    0,    0,    0,    0,   15,   16,
  428,   17,  346,  346,    0,    0,    0,  346,    0,    0,
    0,    0,  346,  346,    0,  346,    0,  466,    0,    0,
    0,    0,    0,    0,    0,  485,  486,    0,    0,    0,
   12,  346,  152,  487,  488,  154,  155,  489,  352,  541,
  486,    0,    0,    0,   12,    0,  152,  487,  488,  154,
  155,  489,  352,  490,    0,    0,    0,    0,    0,    0,
    0,  676,  486,    0,    0,    0,   12,  542,  152,  487,
  488,  154,  155,  489,  352,  679,  486,    0,    0,    0,
   12,    0,  152,  487,  488,  154,  155,  489,  352,  677,
    0,    0,    0,    0,    0,    0,    0,  682,  486,    0,
    0,    0,   12,  680,  152,  487,  488,  154,  155,  489,
  352,  685,  486,    0,    0,    0,   12,    0,  152,  487,
  488,  154,  155,  489,  352,  683,    0,    0,    0,    0,
    0,    0,    0,  717,  486,    0,    0,    0,   12,  686,
  152,  487,  488,  154,  155,  489,  352,  720,  486,    0,
    0,    0,   12,    0,  152,  487,  488,  154,  155,  489,
  352,  718,    0,    0,    0,    0,    0,    0,    0,  764,
  486,    0,    0,    0,   12,  721,  152,  487,  488,  154,
  155,  489,  352,  780,  486,    0,    0,    0,   12,    0,
  152,  487,  488,  154,  155,  489,  352,  765,    0,    0,
    0,    0,  348,  349,    0,    0,    0,   12,    0,    0,
  350,  781,   15,   16,  351,  352,  557,  349,    0,    0,
    0,   12,    0,    0,  350,    0,   15,   16,  351,  352,
  353,    0,    0,    0,    0,  560,  349,    0,    0,    0,
   12,    0,    0,  350,  558,   15,   16,  351,  352,  563,
  349,    0,    0,    0,   12,    0,    0,  350,    0,   15,
   16,  351,  352,  561,    0,    0,    0,    0,  623,  349,
    0,    0,    0,   12,    0,    0,  350,  564,   15,   16,
  351,  352,  626,  349,    0,    0,    0,   12,    0,    0,
  350,    0,   15,   16,  351,  352,  624,    0,    0,    0,
    0,  673,  349,    0,    0,    0,   12,    0,    0,  350,
  627,   15,   16,  351,  352,  705,  349,    0,    0,    0,
   12,    0,    0,  350,    0,   15,   16,  351,  352,  674,
    0,  412,  413,    0,    0,    0,   12,    0,    0,  414,
    0,   70,   71,  706,  281,  629,  413,    0,    0,    0,
   12,    0,    0,  414,    0,   70,   71,    0,  281,  415,
    0,  632,  413,    0,    0,    0,   12,    0,    0,  414,
    0,   70,   71,  630,  281,  635,  413,    0,    0,    0,
   12,    0,    0,  414,    0,   70,   71,    0,  281,  633,
    0,  726,  413,    0,    0,    0,   12,    0,    0,  414,
    0,   70,   71,  636,  281,  749,  413,    0,    0,    0,
   12,    0,    0,  414,    0,   70,   71,    0,  281,  727,
    0,  232,   11,    0,    0,    0,   12,    0,    0,    0,
    0,   15,   16,  750,   17,  241,   11,    0,    0,    0,
   12,    0,  343,   11,    0,   15,   16,   12,   17,  233,
    0,    0,   15,   16,    0,   17,  383,   11,    0,    0,
    0,   12,    0,  242,  349,    0,   15,   16,   12,   17,
  344,  350,    0,   15,   16,  351,  352,    0,    0,    0,
    0,    0,    0,    0,  384,    0,    0,    0,    0,    0,
    0,  408,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          8,
    9,   10,   87,   54,   48,  242,   50,  321,  105,  323,
  284,  256,  317,    8,    9,   10,  256,    8,    9,   10,
  542,  363,  630,  256,  366,  633,  266,  267,  636,  269,
   56,  256,    8,    9,   10,  380,  380,  256,  256,  284,
  256,  284,    8,    9,   10,  278,    8,    9,   10,  105,
  380,  102,  256,  293,  256,  408,  296,  297,  256,  277,
  334,  256,  106,  256,  338,  256,  110,  292,  293,  256,
  289,  376,  256,  277,  269,  256,  260,  293,  129,  130,
  296,  297,  105,  274,  288,  256,  288,    8,    9,   10,
  288,  256,  269,  256,  145,  288,  105,  256,  293,  256,
  126,  296,  297,  256,  269,  292,  293,  344,  256,  194,
  105,  256,  293,  284,  199,  296,  297,  462,  256,  727,
  277,  266,  267,  256,  269,  288,  256,  260,  293,  403,
  444,  296,  462,  292,  293,  288,  266,  267,  256,  269,
  256,  483,  750,  105,  292,  293,  256,  384,  293,  256,
  288,  296,  297,  238,  256,  677,  274,  256,  680,  266,
  267,  683,  269,  293,  686,  479,  296,  297,  212,  178,
  269,  273,  216,  256,  218,  274,  292,  293,  288,  256,
  276,  455,  256,  178,  526,  256,  293,  178,  214,  296,
  297,  256,  201,  256,  293,  278,  718,  296,  297,  721,
  277,  256,  178,  274,  278,  558,  201,  256,  561,  256,
  201,  564,  178,  278,  528,  520,  178,  522,  262,  524,
  256,  292,  293,  278,  321,  201,  323,  256,  313,  278,
  293,  278,  256,  296,  297,  201,  245,  292,  293,  201,
  256,  277,  256,  765,  273,  269,  256,  592,  592,  594,
  594,  596,  596,  256,  256,  269,  256,  178,  256,  781,
  258,  277,  592,  272,  594,  321,  596,  323,  278,  293,
  279,  624,  296,  297,  627,  278,  278,  272,  278,  293,
  201,  272,  296,  588,  279,  590,  256,  256,  279,  256,
  299,  256,  256,  319,  303,  256,  272,  276,  321,  396,
  323,  310,  399,  279,  269,  269,  272,  277,  317,  278,
  272,  278,  321,  279,  323,  310,  277,  279,  273,  310,
  665,  674,  317,  668,  669,  256,  321,  273,  323,  293,
  259,  340,  296,  297,  310,  665,  641,  256,  668,  669,
  396,  317,  273,  399,  310,  340,  390,  444,  310,  340,
  269,  256,  378,  706,  699,  699,  382,  266,  267,  321,
  369,  323,  256,  414,  340,  269,  671,  376,  273,  699,
  256,  380,  277,  396,  340,  269,  399,  386,  340,  724,
  724,  376,  479,  288,  393,  380,  259,  396,  444,  310,
  399,  386,  278,  256,  724,  386,  405,  260,  393,  293,
  376,  396,  296,  297,  399,  256,  256,  752,  256,  256,
  386,  259,  260,  260,  256,  424,  460,  393,  269,  340,
  386,  444,  752,  479,  386,  451,  771,  269,  278,  424,
  278,  528,  529,  424,  396,  444,  487,  399,  449,  256,
  256,  771,  293,  256,  274,  296,  297,  456,  424,  444,
  296,  293,  269,  462,  296,  277,  479,  273,  424,  227,
  269,  456,  424,  231,  256,  278,  256,  462,  256,  566,
  479,  256,  528,  529,  256,  256,  293,  269,  504,  296,
  456,  256,  444,  278,  479,  256,  256,  256,  278,  533,
  278,  502,  536,  278,  269,  256,  278,  278,  256,  269,
  256,  293,  292,  293,  296,  528,  529,  278,  269,  278,
  566,  520,  274,  522,  256,  524,  274,  479,  293,  528,
  529,  296,  278,  256,  256,  520,  294,  522,  256,  524,
  256,  277,  293,  528,  529,  296,  278,  269,  266,  267,
  256,  269,  273,  566,  520,  278,  522,  259,  524,  256,
  292,  293,  278,  269,  256,  256,  256,  566,  278,  266,
  267,  293,  269,  331,  296,  293,  528,  529,  296,  297,
  256,  566,  258,  274,  256,  276,  278,  293,  278,  588,
  296,  590,  256,  592,  258,  594,  293,  596,  597,  296,
  297,  600,  601,  588,  256,  590,  278,  592,  256,  594,
  256,  596,  597,  256,  566,  600,  601,  269,  266,  267,
  256,  269,  588,  269,  590,  256,  269,  258,  256,  256,
  256,  597,  259,  260,  600,  601,  256,  256,  274,  278,
  256,  293,  641,  256,  296,  293,  274,  293,  296,  297,
  296,  652,  278,  654,  274,  656,  641,  658,  256,  278,
  258,  274,  278,  276,  663,  664,  665,  256,  256,  668,
  669,  256,  671,  292,  293,  641,  292,  293,  663,  664,
  665,  439,  440,  668,  669,  274,  671,  278,  689,  274,
  691,  256,  256,  260,  256,  256,  199,  663,  664,  489,
  699,  266,  267,  256,  269,  671,  256,  103,  256,  708,
  274,  256,  274,  274,  699,  256,  266,  267,  256,  269,
  273,  266,  267,  708,  269,  724,  274,  256,  293,  260,
  729,  296,  297,  274,  145,  256,  274,  258,  739,  724,
   -1,  256,  708,  293,  729,  274,  296,  297,  293,  507,
  508,  296,  297,  752,  269,  256,   -1,  515,  516,  256,
  256,  762,  256,  729,   -1,  266,  267,  752,  269,  256,
  266,  267,  771,  269,  256,  269,  256,  274,  293,  266,
  267,  296,  269,   -1,  266,  267,  771,  269,    8,    9,
   10,   -1,  293,  273,  256,  296,  297,  293,   -1,  293,
  296,  297,  296,  256,  266,  267,  293,  269,  256,  296,
  297,  293,  256,  256,  296,  297,  256,  260,  266,  267,
  273,  269,  256,   -1,  582,  583,  266,  267,  256,  269,
  274,  293,  256,  256,  296,  297,  270,  271,  266,  267,
  274,  269,  256,  266,  267,  293,  269,  256,  296,  297,
  274,  296,  297,  293,  256,  269,  296,  297,  266,  267,
  269,  269,   -1,  621,  622,  293,  256,  269,  296,  297,
  293,  257,  256,  296,  297,  261,  266,  267,  264,  269,
  266,  267,  268,  269,  293,  293,  256,  296,  296,  297,
  274,  293,  256,   -1,  296,  256,  256,  256,  256,  285,
  256,  259,  260,  293,  274,  256,  296,  297,  256,  257,
  274,  259,  273,  261,  274,  274,  264,  273,  266,  267,
  268,  269,  256,  274,  256,  256,  274,  256,  256,  258,
  278,  279,  280,  281,  282,  283,  256,  285,  256,  287,
  274,  269,  274,  274,  292,  293,  294,  295,  256,  257,
  256,  259,  256,  261,  274,  273,  264,   -1,  266,  267,
  268,  269,  256,  256,  256,  256,  274,  260,  274,  273,
  278,  279,  280,  281,  282,  283,  256,  285,  256,  287,
  274,  273,  273,  256,  292,  293,  256,  257,  256,  259,
  256,  261,   -1,  273,  264,  273,  266,  267,  268,  269,
  273,  256,  256,  256,  274,  273,   -1,  273,  278,  279,
  280,  281,  282,  283,  256,  285,  256,  287,  273,  273,
  273,  256,  292,  293,  256,  257,  256,  259,   -1,  261,
  256,  273,  264,  273,  266,  267,  268,  269,  273,  256,
  270,  271,  274,  256,  270,  271,  278,  279,  280,  281,
  282,  283,  256,  285,  256,  287,  260,  270,  271,   -1,
  292,  293,  279,  280,  281,  282,  283,  256,  270,  271,
  287,  256,  256,  257,   -1,  292,  293,  261,  262,  263,
  269,  265,  266,  267,  269,  269,  270,  271,  256,  256,
  257,  259,  260,  256,  261,  262,  263,  260,  265,  266,
  267,  285,  269,  270,  271,  256,  257,  291,   -1,  256,
  261,  262,  263,  260,  265,  266,  267,  284,  269,  270,
  271,  256,  257,  256,  291,  258,  261,  262,  263,  256,
  265,  266,  267,  284,  269,  270,  271,  256,  256,  257,
  291,  256,  269,  261,  262,  263,  256,  265,  266,  267,
  285,  269,  270,  271,  269,   -1,  291,  294,  295,  269,
  279,  280,  281,  282,  283,  256,  257,  285,  287,   -1,
  261,  262,  263,  291,  265,  266,  267,   -1,  269,  270,
  271,  256,  257,  292,  293,  256,  261,  262,  263,  260,
  265,  266,  267,  284,  269,  270,  271,  256,  257,   -1,
  291,   -1,  261,  262,  263,  256,  265,  266,  267,  284,
  269,  270,  271,  256,  256,  257,  291,  256,  269,  261,
  262,  263,  256,  265,  266,  267,  285,  269,  270,  271,
  269,   -1,  291,  266,  267,  269,  279,  280,  281,  282,
  283,  256,  257,  285,  287,   -1,  261,  262,  256,  291,
  265,  266,  267,  257,  269,  270,  271,  261,  262,    6,
    7,  265,  266,  267,  256,  269,  270,  271,   -1,  256,
  285,  279,  280,  281,  282,  283,  291,  269,   -1,  287,
  257,  285,  269,   -1,  261,  262,  256,  291,  265,  266,
  267,  257,  269,  270,  271,  261,  262,  263,   -1,  265,
  266,  267,  256,  269,  270,  271,  256,  256,  285,  279,
  280,  281,  282,  283,  291,  269,   -1,  287,   -1,  293,
  269,  256,  296,  297,  256,  291,   -1,  259,  260,  279,
  280,  281,  282,  283,  269,  256,  257,  287,  259,   -1,
  261,  124,  125,  264,   -1,  266,  267,  268,  269,  127,
  128,  256,  256,  274,  259,  260,  260,  278,  256,  257,
    8,    9,   10,  261,  285,  263,  264,  265,  266,  267,
  268,  269,  256,  257,  256,   -1,   -1,  261,  260,  263,
  264,  265,  266,  267,  268,  269,  256,  285,  256,  259,
  260,  259,  260,   -1,  256,  256,  257,  259,  260,   -1,
  261,  285,  263,  264,  265,  266,  267,  268,  269,  256,
  257,  256,   -1,   -1,  261,  260,  263,  264,  265,  266,
  267,  268,  269,  256,  285,  256,  259,  260,   -1,  260,
  256,  256,  256,  257,  260,  260,   -1,  261,  285,  263,
  264,  265,  266,  267,  268,  269,  256,  257,  256,   -1,
   -1,  261,  260,  263,  264,  265,  266,  267,  268,  269,
  256,  285,   -1,   -1,  260,    8,    9,   10,   -1,  256,
  257,   -1,   -1,   -1,  261,  285,  263,  264,  265,  266,
  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
  263,  264,  265,  266,  267,  268,  269,   -1,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,  285,  263,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,
  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  285,
  266,  267,  268,  269,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,  278,  264,   -1,  266,  267,  268,  269,  285,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,
  266,  267,  268,  269,  285,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,   -1,  266,  267,  268,  269,  285,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,
  266,  267,  268,  269,  285,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,   -1,  266,  267,  268,  269,  285,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,
  266,  267,  268,  269,  285,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,   -1,  266,  267,  268,  269,  285,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,
  266,  267,  268,  269,  285,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,   -1,  266,  267,  268,  269,  285,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,
  266,  267,   -1,  269,  285,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,   -1,  266,  267,   -1,  269,  285,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,
  266,  267,   -1,  269,  285,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,   -1,  266,  267,   -1,  269,  285,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,
  266,  267,   -1,  269,  285,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,   -1,  266,  267,   -1,  269,  285,
  256,  257,   -1,   -1,   -1,  261,   -1,  256,  257,   -1,
  266,  267,  261,  269,  285,   -1,   -1,  266,  267,   -1,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  285,
   -1,  266,  267,   -1,  269,   -1,  285,   -1,  256,  257,
   -1,   -1,   -1,  261,   -1,   -1,   -1,   -1,  266,  267,
  285,  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
   -1,   -1,  266,  267,   -1,  269,   -1,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
  261,  285,  263,  264,  265,  266,  267,  268,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,
  267,  268,  269,  284,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,  284,  263,  264,
  265,  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,  263,  264,  265,  266,  267,  268,  269,  284,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,  284,  263,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,
  265,  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,  284,
  263,  264,  265,  266,  267,  268,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,  268,
  269,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  257,   -1,   -1,   -1,  261,  284,  263,  264,  265,  266,
  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
  263,  264,  265,  266,  267,  268,  269,  284,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  264,  284,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,   -1,  266,  267,  268,  269,
  284,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,  284,  266,  267,  268,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,  266,
  267,  268,  269,  284,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,   -1,   -1,  264,  284,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  264,   -1,  266,  267,  268,  269,  284,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  284,  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,   -1,  266,  267,  268,  269,  284,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
   -1,  266,  267,  284,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,   -1,  266,  267,   -1,  269,  284,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
   -1,  266,  267,  284,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,   -1,  266,  267,   -1,  269,  284,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
   -1,  266,  267,  284,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,   -1,  266,  267,   -1,  269,  284,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,   -1,
   -1,  266,  267,  284,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,  256,  257,   -1,  266,  267,  261,  269,  284,
   -1,   -1,  266,  267,   -1,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,  284,  257,   -1,  266,  267,  261,  269,
  284,  264,   -1,  266,  267,  268,  269,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,
   -1,  284,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=297;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"IF","THEN","ELSE","END_IF","OUT","FUN","RETURN","BREAK","WHEN",
"WHILE","FOR","CONTINUE","ID","I32","F32","PUNTO","PARENT_A","PARENT_C",
"COMILLA","COMA","DOSPUNTOS","PUNTOCOMA","IGUAL","MAYOR","MENOR","MENORIGUAL",
"MAYORIGUAL","LLAVE_A","LLAVE_C","EXCL","DIST","ASIG","CADENA","COMENT","CONST",
"SUMA","RESTA","MULT","DIV","ENTERO","FLOAT",
};
final static String yyrule[] = {
"$accept : program",
"program : nombre_program LLAVE_A bloque_sentencias LLAVE_C",
"program : nombre_program LLAVE_A bloque_sentencias error",
"program : nombre_program error bloque_sentencias LLAVE_C",
"program : error LLAVE_A bloque_sentencias LLAVE_C",
"nombre_program : ID",
"bloque_sentencias :",
"bloque_sentencias : bloque_sentencias sentencia PUNTOCOMA",
"bloque_sentencias : bloque_sentencias sentencia error",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_decl_datos",
"sentencia_declarativa : sentencia_decl_fun",
"sentencia_declarativa : lista_const",
"sentencia_declarativa : sentencia_when",
"tipo : I32",
"tipo : F32",
"constante_for : ENTERO",
"constante_for : RESTA ENTERO",
"constante_for : ID",
"sentencia_decl_datos : tipo list_var",
"sentencia_decl_datos : tipo error",
"list_var : list_var COMA ID",
"list_var : ID",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro error",
"encabezado_fun : FUN ID PARENT_A parametro error",
"encabezado_fun : FUN ID PARENT_A error",
"encabezado_fun : FUN ID PARENT_A parametro COMA error",
"encabezado_fun : FUN ID error",
"encabezado_fun : FUN error",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun error",
"sentencia_decl_fun : encabezado_fun error",
"cuerpo_fun :",
"cuerpo_fun : cuerpo_fun sentencias_fun PUNTOCOMA",
"cuerpo_fun : cuerpo_fun sentencias_fun error",
"sentencias_fun : sentencia_decl_datos",
"sentencias_fun : sentencia_decl_fun",
"sentencias_fun : lista_const",
"sentencias_fun : asignacion",
"sentencias_fun : llamado_func",
"sentencias_fun : sentencia_if_fun",
"sentencias_fun : sentencia_out",
"sentencias_fun : sentencia_when_fun",
"sentencias_fun : sentencia_for_fun",
"sentencias_fun : sentencia_while_fun",
"sentencias_fun : retorno",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_fun : IF PARENT_A condicion error",
"sentencia_if_fun : IF PARENT_A error",
"sentencia_if_fun : IF error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE sentencias_fun error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_fun : WHEN PARENT_A condicion error",
"sentencia_when_fun : WHEN PARENT_A error",
"sentencia_when_fun : WHEN error",
"etiqueta : ID DOSPUNTOS",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion error",
"sentencia_while_fun : etiqueta WHILE PARENT_A error",
"sentencia_while_fun : etiqueta WHILE error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion error",
"sentencia_while_fun : WHILE PARENT_A error",
"sentencia_while_fun : WHILE error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C sentencias_fun_break",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C sentencias_fun_break",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID error",
"sentencia_for_fun : etiqueta FOR PARENT_A error",
"sentencia_for_fun : etiqueta FOR error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for error",
"sentencia_for_fun : FOR PARENT_A ID ASIG error",
"sentencia_for_fun : FOR PARENT_A ID error",
"sentencia_for_fun : FOR PARENT_A error",
"sentencia_for_fun : FOR error",
"cuerpo_fun_break :",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break PUNTOCOMA",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break error",
"sentencias_fun_break : asignacion",
"sentencias_fun_break : sentencia_if_break_fun",
"sentencias_fun_break : sentencia_out",
"sentencias_fun_break : sentencia_when_break_fun",
"sentencias_fun_break : sentencia_while_fun",
"sentencias_fun_break : sentencia_for_fun",
"sentencias_fun_break : CONTINUE tag",
"sentencias_fun_break : BREAK",
"sentencias_fun_break : BREAK cte",
"sentencias_fun_break : retorno",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun_break",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_break_fun : WHEN PARENT_A condicion error",
"sentencia_when_break_fun : WHEN PARENT_A error",
"sentencia_when_break_fun : WHEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break_fun : IF PARENT_A condicion error",
"sentencia_if_break_fun : IF PARENT_A error",
"sentencia_if_break_fun : IF error",
"retorno : RETURN PARENT_A expresion PARENT_C",
"retorno : RETURN PARENT_A expresion error",
"retorno : RETURN PARENT_A error",
"retorno : RETURN error",
"parametro : tipo ID",
"parametro : tipo error",
"lista_const : CONST lista_asignacion",
"lista_asignacion : lista_asignacion COMA asignacion_const",
"lista_asignacion : asignacion_const",
"asignacion_const : ID ASIG cte",
"asignacion_const : ID ASIG error",
"asignacion_const : ID error",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : sentencia_if",
"sentencia_ejecutable : sentencia_out",
"sentencia_ejecutable : sentencia_for",
"sentencia_ejecutable : sentencia_while",
"sentencia_ejecutable : llamado_func",
"asignacion : ID ASIG expresion",
"asignacion : ID error",
"asignacion : ID ASIG error",
"expresion : expresion SUMA termino",
"expresion : expresion RESTA termino",
"expresion : termino",
"expresion : sentencia_for_asig ELSE cte",
"expresion : sentencia_while_asig ELSE cte",
"expresion : expresion SUMA error",
"expresion : expresion RESTA error",
"expresion : sentencia_for_asig ELSE error",
"expresion : sentencia_while_asig ELSE error",
"termino : termino MULT factor",
"termino : termino DIV factor",
"termino : factor",
"termino : termino MULT error",
"termino : termino DIV error",
"factor : ID",
"factor : cte",
"factor : llamado_func",
"cte : ENTERO",
"cte : FLOAT",
"cte : RESTA ENTERO",
"cte : RESTA FLOAT",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A bloque_sent_eje_asig LLAVE_C",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A bloque_sent_eje_asig LLAVE_C",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C sent_eje_asig",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C sent_eje_asig",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A bloque_sent_eje_asig error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A bloque_sent_eje_asig error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for error",
"sentencia_for_asig : FOR PARENT_A ID ASIG error",
"sentencia_for_asig : FOR PARENT_A ID error",
"sentencia_for_asig : FOR PARENT_A error",
"sentencia_for_asig : FOR error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_sent_eje_asig LLAVE_C",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sent_eje_asig",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_sent_eje_asig error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_asig : WHILE PARENT_A condicion error",
"sentencia_while_asig : WHILE PARENT_A error",
"sentencia_while_asig : WHILE error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C error",
"sentencia_if_asig : IF PARENT_A condicion error",
"sentencia_if_asig : IF PARENT_A error",
"sentencia_if_asig : IF error",
"bloque_sent_eje_asig :",
"bloque_sent_eje_asig : bloque_sent_eje_asig sent_eje_asig PUNTOCOMA",
"sent_eje_asig : asignacion",
"sent_eje_asig : sentencia_if_asig",
"sent_eje_asig : sentencia_out",
"sent_eje_asig : sentencia_while_asig",
"sent_eje_asig : sentencia_for_asig",
"sent_eje_asig : BREAK cte",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if : IF PARENT_A condicion PARENT_C error",
"sentencia_if : IF PARENT_A condicion error",
"sentencia_if : IF PARENT_A error",
"sentencia_if : IF error",
"condicion : expresion comparacion expresion",
"condicion : expresion comparacion error",
"condicion : expresion error",
"comparacion : IGUAL",
"comparacion : MAYOR",
"comparacion : MENOR",
"comparacion : MENORIGUAL",
"comparacion : MAYORIGUAL",
"comparacion : DIST",
"bloque_ejecutable :",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable PUNTOCOMA",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"sentencia_out : OUT PARENT_A CADENA PARENT_C",
"sentencia_out : OUT PARENT_A CADENA error",
"sentencia_out : OUT PARENT_A error",
"sentencia_out : OUT error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN sentencia_ejecutable",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when : WHEN PARENT_A condicion error",
"sentencia_when : WHEN PARENT_A error",
"sentencia_when : WHEN error",
"sentencia_while : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion error",
"sentencia_while : WHILE PARENT_A error",
"sentencia_while : WHILE error",
"bloque_break_continue :",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue PUNTOCOMA",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue",
"ejecutables_break_continue : asignacion",
"ejecutables_break_continue : sentencia_if_break",
"ejecutables_break_continue : sentencia_out",
"ejecutables_break_continue : sentencia_while",
"ejecutables_break_continue : sentencia_for",
"ejecutables_break_continue : CONTINUE tag",
"ejecutables_break_continue : BREAK",
"tag :",
"tag : DOSPUNTOS ID",
"tag : DOSPUNTOS error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion error",
"sentencia_if_break : IF PARENT_A error",
"sentencia_if_break : IF error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C ejecutables_break_continue",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C ejecutables_break_continue",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG error",
"sentencia_for : etiqueta FOR PARENT_A ID error",
"sentencia_for : etiqueta FOR PARENT_A error",
"sentencia_for : etiqueta FOR error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for error",
"sentencia_for : FOR PARENT_A ID ASIG error",
"sentencia_for : FOR PARENT_A ID error",
"sentencia_for : FOR PARENT_A error",
"sentencia_for : FOR error",
"param_real : cte",
"param_real : ID",
"llamado_func : ID PARENT_A param_real COMA param_real PARENT_C",
"llamado_func : ID PARENT_A param_real PARENT_C",
"llamado_func : ID PARENT_A PARENT_C",
"llamado_func : ID PARENT_A param_real COMA param_real error",
"llamado_func : ID PARENT_A param_real error",
"llamado_func : ID PARENT_A error",
"llamado_func : ID PARENT_A param_real COMA error",
};

//#line 2129 "gramatica.y"
private NodoControl raiz;
private List<ArbolSintactico> funciones = new ArrayList<ArbolSintactico>();
private static HashMap<Integer,ArrayList<String>> erroresSintacticos = new HashMap<Integer,ArrayList<String>>();
public String ambitoActual = "Global";
private List<String> tipoActual = new ArrayList<String>();
private List<String> etiquetasAct = new ArrayList<String>();
private boolean hayReturn = false;

void yyerror(String mensaje){
        if (erroresSintacticos.get(AnalizadorLexico.getLineaAct())== null){
                ArrayList<String> mnsj = new ArrayList<String>();
                mnsj.add(mensaje); 
                erroresSintacticos.put(AnalizadorLexico.getLineaAct(), mnsj);
        }
        else{
                erroresSintacticos.get(AnalizadorLexico.getLineaAct()).add(mensaje);
        }
}

static HashMap<Integer,ArrayList<String>> getErroresSintacticos(){
        return erroresSintacticos;
}
void chequearRangoI32(String sval){
  String s = "2147483647";
  long l = Long.valueOf(s);
  if(Long.valueOf(sval) > l){
    yyerror("La constante esta fuera de rango");
  }
}

void chequearRangoI32Neg(String sval){
       String s = "2147483648";
        long l = Long.valueOf(s);
        if(Long.valueOf(sval) > l){
                yyerror("La constante esta fuera de rango");
  } 
}

int yylex() throws IOException{
        Token t = AnalizadorLexico.getToken();
        this.yylval = new ParserVal(t.getLexema());
        //if(t.getId() != -1){
        //  System.out.println("Id: " + t.getId()+" Lexema: " + t.getLexema());
        //}else
        //  System.out.println("TERMINO LA EJECUCION");
        return t.getId();
}
public NodoControl getRaiz(){
	return raiz;
}
public List<ArbolSintactico> getFuncion(){
        return funciones;
}

void actualizarAmbito(String lex, String amb){
        TablaSimbolos.addAtributo(lex,"Ambito",amb);
}
public String getTipoActual(){
        if(!this.tipoActual.isEmpty()){
                return (this.tipoActual.get(tipoActual.size()-1));
        }
        return null;
}
public void cambiarTipoActual(String f){
        tipoActual.add(f);
}
public void removeTipoActual(){
        if(!this.tipoActual.isEmpty()){
                this.tipoActual.remove(tipoActual.size()-1);
        }
}
public String buscarAmbito(String ambitoActual,String lexema){
        String ambito = ambitoActual;
        while(!TablaSimbolos.existeSimbolo(lexema+"@"+ambito)){
                if(ambito.equals("Global")){
                        yyerror("La variable " + lexema + " no se encuentra declarada en el ambito " + ambitoActual);
                        ambito = "";
                        break;
                }else{
                        char [] a = ambito.toCharArray();
                        for (int i = a.length;i>=0;i--){
                                if(a[i-1] == '@'){
                                        ambito = ambito.substring(0,i-1);
                                        break;
                                }
                        }
                }
        }
        return ambito;
}
public String calcularFloat(String f){
        int i =0;
	char caracter=' ';
	String digito=""; //parte numerica
	String exponente=""; //parte exponencial	
	while (caracter != 'F') {
                if(i<f.length()){
                      caracter = f.charAt(i);
		        digito+= caracter;
		        i++; 
                }else{
                        return f;
                }
	}
        Double d = Double.parseDouble(digito);
	for (int j=i ; j < (f.length()); j++) {
		caracter = f.charAt(j);
		exponente += caracter;
	}
	Double e = Double.parseDouble(exponente);
	Double numero = Math.pow(d, e);
        return numero.toString();	

}
//#line 1584 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse() throws IOException
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 21 "gramatica.y"
{
                                                                raiz = new NodoControl("PROGRAMA",(ArbolSintactico)val_peek(1));  
                                                                TablaSimbolos.removeAtributo(val_peek(3).sval);
                                                        }
break;
case 2:
//#line 26 "gramatica.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba }");}
break;
case 3:
//#line 29 "gramatica.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba {");}
break;
case 4:
//#line 32 "gramatica.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba el nombre del programa");}
break;
case 6:
//#line 38 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 7:
//#line 39 "gramatica.y"
{
                                                        yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));
                                                        }
break;
case 8:
//#line 42 "gramatica.y"
{
                                yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba ;");
                        }
break;
case 9:
//#line 47 "gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa");}
break;
case 10:
//#line 48 "gramatica.y"
{yyval = val_peek(0);}
break;
case 15:
//#line 55 "gramatica.y"
{
            yyval = new NodoHoja("Entero");
            ((NodoHoja)yyval).setTipo("Entero");
           }
break;
case 16:
//#line 59 "gramatica.y"
{
            yyval = new NodoHoja("Float");
            ((NodoHoja)yyval).setTipo("Float");
           }
break;
case 19:
//#line 66 "gramatica.y"
{
                        String ambito=buscarAmbito(ambitoActual, val_peek(0).sval);
                        if (!TablaSimbolos.existeSimbolo(val_peek(0).sval+ "@" + ambito)){
                                yyerror("La constante '" + val_peek(0).sval + "' no fue declarada");
                        }
                        else{ 
                                if(!((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso")).equals("Constante")){
                                        yyerror(val_peek(0).sval+" debe ser una constante");
                                }
                                if(!((String)TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Tipo")).equals("Entero")){
                                        yyerror(val_peek(0).sval+" debe ser de tipo entero");
                                }   
                        }
                }
break;
case 20:
//#line 81 "gramatica.y"
{  System.out.println("Declaracion de datos");
                                        for (String s : ((NodoTipos)val_peek(0)).getList()){
                                                String ambito = ambitoActual;
                                                while(TablaSimbolos.existeSimbolo(s+"@"+ambito)){
                                                        if(ambito.equals("Global")){
                                                                yyerror("La variable " + s + " ya se encuentra declarada en el ambito " + ambitoActual);
                                                                ambito = "";
                                                                break;
                                                        }else{
                                                                char [] a = ambito.toCharArray();
                                                                for (int i = a.length;i>=0;i--){
                                                                        if(a[i-1] == ':'){
                                                                        ambito = ambito.substring(0,i-1);
                                                                        break;
                                                                }
                                                        }
                                                }
                                        }  
                                        if(ambito.equals(ambitoActual)){
                                                TablaSimbolos.addNuevoSimbolo(s+"@"+ambito);
                                                TablaSimbolos.addAtributo(s+"@"+ambito,"Id",TablaSimbolos.getAtributo(s,"Id"));
                                                TablaSimbolos.addAtributo(s+"@"+ambito,"Tipo",((ArbolSintactico) val_peek(1)).getTipo());
                                                TablaSimbolos.addAtributo(s+"@"+ambito,"Linea",AnalizadorLexico.getLineaAct());
                                                TablaSimbolos.addAtributo(s+"@"+ambito,"Uso","Variable");
                                                TablaSimbolos.removeAtributo(s);
                                        }
                                        

                                        }
                                        yyval = val_peek(0);
                                }
break;
case 21:
//#line 112 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("se esperaba lista de identificadores entre comas");}
break;
case 22:
//#line 115 "gramatica.y"
{
                            yyval=val_peek(2);
                            ((NodoTipos)yyval).add((String)val_peek(0).sval);
                            }
break;
case 23:
//#line 119 "gramatica.y"
{
               yyval=new NodoTipos((String)val_peek(0).sval);
              }
break;
case 24:
//#line 123 "gramatica.y"
{       

                                if(!TablaSimbolos.existeSimbolo(val_peek(7).sval+ "@" + ambitoActual)){
                                        yyval = new NodoHoja(val_peek(7).sval);
                                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(0)).getTipo());
                                        TablaSimbolos.addNuevoSimbolo(val_peek(7).sval+ "@" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(7).sval+ "@" + ambitoActual,"Uso","Funcion");
                                        TablaSimbolos.addAtributo(val_peek(7).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(7).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(7).sval);
                                        TablaSimbolos.addAtributo(val_peek(7).sval+"@"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                        TablaSimbolos.addAtributo(val_peek(7).sval +"@"+ambitoActual,"Parametro1",((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual +"@"+ val_peek(7).sval);
                                        TablaSimbolos.addAtributo(val_peek(7).sval +"@"+ambitoActual,"Parametro2",((ArbolSintactico)val_peek(3)).getLex()+ "@"+ ambitoActual +"@"+ val_peek(7).sval);
                                        ambitoActual += "@"+val_peek(7).sval;
                                        cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                        /*Agrego los parametros en la tabla de simbolos*/
                                        TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual);
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(5)).getTipo());
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual,"Uso","Variable");
                                        TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual);
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Uso","Variable");

                                }else{
                                        yyerror("La funcion " + val_peek(7).sval + " ya existe en el ambito " + ambitoActual);
                                        ambitoActual += "@"+val_peek(7).sval;
                                }
                        
                        }
break;
case 25:
//#line 151 "gramatica.y"
{
                        if(!TablaSimbolos.existeSimbolo(val_peek(5).sval+ "@" + ambitoActual)){
                                yyval = new NodoHoja(val_peek(5).sval);
                                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addNuevoSimbolo(val_peek(5).sval+ "@" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(5).sval+ "@" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(5).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(5).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(5).sval);
                                TablaSimbolos.addAtributo(val_peek(5).sval+"@"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addAtributo(val_peek(5).sval +"@"+ambitoActual,"Parametro1", ((ArbolSintactico)val_peek(3)).getLex()+ "@"+ ambitoActual +"@"+ val_peek(5).sval);
                                ambitoActual += "@"+val_peek(5).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                /*Agrego el parametro en la tabla de simbolos*/
                                TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual);
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Uso","Variable");

                        }else{
                                yyerror("La funcion " + val_peek(5).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += "@"+val_peek(5).sval;
                        }
                }
break;
case 26:
//#line 173 "gramatica.y"
{
                        if(!TablaSimbolos.existeSimbolo(val_peek(4).sval+ "@" + ambitoActual)){
                                yyval = new NodoHoja(val_peek(4).sval);
                                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addNuevoSimbolo(val_peek(4).sval+ "@" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(4).sval+ "@" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(4).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(4).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(4).sval);
                                TablaSimbolos.addAtributo(val_peek(4).sval+"@"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                ambitoActual += "@"+val_peek(4).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());

                        }else{
                                yyerror("La funcion " + val_peek(4).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += "@"+val_peek(4).sval;
                        }
                }
break;
case 27:
//#line 191 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 28:
//#line 194 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 29:
//#line 197 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 30:
//#line 200 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba :");}
break;
case 31:
//#line 203 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba :");}
break;
case 32:
//#line 206 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba :");}
break;
case 33:
//#line 209 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba )");}
break;
case 34:
//#line 212 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba )");}
break;
case 35:
//#line 215 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba )");}
break;
case 36:
//#line 218 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba otro parametro");}
break;
case 37:
//#line 221 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba (");}
break;
case 38:
//#line 224 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba un nombre de funcion");}
break;
case 39:
//#line 229 "gramatica.y"
{
                                System.out.println("Declaracion de Funcion");
                                
                                char [] a = ambitoActual.toCharArray();
                                for (int i = a.length;i>=0;i--){
                                        if(a[i-1] == '@'){
                                                ambitoActual = ambitoActual.substring(0,i-1);
                                                break;
                                        }
                                }
                                NodoControl n = new NodoControl(((ArbolSintactico)val_peek(3)).getLex()+"@"+ambitoActual,(ArbolSintactico)val_peek(1));
                                n.setTipo(((ArbolSintactico)val_peek(3)).getTipo());
                                yyval = new NodoControl("Funcion",n);
                                removeTipoActual();
                                funciones.add((ArbolSintactico)yyval);
                        }
break;
case 40:
//#line 245 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 41:
//#line 247 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 42:
//#line 250 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 43:
//#line 251 "gramatica.y"
{yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 44:
//#line 252 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 45:
//#line 255 "gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa Datos");}
break;
case 46:
//#line 256 "gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa Funcion");}
break;
case 47:
//#line 257 "gramatica.y"
{yyval = val_peek(0);}
break;
case 48:
//#line 258 "gramatica.y"
{yyval = val_peek(0);}
break;
case 49:
//#line 259 "gramatica.y"
{yyval=val_peek(0);}
break;
case 50:
//#line 260 "gramatica.y"
{yyval=val_peek(0);}
break;
case 51:
//#line 261 "gramatica.y"
{yyval = val_peek(0);}
break;
case 52:
//#line 262 "gramatica.y"
{yyval = val_peek(0);}
break;
case 53:
//#line 263 "gramatica.y"
{yyval=val_peek(0);}
break;
case 54:
//#line 264 "gramatica.y"
{yyval=val_peek(0);}
break;
case 55:
//#line 265 "gramatica.y"
{yyval=val_peek(0);}
break;
case 56:
//#line 269 "gramatica.y"
{System.out.println("Sentencia IF");
                                yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(8)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(5)),new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        }
break;
case 57:
//#line 272 "gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(6)),new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                }
break;
case 58:
//#line 275 "gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(7)),new NodoControl("Else", (ArbolSintactico)val_peek(3))));
                }
break;
case 59:
//#line 278 "gramatica.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                }
break;
case 60:
//#line 281 "gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(6)),new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                }
break;
case 61:
//#line 284 "gramatica.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                }
break;
case 62:
//#line 287 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 63:
//#line 289 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 64:
//#line 291 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 65:
//#line 293 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 66:
//#line 295 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 67:
//#line 297 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 68:
//#line 299 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 69:
//#line 301 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 70:
//#line 303 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 71:
//#line 305 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 72:
//#line 308 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 73:
//#line 310 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 74:
//#line 312 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 75:
//#line 314 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 76:
//#line 316 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 77:
//#line 319 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 78:
//#line 321 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 79:
//#line 324 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 80:
//#line 326 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 81:
//#line 331 "gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 82:
//#line 334 "gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 83:
//#line 337 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 84:
//#line 339 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 85:
//#line 341 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 86:
//#line 343 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 87:
//#line 345 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion");}
break;
case 88:
//#line 347 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 89:
//#line 350 "gramatica.y"
{
                                yyval = new ParserVal(val_peek(1).sval);
                                if(!TablaSimbolos.existeSimbolo(val_peek(1).sval+ "@" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(1).sval+ "@" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(1).sval+ "@" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(1).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(1).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(1).sval);
                                        etiquetasAct.add(val_peek(1).sval + "@" + ambitoActual);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(1).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 90:
//#line 364 "gramatica.y"
{
                                yyval = new NodoComun("While con Etiqueta Funcion",new NodoControl("Etiqueta", new NodoHoja(val_peek(11).sval)) , new NodoComun("While", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                                System.out.println("Sentencia WHILE con etiqueta y con llaves");
                        
                                
                        }
break;
case 91:
//#line 371 "gramatica.y"
{
                                System.out.println("Sentencia WHILE con etiqueta y sin llaves");
                                yyval = new NodoComun("While con Etiqueta Funcion",new NodoControl("Etiqueta", new NodoHoja(val_peek(9).sval)) , new NodoComun("While", (ArbolSintactico) val_peek(6), new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );
                        
                        }
break;
case 92:
//#line 376 "gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 93:
//#line 379 "gramatica.y"
{
                    yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");
                }
break;
case 94:
//#line 383 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 95:
//#line 385 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 96:
//#line 387 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 97:
//#line 389 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 98:
//#line 391 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 99:
//#line 393 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 100:
//#line 395 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 101:
//#line 397 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 102:
//#line 399 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 103:
//#line 401 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 104:
//#line 403 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 105:
//#line 405 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 106:
//#line 407 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 107:
//#line 409 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 108:
//#line 411 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 109:
//#line 413 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 110:
//#line 415 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 111:
//#line 417 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 112:
//#line 422 "gramatica.y"
{
                               String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval, id1, new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2, (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)),asignacion ))) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
        
                        }
break;
case 113:
//#line 457 "gramatica.y"
{
						String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");                               
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval,id1, new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2, (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion ))) );
                                
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                               
                        }
break;
case 114:
//#line 492 "gramatica.y"
{
						String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,id1, new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2, (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion ))) );
                                
						if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                               
                        }
break;
case 115:
//#line 527 "gramatica.y"
{
					String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable"); 
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,id1, new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2, (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)),asignacion ))) );
                                
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 116:
//#line 563 "gramatica.y"
{
                               String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                System.out.println((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                }
break;
case 117:
//#line 599 "gramatica.y"
{
                               String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                 
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 118:
//#line 633 "gramatica.y"
{
                               String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 119:
//#line 667 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 120:
//#line 701 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 121:
//#line 703 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 122:
//#line 705 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 123:
//#line 708 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 124:
//#line 710 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 125:
//#line 712 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 126:
//#line 714 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 127:
//#line 716 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 128:
//#line 719 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 129:
//#line 721 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 130:
//#line 723 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 131:
//#line 725 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 132:
//#line 727 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 133:
//#line 729 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 134:
//#line 731 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 135:
//#line 733 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 136:
//#line 735 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 137:
//#line 737 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 138:
//#line 739 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 139:
//#line 741 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 140:
//#line 743 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 141:
//#line 746 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 142:
//#line 748 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 143:
//#line 750 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 144:
//#line 752 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 145:
//#line 754 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 146:
//#line 757 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 147:
//#line 759 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 148:
//#line 761 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 149:
//#line 763 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 150:
//#line 765 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 151:
//#line 767 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 152:
//#line 769 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 153:
//#line 771 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 154:
//#line 773 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 155:
//#line 775 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 156:
//#line 778 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 157:
//#line 779 "gramatica.y"
{yyval=new NodoComun("Sentencia_Break", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 158:
//#line 780 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 159:
//#line 783 "gramatica.y"
{yyval = val_peek(0);}
break;
case 160:
//#line 784 "gramatica.y"
{yyval = val_peek(0);}
break;
case 161:
//#line 785 "gramatica.y"
{yyval = val_peek(0);}
break;
case 162:
//#line 786 "gramatica.y"
{yyval = val_peek(0);}
break;
case 163:
//#line 787 "gramatica.y"
{yyval = val_peek(0);}
break;
case 164:
//#line 788 "gramatica.y"
{yyval = val_peek(0);}
break;
case 165:
//#line 789 "gramatica.y"
{        boolean b = false;
                                        for(String s : etiquetasAct){
                                                if( ((ArbolSintactico)val_peek(0)) .getIzq() .getLex().equals(s)){
                                                        b = true;
                                                        break;
                                                }
                                        }
                                        if(!b){
                                                yyerror("No se puede saltar al tag " + ((ArbolSintactico)val_peek(0)).getIzq().getLex());
                                                yyval = new NodoHoja("Error");
                                        }else{
                                                yyval = new NodoControl("Continue",(ArbolSintactico)val_peek(0));
                                        }
                                }
break;
case 166:
//#line 803 "gramatica.y"
{yyval = new NodoHoja("Break");}
break;
case 167:
//#line 804 "gramatica.y"
{yyval = new NodoControl("Break", new NodoHoja(val_peek(0).sval));}
break;
case 168:
//#line 805 "gramatica.y"
{yyval=val_peek(0);}
break;
case 169:
//#line 808 "gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 170:
//#line 811 "gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 171:
//#line 814 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 172:
//#line 816 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 173:
//#line 818 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 174:
//#line 820 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 175:
//#line 822 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion");}
break;
case 176:
//#line 824 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 177:
//#line 828 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 178:
//#line 833 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 179:
//#line 838 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 180:
//#line 843 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 181:
//#line 848 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 182:
//#line 853 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 183:
//#line 857 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 184:
//#line 859 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 185:
//#line 861 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 186:
//#line 863 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 187:
//#line 865 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 188:
//#line 868 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 189:
//#line 870 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 190:
//#line 872 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 191:
//#line 874 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 192:
//#line 876 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 193:
//#line 879 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 194:
//#line 881 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 195:
//#line 884 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 196:
//#line 886 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 197:
//#line 889 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 198:
//#line 891 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 199:
//#line 893 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 200:
//#line 895 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 201:
//#line 897 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 202:
//#line 900 "gramatica.y"
{yyval = new NodoControl("Retorno", (ArbolSintactico)val_peek(1));
                                                String tipoRet = ((ArbolSintactico)val_peek(1)).getTipo();
                                                if(!ambitoActual.equals("Global")){
                                                        String tipoFun = getTipoActual();
                                                        if(!tipoRet.equals(tipoFun)){
                                                                yyerror("El retorno debe ser del mismo tipo que el retorno de la funcion.");
                                                        }
                                                }else{
                                                        yyerror("El retorno puede estar solo dentro de una funcion.");
                                                }
                                        }
break;
case 203:
//#line 911 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba )");}
break;
case 204:
//#line 913 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion");}
break;
case 205:
//#line 915 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion entre ( )");}
break;
case 206:
//#line 919 "gramatica.y"
{    yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(1)).getTipo());
}
break;
case 207:
//#line 922 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba identificador");}
break;
case 208:
//#line 926 "gramatica.y"
{System.out.println("Declaracion de Constante/s");}
break;
case 211:
//#line 932 "gramatica.y"
{ 
                                if(TablaSimbolos.existeSimbolo(val_peek(2).sval+"@"+ambitoActual)){
                                        yyerror("La variable " + val_peek(2).sval + " se encuentra declarada en el ambito " + ambitoActual);
                                }else{
                                        TablaSimbolos.addNuevoSimbolo(val_peek(2).sval+"@"+ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(2).sval,"Id"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Tipo",TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Linea",AnalizadorLexico.getLineaAct());
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Uso","Constante");
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Valor", val_peek(0));
                                }
                        }
break;
case 212:
//#line 944 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba una constante");}
break;
case 213:
//#line 946 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba una asignacion =:");}
break;
case 214:
//#line 949 "gramatica.y"
{yyval = val_peek(0);}
break;
case 215:
//#line 950 "gramatica.y"
{yyval = val_peek(0); }
break;
case 216:
//#line 951 "gramatica.y"
{yyval = val_peek(0);}
break;
case 217:
//#line 952 "gramatica.y"
{yyval = val_peek(0);}
break;
case 218:
//#line 953 "gramatica.y"
{yyval = val_peek(0);}
break;
case 219:
//#line 954 "gramatica.y"
{yyval=val_peek(0);}
break;
case 220:
//#line 956 "gramatica.y"
{
                                        System.out.println("Asignacion");
                                        String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                                        NodoHoja hoja = new NodoHoja(val_peek(2).sval+"@"+ambito);
                                       
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval, hoja , (ArbolSintactico) val_peek(0));

                                        String tipoS1 = "";
                                        if(!ambito.equals("")){
                                                if(((String)TablaSimbolos.getAtributo(val_peek(2).sval+"@"+ambito, "Uso")).equals("Variable")){
                                                        tipoS1 = (String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo");
                                                        ((ArbolSintactico)yyval).setTipo(tipoS1);
                                                        hoja.setUso((String)TablaSimbolos.getAtributo(val_peek(2).sval+"@"+ambito, "Uso"));
                                                        hoja.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                                }
                                                else {
                                                        yyerror(val_peek(2).sval+" no es una variable.");
                                                }
                                        }
                                        String tipoS3 = ((ArbolSintactico)val_peek(0)).getTipo();
                                        if(!(tipoS1.equals(tipoS3))){
                                                yyerror("No se puede realizar una asignacion con tipos diferentes.");
                                        }
                                        
                                }
break;
case 221:
//#line 981 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba =:");}
break;
case 222:
//#line 983 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion");}
break;
case 223:
//#line 986 "gramatica.y"
{     
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));

                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una suma con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                        
                                 }
break;
case 224:
//#line 996 "gramatica.y"
{
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una resta con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                 }
break;
case 225:
//#line 1005 "gramatica.y"
{yyval = val_peek(0);}
break;
case 226:
//#line 1006 "gramatica.y"
{
                                        NodoHoja cte = new NodoHoja(val_peek(0).sval);
                                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        yyval = new NodoComun("For como expresion",(ArbolSintactico)val_peek(2),cte);
                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));     
                                       
                                        }
break;
case 227:
//#line 1013 "gramatica.y"
{
                                        NodoHoja cte = new NodoHoja(val_peek(0).sval);
                                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        yyval = new NodoComun("While como expresion",(ArbolSintactico)val_peek(2),cte);
                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo")); 
                                        
                                        }
break;
case 228:
//#line 1020 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un termino");}
break;
case 229:
//#line 1022 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un termino");}
break;
case 230:
//#line 1024 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un constante");}
break;
case 231:
//#line 1026 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un constante");}
break;
case 232:
//#line 1030 "gramatica.y"
{ 
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una multiplicacion con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 233:
//#line 1039 "gramatica.y"
{
                                        yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una division con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 234:
//#line 1048 "gramatica.y"
{
                  yyval = val_peek(0);
                 }
break;
case 235:
//#line 1051 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un factor");}
break;
case 236:
//#line 1053 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un factor");}
break;
case 237:
//#line 1056 "gramatica.y"
{
                String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                if((!ambito.equals(""))){
                        if(((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso")).equals("Variable")
                        || ((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso")).equals("Constante")){
                                yyval = new NodoHoja(val_peek(0).sval+"@"+ambito);
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Tipo"));
                                ((ArbolSintactico)yyval).setUso((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso"));
                        }
                        else{
                                yyerror(val_peek(0).sval+" no es una variable");
                        }
                }else{
                        yyval = new NodoHoja("Error");
                }
           }
break;
case 238:
//#line 1072 "gramatica.y"
{
                yyval = new NodoHoja(val_peek(0).sval);
                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                ((ArbolSintactico)yyval).setUso("Constante");
                System.out.println("sval: "+val_peek(0).sval );
                TablaSimbolos.addAtributo(val_peek(0).sval, "Uso","Constante");
              }
break;
case 239:
//#line 1079 "gramatica.y"
{yyval=val_peek(0);}
break;
case 240:
//#line 1081 "gramatica.y"
{  chequearRangoI32(val_peek(0).sval);}
break;
case 241:
//#line 1082 "gramatica.y"
{  }
break;
case 242:
//#line 1083 "gramatica.y"
{
                yyval=new ParserVal(val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addNuevoSimbolo((String)val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Uso", "Constante");
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Tipo", "Entero");
        }
break;
case 243:
//#line 1089 "gramatica.y"
{
                yyval=new ParserVal(val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addNuevoSimbolo((String)val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Uso", "Constante");
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Tipo", "Float");
        }
break;
case 244:
//#line 1096 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                System.out.println((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For en asignacion",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }

                }
break;
case 245:
//#line 1132 "gramatica.y"
{
                               String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For en asignacion",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }

                        }
break;
case 246:
//#line 1166 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For en asignacion",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                
if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }

                        }
break;
case 247:
//#line 1200 "gramatica.y"
{
					String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For en asignacion",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                
                               if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }

                        }
break;
case 248:
//#line 1234 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 249:
//#line 1236 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 250:
//#line 1238 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 251:
//#line 1241 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 252:
//#line 1243 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 253:
//#line 1245 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 254:
//#line 1247 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 255:
//#line 1249 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 256:
//#line 1252 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 257:
//#line 1254 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 258:
//#line 1256 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 259:
//#line 1258 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 260:
//#line 1260 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 261:
//#line 1262 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 262:
//#line 1264 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 263:
//#line 1266 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 264:
//#line 1268 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 265:
//#line 1270 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 266:
//#line 1274 "gramatica.y"
{
                        yyval = new NodoComun("While Asignacion", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 267:
//#line 1277 "gramatica.y"
{
                        yyval = new NodoComun("While Asignacion", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");}
break;
case 268:
//#line 1280 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 269:
//#line 1282 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 270:
//#line 1284 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 271:
//#line 1286 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 272:
//#line 1288 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 273:
//#line 1290 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 274:
//#line 1292 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 275:
//#line 1294 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 276:
//#line 1296 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 277:
//#line 1299 "gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                                                                                                                                }
break;
case 278:
//#line 1303 "gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");}
break;
case 279:
//#line 1306 "gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                                                                                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");}
break;
case 280:
//#line 1308 "gramatica.y"
{yyval = new NodoComun("IF",new NodoControl("Condicion", (ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                                                                                        System.out.println("Sentencia IF sin corchetes y sin else");}
break;
case 281:
//#line 1310 "gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF con corchetes y else");}
break;
case 282:
//#line 1313 "gramatica.y"
{
                                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                                        System.out.println("Sentencia IF con corchetes y sin else");}
break;
case 283:
//#line 1316 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 284:
//#line 1318 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 285:
//#line 1320 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 286:
//#line 1322 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 287:
//#line 1324 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 288:
//#line 1327 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 289:
//#line 1329 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 290:
//#line 1331 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 291:
//#line 1333 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 292:
//#line 1335 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 293:
//#line 1338 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 294:
//#line 1340 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 295:
//#line 1343 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 296:
//#line 1345 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 297:
//#line 1348 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 298:
//#line 1350 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 299:
//#line 1352 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 300:
//#line 1354 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 301:
//#line 1356 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 302:
//#line 1359 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 303:
//#line 1360 "gramatica.y"
{yyval=new NodoComun("Bloque Ejecutable Asignacion", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 304:
//#line 1362 "gramatica.y"
{yyval = val_peek(0);}
break;
case 305:
//#line 1363 "gramatica.y"
{yyval = val_peek(0);}
break;
case 306:
//#line 1364 "gramatica.y"
{yyval = val_peek(0);}
break;
case 307:
//#line 1365 "gramatica.y"
{yyval = val_peek(0);}
break;
case 308:
//#line 1366 "gramatica.y"
{yyval = val_peek(0);}
break;
case 309:
//#line 1367 "gramatica.y"
{NodoHoja cte = new NodoHoja(val_peek(0).sval);
                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                        yyval = new NodoControl("Break", cte);}
break;
case 310:
//#line 1371 "gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                                                                                                                                }
break;
case 311:
//#line 1375 "gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");}
break;
case 312:
//#line 1378 "gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                                                                                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");}
break;
case 313:
//#line 1380 "gramatica.y"
{yyval = new NodoComun("IF",new NodoControl("Condicion", (ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                                                                                        System.out.println("Sentencia IF sin corchetes y sin else");}
break;
case 314:
//#line 1382 "gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF con corchetes y else");}
break;
case 315:
//#line 1385 "gramatica.y"
{
                                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                                        System.out.println("Sentencia IF con corchetes y sin else");}
break;
case 316:
//#line 1388 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 317:
//#line 1390 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 318:
//#line 1392 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 319:
//#line 1394 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 320:
//#line 1396 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 321:
//#line 1399 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 322:
//#line 1401 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 323:
//#line 1403 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 324:
//#line 1405 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 325:
//#line 1407 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 326:
//#line 1410 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 327:
//#line 1412 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 328:
//#line 1415 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 329:
//#line 1417 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 330:
//#line 1420 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 331:
//#line 1422 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 332:
//#line 1424 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 333:
//#line 1426 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 334:
//#line 1428 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 335:
//#line 1434 "gramatica.y"
{
                        yyval= new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                        ((ArbolSintactico)yyval).setUso("Condicion");
                        if (!((((ArbolSintactico)val_peek(2)).getTipo()).equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                               yyerror("error en la comparacion entre expresiones de distintos tipos");
                        }
                }
break;
case 336:
//#line 1442 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba otra expresion para comparar.");}
break;
case 337:
//#line 1444 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un tipo de comparacion.");}
break;
case 338:
//#line 1447 "gramatica.y"
{yyval= val_peek(0);}
break;
case 339:
//#line 1448 "gramatica.y"
{yyval= val_peek(0);}
break;
case 340:
//#line 1449 "gramatica.y"
{yyval= val_peek(0);}
break;
case 341:
//#line 1450 "gramatica.y"
{yyval= val_peek(0);}
break;
case 342:
//#line 1451 "gramatica.y"
{yyval= val_peek(0);}
break;
case 343:
//#line 1452 "gramatica.y"
{yyval=val_peek(0);}
break;
case 344:
//#line 1454 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 345:
//#line 1455 "gramatica.y"
{
                                                                yyval=new NodoComun("Bloque Ejecutable", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));
                                                                }
break;
case 346:
//#line 1458 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 347:
//#line 1461 "gramatica.y"
{
                        yyval = new NodoControl(val_peek(3).sval, (ArbolSintactico) new NodoHoja(val_peek(1).sval));
                        System.out.println("Sentencia OUT");}
break;
case 348:
//#line 1464 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 349:
//#line 1466 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una CADENA");}
break;
case 350:
//#line 1468 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 351:
//#line 1471 "gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 352:
//#line 1474 "gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 353:
//#line 1477 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } en el when");}
break;
case 354:
//#line 1479 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { en el when");}
break;
case 355:
//#line 1481 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then en el when");}
break;
case 356:
//#line 1483 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) en el when");}
break;
case 357:
//#line 1485 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion en el when");}
break;
case 358:
//#line 1487 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( en el when");}
break;
case 359:
//#line 1491 "gramatica.y"
{
                                yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(11).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                                etiquetasAct.remove(val_peek(11).sval + "@" + ambitoActual);
                        
                        }
break;
case 360:
//#line 1496 "gramatica.y"
{
                        yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(9).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );
                        etiquetasAct.remove(val_peek(9).sval + "@" + ambitoActual);
                        }
break;
case 361:
//#line 1500 "gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 362:
//#line 1503 "gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");}
break;
case 363:
//#line 1506 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 364:
//#line 1508 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 365:
//#line 1510 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 366:
//#line 1512 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 367:
//#line 1514 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 368:
//#line 1516 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 369:
//#line 1518 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 370:
//#line 1520 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 371:
//#line 1522 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 372:
//#line 1525 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 373:
//#line 1526 "gramatica.y"
{
                yyval = new NodoComun("Bloque Break con Continue",(ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));
                }
break;
case 374:
//#line 1529 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba ;");}
break;
case 375:
//#line 1533 "gramatica.y"
{yyval = val_peek(0);}
break;
case 376:
//#line 1534 "gramatica.y"
{yyval = val_peek(0);}
break;
case 377:
//#line 1535 "gramatica.y"
{yyval = val_peek(0);}
break;
case 378:
//#line 1536 "gramatica.y"
{yyval = val_peek(0);}
break;
case 379:
//#line 1537 "gramatica.y"
{yyval = val_peek(0);}
break;
case 380:
//#line 1538 "gramatica.y"
{boolean b = false;
                                String tag = ((ArbolSintactico)val_peek(0)).getIzq().getLex() + "@" + ambitoActual;
                                for(String s : etiquetasAct){
                                        if(tag.equals(s)){
                                                b = true;
                                                break;
                                        }
                                }
                                if(!b){
                                        yyerror("No se puede saltar al tag " + ((ArbolSintactico)val_peek(0)).getIzq().getLex());
                                        yyval = new NodoHoja("Error");
                                }else{
                                        yyval = new NodoControl("Continue",(ArbolSintactico)val_peek(0));
                                }
                                }
break;
case 381:
//#line 1553 "gramatica.y"
{yyval = new NodoControl("Break",(ArbolSintactico)new NodoHoja("Fin"));}
break;
case 382:
//#line 1555 "gramatica.y"
{yyval = new NodoHoja("Fin");}
break;
case 383:
//#line 1556 "gramatica.y"
{String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        yyval = new NodoControl("Tag", new NodoHoja(val_peek(0).sval) );
                        if(!ambito.equals("")){
                                if(!TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Uso").equals("Etiqueta")){
                                        yyerror(val_peek(0).sval + " no es una etiqueta.");
                                }
                        }else{
                                yyerror("La etiqueta " + val_peek(0).sval + " no esta declarada.");
                        }
                        }
break;
case 384:
//#line 1566 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un identificador");}
break;
case 385:
//#line 1571 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 386:
//#line 1576 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 387:
//#line 1581 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 388:
//#line 1586 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 389:
//#line 1591 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 390:
//#line 1596 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 391:
//#line 1600 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 392:
//#line 1602 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 393:
//#line 1604 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 394:
//#line 1606 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 395:
//#line 1608 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 396:
//#line 1611 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 397:
//#line 1613 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 398:
//#line 1615 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 399:
//#line 1617 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 400:
//#line 1619 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 401:
//#line 1622 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 402:
//#line 1624 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 403:
//#line 1627 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 404:
//#line 1629 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 405:
//#line 1632 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 406:
//#line 1634 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 407:
//#line 1636 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 408:
//#line 1638 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 409:
//#line 1640 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 410:
//#line 1644 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval, id1, new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2, (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)),asignacion ))) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 411:
//#line 1679 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");                               
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval,id1, new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2, (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion ))) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                     
                        }
break;
case 412:
//#line 1714 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,id1, new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2, (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion ))) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 413:
//#line 1749 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable"); 
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,id1, new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2, (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)),asignacion ))) );
                            
					if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 414:
//#line 1785 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                System.out.println((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }

                }
break;
case 415:
//#line 1821 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                
						if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 416:
//#line 1855 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 417:
//#line 1889 "gramatica.y"
{
						String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 418:
//#line 1923 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 419:
//#line 1925 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 420:
//#line 1927 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 421:
//#line 1930 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 422:
//#line 1932 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 423:
//#line 1934 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 424:
//#line 1936 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 425:
//#line 1938 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 426:
//#line 1941 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 427:
//#line 1943 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 428:
//#line 1945 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 429:
//#line 1947 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 430:
//#line 1949 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 431:
//#line 1951 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 432:
//#line 1953 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 433:
//#line 1955 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 434:
//#line 1957 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 435:
//#line 1959 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 436:
//#line 1961 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 437:
//#line 1963 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 438:
//#line 1965 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 439:
//#line 1968 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 440:
//#line 1970 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 441:
//#line 1972 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 442:
//#line 1974 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 443:
//#line 1976 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 444:
//#line 1979 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 445:
//#line 1981 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 446:
//#line 1983 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 447:
//#line 1985 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 448:
//#line 1987 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 449:
//#line 1989 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 450:
//#line 1991 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 451:
//#line 1993 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 452:
//#line 1995 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 453:
//#line 1997 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 454:
//#line 2001 "gramatica.y"
{
                        yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                        ((ArbolSintactico)yyval).setUso("Variable");
                }
break;
case 455:
//#line 2007 "gramatica.y"
{
                        String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        if(!ambito.equals("")){
                                yyval=new NodoHoja(val_peek(0).sval+"@"+ambito);
                                ((ArbolSintactico)yyval).setUso("Variable");
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Tipo"));
                        }else{
                                yyval=new NodoHoja("Error");
                                yyerror("El parametro "+ val_peek(0).sval +" no se encuentra declarado en el ambito "+ambitoActual);
                        }
                     }
break;
case 456:
//#line 2019 "gramatica.y"
{
                                                        
                                                        String ambito = buscarAmbito(ambitoActual,val_peek(5).sval);
                                                        NodoComun parametro1=null;
                                                        NodoComun parametro2=null;
                                                        if (!ambito.equals("") ){
                                                                if( !TablaSimbolos.getAtributo(val_peek(5).sval+"@"+ambito,"Uso").equals("Funcion") ){
                                                                        yyerror("La funcion "+val_peek(5).sval+" no fue declarada");
                                                                }else{
                                                                        String par1 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +"@"+ ambito,"Parametro1");
                                                                        String par2 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +"@"+ ambito,"Parametro2");
                                                                        if(par1 != null)
                                                                                if(par2 != null){
                                                                                        String tipoS3 = (String) ((ArbolSintactico) val_peek(3) ).getTipo();
                                                                                        if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") ) )){
                                                                                                String nombreS3 = ((ArbolSintactico) val_peek(3)).getLex();
                                                                                                yyerror("El tipo del parametro "+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                                                                        }else{
                                                                                                NodoHoja n =new NodoHoja(par1);
                                                                                                n.setTipo(tipoS3);
                                                                                                n.setUso("Variable");
                                                                                                parametro1 = new NodoComun("=:",n , (ArbolSintactico)val_peek(3));
                                                                                        }
                                                                                        String tipoS5 = (String) ((ArbolSintactico) val_peek(1)).getTipo();
                                                                                        if( !(tipoS5.equals((String)TablaSimbolos.getAtributo(par2,"Tipo") ))){
                                                                                                String nombreS5 = ((ArbolSintactico) val_peek(1)).getLex();
                                                                                                yyerror("El tipo del parametro "+ nombreS5+" no coincide con el tipo declarado en la funcion.");
                                                                                        }else{
                                                                                                NodoHoja n =new NodoHoja(par2);
                                                                                                n.setTipo(tipoS5);
                                                                                                n.setUso("Variable");
                                                                                                parametro2 = new NodoComun("=:",n, (ArbolSintactico)val_peek(1));
                                                                                        }
                                                                                }else{
                                                                                        yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                                }
                                                                        else{
                                                                                yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                        }
                                                                        yyval=new NodoControl("Llamado Funcion" ,new NodoComun(val_peek(5).sval+"@"+ambito,(ArbolSintactico)parametro1,(ArbolSintactico)parametro2));
                                                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(5).sval +"@"+ ambito,"Tipo"));
                                                                }
                                                        }

                                                }
break;
case 457:
//#line 2064 "gramatica.y"
{
                
            String ambito = buscarAmbito(ambitoActual,val_peek(3).sval);
            NodoComun parametro1=null;
            if (!ambito.equals("")){
                if (!TablaSimbolos.getAtributo(val_peek(3).sval+"@"+ambito,"Uso").equals("Funcion")){
                        yyerror("La funcion "+val_peek(3).sval+" no fue declarada");
                }else{
                        String par1 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +"@"+ ambito,"Parametro1");
                        String par2 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +"@"+ ambito,"Parametro2");
                        if(par2 ==null){
                                if(par1!=null){
                                        String tipoS3 = (String) ((ArbolSintactico) val_peek(1) ).getTipo();
                                        if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") )) ){
                                                String nombreS3 = ((ArbolSintactico) val_peek(1)).getLex();
                                                yyerror("El tipo del parametro "+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                        }else{
                                                NodoHoja n =new NodoHoja(par1);
                                                n.setTipo(tipoS3);
                                                n.setUso("Variable");
                                                parametro1 = new NodoComun("=:",n , (ArbolSintactico)val_peek(1));
                                        }
                                }else{
                                        yyerror("La funcion esta declarada sin parametros.");
                                }
                        }else{
                                yyerror("La funcion esta declarada con dos parametros.");
                        }
                        yyval=new NodoControl("Llamado Funcion" ,new NodoComun(val_peek(3).sval+"@"+ambito,(ArbolSintactico)parametro1,new NodoHoja("Un solo parametro")));
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(3).sval +"@"+ ambito,"Tipo"));
                }
            }
        }
break;
case 458:
//#line 2097 "gramatica.y"
{
                String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                if (!ambito.equals("") ){
                        if (!TablaSimbolos.getAtributo(val_peek(2).sval+"@"+ambito,"Uso").equals("Funcion")){
                                yyerror("La funcion "+val_peek(2).sval+" no fue declarada");
                                
                        }else{
                                String par1 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Parametro1");
                                String par2 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Parametro2");
                                if(par2 == null){
                                        if(par1 != null){
                                                yyerror("La funcion esta declarada con un parametro.");
                                        }
                                }else{
                                        yyerror("La funcion esta declarada con dos parametros.");
                                }
                                yyval=new NodoControl("Llamado Funcion", new NodoComun(val_peek(2).sval+"@"+ambito,new NodoHoja("Fin"),new NodoHoja("Fin")));
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                        }
                }       
        }
break;
case 459:
//#line 2118 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 460:
//#line 2120 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 461:
//#line 2122 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 462:
//#line 2124 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba otro parametro");}
break;
//#line 5053 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 * @throws IOException
 */
public void run() throws IOException
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
