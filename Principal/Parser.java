//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramaticaFeli.y"
package Principal;
import java.io.IOException;
import AnalizadorLexico.AnalizadorLexico;
import AnalizadorLexico.Token;
import GeneracionCodigoIntermedio.*;
//#line 23 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IF=257;
public final static short THEN=258;
public final static short ELSE=259;
public final static short END_IF=260;
public final static short OUT=261;
public final static short FUN=262;
public final static short RETURN=263;
public final static short BREAK=264;
public final static short WHEN=265;
public final static short WHILE=266;
public final static short FOR=267;
public final static short CONTINUE=268;
public final static short ID=269;
public final static short I32=270;
public final static short F32=271;
public final static short PUNTO=272;
public final static short PARENT_A=273;
public final static short PARENT_C=274;
public final static short COMILLA=275;
public final static short COMA=276;
public final static short DOSPUNTOS=277;
public final static short PUNTOCOMA=278;
public final static short IGUAL=279;
public final static short MAYOR=280;
public final static short MENOR=281;
public final static short MENORIGUAL=282;
public final static short MAYORIGUAL=283;
public final static short LLAVE_A=284;
public final static short LLAVE_C=285;
public final static short EXCL=286;
public final static short DIST=287;
public final static short ASIG=288;
public final static short CADENA=289;
public final static short COMENT=290;
public final static short CONST=291;
public final static short SUMA=292;
public final static short RESTA=293;
public final static short MULT=294;
public final static short DIV=295;
public final static short ENTERO=296;
public final static short FLOAT=297;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    1,    2,    2,    2,    3,    3,    4,    4,
    4,    9,    9,    6,    6,   10,   10,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,   12,   12,
   12,   13,   13,   13,   13,   13,   13,   13,   13,   13,
   13,   13,   16,   16,   16,   16,   16,   16,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   18,   18,   18,
   18,   18,   18,   18,   18,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   23,   23,   23,   24,   24,   24,   24,   24,   24,   24,
   24,   24,   24,   27,   27,   27,   27,   27,   27,   27,
   27,   26,   26,   26,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   26,   26,   26,   26,   21,   11,   11,
    8,   30,   30,    5,    5,    5,    5,    5,    5,    5,
   14,   29,   29,   29,   29,   29,   29,   35,   35,   35,
   36,   36,   25,   25,   25,   25,   31,   31,   31,   31,
   31,   31,   31,   31,   31,   31,   31,   31,   31,   31,
   31,   31,   22,   22,   22,   38,   38,   38,   38,   38,
   37,   37,   37,   17,   17,   17,   17,   32,   32,   32,
   32,   32,   32,   32,   32,   32,   34,   34,   34,   34,
   34,   34,   34,   34,   34,   34,   34,   34,   34,   39,
   39,   39,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   28,   28,   42,   42,   42,   42,   42,   42,   42,
   42,   42,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   43,   43,   15,   15,   15,   15,   15,   15,
};
final static short yylen[] = {                            2,
    4,    1,    1,    0,    3,    2,    1,    1,    1,    1,
    1,    1,    1,    2,    2,    3,    1,   12,   10,    9,
   12,   10,    9,    8,    7,    5,    3,    2,    0,    3,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,   11,   13,   13,    8,   13,    9,   13,   12,
   10,    9,    8,    6,    5,    4,    3,    8,    6,    8,
    6,    5,    4,    3,    8,   13,   11,   11,    9,   11,
    9,    8,    7,    6,    5,    4,    3,    2,   14,   14,
   12,   12,   14,   14,   12,   12,   11,   11,    3,   12,
   12,   10,   10,   12,   12,   10,   10,    9,    9,    2,
    0,    3,    3,    1,    1,    1,    1,    1,    1,    2,
    1,    2,    1,    6,    8,    8,    6,    5,    4,    3,
    8,   11,   12,   12,    8,   13,    9,   13,   12,   10,
    9,    8,    6,    5,    4,    3,    2,    4,    2,    2,
    2,    3,    1,    1,    1,    1,    1,    1,    1,    1,
    3,    3,    3,    1,    1,    3,    3,    3,    3,    1,
    1,    1,    1,    1,    2,    2,   12,   12,   11,    8,
   13,    9,   13,   12,   10,    9,    8,    6,    5,    4,
    3,    2,    3,    3,    3,    1,    1,    1,    1,    1,
    0,    3,    2,    4,    4,    3,    2,    8,    6,    8,
    8,    8,    8,    8,    7,    5,   13,   11,   11,    9,
   11,    9,    8,    7,    6,    5,    4,    3,    2,    0,
    3,    2,    1,    1,    1,    1,    1,    1,    2,    1,
    2,    0,    2,    8,    6,    8,    8,    8,    8,    8,
    7,    5,   12,   12,   11,    8,   13,    9,   13,   12,
   10,    9,    8,    6,    5,    4,    3,    2,   14,   14,
   12,   12,   14,   14,   12,   12,   11,   11,    3,   12,
   12,   10,   10,   12,   12,   10,   10,    9,    9,    2,
    1,    1,    6,    4,    3,    6,    4,    3,
};
final static short yydefred[] = {                         0,
    2,    3,    0,    0,    4,    0,    0,    0,    0,    0,
    0,    0,    0,   12,   13,    1,    0,    0,    7,    8,
    9,   10,   11,    0,  144,  150,  146,  145,  147,  148,
  149,  182,    0,  197,    0,   28,    0,    0,    0,  219,
    0,  280,    0,   17,    0,    0,    0,    0,    0,  143,
    0,    5,    0,  181,    0,    0,  163,  164,  155,    0,
  162,    0,    0,    0,    0,  160,  196,    0,   27,    0,
    0,    0,    0,  218,    0,    0,  288,  282,  285,  281,
    0,  269,    0,    0,    0,    0,    0,  165,  166,  180,
    0,    0,  186,  187,  188,  189,  190,    0,    0,    0,
    0,    0,    0,    0,  195,  194,    0,    0,    0,    0,
    0,    0,    0,    0,  217,    0,    0,  287,  284,    0,
    0,    0,   16,  142,  179,    0,    0,  161,    0,    0,
  184,    0,  156,  157,  158,  159,  140,    0,  139,   26,
    0,    0,    0,    0,  191,    0,    0,  216,    0,    0,
    0,    0,    0,  178,    0,  191,    0,    0,    0,    0,
  191,  191,    0,  191,  191,  191,  199,  215,    0,    0,
  286,  283,    0,    0,    0,    0,   29,    0,   25,    0,
    0,    0,  205,    0,    0,    0,    0,  214,    0,    0,
    0,    0,    0,  177,    0,    0,  170,    0,   29,   24,
    0,  204,  203,  192,  202,  201,  200,  198,  213,    0,
    0,    0,    0,    0,  176,    0,  172,  191,    0,    0,
    0,    0,    0,    0,    0,   20,   32,   33,   34,    0,
   35,   36,   37,   38,   39,   40,   41,   42,    0,   23,
    0,  212,    0,    0,    0,    0,    0,  220,  223,  225,
  228,  227,  210,  224,  226,  278,    0,  279,    0,    0,
    0,    0,  175,  191,    0,    0,    0,    0,    0,    0,
    0,   78,    0,  100,    0,    0,   30,   19,   22,   29,
  258,    0,  231,    0,    0,    0,  229,    0,  276,  220,
  272,  277,  220,  273,    0,    0,    0,    0,    0,    0,
  169,   57,    0,    0,    0,   64,    0,   77,    0,    0,
   89,    0,    0,    0,  257,    0,    0,    0,    0,  233,
  211,  209,    0,    0,    0,  220,  208,  267,    0,  268,
    0,  174,    0,  168,  167,   56,    0,  138,    0,   63,
    0,   76,    0,    0,    0,    0,   21,   18,  256,    0,
    0,    0,    0,    0,  221,  274,  270,  275,  271,    0,
  265,  220,  261,  266,  220,  262,  173,  171,   55,    0,
    0,   62,    0,   75,    0,    0,    0,    0,  255,    0,
    0,    0,  220,    0,    0,  207,    0,    0,   54,   29,
    0,   29,   61,   29,   59,   74,    0,    0,    0,    0,
  254,  220,    0,  220,  220,    0,  220,  220,  220,  235,
  263,  259,  264,  260,    0,    0,    0,    0,   73,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  241,    0,
    0,    0,   53,    0,    0,   46,   65,   60,   58,   72,
    0,    0,    0,    0,    0,  253,    0,    0,  246,  240,
  239,  238,  237,  236,  234,   52,    0,   48,    0,   29,
    0,   71,    0,    0,    0,    0,    0,  101,  104,  106,
  109,  108,  113,   69,  105,  107,   98,    0,   99,    0,
    0,    0,    0,  252,    0,  248,  220,    0,   51,   29,
    0,    0,    0,  137,    0,  112,    0,    0,  110,    0,
   96,  101,   92,   97,  101,   93,    0,    0,    0,  251,
  220,    0,    0,    0,    0,    0,    0,   43,  136,    0,
    0,  120,    0,   70,   68,    0,    0,    0,  101,   67,
   87,    0,   88,    0,    0,    0,    0,  245,   50,    0,
    0,    0,  135,    0,    0,  119,    0,  103,  102,   94,
   90,   95,   91,    0,   85,  101,   81,   86,  101,   82,
  250,    0,  244,  243,   49,   47,   44,   45,  134,    0,
    0,  118,    0,   66,    0,    0,  249,  247,  133,  101,
    0,  101,  117,  101,  114,   83,   79,   84,   80,    0,
    0,    0,    0,  132,    0,    0,  125,  121,  116,  115,
  131,    0,  127,  101,    0,  130,  101,    0,    0,    0,
    0,    0,    0,  122,  129,    0,  123,  124,  128,  126,
};
final static short yydgoto[] = {                          3,
    4,    6,   18,   19,  184,  227,  228,  229,   24,   48,
  110,  198,  230,  249,   59,  233,  250,  235,  471,  472,
  473,   60,  500,  526,   61,  475,  476,  287,   62,   51,
   28,   29,  251,  252,   65,   66,  163,  100,  288,  323,
  254,  255,   81,
};
final static short yysindex[] = {                      -243,
    0,    0,    0, -257,    0,  289,  -78,  -34, -125,   -5,
   16,   25,  -71,    0,    0,    0, -206, -258,    0,    0,
    0,    0,    0, -203,    0,    0,    0,    0,    0,    0,
    0,    0, -220,    0, -255,    0,   55,  117, -142,    0,
   53,    0, -206,    0, -108,  138,  117, -140, -190,    0,
 -109,    0, -140,    0,  174, -167,    0,    0,    0, -231,
    0, -174,  -86,  -44,    9,    0,    0, -221,    0,  175,
   -9,   10, -235,    0, -159,   35,    0,    0,    0,    0,
 -164,    0,   45,   68,  197,   26, -206,    0,    0,    0,
  -28,  117,    0,    0,    0,    0,    0, -264, -264,   76,
  125,  125, -264, -264,    0,    0,   94,   75,  139, -163,
  142,  157,  152,  110,    0, -218,  117,    0,    0, -245,
  117, -206,    0,    0,    0,  988,  197,    0,    9,    9,
    0,  197,    0,    0,    0,    0,    0,  248,    0,    0,
  171,  128,  182,  198,    0,  213, 2033,    0,   78,  177,
 -103,  230,  233,    0, -105,    0,  235,  236,  248, -100,
    0,    0, 2053,    0,    0,    0,    0,    0, -117,  240,
    0,    0,  250,  117,  432,  264,    0,  245,    0, -188,
 2064, 2075,    0,  253, 2086, 2097,  575,    0,  -97,  125,
  125,  244,  256,    0,  201, 1430,    0, 1183,    0,    0,
  131,    0,    0,    0,    0,    0,    0,    0,    0, 1768,
  -62,  -51, -206,  279,    0, 2040,    0,    0,  259,  267,
  274,   81,   83,   97,   48,    0,    0,    0,    0,  271,
    0,    0,    0,    0,    0,    0,    0,    0, 1210,    0,
 -240,    0,  101,  125,  104,  265, -202,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1782,    0, 1803,  283,
  125,  125,    0,    0,  295, 2108,  303,  123,  117,  117,
  187,    0,  269,    0, -206,  140,    0,    0,    0,    0,
    0,  342,    0,  117,  363,  310,    0, 1437,    0,    0,
    0,    0,    0,    0, 2148,  -47,  -42, 1595,  323,  332,
    0,    0,  -37, -170,  320,    0,  -12,    0,  -11,  319,
    0,  331,  337, 1035,    0,   -4,  348,  349, -173,    0,
    0,    0,  338, 1451, 1473,    0,    0,    0, 1817,    0,
 1838,    0,  221,    0,    0,    0,  169,    0,  366,    0,
  170,    0, -178,  117,  117, -206,    0,    0,    0,  181,
  367,  369,  344,  242,    0,    0,    0,    0,    0, 1941,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1052,
  356,    0, 1068,    0,  109,  343,  359,  364,    0, 1852,
  357,  360,    0,  361, 1873,    0, 1487, 1509,    0,    0,
  365,    0,    0,    0,    0,    0,  -38,  285,  371,  117,
    0,    0,  368,    0,    0, 1954,    0,    0,    0,    0,
    0,    0,    0,    0, 1084,  322, 1221, 1101,    0,   19,
  125,  125,  376,  374, 1523,  340, 1967, 1980,    0, 1993,
 2006, 1545,    0, -176,  791,    0,    0,    0,    0,    0,
 1625,   20,   22, -206,  309,    0,  209, 2161,    0,    0,
    0,    0,    0,    0,    0,    0, -234,    0,  396,    0,
  380,    0,  120,  125,  122,  265,  -27,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1639,    0, 1661,
  387,  125,  125,    0, 1887,    0,    0,  384,    0,    0,
  609, 1248,  404,    0,  411,    0,  117,  417,    0, 1290,
    0,    0,    0,    0,    0,    0, 2122,   49,   50,    0,
    0,  388, 2019,  405, 1128,  390,  391,    0,    0,   56,
  400,    0,   70,    0,    0, -248, 1304, 1327,    0,    0,
    0, 1675,    0, 1697, 1559,  415,  416,    0,    0,  231,
  421,  422,    0,  247,  427,    0,  252,    0,    0,    0,
    0,    0,    0, 1901,    0,    0,    0,    0,    0,    0,
    0,  232,    0,    0,    0,    0,    0,    0,    0, 1711,
  403,    0, 1733,    0, 1341, 1364,    0,    0,    0,    0,
  412,    0,    0,    0,    0,    0,    0,    0,    0, 1378,
  347, 1915, 1401,    0,  211, 2135,    0,    0,    0,    0,
    0, 1747,    0,    0,  413,    0,    0,  424, 1928,  443,
 1415,  449,  451,    0,    0,  239,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1259,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  516,    0,    0,
  664,    0,  938,    0,  706,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  822,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  552,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -74,    0,  860,  905,
    0,    8,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1145,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1602,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1172,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  466,    0,  628,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1581,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  752,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  965,    0, 1008,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,    0,    0,    0,   39,  700,  709,  710,  -68,  694,
  577, -193, -363,   -6,  277,    0,   61,    0, -177, -144,
   15,   17, -249, -438,  -41,    0,    0,  254,  -35,    0,
    0,    0,  579,  765,  446,  510, -147,    0, -262, -169,
    0,    0,  601,
};
final static int YYTABLESIZE=2445;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         25,
   67,  109,  474,   80,  128,  239,  391,  548,  175,  395,
   50,   85,    1,  181,  182,  279,  185,  186,  187,   52,
  236,  489,  113,   78,   90,    2,    5,  324,   56,  549,
  325,   57,   58,   68,  105,   54,   76,  148,  114,  503,
  253,  506,   91,  280,   20,   11,   12,   56,   55,  490,
   57,   58,  106,  237,   71,   73,  127,   75,  149,  133,
  134,  236,   49,  360,  132,   44,   27,  200,  530,  158,
  266,  461,   56,  109,   46,   57,   58,  374,   80,  456,
  124,   92,  457,  458,  353,   47,  314,  291,  201,  294,
  178,  118,  140,  557,  237,  560,  115,   47,  375,  387,
  354,  459,  388,  338,   93,   94,   95,   96,   97,  119,
  141,  120,  142,   72,  116,  153,  298,   98,   99,   25,
  406,   98,   99,   11,   12,  327,   55,  516,   88,   89,
   36,  581,  241,  150,  585,   86,  236,  152,  188,  425,
   25,  427,  428,   37,  430,  431,  432,   77,  211,  212,
   56,   49,  171,   57,   58,  179,   25,  605,  209,  363,
   78,  366,  189,  608,  157,   79,   87,   45,   25,  237,
  172,   46,  101,  180,   25,   25,  210,   32,   25,   25,
   25,  185,   47,  185,   56,  167,   27,   57,   58,   25,
  193,  231,  236,  256,   33,  236,  415,   44,  417,  185,
  418,   45,  283,  185,  258,   46,  260,   27,  328,   25,
  403,  257,  238,  330,  102,  410,   47,  419,  336,  296,
  297,   34,  259,   27,  513,  237,  329,  125,  237,  126,
   49,  331,  231,  304,  219,   27,  337,  236,   35,  236,
  236,   27,   27,  340,  342,   27,   27,   27,  535,  276,
   38,  349,  527,  238,  265,  528,   27,  236,  234,   25,
   47,  341,  343,  183,  111,  183,  492,   39,  310,  350,
  237,   40,  237,  237,  440,  477,   27,  479,  488,  554,
   42,  183,   26,  112,  303,  183,  305,  307,   41,  309,
  237,   25,  441,  478,  123,  480,  515,   43,  316,  234,
  317,  319,  103,  104,  531,  533,  575,  231,   74,  576,
   69,  543,  117,  236,  236,  512,   44,  121,   11,   12,
   45,   55,  532,  534,  276,  546,   27,   70,  238,  544,
  590,  131,  592,  168,  593,   47,  270,  236,  272,  378,
  122,   11,   12,  547,   55,   56,  237,  237,   57,   58,
  169,  138,  274,  271,  609,  273,  281,  611,   27,  284,
  376,  377,  137,  231,  396,  146,  231,  147,   56,  275,
  237,   57,   58,  282,  234,  494,  285,  497,  302,  442,
  443,  397,   11,   12,  238,   55,  240,  238,   11,   12,
  420,   55,  495,   82,  498,  311,  107,   14,   15,  143,
   14,   15,   26,   83,   84,  312,  313,  139,  231,   56,
  231,  231,   57,   58,  144,   56,  424,   56,   57,   58,
   57,   58,  496,   26,  369,  372,  370,  373,  231,  238,
  234,  238,  238,  234,  469,  145,  379,  481,  380,   26,
  508,  509,  306,  107,   14,   15,   45,  159,  108,  238,
   46,   26,   11,   12,  170,   55,  215,   26,   26,  216,
  217,   26,   26,   26,  484,  161,  601,  485,  486,  602,
  603,  469,   26,  469,  232,  234,  367,  234,  234,   56,
  368,  162,   57,   58,  231,  231,  565,  577,   98,   99,
  566,  578,   26,  469,  619,  234,  164,  384,  620,  385,
  469,  470,  569,  173,  570,  238,  238,  572,  231,  573,
  174,  520,  176,  521,  523,  232,  213,   14,   15,  177,
  469,  469,  196,  197,  308,  469,  192,  469,  199,  238,
  204,  190,  191,  214,   11,   12,  267,   55,  470,  268,
  470,  286,   26,  129,  130,    7,  269,  469,  277,    8,
    9,  234,  234,   10,   11,   12,  295,   13,   14,   15,
  470,   56,  301,  469,   57,   58,  469,  470,  469,  469,
  261,  262,  299,   16,   26,  234,  421,  422,  320,   17,
  435,  436,  334,  469,   30,  469,  469,  470,  470,  469,
  232,  335,  470,  339,  470,  469,  344,  315,  448,  449,
  482,  483,  469,  345,  469,  596,  597,   11,   12,  346,
   55,   63,  135,  136,  470,  355,   63,   63,  318,   63,
  398,  351,  352,  371,  381,   63,  382,  383,   11,   12,
  470,   55,  399,  470,   56,  470,  470,   57,   58,  392,
  404,  400,  416,  405,  407,  426,  232,  423,  444,  232,
  470,  445,  470,  470,  491,   56,  470,  493,   57,   58,
  507,  514,  470,  518,  538,  536,  519,  541,  542,  470,
   63,  470,  522,  545,  563,  564,   11,   12,   63,   55,
  567,  568,   11,   12,  571,   55,  582,  194,    7,  591,
  610,  232,    8,  232,  232,   63,   10,   11,   12,   63,
  155,  612,  614,   56,   30,   21,   57,   58,  617,   56,
  618,  232,   57,   58,   22,   23,  195,   53,  160,  499,
  151,  230,  230,    0,  230,   30,  230,  230,    0,  230,
  230,  230,  230,  230,  230,  230,  230,    0,    0,    0,
    0,   30,    0,  230,    0,    0,    0,    0,    0,    0,
  230,    0,   63,   30,    0,    0,  230,    0,    0,   30,
   30,    0,    0,   30,   30,   30,    0,  232,  232,    0,
   31,   15,   15,    0,   30,    0,   15,   15,   15,    0,
   15,   15,   15,    0,   15,   15,   15,    0,    0,    0,
    0,  232,    0,   15,   30,    0,    0,   64,    0,    0,
   15,    0,   64,   64,    0,   64,   15,  151,  151,    0,
  151,   64,  151,  151,  151,  151,  151,  151,  151,  151,
  151,  151,  151,    0,    0,  151,    0,  151,    0,  151,
  207,    7,    0,    0,    0,    8,  151,    0,    0,   10,
   11,   12,  151,  155,   30,    0,   63,   63,   63,   63,
    0,   63,    0,    0,    0,    0,   64,    0,    0,  208,
   63,    0,   63,   63,   64,  220,    0,    0,    0,    8,
    9,  221,    0,  222,  223,  224,   30,  225,   14,   15,
    0,   64,    0,  232,  232,   64,  232,    0,  232,  232,
   31,  232,  232,  232,  232,  232,  232,  232,  232,   17,
    0,    0,    0,    0,    0,  232,    0,    0,    0,    0,
    0,   31,  232,    0,    0,    0,    0,    0,  232,  141,
  141,    0,   63,   63,  141,  141,  141,   31,  141,  141,
  141,    0,  141,  141,  141,    0,    0,    0,   64,   31,
    0,  141,    0,    0,    0,   31,   31,    0,  141,   31,
   31,   31,    0,    0,  141,    0,    0,    0,    0,    0,
   31,  161,  161,  161,  161,    0,  161,  161,  161,  161,
  161,  161,  161,  161,  161,  161,  161,    0,   63,  161,
   31,  161,    0,  161,  161,  161,  161,  161,  161,    0,
  161,    0,    0,    0,    0,    0,  161,  161,  161,  161,
  161,    0,    0,    0,    0,    0,    0,  242,  242,    0,
  242,    0,  242,  242,    0,  242,  242,  242,  242,  242,
  242,  242,  242,    0,    0,    0,    0,    0,    0,  242,
   31,    0,   64,   64,   64,   64,  242,   64,    0,    0,
    0,    0,  242,    0,    0,    0,   64,  220,   64,   64,
    0,    8,    9,  221,    0,  222,  223,  224,    0,  225,
   14,   15,   31,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   63,  460,   63,   63,  154,  154,  154,
  154,   17,  154,  154,  154,  154,  154,  154,  154,  154,
  154,  154,  154,    0,    0,  154,    0,  154,    0,  154,
  154,  154,  154,  154,  154,    0,  154,    0,   64,   64,
    0,    0,  154,  154,  154,  152,  152,  152,  152,    0,
  152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
  152,    0,    0,  152,    0,  152,    0,  152,  152,  152,
  152,  152,  152,    0,  152,    0,    0,    0,    0,    0,
  152,  152,  152,    0,    0,    0,    0,    0,    0,    0,
  153,  153,  153,  153,   64,  153,  153,  153,  153,  153,
  153,  153,  153,  153,  153,  153,    0,    0,  153,    0,
  153,    0,  153,  153,  153,  153,  153,  153,    0,  153,
    0,    0,    0,   14,   14,  153,  153,  153,   14,   14,
   14,    0,   14,   14,   14,    0,   14,   14,   14,    0,
    0,    0,    0,    0,    0,   14,    0,    0,    0,    0,
  111,  111,   14,    0,    0,  111,  111,  111,   14,  111,
  111,  111,    0,  111,  111,  111,    0,    0,    0,    0,
    0,    0,  111,  154,    7,    0,    0,    0,    8,  111,
    0,    0,   10,   11,   12,  111,  155,    0,    0,   64,
    0,   64,   64,  232,  232,    0,    0,    0,  232,  232,
  232,  156,  232,  232,  232,    0,  232,  232,  232,    0,
    0,    0,    0,    0,    0,  232,    0,    0,    0,    0,
  347,  220,  232,    0,    0,    8,    9,  221,  232,  222,
  223,  224,    0,  225,   14,   15,    0,  389,  220,    0,
    0,    0,    8,    9,  221,    0,  222,  223,  224,  348,
  225,   14,   15,  393,  220,   17,    0,    0,    8,    9,
  221,    0,  222,  223,  224,  390,  225,   14,   15,  433,
  220,    0,   17,    0,    8,    9,  221,    0,  222,  223,
  224,  394,  225,   14,   15,    0,  438,  220,   17,    0,
    0,    8,    9,  221,    0,  222,  223,  224,  434,  225,
   14,   15,    0,    0,   17,    0,    0,    0,    0,    0,
    0,    0,    0,  539,  220,  439,    0,    0,    8,    9,
  221,   17,  222,  223,  224,    0,  225,   14,   15,    0,
  206,  206,    0,    0,    0,  206,  206,    0,    0,  206,
  206,  206,  540,  206,  206,  206,    0,    0,   17,    0,
    0,    0,  206,    0,    0,    0,    0,   31,   31,  206,
    0,    0,   31,   31,   31,  206,   31,   31,   31,  220,
   31,   31,   31,    8,    9,  221,    0,  222,  223,  224,
    0,  225,   14,   15,    0,    0,   31,    0,    0,    0,
    0,    0,   31,    0,    0,    0,  220,  226,    0,    0,
    8,    9,  221,   17,  222,  223,  224,  220,  225,   14,
   15,    8,    9,  221,    0,  222,  223,  224,    0,  225,
   14,   15,    0,    0,  278,    0,    0,    0,    0,    0,
   17,    0,    0,    0,  220,  437,    0,    0,    8,    9,
  221,   17,  222,  223,  224,    6,  225,   14,   15,    6,
    6,    0,    0,    6,    6,    6,    0,    6,    6,    6,
    0,    0,  517,    0,    0,    0,    0,    0,   17,    0,
    0,    0,    0,    6,    0,  524,  463,    0,    0,    6,
    8,    0,  221,  464,  465,  223,  224,  466,  467,  550,
  463,    0,    0,    0,    8,    0,  221,  464,  465,  223,
  224,  466,  467,    0,  525,    0,    0,    0,    0,    0,
    0,    0,  552,  463,    0,    0,    0,    8,  551,  221,
  464,  465,  223,  224,  466,  467,  586,  463,    0,    0,
    0,    8,    0,  221,  464,  465,  223,  224,  466,  467,
    0,  553,    0,    0,    0,    0,    0,    0,    0,  588,
  463,    0,    0,    0,    8,  587,  221,  464,  465,  223,
  224,  466,  467,  594,  463,    0,    0,    0,    8,    0,
  221,  464,  465,  223,  224,  466,  467,    0,  589,    0,
    0,    0,    0,    0,    0,    0,  599,  463,    0,    0,
    0,    8,  595,  221,  464,  465,  223,  224,  466,  467,
  615,  463,    0,    0,    0,    8,    0,  221,  464,  465,
  223,  224,  466,  467,    0,  600,    7,    0,    0,    0,
    8,    0,  321,  243,   10,   11,   12,    8,  155,  616,
  244,  245,   11,   12,  246,  247,  356,  243,    0,    0,
    0,    8,    0,  218,  244,  245,   11,   12,  246,  247,
    0,  322,    0,    0,    0,    0,    0,    0,  358,  243,
    0,    0,    0,    8,    0,  357,  244,  245,   11,   12,
  246,  247,  411,  243,    0,    0,    0,    8,    0,    0,
  244,  245,   11,   12,  246,  247,    0,  359,    0,    0,
    0,    0,    0,    0,  413,  243,    0,    0,    0,    8,
    0,  412,  244,  245,   11,   12,  246,  247,  446,  243,
    0,    0,    0,    8,    0,    0,  244,  245,   11,   12,
  246,  247,    0,  414,    0,    0,    0,    0,    0,    0,
  454,  243,    0,    0,    0,    8,    0,  447,  244,  245,
   11,   12,  246,  247,  561,  243,    0,    0,    0,    8,
    0,    0,  244,  245,   11,   12,  246,  247,    0,  455,
    0,    0,    0,    0,    0,    0,  222,  222,    0,    0,
    0,  222,    0,  562,  222,  222,  222,  222,  222,  222,
  332,    7,    0,    0,    0,    8,    0,  193,  193,   10,
   11,   12,  193,  155,    0,  222,  193,  193,  193,    0,
  193,    0,    0,    0,    0,    0,    0,    0,    0,  333,
  462,  463,    0,    0,    0,    8,  193,  221,  464,  465,
  223,  224,  466,  467,  501,  463,    0,    0,    0,    8,
    0,  221,  464,  465,  223,  224,  466,  467,  468,    0,
    0,    0,    0,    0,    0,    0,  504,  463,    0,    0,
    0,    8,  502,  221,  464,  465,  223,  224,  466,  467,
  555,  463,    0,    0,    0,    8,    0,  221,  464,  465,
  223,  224,  466,  467,  505,    0,    0,    0,    0,    0,
    0,    0,  558,  463,    0,    0,    0,    8,  556,  221,
  464,  465,  223,  224,  466,  467,  579,  463,    0,    0,
    0,    8,    0,  221,  464,  465,  223,  224,  466,  467,
  559,    0,    0,    0,    0,    0,    0,    0,  583,  463,
    0,    0,    0,    8,  580,  221,  464,  465,  223,  224,
  466,  467,  606,  463,    0,    0,    0,    8,    0,  221,
  464,  465,  223,  224,  466,  467,  584,    0,    0,    0,
    0,    0,    0,  242,  243,    0,    0,    0,    8,    0,
  607,  244,  245,   11,   12,  246,  247,  289,  243,    0,
    0,    0,    8,    0,    0,  244,  245,   11,   12,  246,
  247,  248,    0,    0,    0,    0,    0,    0,  292,  243,
    0,    0,    0,    8,    0,  290,  244,  245,   11,   12,
  246,  247,  361,  243,    0,    0,    0,    8,    0,    0,
  244,  245,   11,   12,  246,  247,  293,    0,    0,    0,
    0,    0,    0,  364,  243,    0,    0,    0,    8,    0,
  362,  244,  245,   11,   12,  246,  247,  401,  243,    0,
    0,    0,    8,    0,    0,  244,  245,   11,   12,  246,
  247,  365,    0,    0,    0,    0,    0,    0,  408,  243,
    0,    0,    0,    8,    0,  402,  244,  245,   11,   12,
  246,  247,  510,  243,    0,    0,    0,    8,    0,    0,
  244,  245,   11,   12,  246,  247,  409,  463,    0,    0,
    0,    8,    0,  221,  464,  465,  223,  224,  466,  467,
  511,  463,    0,    0,    0,    8,    0,  221,  464,  465,
  223,  224,  466,  467,  463,  574,    0,    0,    8,    0,
  221,  464,  465,  223,  224,  466,  467,  243,    0,  598,
    0,    8,    0,    0,  244,  245,   11,   12,  246,  247,
  243,    0,  613,    0,    8,    0,    0,  244,  245,   11,
   12,  246,  247,  243,    0,  386,    0,    8,    0,    0,
  244,  245,   11,   12,  246,  247,  243,    0,  429,    0,
    8,    0,    0,  244,  245,   11,   12,  246,  247,  243,
    0,  450,    0,    8,    0,    0,  244,  245,   11,   12,
  246,  247,  243,    0,  451,    0,    8,    0,    0,  244,
  245,   11,   12,  246,  247,  243,    0,  452,    0,    8,
    0,    0,  244,  245,   11,   12,  246,  247,  165,    7,
  453,    0,    0,    8,    0,  263,    7,   10,   11,   12,
    8,  155,    0,  537,   10,   11,   12,    0,  155,    7,
    0,    0,    0,    8,    0,    0,  166,   10,   11,   12,
    7,  155,    0,  264,    8,    0,    0,    0,   10,   11,
   12,    7,  155,    0,    0,    8,    0,  183,    0,   10,
   11,   12,    7,  155,    0,    0,    8,    0,  202,    0,
   10,   11,   12,    7,  155,    0,    0,    8,    0,  203,
    0,   10,   11,   12,    7,  155,    0,    0,    8,    0,
  205,    0,   10,   11,   12,    0,  155,    0,  463,    0,
    0,  206,    8,    0,  221,  464,  465,  223,  224,  466,
  467,  463,  300,    0,    0,    8,    0,  221,  464,  465,
  223,  224,  466,  467,  243,  529,    0,    0,    8,    0,
    0,  244,  245,   11,   12,  246,  247,  243,  604,    0,
    0,    8,    0,    0,  244,  245,   11,   12,  246,  247,
    0,  326,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  487,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          6,
  256,   70,  441,   45,  269,  199,  370,  256,  156,  373,
   17,   47,  256,  161,  162,  256,  164,  165,  166,  278,
  198,  256,  258,  269,  256,  269,  284,  290,  293,  278,
  293,  296,  297,  289,  256,  256,   43,  256,  274,  478,
  210,  480,  274,  284,    6,  266,  267,  293,  269,  284,
  296,  297,  274,  198,   38,   39,   92,   41,  277,  101,
  102,  239,  269,  326,  100,  269,    6,  256,  507,  138,
  218,  435,  293,  142,  277,  296,  297,  256,  120,  256,
   87,  256,  259,  260,  258,  288,  280,  257,  277,  259,
  159,  256,  256,  532,  239,  534,  256,  288,  277,  362,
  274,  278,  365,  274,  279,  280,  281,  282,  283,  274,
  274,  276,  276,  256,  274,  122,  264,  292,  293,  126,
  383,  292,  293,  266,  267,  295,  269,  491,  296,  297,
  256,  570,  201,  117,  573,  276,  314,  121,  256,  402,
  147,  404,  405,  269,  407,  408,  409,  256,  190,  191,
  293,  269,  256,  296,  297,  256,  163,  596,  256,  329,
  269,  331,  169,  602,  126,  274,  276,  273,  175,  314,
  274,  277,  259,  274,  181,  182,  274,  256,  185,  186,
  187,  256,  288,  258,  293,  147,  126,  296,  297,  196,
  174,  198,  370,  256,  273,  373,  390,  269,  392,  274,
  394,  273,  244,  278,  256,  277,  213,  147,  256,  216,
  380,  274,  198,  256,  259,  385,  288,  256,  256,  261,
  262,  256,  274,  163,  487,  370,  274,  256,  373,  258,
  269,  274,  239,  269,  196,  175,  274,  415,  273,  417,
  418,  181,  182,  256,  256,  185,  186,  187,  511,  277,
  256,  256,  502,  239,  216,  505,  196,  435,  198,  266,
  288,  274,  274,  256,  274,  258,  460,  273,  275,  274,
  415,  256,  417,  418,  256,  256,  216,  256,  448,  529,
  256,  274,    6,  274,  268,  278,  270,  271,  273,  273,
  435,  298,  274,  274,  269,  274,  490,  273,  282,  239,
  284,  285,  294,  295,  256,  256,  556,  314,  256,  559,
  256,  256,  278,  491,  492,  485,  269,  273,  266,  267,
  273,  269,  274,  274,  277,  256,  266,  273,  314,  274,
  580,  256,  582,  256,  584,  288,  256,  515,  256,  346,
  273,  266,  267,  274,  269,  293,  491,  492,  296,  297,
  273,  277,  256,  273,  604,  273,  256,  607,  298,  256,
  344,  345,  269,  370,  256,  256,  373,  258,  293,  273,
  515,  296,  297,  273,  314,  256,  273,  256,  256,  421,
  422,  273,  266,  267,  370,  269,  256,  373,  266,  267,
  397,  269,  273,  256,  273,  256,  269,  270,  271,  258,
  270,  271,  126,  266,  267,  266,  267,  269,  415,  293,
  417,  418,  296,  297,  258,  293,  400,  293,  296,  297,
  296,  297,  464,  147,  256,  256,  258,  258,  435,  415,
  370,  417,  418,  373,  441,  284,  256,  444,  258,  163,
  482,  483,  256,  269,  270,  271,  273,  277,  274,  435,
  277,  175,  266,  267,  278,  269,  256,  181,  182,  259,
  260,  185,  186,  187,  256,  284,  256,  259,  260,  259,
  260,  478,  196,  480,  198,  415,  256,  417,  418,  293,
  260,  284,  296,  297,  491,  492,  256,  256,  292,  293,
  260,  260,  216,  500,  256,  435,  284,  256,  260,  258,
  507,  441,  256,  274,  258,  491,  492,  256,  515,  258,
  278,  495,  278,  497,  498,  239,  273,  270,  271,  284,
  527,  528,  259,  260,  256,  532,  277,  534,  284,  515,
  278,  292,  293,  278,  266,  267,  278,  269,  478,  273,
  480,  277,  266,   98,   99,  257,  273,  554,  278,  261,
  262,  491,  492,  265,  266,  267,  274,  269,  270,  271,
  500,  293,  260,  570,  296,  297,  573,  507,  575,  576,
  292,  293,  278,  285,  298,  515,  292,  293,  269,  291,
  259,  260,  260,  590,    6,  592,  593,  527,  528,  596,
  314,  260,  532,  274,  534,  602,  278,  256,  259,  260,
  292,  293,  609,  273,  611,  259,  260,  266,  267,  273,
  269,   33,  103,  104,  554,  278,   38,   39,  256,   41,
  278,  274,  274,  258,  258,   47,  258,  284,  266,  267,
  570,  269,  274,  573,  293,  575,  576,  296,  297,  284,
  284,  278,  278,  284,  284,  278,  370,  277,  273,  373,
  590,  278,  592,  593,  259,  293,  596,  278,  296,  297,
  274,  278,  602,  260,  260,  278,  256,  278,  278,  609,
   92,  611,  256,  274,  260,  260,  266,  267,  100,  269,
  260,  260,  266,  267,  258,  269,  284,  256,  257,  278,
  278,  415,  261,  417,  418,  117,  265,  266,  267,  121,
  269,  278,  260,  293,  126,    6,  296,  297,  260,  293,
  260,  435,  296,  297,    6,    6,  285,   24,  142,  466,
  120,  256,  257,   -1,  259,  147,  261,  262,   -1,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,   -1,   -1,
   -1,  163,   -1,  278,   -1,   -1,   -1,   -1,   -1,   -1,
  285,   -1,  174,  175,   -1,   -1,  291,   -1,   -1,  181,
  182,   -1,   -1,  185,  186,  187,   -1,  491,  492,   -1,
    6,  256,  257,   -1,  196,   -1,  261,  262,  263,   -1,
  265,  266,  267,   -1,  269,  270,  271,   -1,   -1,   -1,
   -1,  515,   -1,  278,  216,   -1,   -1,   33,   -1,   -1,
  285,   -1,   38,   39,   -1,   41,  291,  256,  257,   -1,
  259,   47,  261,  262,  263,  264,  265,  266,  267,  268,
  269,  270,  271,   -1,   -1,  274,   -1,  276,   -1,  278,
  256,  257,   -1,   -1,   -1,  261,  285,   -1,   -1,  265,
  266,  267,  291,  269,  266,   -1,  268,  269,  270,  271,
   -1,  273,   -1,   -1,   -1,   -1,   92,   -1,   -1,  285,
  282,   -1,  284,  285,  100,  257,   -1,   -1,   -1,  261,
  262,  263,   -1,  265,  266,  267,  298,  269,  270,  271,
   -1,  117,   -1,  256,  257,  121,  259,   -1,  261,  262,
  126,  264,  265,  266,  267,  268,  269,  270,  271,  291,
   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,
   -1,  147,  285,   -1,   -1,   -1,   -1,   -1,  291,  256,
  257,   -1,  344,  345,  261,  262,  263,  163,  265,  266,
  267,   -1,  269,  270,  271,   -1,   -1,   -1,  174,  175,
   -1,  278,   -1,   -1,   -1,  181,  182,   -1,  285,  185,
  186,  187,   -1,   -1,  291,   -1,   -1,   -1,   -1,   -1,
  196,  256,  257,  258,  259,   -1,  261,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,  400,  274,
  216,  276,   -1,  278,  279,  280,  281,  282,  283,   -1,
  285,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
  259,   -1,  261,  262,   -1,  264,  265,  266,  267,  268,
  269,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,  278,
  266,   -1,  268,  269,  270,  271,  285,  273,   -1,   -1,
   -1,   -1,  291,   -1,   -1,   -1,  282,  257,  284,  285,
   -1,  261,  262,  263,   -1,  265,  266,  267,   -1,  269,
  270,  271,  298,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  495,  284,  497,  498,  256,  257,  258,
  259,  291,  261,  262,  263,  264,  265,  266,  267,  268,
  269,  270,  271,   -1,   -1,  274,   -1,  276,   -1,  278,
  279,  280,  281,  282,  283,   -1,  285,   -1,  344,  345,
   -1,   -1,  291,  292,  293,  256,  257,  258,  259,   -1,
  261,  262,  263,  264,  265,  266,  267,  268,  269,  270,
  271,   -1,   -1,  274,   -1,  276,   -1,  278,  279,  280,
  281,  282,  283,   -1,  285,   -1,   -1,   -1,   -1,   -1,
  291,  292,  293,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,  258,  259,  400,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,   -1,   -1,  274,   -1,
  276,   -1,  278,  279,  280,  281,  282,  283,   -1,  285,
   -1,   -1,   -1,  256,  257,  291,  292,  293,  261,  262,
  263,   -1,  265,  266,  267,   -1,  269,  270,  271,   -1,
   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,
  256,  257,  285,   -1,   -1,  261,  262,  263,  291,  265,
  266,  267,   -1,  269,  270,  271,   -1,   -1,   -1,   -1,
   -1,   -1,  278,  256,  257,   -1,   -1,   -1,  261,  285,
   -1,   -1,  265,  266,  267,  291,  269,   -1,   -1,  495,
   -1,  497,  498,  256,  257,   -1,   -1,   -1,  261,  262,
  263,  284,  265,  266,  267,   -1,  269,  270,  271,   -1,
   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,
  256,  257,  285,   -1,   -1,  261,  262,  263,  291,  265,
  266,  267,   -1,  269,  270,  271,   -1,  256,  257,   -1,
   -1,   -1,  261,  262,  263,   -1,  265,  266,  267,  285,
  269,  270,  271,  256,  257,  291,   -1,   -1,  261,  262,
  263,   -1,  265,  266,  267,  284,  269,  270,  271,  256,
  257,   -1,  291,   -1,  261,  262,  263,   -1,  265,  266,
  267,  284,  269,  270,  271,   -1,  256,  257,  291,   -1,
   -1,  261,  262,  263,   -1,  265,  266,  267,  285,  269,
  270,  271,   -1,   -1,  291,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,  285,   -1,   -1,  261,  262,
  263,  291,  265,  266,  267,   -1,  269,  270,  271,   -1,
  256,  257,   -1,   -1,   -1,  261,  262,   -1,   -1,  265,
  266,  267,  285,  269,  270,  271,   -1,   -1,  291,   -1,
   -1,   -1,  278,   -1,   -1,   -1,   -1,  256,  257,  285,
   -1,   -1,  261,  262,  263,  291,  265,  266,  267,  257,
  269,  270,  271,  261,  262,  263,   -1,  265,  266,  267,
   -1,  269,  270,  271,   -1,   -1,  285,   -1,   -1,   -1,
   -1,   -1,  291,   -1,   -1,   -1,  257,  285,   -1,   -1,
  261,  262,  263,  291,  265,  266,  267,  257,  269,  270,
  271,  261,  262,  263,   -1,  265,  266,  267,   -1,  269,
  270,  271,   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,
  291,   -1,   -1,   -1,  257,  285,   -1,   -1,  261,  262,
  263,  291,  265,  266,  267,  257,  269,  270,  271,  261,
  262,   -1,   -1,  265,  266,  267,   -1,  269,  270,  271,
   -1,   -1,  285,   -1,   -1,   -1,   -1,   -1,  291,   -1,
   -1,   -1,   -1,  285,   -1,  256,  257,   -1,   -1,  291,
  261,   -1,  263,  264,  265,  266,  267,  268,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,
  267,  268,  269,   -1,  285,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,  285,  263,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,  263,  264,  265,  266,  267,  268,  269,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  257,   -1,   -1,   -1,  261,  285,  263,  264,  265,  266,
  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
  263,  264,  265,  266,  267,  268,  269,   -1,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,  285,  263,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,
  266,  267,  268,  269,   -1,  285,  257,   -1,   -1,   -1,
  261,   -1,  256,  257,  265,  266,  267,  261,  269,  285,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,  284,  264,  265,  266,  267,  268,  269,
   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,   -1,  285,  264,  265,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  264,  265,  266,  267,  268,  269,   -1,  285,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
   -1,  285,  264,  265,  266,  267,  268,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,   -1,  264,  265,  266,  267,
  268,  269,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,   -1,  285,  264,  265,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,   -1,  264,  265,  266,  267,  268,  269,   -1,  285,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,   -1,  285,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,  256,  257,  265,
  266,  267,  261,  269,   -1,  285,  265,  266,  267,   -1,
  269,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  285,
  256,  257,   -1,   -1,   -1,  261,  285,  263,  264,  265,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,  263,  264,  265,  266,  267,  268,  269,  284,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,  284,  263,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,
  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,  284,  263,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,  263,  264,  265,  266,  267,  268,  269,
  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,  284,  263,  264,  265,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,  263,
  264,  265,  266,  267,  268,  269,  284,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,
  284,  264,  265,  266,  267,  268,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,
  269,  284,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,   -1,  284,  264,  265,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  264,  265,  266,  267,  268,  269,  284,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,
  284,  264,  265,  266,  267,  268,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,
  269,  284,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,   -1,  284,  264,  265,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  264,  265,  266,  267,  268,  269,  284,  257,   -1,   -1,
   -1,  261,   -1,  263,  264,  265,  266,  267,  268,  269,
  284,  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,
  266,  267,  268,  269,  257,  285,   -1,   -1,  261,   -1,
  263,  264,  265,  266,  267,  268,  269,  257,   -1,  285,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
  257,   -1,  285,   -1,  261,   -1,   -1,  264,  265,  266,
  267,  268,  269,  257,   -1,  285,   -1,  261,   -1,   -1,
  264,  265,  266,  267,  268,  269,  257,   -1,  285,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,  257,
   -1,  285,   -1,  261,   -1,   -1,  264,  265,  266,  267,
  268,  269,  257,   -1,  285,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  257,   -1,  285,   -1,  261,
   -1,   -1,  264,  265,  266,  267,  268,  269,  256,  257,
  285,   -1,   -1,  261,   -1,  256,  257,  265,  266,  267,
  261,  269,   -1,  285,  265,  266,  267,   -1,  269,  257,
   -1,   -1,   -1,  261,   -1,   -1,  284,  265,  266,  267,
  257,  269,   -1,  284,  261,   -1,   -1,   -1,  265,  266,
  267,  257,  269,   -1,   -1,  261,   -1,  285,   -1,  265,
  266,  267,  257,  269,   -1,   -1,  261,   -1,  285,   -1,
  265,  266,  267,  257,  269,   -1,   -1,  261,   -1,  285,
   -1,  265,  266,  267,  257,  269,   -1,   -1,  261,   -1,
  285,   -1,  265,  266,  267,   -1,  269,   -1,  257,   -1,
   -1,  285,  261,   -1,  263,  264,  265,  266,  267,  268,
  269,  257,  285,   -1,   -1,  261,   -1,  263,  264,  265,
  266,  267,  268,  269,  257,  284,   -1,   -1,  261,   -1,
   -1,  264,  265,  266,  267,  268,  269,  257,  284,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  284,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=297;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"IF","THEN","ELSE","END_IF","OUT","FUN","RETURN","BREAK","WHEN",
"WHILE","FOR","CONTINUE","ID","I32","F32","PUNTO","PARENT_A","PARENT_C",
"COMILLA","COMA","DOSPUNTOS","PUNTOCOMA","IGUAL","MAYOR","MENOR","MENORIGUAL",
"MAYORIGUAL","LLAVE_A","LLAVE_C","EXCL","DIST","ASIG","CADENA","COMENT","CONST",
"SUMA","RESTA","MULT","DIV","ENTERO","FLOAT",
};
final static String yyrule[] = {
"$accept : program",
"program : nombre_program LLAVE_A bloque_sentencias LLAVE_C",
"program : error",
"nombre_program : ID",
"bloque_sentencias :",
"bloque_sentencias : bloque_sentencias sentencia PUNTOCOMA",
"bloque_sentencias : bloque_sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_decl_datos",
"sentencia_declarativa : sentencia_decl_fun",
"sentencia_declarativa : lista_const",
"tipo : I32",
"tipo : F32",
"sentencia_decl_datos : tipo list_var",
"sentencia_decl_datos : ID list_var",
"list_var : list_var COMA ID",
"list_var : ID",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun error",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo error",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS error",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C error",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro error",
"sentencia_decl_fun : FUN ID PARENT_A parametro error",
"sentencia_decl_fun : FUN ID error",
"sentencia_decl_fun : FUN error",
"cuerpo_fun :",
"cuerpo_fun : cuerpo_fun sentencias_fun PUNTOCOMA",
"cuerpo_fun : cuerpo_fun sentencias_fun",
"sentencias_fun : sentencia_decl_datos",
"sentencias_fun : sentencia_decl_fun",
"sentencias_fun : lista_const",
"sentencias_fun : asignacion",
"sentencias_fun : llamado_func",
"sentencias_fun : sentencia_if_fun",
"sentencias_fun : sentencia_out",
"sentencias_fun : sentencia_when_fun",
"sentencias_fun : sentencia_for_fun",
"sentencias_fun : sentencia_while_fun",
"sentencias_fun : retorno",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_fun : IF PARENT_A condicion error",
"sentencia_if_fun : IF PARENT_A error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_fun : WHEN PARENT_A condicion error",
"sentencia_when_fun : WHEN PARENT_A error",
"sentencia_when_fun : WHEN error condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion error",
"sentencia_while_fun : WHILE PARENT_A error",
"sentencia_while_fun : WHILE error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for_fun : ID DOSPUNTOS error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for_fun : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for_fun : FOR error",
"cuerpo_fun_break :",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break PUNTOCOMA",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break error",
"sentencias_fun_break : asignacion",
"sentencias_fun_break : sentencia_if_break_fun",
"sentencias_fun_break : sentencia_out",
"sentencias_fun_break : sentencia_when_break_fun",
"sentencias_fun_break : sentencia_while_fun",
"sentencias_fun_break : sentencia_for_fun",
"sentencias_fun_break : CONTINUE tag",
"sentencias_fun_break : BREAK",
"sentencias_fun_break : BREAK cte",
"sentencias_fun_break : retorno",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun_break",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_break_fun : WHEN PARENT_A condicion error",
"sentencia_when_break_fun : WHEN PARENT_A error",
"sentencia_when_break_fun : WHEN error condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break_fun : IF PARENT_A condicion error",
"sentencia_if_break_fun : IF PARENT_A error",
"sentencia_if_break_fun : IF error",
"retorno : RETURN PARENT_A expresion PARENT_C",
"parametro : tipo ID",
"parametro : ID ID",
"lista_const : CONST lista_asignacion",
"lista_asignacion : lista_asignacion COMA asignacion",
"lista_asignacion : asignacion",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : sentencia_if",
"sentencia_ejecutable : sentencia_out",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : sentencia_for",
"sentencia_ejecutable : sentencia_while",
"sentencia_ejecutable : llamado_func",
"asignacion : ID ASIG expresion",
"expresion : expresion SUMA termino",
"expresion : expresion RESTA termino",
"expresion : termino",
"expresion : llamado_func",
"expresion : sentencia_for ELSE cte",
"expresion : sentencia_while ELSE cte",
"termino : termino MULT factor",
"termino : termino DIV factor",
"termino : factor",
"factor : ID",
"factor : cte",
"cte : ENTERO",
"cte : FLOAT",
"cte : RESTA ENTERO",
"cte : RESTA FLOAT",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if : IF PARENT_A condicion PARENT_C error",
"sentencia_if : IF PARENT_A condicion error",
"sentencia_if : IF PARENT_A error",
"sentencia_if : IF error",
"condicion : expresion comparacion expresion",
"condicion : expresion comparacion error",
"condicion : expresion error expresion",
"comparacion : IGUAL",
"comparacion : MAYOR",
"comparacion : MENOR",
"comparacion : MENORIGUAL",
"comparacion : MAYORIGUAL",
"bloque_ejecutable :",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable PUNTOCOMA",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"sentencia_out : OUT PARENT_A CADENA PARENT_C",
"sentencia_out : OUT PARENT_A CADENA error",
"sentencia_out : OUT PARENT_A error",
"sentencia_out : OUT error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN sentencia_ejecutable",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN error bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C error LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A error PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN error condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C error",
"sentencia_while : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion error",
"sentencia_while : WHILE PARENT_A error",
"sentencia_while : WHILE error",
"bloque_break_continue :",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue PUNTOCOMA",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue",
"ejecutables_break_continue : asignacion",
"ejecutables_break_continue : sentencia_if_break",
"ejecutables_break_continue : sentencia_out",
"ejecutables_break_continue : sentencia_when_break",
"ejecutables_break_continue : sentencia_while",
"ejecutables_break_continue : sentencia_for",
"ejecutables_break_continue : CONTINUE tag",
"ejecutables_break_continue : BREAK",
"ejecutables_break_continue : BREAK cte",
"tag :",
"tag : DOSPUNTOS ID",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN ejecutables_break_continue",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN error bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C error LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A error PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN error condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion error",
"sentencia_if_break : IF PARENT_A error",
"sentencia_if_break : IF error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C ejecutables_break_continue",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C ejecutables_break_continue",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for : ID DOSPUNTOS error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte error",
"sentencia_for : FOR PARENT_A asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte error",
"sentencia_for : FOR error",
"param_real : cte",
"param_real : ID",
"llamado_func : ID PARENT_A param_real COMA param_real PARENT_C",
"llamado_func : ID PARENT_A param_real PARENT_C",
"llamado_func : ID PARENT_A PARENT_C",
"llamado_func : ID PARENT_A param_real COMA param_real error",
"llamado_func : ID PARENT_A param_real error",
"llamado_func : ID PARENT_A error",
};

//#line 538 ".\gramaticaFeli.y"
private NodoControl raiz;
private String ambitoActual = "Global";

void yyerror(String mensaje){
        System.out.println("Linea"+ AnalizadorLexico.getLineaAct() +"| Error sintactico: " + mensaje);
}
void chequearRangoI32(String sval){
  String s = "2147483647";
  long l = Long.valueOf(s);
  if(Long.valueOf(sval) > l){
    yyerror("La constante esta fuera de rango");
  }
}

int yylex() throws IOException{
        Token t = AnalizadorLexico.getToken();
        this.yylval = new ParserVal(t.getLexema());
        //if(t.getId() != -1){
        //  System.out.println("Id: " + t.getId()+" Lexema: " + t.getLexema());
        //}else
        //  System.out.println("TERMINO LA EJECUCION");
        return t.getId();
}
public NodoControl getRaiz(){
	return raiz;
}
//#line 1249 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse() throws IOException
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 ".\gramaticaFeli.y"
{raiz = new NodoControl("PROGRAMA",(ArbolSintactico)val_peek(1));
                                                            System.out.println("Raiz---$$ : " + yyval + " $1 :" + val_peek(3));
                                                            System.out.println("Raiz : " + raiz);
                                                           }
break;
case 2:
//#line 21 ".\gramaticaFeli.y"
{yyerror("Hay un error sintactico en la entrada que arrastra errores");}
break;
case 4:
//#line 25 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Fin");}
break;
case 5:
//#line 26 ".\gramaticaFeli.y"
{
                                                        yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                                                        System.out.println("BloqueSentencia---$$ : " + yyval + " $1 :" + val_peek(2));
                                                        }
break;
case 6:
//#line 30 ".\gramaticaFeli.y"
{yyerror("Se esperaba ;");}
break;
case 7:
//#line 32 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Sentencia Declarativa");}
break;
case 8:
//#line 33 ".\gramaticaFeli.y"
{yyval = val_peek(0);
                                System.out.println("Sentencia---$$ : " + yyval + " $1 :" + val_peek(0));
                                }
break;
case 12:
//#line 41 ".\gramaticaFeli.y"
{
            yyval = new NodoHoja("Entero");
            ((NodoHoja)yyval).setTipo("Entero");
           }
break;
case 13:
//#line 45 ".\gramaticaFeli.y"
{
            yyval = new NodoHoja("Float");
            ((NodoHoja)yyval).setTipo("Float");
           }
break;
case 14:
//#line 50 ".\gramaticaFeli.y"
{System.out.println("Declaracion de datos");
                                      for (String s : ((NodoTipos)val_peek(0)).getList()){
                                        TablaSimbolos.addAtributo(s,"Tipo",((ArbolSintactico) val_peek(1)).getTipo());
                                        TablaSimbolos.addAtributo(s,"Ambito",ambitoActual);
                                      }
                                     }
break;
case 15:
//#line 56 ".\gramaticaFeli.y"
{yyerror("No esta permitido el tipo declarado");}
break;
case 16:
//#line 58 ".\gramaticaFeli.y"
{
                            yyval=val_peek(2);
                            ((NodoTipos)yyval).add((String)val_peek(0).sval);
                            }
break;
case 17:
//#line 62 ".\gramaticaFeli.y"
{
               yyval=new NodoTipos((String)val_peek(0).sval);
              }
break;
case 18:
//#line 66 ".\gramaticaFeli.y"
{System.out.println("Declaracion de Funcion");}
break;
case 19:
//#line 67 ".\gramaticaFeli.y"
{System.out.println("Declaracion de Funcion");}
break;
case 20:
//#line 68 ".\gramaticaFeli.y"
{System.out.println("Declaracion de Funcion");}
break;
case 21:
//#line 69 ".\gramaticaFeli.y"
{yyerror("Se esperaba } ");}
break;
case 22:
//#line 70 ".\gramaticaFeli.y"
{yyerror("Se esperaba {");}
break;
case 23:
//#line 71 ".\gramaticaFeli.y"
{yyerror("El tipo declarado no esta permitido");}
break;
case 24:
//#line 72 ".\gramaticaFeli.y"
{yyerror("Se esperaba :");}
break;
case 25:
//#line 73 ".\gramaticaFeli.y"
{yyerror("Se esperaba )");}
break;
case 26:
//#line 74 ".\gramaticaFeli.y"
{yyerror("Se esperaba )");}
break;
case 27:
//#line 75 ".\gramaticaFeli.y"
{yyerror("Se esperaba (");}
break;
case 28:
//#line 76 ".\gramaticaFeli.y"
{yyerror("Se esperaba un nombre de funcion");}
break;
case 31:
//#line 80 ".\gramaticaFeli.y"
{System.out.println("Se esperaba ;");}
break;
case 43:
//#line 94 ".\gramaticaFeli.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(8),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(5)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));
                        }
break;
case 44:
//#line 97 ".\gramaticaFeli.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(6)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));}
break;
case 45:
//#line 99 ".\gramaticaFeli.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(7)),new NodoControl("else fun", (ArbolSintactico)val_peek(3))));}
break;
case 46:
//#line 102 ".\gramaticaFeli.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF FUN", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                }
break;
case 47:
//#line 105 ".\gramaticaFeli.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(6)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));}
break;
case 48:
//#line 108 ".\gramaticaFeli.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF FUN", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );}
break;
case 49:
//#line 110 ".\gramaticaFeli.y"
{yyerror("Se esperaba end_if ");}
break;
case 50:
//#line 111 ".\gramaticaFeli.y"
{yyerror("Se esperaba } ");}
break;
case 51:
//#line 112 ".\gramaticaFeli.y"
{yyerror("Se esperaba { ");}
break;
case 52:
//#line 113 ".\gramaticaFeli.y"
{yyerror("Se esperaba end_if ");}
break;
case 53:
//#line 114 ".\gramaticaFeli.y"
{yyerror("Se esperaba } ");}
break;
case 54:
//#line 115 ".\gramaticaFeli.y"
{yyerror("Se esperaba { ");}
break;
case 55:
//#line 116 ".\gramaticaFeli.y"
{yyerror("Se esperaba then ");}
break;
case 56:
//#line 117 ".\gramaticaFeli.y"
{yyerror("Se esperaba ) ");}
break;
case 57:
//#line 118 ".\gramaticaFeli.y"
{yyerror("Se esperaba una condicion ");}
break;
case 58:
//#line 120 ".\gramaticaFeli.y"
{System.out.println("Sentencia WHEN");}
break;
case 59:
//#line 121 ".\gramaticaFeli.y"
{System.out.println("Sentencia WHEN");}
break;
case 60:
//#line 122 ".\gramaticaFeli.y"
{yyerror("Se esperaba }");}
break;
case 61:
//#line 123 ".\gramaticaFeli.y"
{yyerror("Se esperaba {");}
break;
case 62:
//#line 124 ".\gramaticaFeli.y"
{yyerror("Se esperaba then ");}
break;
case 63:
//#line 125 ".\gramaticaFeli.y"
{yyerror("Se esperaba )");}
break;
case 64:
//#line 126 ".\gramaticaFeli.y"
{yyerror("Se esperaba condicion");}
break;
case 65:
//#line 127 ".\gramaticaFeli.y"
{yyerror("Se esperaba (");}
break;
case 66:
//#line 129 ".\gramaticaFeli.y"
{System.out.println("Sentencia WHILE");}
break;
case 67:
//#line 130 ".\gramaticaFeli.y"
{System.out.println("Sentencia WHILE");}
break;
case 68:
//#line 131 ".\gramaticaFeli.y"
{System.out.println("Sentencia WHILE");}
break;
case 69:
//#line 132 ".\gramaticaFeli.y"
{System.out.println("Sentencia WHILE");}
break;
case 70:
//#line 133 ".\gramaticaFeli.y"
{yyerror("Se esperaba }");}
break;
case 71:
//#line 134 ".\gramaticaFeli.y"
{yyerror("Se esperaba {");}
break;
case 72:
//#line 135 ".\gramaticaFeli.y"
{yyerror("Se esperaba )");}
break;
case 73:
//#line 136 ".\gramaticaFeli.y"
{yyerror("Se esperaba una asignacion");}
break;
case 74:
//#line 137 ".\gramaticaFeli.y"
{yyerror("Se esperaba (");}
break;
case 75:
//#line 138 ".\gramaticaFeli.y"
{yyerror("Se esperaba :");}
break;
case 76:
//#line 139 ".\gramaticaFeli.y"
{yyerror("Se esperaba )");}
break;
case 77:
//#line 140 ".\gramaticaFeli.y"
{yyerror("Se esperaba una condicion");}
break;
case 78:
//#line 141 ".\gramaticaFeli.y"
{yyerror("Se esperaba (");}
break;
case 79:
//#line 143 ".\gramaticaFeli.y"
{System.out.println("Sentencia FOR");
                                                                                                        yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                                                                                                       }
break;
case 80:
//#line 146 ".\gramaticaFeli.y"
{System.out.println("Sentencia FOR");
                                                                                                        yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                                                                                                       }
break;
case 81:
//#line 149 ".\gramaticaFeli.y"
{System.out.println("Sentencia FOR");
                                                                                                                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                                                                                                                                }
break;
case 82:
//#line 152 ".\gramaticaFeli.y"
{System.out.println("Sentencia FOR");
                                                                                                                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                                                                                                                                }
break;
case 83:
//#line 155 ".\gramaticaFeli.y"
{yyerror("Se esperaba }");}
break;
case 84:
//#line 156 ".\gramaticaFeli.y"
{yyerror("Se esperaba }");}
break;
case 85:
//#line 157 ".\gramaticaFeli.y"
{yyerror("Se esperaba {");}
break;
case 86:
//#line 158 ".\gramaticaFeli.y"
{yyerror("Se esperaba {");}
break;
case 87:
//#line 159 ".\gramaticaFeli.y"
{yyerror("Se esperaba )");}
break;
case 88:
//#line 160 ".\gramaticaFeli.y"
{yyerror("Se esperaba )");}
break;
case 89:
//#line 161 ".\gramaticaFeli.y"
{yyerror("Se esperaba (");}
break;
case 90:
//#line 162 ".\gramaticaFeli.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 91:
//#line 165 ".\gramaticaFeli.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 92:
//#line 168 ".\gramaticaFeli.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 93:
//#line 171 ".\gramaticaFeli.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 94:
//#line 174 ".\gramaticaFeli.y"
{yyerror("Se esperaba }");}
break;
case 95:
//#line 175 ".\gramaticaFeli.y"
{yyerror("Se esperaba }");}
break;
case 96:
//#line 176 ".\gramaticaFeli.y"
{yyerror("Se esperaba {");}
break;
case 97:
//#line 177 ".\gramaticaFeli.y"
{yyerror("Se esperaba {");}
break;
case 98:
//#line 178 ".\gramaticaFeli.y"
{yyerror("Se esperaba )");}
break;
case 99:
//#line 179 ".\gramaticaFeli.y"
{yyerror("Se esperaba )");}
break;
case 100:
//#line 180 ".\gramaticaFeli.y"
{yyerror("Se esperaba (");}
break;
case 103:
//#line 184 ".\gramaticaFeli.y"
{yyerror("Se esperaba ;");}
break;
case 114:
//#line 198 ".\gramaticaFeli.y"
{System.out.println("Sentencia WHEN");}
break;
case 115:
//#line 199 ".\gramaticaFeli.y"
{System.out.println("Sentencia WHEN");}
break;
case 116:
//#line 200 ".\gramaticaFeli.y"
{yyerror("Se esperaba }");}
break;
case 117:
//#line 201 ".\gramaticaFeli.y"
{yyerror("Se esperaba {");}
break;
case 118:
//#line 202 ".\gramaticaFeli.y"
{yyerror("Se esperaba then ");}
break;
case 119:
//#line 203 ".\gramaticaFeli.y"
{yyerror("Se esperaba )");}
break;
case 120:
//#line 204 ".\gramaticaFeli.y"
{yyerror("Se esperaba condicion");}
break;
case 121:
//#line 205 ".\gramaticaFeli.y"
{yyerror("Se esperaba (");}
break;
case 122:
//#line 208 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 123:
//#line 213 ".\gramaticaFeli.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 124:
//#line 218 ".\gramaticaFeli.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 125:
//#line 223 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 126:
//#line 228 ".\gramaticaFeli.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 127:
//#line 233 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 128:
//#line 237 ".\gramaticaFeli.y"
{yyerror("Se esperaba end_if ");}
break;
case 129:
//#line 238 ".\gramaticaFeli.y"
{yyerror("Se esperaba } ");}
break;
case 130:
//#line 239 ".\gramaticaFeli.y"
{yyerror("Se esperaba { ");}
break;
case 131:
//#line 240 ".\gramaticaFeli.y"
{yyerror("Se esperaba end_if ");}
break;
case 132:
//#line 241 ".\gramaticaFeli.y"
{yyerror("Se esperaba } ");}
break;
case 133:
//#line 242 ".\gramaticaFeli.y"
{yyerror("Se esperaba { ");}
break;
case 134:
//#line 243 ".\gramaticaFeli.y"
{yyerror("Se esperaba then ");}
break;
case 135:
//#line 244 ".\gramaticaFeli.y"
{yyerror("Se esperaba ) ");}
break;
case 136:
//#line 245 ".\gramaticaFeli.y"
{yyerror("Se esperaba una condicion ");}
break;
case 137:
//#line 246 ".\gramaticaFeli.y"
{yyerror("Se esperaba ( ");}
break;
case 140:
//#line 251 ".\gramaticaFeli.y"
{yyerror("No esta permitido el tipo declarado");}
break;
case 141:
//#line 254 ".\gramaticaFeli.y"
{System.out.println("Declaracion de Constante/s");}
break;
case 144:
//#line 259 ".\gramaticaFeli.y"
{yyval = val_peek(0);
                                   System.out.println("SentenciaEjecutable---$$ : " + yyval + " $1 :" + val_peek(0));
                                  }
break;
case 145:
//#line 262 ".\gramaticaFeli.y"
{yyval = val_peek(0);
                                System.out.println("SentenciaEjecutable---$$ : " + yyval + " $1 :" + val_peek(0));}
break;
case 146:
//#line 264 ".\gramaticaFeli.y"
{yyval = val_peek(0);
                                System.out.println("SentenciaEjecutable---$$ : " + yyval + " $1 :" + val_peek(0));}
break;
case 147:
//#line 266 ".\gramaticaFeli.y"
{yyval = val_peek(0);
                                System.out.println("SentenciaEjecutable---$$ : " + yyval + " $1 :" + val_peek(0));}
break;
case 148:
//#line 268 ".\gramaticaFeli.y"
{yyval = val_peek(0);
                                System.out.println("SentenciaEjecutable---$$ : " + yyval + " $1 :" + val_peek(0));}
break;
case 149:
//#line 270 ".\gramaticaFeli.y"
{yyval = val_peek(0);
                                System.out.println("SentenciaEjecutable---$$ : " + yyval + " $1 :" + val_peek(0));}
break;
case 151:
//#line 274 ".\gramaticaFeli.y"
{
                                 System.out.println("Asignacion");
                                 yyval = new NodoComun(val_peek(1).sval,new NodoHoja(val_peek(2).sval), (ArbolSintactico) val_peek(0));
                                 System.out.println("Asignacino---$$ : " + yyval + " $1 :" + val_peek(2)+" $3 :" + val_peek(0));
                                }
break;
case 152:
//#line 280 ".\gramaticaFeli.y"
{
                                   yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                   System.out.println("ExpresionSuma---$$ : " + yyval + " $1 :" + val_peek(2)+" $3 :" + val_peek(0));
                                  }
break;
case 153:
//#line 284 ".\gramaticaFeli.y"
{
                                   yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                   System.out.println("ExpresionResta---$$ : " + yyval + " $1 :" + val_peek(2)+" $3 :" + val_peek(0));
                                  }
break;
case 154:
//#line 288 ".\gramaticaFeli.y"
{
                   yyval = val_peek(0);
                   System.out.println("ExpresionTermino---$$ : " + yyval + " $1 :" + val_peek(0));
                  }
break;
case 158:
//#line 297 ".\gramaticaFeli.y"
{
                                yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                System.out.println("TerminoMult---$$ : " + yyval + " $1 :" + val_peek(2)+" $3 :" + val_peek(0));
                                }
break;
case 159:
//#line 302 ".\gramaticaFeli.y"
{
                                 yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                 System.out.println("TerminoDiv---$$ : " + yyval + " $1 :" + val_peek(2)+" $3 :" + val_peek(0));
                                }
break;
case 160:
//#line 307 ".\gramaticaFeli.y"
{
                  yyval = val_peek(0);
                  System.out.println("TerminoFactor---$$ : " + yyval + " $1 :" + val_peek(0));
                 }
break;
case 161:
//#line 312 ".\gramaticaFeli.y"
{
            yyval = new NodoHoja(val_peek(0).sval);
            System.out.println("FactorID----$$ : " + yyval + " $1 :" + val_peek(0));                                                             
           }
break;
case 162:
//#line 316 ".\gramaticaFeli.y"
{
               yyval = new NodoHoja(val_peek(0).sval);
               System.out.println("factorCTE---$$ : " + yyval + " $1 :" + val_peek(0));
              }
break;
case 163:
//#line 321 ".\gramaticaFeli.y"
{  chequearRangoI32(val_peek(0).sval);}
break;
case 167:
//#line 327 ".\gramaticaFeli.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");}
break;
case 168:
//#line 330 ".\gramaticaFeli.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");}
break;
case 169:
//#line 333 ".\gramaticaFeli.y"
{yyval = new NodoComun("IF", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                                                                                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");}
break;
case 170:
//#line 335 ".\gramaticaFeli.y"
{yyval = new NodoComun("IF", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                                                                                        System.out.println("Sentencia IF sin corchetes y sin else");}
break;
case 171:
//#line 337 ".\gramaticaFeli.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF con corchetes y else");}
break;
case 172:
//#line 340 ".\gramaticaFeli.y"
{
                                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                                        System.out.println("Sentencia IF con corchetes y sin else");}
break;
case 173:
//#line 343 ".\gramaticaFeli.y"
{yyerror("Se esperaba end_if ");}
break;
case 174:
//#line 344 ".\gramaticaFeli.y"
{yyerror("Se esperaba } ");}
break;
case 175:
//#line 345 ".\gramaticaFeli.y"
{yyerror("Se esperaba { ");}
break;
case 176:
//#line 346 ".\gramaticaFeli.y"
{yyerror("Se esperaba end_if ");}
break;
case 177:
//#line 347 ".\gramaticaFeli.y"
{yyerror("Se esperaba } ");}
break;
case 178:
//#line 348 ".\gramaticaFeli.y"
{yyerror("Se esperaba { ");}
break;
case 179:
//#line 349 ".\gramaticaFeli.y"
{yyerror("Se esperaba then ");}
break;
case 180:
//#line 350 ".\gramaticaFeli.y"
{yyerror("Se esperaba ) ");}
break;
case 181:
//#line 351 ".\gramaticaFeli.y"
{yyerror("Se esperaba una condicion ");}
break;
case 182:
//#line 352 ".\gramaticaFeli.y"
{yyerror("Se esperaba ( ");}
break;
case 183:
//#line 356 ".\gramaticaFeli.y"
{yyval= new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));}
break;
case 184:
//#line 357 ".\gramaticaFeli.y"
{yyerror("Se esperaba otra expresion para comparar.");}
break;
case 185:
//#line 358 ".\gramaticaFeli.y"
{yyerror("Se esperaba un tipo de comparacion.");}
break;
case 186:
//#line 360 ".\gramaticaFeli.y"
{yyval= val_peek(0);}
break;
case 187:
//#line 361 ".\gramaticaFeli.y"
{yyval= val_peek(0);}
break;
case 188:
//#line 362 ".\gramaticaFeli.y"
{yyval= val_peek(0);}
break;
case 189:
//#line 363 ".\gramaticaFeli.y"
{yyval= val_peek(0);}
break;
case 190:
//#line 364 ".\gramaticaFeli.y"
{yyval= val_peek(0);}
break;
case 191:
//#line 366 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Fin");}
break;
case 192:
//#line 367 ".\gramaticaFeli.y"
{
                                                                yyval=new NodoComun("Bloque Ejecutable", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                                                                }
break;
case 193:
//#line 370 ".\gramaticaFeli.y"
{yyerror("Se esperaba ;");}
break;
case 194:
//#line 372 ".\gramaticaFeli.y"
{
                        yyval = new NodoControl(val_peek(3).sval, (ArbolSintactico) new NodoHoja(val_peek(1).sval));
                        System.out.println("Sentencia OUT");}
break;
case 195:
//#line 375 ".\gramaticaFeli.y"
{yyerror("Se esperaba )");}
break;
case 196:
//#line 376 ".\gramaticaFeli.y"
{yyerror("Se esperaba una CADENA");}
break;
case 197:
//#line 377 ".\gramaticaFeli.y"
{yyerror("Se esperaba (");}
break;
case 198:
//#line 379 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 199:
//#line 382 ".\gramaticaFeli.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 200:
//#line 385 ".\gramaticaFeli.y"
{yyerror("Se esperaba } en el when");}
break;
case 201:
//#line 386 ".\gramaticaFeli.y"
{yyerror("Se esperaba { en el when");}
break;
case 202:
//#line 387 ".\gramaticaFeli.y"
{yyerror("Se esperaba then en el when");}
break;
case 203:
//#line 388 ".\gramaticaFeli.y"
{yyerror("Se esperaba condicion en el when");}
break;
case 204:
//#line 389 ".\gramaticaFeli.y"
{yyerror("Se esperaba ( en el when");}
break;
case 205:
//#line 390 ".\gramaticaFeli.y"
{yyerror("Se esperaba ) en el when");}
break;
case 206:
//#line 391 ".\gramaticaFeli.y"
{yyerror("Se esperaba then en el when");}
break;
case 207:
//#line 393 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(12).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                        System.out.println("Sentencia WHILE con etiqueta y con llaves");}
break;
case 208:
//#line 396 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(10).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );
                        System.out.println("Sentencia WHILE con etiqueta y sin llaves");}
break;
case 209:
//#line 399 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 210:
//#line 402 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");}
break;
case 211:
//#line 405 ".\gramaticaFeli.y"
{yyerror("Se esperaba }");}
break;
case 212:
//#line 406 ".\gramaticaFeli.y"
{yyerror("Se esperaba {");}
break;
case 213:
//#line 407 ".\gramaticaFeli.y"
{yyerror("Se esperaba )");}
break;
case 214:
//#line 408 ".\gramaticaFeli.y"
{yyerror("Se esperaba una asignacion");}
break;
case 215:
//#line 409 ".\gramaticaFeli.y"
{yyerror("Se esperaba (");}
break;
case 216:
//#line 410 ".\gramaticaFeli.y"
{yyerror("Se esperaba :");}
break;
case 217:
//#line 411 ".\gramaticaFeli.y"
{yyerror("Se esperaba )");}
break;
case 218:
//#line 412 ".\gramaticaFeli.y"
{yyerror("Se esperaba una condicion");}
break;
case 219:
//#line 413 ".\gramaticaFeli.y"
{yyerror("Se esperaba (");}
break;
case 220:
//#line 415 ".\gramaticaFeli.y"
{yyval=new NodoHoja("Fin");}
break;
case 221:
//#line 416 ".\gramaticaFeli.y"
{
                yyval = new NodoComun("Bloque Break con Continue",(ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                }
break;
case 222:
//#line 419 ".\gramaticaFeli.y"
{yyerror("Se esperaba ;");}
break;
case 223:
//#line 422 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 224:
//#line 423 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 225:
//#line 424 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 227:
//#line 426 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 228:
//#line 427 ".\gramaticaFeli.y"
{yyval = val_peek(0);}
break;
case 234:
//#line 435 ".\gramaticaFeli.y"
{System.out.println("Sentencia WHEN");}
break;
case 235:
//#line 436 ".\gramaticaFeli.y"
{System.out.println("Sentencia WHEN");}
break;
case 236:
//#line 437 ".\gramaticaFeli.y"
{yyerror("Se esperaba } en el when");}
break;
case 237:
//#line 438 ".\gramaticaFeli.y"
{yyerror("Se esperaba { en el when");}
break;
case 238:
//#line 439 ".\gramaticaFeli.y"
{yyerror("Se esperaba then en el when");}
break;
case 239:
//#line 440 ".\gramaticaFeli.y"
{yyerror("Se esperaba condicion en el when");}
break;
case 240:
//#line 441 ".\gramaticaFeli.y"
{yyerror("Se esperaba ( en el when");}
break;
case 241:
//#line 442 ".\gramaticaFeli.y"
{yyerror("Se esperaba ) en el when");}
break;
case 242:
//#line 443 ".\gramaticaFeli.y"
{yyerror("Se esperaba then en el when");}
break;
case 243:
//#line 446 ".\gramaticaFeli.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 244:
//#line 451 ".\gramaticaFeli.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 245:
//#line 456 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 246:
//#line 461 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 247:
//#line 466 ".\gramaticaFeli.y"
{
                        yyval= new NodoComun("IF", (ArbolSintactico) val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 248:
//#line 471 ".\gramaticaFeli.y"
{
                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 249:
//#line 475 ".\gramaticaFeli.y"
{yyerror("Se esperaba end_if ");}
break;
case 250:
//#line 476 ".\gramaticaFeli.y"
{yyerror("Se esperaba } ");}
break;
case 251:
//#line 477 ".\gramaticaFeli.y"
{yyerror("Se esperaba { ");}
break;
case 252:
//#line 478 ".\gramaticaFeli.y"
{yyerror("Se esperaba end_if ");}
break;
case 253:
//#line 479 ".\gramaticaFeli.y"
{yyerror("Se esperaba } ");}
break;
case 254:
//#line 480 ".\gramaticaFeli.y"
{yyerror("Se esperaba { ");}
break;
case 255:
//#line 481 ".\gramaticaFeli.y"
{yyerror("Se esperaba then ");}
break;
case 256:
//#line 482 ".\gramaticaFeli.y"
{yyerror("Se esperaba ) ");}
break;
case 257:
//#line 483 ".\gramaticaFeli.y"
{yyerror("Se esperaba una condicion ");}
break;
case 258:
//#line 484 ".\gramaticaFeli.y"
{yyerror("Se esperaba ( ");}
break;
case 259:
//#line 487 ".\gramaticaFeli.y"
{System.out.println("Sentencia FOR");
                                                                                                        yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                                                                                                       }
break;
case 260:
//#line 490 ".\gramaticaFeli.y"
{System.out.println("Sentencia FOR");
                                                                                                        yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval))));
                                                                                                       }
break;
case 261:
//#line 493 ".\gramaticaFeli.y"
{System.out.println("Sentencia FOR");
                                                                                                                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                                                                                                                                }
break;
case 262:
//#line 496 ".\gramaticaFeli.y"
{System.out.println("Sentencia FOR");
                                                                                                                                yyval = new NodoComun("For con Etiqueta",new NodoControl("Etiqueta",new NodoHoja(val_peek(11).sval)),new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval))));
                                                                                                                                }
break;
case 263:
//#line 499 ".\gramaticaFeli.y"
{yyerror("Se esperaba }");}
break;
case 264:
//#line 500 ".\gramaticaFeli.y"
{yyerror("Se esperaba }");}
break;
case 265:
//#line 501 ".\gramaticaFeli.y"
{yyerror("Se esperaba {");}
break;
case 266:
//#line 502 ".\gramaticaFeli.y"
{yyerror("Se esperaba {");}
break;
case 267:
//#line 503 ".\gramaticaFeli.y"
{yyerror("Se esperaba )");}
break;
case 268:
//#line 504 ".\gramaticaFeli.y"
{yyerror("Se esperaba )");}
break;
case 269:
//#line 505 ".\gramaticaFeli.y"
{yyerror("Se esperaba (");}
break;
case 270:
//#line 506 ".\gramaticaFeli.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 271:
//#line 509 ".\gramaticaFeli.y"
{System.out.println("Sentencia FOR");
                                                                                             yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(9),(ArbolSintactico)val_peek(7)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(1),new NodoHoja(val_peek(5).sval + val_peek(4).sval)));
                                                                                             }
break;
case 272:
//#line 512 ".\gramaticaFeli.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 273:
//#line 515 ".\gramaticaFeli.y"
{System.out.println("Sentencia FOR");
                                                                                    yyval = new NodoComun("FOR",new NodoComun("Encabezado FOR",(ArbolSintactico)val_peek(7),(ArbolSintactico)val_peek(5)),new NodoComun("Cuerpo FOR",(ArbolSintactico)val_peek(0),new NodoHoja(val_peek(3).sval + val_peek(2).sval)));
                                                                                  }
break;
case 274:
//#line 518 ".\gramaticaFeli.y"
{yyerror("Se esperaba }");}
break;
case 275:
//#line 519 ".\gramaticaFeli.y"
{yyerror("Se esperaba }");}
break;
case 276:
//#line 520 ".\gramaticaFeli.y"
{yyerror("Se esperaba {");}
break;
case 277:
//#line 521 ".\gramaticaFeli.y"
{yyerror("Se esperaba {");}
break;
case 278:
//#line 522 ".\gramaticaFeli.y"
{yyerror("Se esperaba )");}
break;
case 279:
//#line 523 ".\gramaticaFeli.y"
{yyerror("Se esperaba )");}
break;
case 280:
//#line 524 ".\gramaticaFeli.y"
{yyerror("Se esperaba (");}
break;
case 286:
//#line 533 ".\gramaticaFeli.y"
{System.out.println("Se esperaba )");}
break;
case 287:
//#line 534 ".\gramaticaFeli.y"
{System.out.println("Se esperaba )");}
break;
case 288:
//#line 535 ".\gramaticaFeli.y"
{System.out.println("Se esperaba )");}
break;
//#line 2509 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 * @throws IOException
 */
public void run() throws IOException
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
