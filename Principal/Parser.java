//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package Principal;
import java.io.IOException;
import AnalizadorLexico.AnalizadorLexico;
import AnalizadorLexico.Token;
import GeneracionCodigoIntermedio.*;
//#line 23 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IF=257;
public final static short THEN=258;
public final static short ELSE=259;
public final static short END_IF=260;
public final static short OUT=261;
public final static short FUN=262;
public final static short RETURN=263;
public final static short BREAK=264;
public final static short WHEN=265;
public final static short WHILE=266;
public final static short FOR=267;
public final static short CONTINUE=268;
public final static short ID=269;
public final static short I32=270;
public final static short F32=271;
public final static short PUNTO=272;
public final static short PARENT_A=273;
public final static short PARENT_C=274;
public final static short COMILLA=275;
public final static short COMA=276;
public final static short DOSPUNTOS=277;
public final static short PUNTOCOMA=278;
public final static short IGUAL=279;
public final static short MAYOR=280;
public final static short MENOR=281;
public final static short MENORIGUAL=282;
public final static short MAYORIGUAL=283;
public final static short LLAVE_A=284;
public final static short LLAVE_C=285;
public final static short EXCL=286;
public final static short DIST=287;
public final static short ASIG=288;
public final static short CADENA=289;
public final static short COMENT=290;
public final static short CONST=291;
public final static short SUMA=292;
public final static short RESTA=293;
public final static short MULT=294;
public final static short DIV=295;
public final static short ENTERO=296;
public final static short FLOAT=297;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    1,    2,    2,    2,    3,    3,    4,    4,
    4,    9,    9,    6,    6,   10,   10,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    7,   12,   12,
   12,   13,   13,   13,   13,   13,   13,   13,   13,   13,
   13,   13,   16,   16,   16,   16,   16,   16,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   16,   18,   18,
   18,   18,   18,   18,   18,   18,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   19,
   19,   19,   19,   19,   19,   19,   19,   23,   23,   23,
   24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
   27,   27,   27,   27,   27,   27,   27,   27,   26,   26,
   26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   26,   21,   11,   11,    8,   31,   31,
    5,    5,    5,    5,    5,    5,    5,   14,   30,   30,
   30,   30,   30,   30,   36,   36,   36,   37,   37,   29,
   29,   29,   29,   32,   32,   32,   32,   32,   32,   32,
   32,   32,   32,   32,   32,   32,   32,   32,   32,   22,
   22,   22,   39,   39,   39,   39,   39,   38,   38,   38,
   17,   17,   17,   17,   33,   33,   33,   33,   33,   33,
   33,   33,   33,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   40,   40,   40,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   28,   28,
   43,   43,   43,   43,   43,   43,   43,   43,   43,   42,
   42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   34,   34,   34,   34,   34,
   34,   34,   34,   34,   34,   34,   34,   25,   25,   44,
   44,   15,   15,   15,   15,   15,   15,
};
final static short yylen[] = {                            2,
    4,    1,    1,    0,    3,    2,    1,    1,    1,    1,
    1,    1,    1,    2,    2,    3,    1,   12,   10,    9,
   12,   10,    9,    8,    7,    5,    3,    2,    0,    3,
    2,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,   11,   13,   13,    8,   13,    9,   13,   12,
   10,    9,    8,    6,    5,    4,    3,    2,    8,    6,
    8,    6,    5,    4,    3,    8,   13,   11,   11,    9,
   11,    9,    8,    7,    6,    5,    4,    3,    2,    9,
    7,    7,    5,    7,    5,    4,    2,    0,    3,    3,
    1,    1,    1,    1,    1,    1,    2,    1,    2,    1,
    6,    8,    8,    6,    5,    4,    3,    8,   11,   12,
   12,    8,   13,    9,   13,   12,   10,    9,    8,    6,
    5,    4,    3,    2,    4,    2,    2,    2,    3,    1,
    1,    1,    1,    1,    1,    1,    1,    3,    3,    3,
    1,    1,    3,    3,    3,    3,    1,    1,    1,    1,
    1,    2,    2,   12,   12,   11,    8,   13,    9,   13,
   12,   10,    9,    8,    6,    5,    4,    3,    2,    3,
    3,    3,    1,    1,    1,    1,    1,    0,    3,    2,
    4,    4,    3,    2,    8,    6,    8,    8,    8,    8,
    8,    7,    5,   13,   11,   11,    9,   11,    9,    8,
    7,    6,    5,    4,    3,    2,    0,    3,    2,    1,
    1,    1,    1,    1,    1,    2,    1,    2,    0,    2,
    8,    6,    8,    8,    8,    8,    8,    7,    5,   12,
   12,   11,    8,   13,    9,   13,   12,   10,    9,    8,
    6,    5,    4,    3,    2,    9,    7,    9,    7,    6,
    3,    7,    5,    7,    5,    4,    2,    6,    6,    1,
    1,    6,    4,    3,    6,    4,    3,
};
final static short yydefred[] = {                         0,
    2,    3,    0,    0,    4,    0,    0,    0,    0,    0,
    0,    0,    0,   12,   13,    1,    0,    0,    7,    8,
    9,   10,   11,    0,  131,  137,  133,  132,  134,  135,
  136,  169,    0,  184,    0,   28,    0,    0,    0,  206,
    0,  257,    0,   17,    0,    0,    0,    0,    0,  130,
    0,    5,    0,  168,    0,    0,  150,  151,  142,    0,
  149,    0,    0,    0,    0,  147,  183,    0,   27,    0,
    0,    0,    0,  205,    0,    0,    0,  267,  261,  264,
  260,    0,  251,    0,    0,    0,    0,    0,  152,  153,
  167,    0,    0,  173,  174,  175,  176,  177,    0,    0,
    0,    0,    0,    0,    0,  182,  181,    0,    0,    0,
    0,    0,    0,    0,    0,  204,    0,    0,  256,    0,
  266,  263,    0,    0,    0,   16,  129,  166,    0,    0,
  148,    0,    0,  171,    0,  143,  144,  145,  146,  127,
    0,  126,   26,    0,    0,    0,    0,  178,    0,    0,
  203,    0,    0,  255,    0,    0,    0,    0,    0,  207,
  210,  212,  215,  214,  253,  211,  213,    0,    0,    0,
  165,    0,  178,    0,    0,    0,    0,  178,  178,    0,
  178,  178,  178,  186,  202,    0,    0,  245,    0,  218,
    0,    0,    0,  216,    0,  265,  262,    0,  250,    0,
    0,    0,   29,    0,   25,    0,    0,    0,  192,    0,
    0,    0,    0,  201,    0,    0,    0,  244,    0,    0,
    0,    0,  220,  254,  252,    0,    0,  249,  207,  247,
  164,    0,    0,  157,    0,   29,   24,    0,  191,  190,
  179,  189,  188,  187,  185,  200,    0,  258,  259,  243,
    0,    0,    0,    0,    0,  208,    0,    0,  163,    0,
  159,  178,    0,    0,    0,    0,    0,    0,    0,   20,
   32,   33,   34,    0,   35,   36,   37,   38,   39,   40,
   41,   42,    0,   23,    0,  199,  207,  197,  242,    0,
    0,    0,  207,    0,    0,    0,  248,  246,  162,  178,
    0,    0,    0,   58,    0,    0,    0,    0,   79,    0,
   87,    0,    0,   30,   19,   22,   29,    0,  241,  207,
    0,  207,  207,    0,  207,  207,  207,  222,    0,    0,
    0,    0,  156,   57,    0,    0,    0,   65,    0,   78,
    0,    0,    0,    0,    0,  198,  196,    0,    0,    0,
    0,  228,    0,    0,    0,  207,  195,  161,    0,  155,
  154,   56,    0,  125,    0,   64,    0,   77,    0,   86,
    0,    0,    0,   21,   18,  240,    0,    0,  233,  227,
  226,  225,  224,  223,  221,    0,  160,  158,   55,    0,
    0,   63,    0,   76,    0,   85,    0,    0,    0,    0,
    0,   88,   91,   93,   96,   95,  100,   83,   92,   94,
    0,    0,  239,    0,  235,  207,    0,  194,   54,   29,
    0,   29,   62,   29,   60,   75,    0,  124,    0,   99,
    0,    0,   97,    0,    0,    0,  238,  207,    0,    0,
    0,    0,    0,    0,    0,   74,    0,  123,    0,    0,
  107,    0,   84,   82,    0,    0,   88,   81,    0,    0,
    0,  232,   53,    0,    0,   46,   66,   61,   59,   73,
    0,  122,    0,    0,  106,    0,   90,   89,    0,    0,
  237,    0,  231,  230,   52,    0,   48,    0,   29,    0,
   72,   88,   70,  121,    0,    0,  105,    0,    0,   80,
  236,  234,   51,   29,    0,    0,    0,    0,  120,   88,
    0,   88,  104,   88,  101,    0,    0,    0,    0,   43,
   71,   69,    0,    0,    0,    0,   88,   68,   50,    0,
    0,    0,  119,    0,    0,  112,  108,  103,  102,    0,
   49,   47,   44,   45,  118,    0,  114,   88,    0,   67,
  117,   88,    0,    0,    0,    0,    0,    0,  109,  116,
    0,  110,  111,  115,  113,
};
final static short yydgoto[] = {                          3,
    4,    6,   18,   19,  210,  271,  272,  273,   24,   48,
  111,  235,  274,  161,   59,  277,  162,  279,  405,  406,
  407,   60,  434,  455,   77,  409,  410,  194,   61,   62,
   51,   28,   29,   63,   64,   65,   66,  180,  101,  195,
  226,  166,  167,   82,
};
final static short yysindex[] = {                      -205,
    0,    0,    0, -269,    0, 1199, -206, -179,  -91, -149,
  -69,  -62, -134,    0,    0,    0, -220, -257,    0,    0,
    0,    0,    0, -217,    0,    0,    0,    0,    0,    0,
    0,    0, -227,    0, -248,    0,   63,  -41, -100,    0,
   24,    0, -220,    0, -212,  181,  -41, -215, -214,    0,
 -193,    0, -215,    0,   85,  108,    0,    0,    0, -239,
    0,  187, -122, -108,  214,    0,    0, -211,    0,  207,
  -99,  -85,  -40,    0, -127,  -79, -116,    0,    0,    0,
    0, -106,    0,  -64,  -50,  231,    3, -220,    0,    0,
    0,  -12,  -41,    0,    0,    0,    0,    0, -197, -197,
   36,  225,  225, -197, -197,    0,    0,   13,   17,   40,
  -66,   54,   60,   66,  193,    0, -223,  -41,    0, 1536,
    0,    0, -148,  -41, -220,    0,    0,    0, 1784,  231,
    0,  214,  214,    0,  231,    0,    0,    0,    0,    0,
  329,    0,    0,  134,  213,  101,  130,    0,  170, 1791,
    0,   74,  186,    0,   90,  225,  103,  195,   39,    0,
    0,    0,    0,    0,    0,    0,    0, -110,  221, -103,
    0, -180,    0,  236,  265,  329,  -97,    0,    0,  286,
    0,    0,    0,    0,    0,   15,  337,    0,   59,    0,
  -41,   75,  289,    0,  325,    0,    0,  284,    0, 1557,
 -151,  391,    0,  280,    0, -176,  346, 1406,    0,  299,
 1812, 1819,  132,    0,  -71,  225,  225,    0,  -58,  321,
  332,   49,    0,    0,    0,  331,  341,    0,    0,    0,
    0,  272, 1334,    0,  501,    0,    0,  164,    0,    0,
    0,    0,    0,    0,    0,    0, 1571,    0,    0,    0,
  245,  359,  364,  343,  281,    0, -220,  457,    0, 1805,
    0,    0,  362,  110,  351,  117,  121,  122,  -28,    0,
    0,    0,    0,  370,    0,    0,    0,    0,    0,    0,
    0,    0, 1128,    0, -253,    0,    0,    0,    0, 1592,
  368,  373,    0,  375, 1606,  380,    0,    0,    0,    0,
  384, 1826,  408,    0,  113,  -41,  -41,  160,    0,  194,
    0, -220,  411,    0,    0,    0,    0, 1341,    0,    0,
  386,    0,    0, 1692,    0,    0,    0,    0, 1875,  575,
  424,  428,    0,    0,  -43, -267,  429,    0,  -24,    0,
  -17,   -9,  432,  435,  996,    0,    0, 1355,  421, 1705,
 1718,    0, 1731, 1744, 1377,    0,    0,    0,  185,    0,
    0,    0,  288,    0,  440,    0,  318,    0, -166,    0,
 1450,  -41, -220,    0,    0,    0,  313, 1888,    0,    0,
    0,    0,    0,    0,    0, 1757,    0,    0,    0,  543,
  417,    0, 1013,    0,  140,    0,  152,  225,  159,  195,
   93,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  430,  445,    0, 1627,    0,    0,  452,    0,    0,    0,
  453,    0,    0,    0,    0,    0,   82,    0,  219,    0,
  -41,  269,    0,  378,  467,  472,    0,    0,  456, 1770,
  442, 1029,  427, 1155, 1046,    0,   -8,    0,   12,  471,
    0,   27,    0,    0, -218,  436,    0,    0, 1391,  487,
  488,    0,    0, -213, 1166,    0,    0,    0,    0,    0,
 1464,    0,  340,  492,    0,  365,    0,    0, -220, 1640,
    0,  237,    0,    0,    0, -252,    0,  493,    0,  473,
    0,    0,    0,    0, 1486,  469,    0, 1500,  486,    0,
    0,    0,    0,    0, 1226, 1182,  505, 1268,    0,    0,
  483,    0,    0,    0,    0, 1849, 1073,  491,  496,    0,
    0,    0, 1282,  431, 1653, 1305,    0,    0,    0,  270,
  517,  521,    0,  324, 1862,    0,    0,    0,    0, 1666,
    0,    0,    0,    0,    0, 1522,    0,    0,  504,    0,
    0,    0,  506, 1679,  523, 1319,  525,  527,    0,    0,
  303,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1237,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  404,    0,    0,
  888,    0,  915,    0,  636,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  685,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  605,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   79,
    0,  723,  761,    0,  184,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1090,    0,
    0,    0,    0,    0,    0,  799,    0,  830,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1427,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1413,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1117,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  861,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  942,    0,  969,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,    0,    0,    0,    7,  782,  784,  785,  -54,  769,
  650, -200, -363,   -6,  211,    0,   62,    0, -207, -157,
 -131,  -29, -439, -316, -120,    0,    0,  396,  -44,  -45,
    0,    0,    0,  425,  499,  593,  592, -159,    0, -195,
 -114,    0,    0,  674,
};
final static int YYTABLESIZE=2172;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         25,
   81,   86,  316,  503,  170,  165,  364,   67,   71,   73,
   50,   75,   20,  201,    5,  110,   91,  480,  207,  208,
   52,  211,  212,  213,   99,  100,  421,  280,   54,  425,
  317,  504,  151,  258,   92,  283,   76,  477,   11,   12,
   68,   55,  485,   78,  106,  486,  487,  130,   49,   32,
    1,   44,  508,  152,  408,  135,   79,  136,  137,  478,
   87,   80,  107,    2,  488,   56,   33,   27,   57,   58,
  523,  131,  525,   47,  526,  280,   34,  281,   81,  237,
   56,  127,   88,   57,   58,  230,  175,  540,  153,  394,
  110,  318,   45,   35,  169,   56,   46,  324,   57,   58,
  238,  490,  302,  282,  231,    7,   38,   47,  554,    8,
  395,  190,  556,   10,   11,   12,  345,  172,   76,  458,
   79,  204,   25,   39,  348,  281,  350,  351,  116,  353,
  354,  355,  288,  232,   44,  174,  102,  280,   45,  119,
  330,  518,   46,   25,   56,  196,  117,   57,   58,  121,
  103,  282,  199,   47,  493,   72,  184,  120,  205,  219,
  386,  220,  222,  197,   36,   11,   12,  122,   55,  123,
  200,  248,  249,   25,  112,  321,  206,   37,  511,  215,
  328,  515,  280,  285,  246,  280,   40,  281,  113,  143,
   27,  342,   56,   42,   25,   57,   58,  250,  118,  528,
   25,   25,  247,   41,   25,   25,   25,  144,  124,  145,
   43,   27,  362,  282,  357,  251,   26,  114,  549,  442,
  440,  444,  125,  445,   11,   12,   25,   55,  275,  553,
  363,  366,  281,  115,  280,  281,  280,  280,  368,  263,
   44,   27,  459,  128,   45,  129,  370,  470,  313,  367,
  296,   56,  412,   25,   57,   58,  369,  280,  282,   47,
  336,  282,   27,  417,  371,  471,  301,  472,   27,   27,
  214,  126,   27,   27,   27,  335,  275,  337,  339,   74,
  341,  140,  475,   49,  281,  473,  281,  281,  506,   11,
   12,  134,   55,  141,   27,   25,  278,  280,  280,  439,
  476,   11,   12,  517,   55,   76,  254,  281,  142,  280,
  282,  146,  282,  282,  218,   46,   56,  147,   69,   57,
   58,   27,  255,   25,   11,   12,   47,   55,   56,  185,
  221,   57,   58,  282,  172,   70,  172,  446,  275,   26,
   11,   12,  411,   55,  278,  188,  186,  281,  281,  148,
   49,   56,  172,  430,   57,   58,  172,   45,  191,  281,
   26,   46,  189,   27,  403,  304,   76,   56,  334,  313,
   57,   58,  307,  282,  282,  192,  309,  311,   11,   12,
   47,   55,  305,  275,  178,  282,  275,  244,    7,  308,
   26,   27,    8,  310,  312,  426,   10,   11,   12,  449,
  172,  450,  452,   89,   90,   56,  278,  428,   57,   58,
  176,   26,  427,  179,  431,  338,  245,   26,   26,  284,
  447,   26,   26,   26,  429,   11,   12,  403,   55,  403,
   30,  432,  404,   14,   15,  275,   83,  275,  275,  170,
  387,  170,   93,   26,  388,  276,   84,   85,  149,  340,
  150,  278,   56,  181,  278,   57,   58,  170,  275,   11,
   12,  170,   55,  187,  403,   94,   95,   96,   97,   98,
   26,  193,  499,  403,  448,  108,   14,   15,   99,  100,
  109,  108,   14,   15,   11,   12,   56,   55,  403,   57,
   58,  403,  501,  276,  198,  404,  502,  404,  275,  275,
  289,  403,  290,  278,   31,  278,  278,  104,  105,  403,
  275,   56,   26,  202,   57,   58,  403,   56,  403,  403,
   57,   58,   99,  100,  451,  541,  278,  259,  403,  542,
  260,  261,  404,  403,   11,   12,  294,   55,  295,  403,
   26,  404,    7,  389,  163,  390,    8,  403,  203,  403,
   10,   11,   12,   30,  172,  276,  404,  223,  564,  404,
  227,   56,  565,  236,   57,   58,  278,  278,  413,  404,
  209,  414,  415,  392,   30,  393,  241,  404,  278,  545,
  224,  155,  546,  547,  404,    8,  404,  404,  156,  157,
   11,   12,  158,  159,  252,  494,  404,  495,   14,   15,
  276,  404,    7,  276,   30,  253,    8,  404,  256,  225,
   10,   11,   12,  257,  172,  404,  291,  404,  164,  163,
  497,  292,  498,  306,  163,   30,  293,   31,  216,  217,
  239,   30,   30,  453,  397,   30,   30,   30,    8,  303,
  265,  398,  399,  267,  268,  400,  401,  314,   31,  233,
  234,  322,  276,  329,  276,  276,  323,   30,  325,   15,
   15,  331,  454,  349,   15,   15,   15,  333,   15,   15,
   15,  163,   15,   15,   15,  276,  343,  344,   31,  378,
  379,   15,  163,  360,   30,  465,  466,  361,   15,  535,
  536,  132,  133,  164,   15,  138,  139,  391,  164,   31,
  422,  462,  365,  435,  372,   31,   31,  373,  479,   31,
   31,   31,  297,  155,  163,  276,  276,    8,  436,  163,
  156,  157,   11,   12,  158,  159,   30,  276,  397,  441,
  443,   31,    8,  460,  265,  398,  399,  267,  268,  400,
  401,  298,  163,  456,  474,  164,  483,  484,  163,  496,
  507,  505,  512,  163,   30,  457,  164,  264,   31,  516,
  524,    8,    9,  265,  520,  266,  267,  268,  531,  269,
   14,   15,  163,  532,  163,  163,  543,  163,  163,  163,
  544,  555,  559,  557,  562,  270,  563,   21,  164,   22,
   23,   17,   53,  164,  177,  433,  168,    0,  419,  264,
   31,    0,  163,    8,    9,  265,    0,  266,  267,  268,
  163,  269,   14,   15,    0,    0,  164,    0,    0,    0,
    0,    0,  164,    0,    0,    0,  420,  164,   31,    0,
  358,    7,    0,   17,    0,    8,    0,    0,  163,   10,
   11,   12,    0,  172,    0,    0,  164,    0,  164,  164,
    0,  164,  164,  164,    0,    0,    0,    0,    0,  359,
  138,  138,    0,  138,  163,  138,  138,  138,  138,  138,
  138,  138,  138,  138,  138,  138,  164,    0,  138,    0,
  138,    0,  138,  163,  164,    0,    0,    0,    0,  138,
    0,  148,  148,  148,  148,  138,  148,  148,  148,  148,
  148,  148,  148,  148,  148,  148,  148,    0,    0,  148,
    0,  148,  164,  148,  148,  148,  148,  148,  148,    0,
  148,    0,    0,    0,    0,    0,  148,  148,  148,  148,
  148,    0,    0,    0,    0,    0,    0,    0,  164,    0,
  141,  141,  141,  141,    0,  141,  141,  141,  141,  141,
  141,  141,  141,  141,  141,  141,    0,  164,  141,    0,
  141,    0,  141,  141,  141,  141,  141,  141,    0,  141,
    0,    0,    0,    0,    0,  141,  141,  141,  139,  139,
  139,  139,    0,  139,  139,  139,  139,  139,  139,  139,
  139,  139,  139,  139,    0,    0,  139,    0,  139,    0,
  139,  139,  139,  139,  139,  139,    0,  139,    0,    0,
    0,    0,    0,  139,  139,  139,  140,  140,  140,  140,
    0,  140,  140,  140,  140,  140,  140,  140,  140,  140,
  140,  140,    0,    0,  140,    0,  140,    0,  140,  140,
  140,  140,  140,  140,    0,  140,    0,    0,    0,    0,
    0,  140,  140,  140,  217,  217,    0,  217,    0,  217,
  217,    0,  217,  217,  217,  217,  217,  217,  217,  217,
    0,    0,    0,    0,    0,    0,  217,    0,    0,    0,
    0,    0,    0,  217,    0,  219,  219,    0,  219,  217,
  219,  219,    0,  219,  219,  219,  219,  219,  219,  219,
  219,    0,    0,    0,    0,    0,    0,  219,    0,    0,
    0,    0,    0,    0,  219,    0,  229,  229,    0,  229,
  219,  229,  229,    0,  229,  229,  229,  229,  229,  229,
  229,  229,    0,    0,    0,    0,    0,    0,  229,    0,
    0,    0,    0,  128,  128,  229,    0,    0,  128,  128,
  128,  229,  128,  128,  128,    0,  128,  128,  128,    0,
    0,    0,    0,    0,    0,  128,    0,    0,    0,    0,
   14,   14,  128,    0,    0,   14,   14,   14,  128,   14,
   14,   14,    0,   14,   14,   14,    0,    0,    0,    0,
    0,    0,   14,    0,    0,    0,    0,   98,   98,   14,
    0,    0,   98,   98,   98,   14,   98,   98,   98,    0,
   98,   98,   98,    0,    0,    0,    0,    0,    0,   98,
    0,    0,    0,    0,  219,  219,   98,    0,    0,  219,
  219,  219,   98,  219,  219,  219,    0,  219,  219,  219,
    0,    0,    0,    0,    0,    0,  219,    0,    0,    0,
    0,  374,  264,  219,    0,    0,    8,    9,  265,  219,
  266,  267,  268,    0,  269,   14,   15,    0,  423,  264,
    0,    0,    0,    8,    9,  265,    0,  266,  267,  268,
  375,  269,   14,   15,  463,  264,   17,    0,    0,    8,
    9,  265,    0,  266,  267,  268,  424,  269,   14,   15,
    0,  468,  264,   17,    0,    0,    8,    9,  265,    0,
  266,  267,  268,  464,  269,   14,   15,    0,    0,   17,
    0,    0,    0,    0,    0,    0,    0,    0,  529,  264,
  469,    0,    0,    8,    9,  265,   17,  266,  267,  268,
    0,  269,   14,   15,    0,  193,  193,    0,    0,    0,
  193,  193,    0,    0,  193,  193,  193,  530,  193,  193,
  193,    0,    0,   17,    0,    0,    0,  193,    0,    0,
    0,    0,   31,   31,  193,    0,    0,   31,   31,   31,
  193,   31,   31,   31,  264,   31,   31,   31,    8,    9,
  265,    0,  266,  267,  268,    0,  269,   14,   15,    0,
    0,   31,    0,    0,    0,    0,    0,   31,    0,    0,
    0,  264,  315,    0,    0,    8,    9,  265,   17,  266,
  267,  268,  264,  269,   14,   15,    8,    9,  265,    0,
  266,  267,  268,    0,  269,   14,   15,    0,  264,  467,
    0,    0,    8,    9,  265,   17,  266,  267,  268,  489,
  269,   14,   15,    0,    0,    7,   17,    0,    0,    8,
    9,    0,    0,   10,   11,   12,  519,   13,   14,   15,
    0,    0,   17,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  264,   16,    0,    0,    8,    9,  265,   17,
  266,  267,  268,    6,  269,   14,   15,    6,    6,    0,
    0,    6,    6,    6,    0,    6,    6,    6,    0,    0,
    0,    0,    0,    0,    0,    0,   17,    0,    0,    0,
    0,    6,    0,  521,  397,    0,    0,    6,    8,    0,
  265,  398,  399,  267,  268,  400,  401,  533,  397,    0,
    0,    0,    8,    0,  265,  398,  399,  267,  268,  400,
  401,    0,  522,    0,    0,    0,    0,    0,    0,    0,
  538,  397,    0,    0,    0,    8,  534,  265,  398,  399,
  267,  268,  400,  401,  560,  397,    0,    0,    0,    8,
    0,  265,  398,  399,  267,  268,  400,  401,    0,  539,
    7,    0,    0,    0,    8,    0,  346,  155,   10,   11,
   12,    8,  172,  561,  156,  157,   11,   12,  158,  159,
  376,  155,    0,    0,    0,    8,    0,  262,  156,  157,
   11,   12,  158,  159,    0,  347,    0,    0,    0,    0,
    0,    0,  384,  155,    0,    0,    0,    8,    0,  377,
  156,  157,   11,   12,  158,  159,  481,  155,    0,    0,
    0,    8,    0,    0,  156,  157,   11,   12,  158,  159,
    0,  385,    7,    0,    0,    0,    8,    0,  209,  209,
   10,   11,   12,  209,  172,  482,  209,  209,  209,  209,
  209,  209,  180,  180,    0,    0,    0,  180,    0,    0,
  240,  180,  180,  180,    0,  180,    0,  209,    0,    0,
    0,    0,    0,    0,    0,  396,  397,    0,    0,    0,
    8,  180,  265,  398,  399,  267,  268,  400,  401,  491,
  397,    0,    0,    0,    8,    0,  265,  398,  399,  267,
  268,  400,  401,  402,    0,    0,    0,    0,    0,    0,
    0,  509,  397,    0,    0,    0,    8,  492,  265,  398,
  399,  267,  268,  400,  401,  513,  397,    0,    0,    0,
    8,    0,  265,  398,  399,  267,  268,  400,  401,  510,
    0,    0,    0,    0,    0,    0,    0,  551,  397,    0,
    0,    0,    8,  514,  265,  398,  399,  267,  268,  400,
  401,  154,  155,    0,    0,    0,    8,    0,    0,  156,
  157,   11,   12,  158,  159,  552,    0,    0,    0,    0,
    0,    0,  228,  155,    0,    0,    0,    8,    0,  160,
  156,  157,   11,   12,  158,  159,  286,  155,    0,    0,
    0,    8,    0,    0,  156,  157,   11,   12,  158,  159,
  229,    0,    0,    0,    0,    0,    0,  319,  155,    0,
    0,    0,    8,    0,  287,  156,  157,   11,   12,  158,
  159,  326,  155,    0,    0,    0,    8,    0,    0,  156,
  157,   11,   12,  158,  159,  320,    0,    0,    0,    0,
    0,    0,  437,  155,    0,    0,    0,    8,    0,  327,
  156,  157,   11,   12,  158,  159,  397,    0,    0,    0,
    8,    0,  265,  398,  399,  267,  268,  400,  401,  397,
  438,    0,    0,    8,    0,  265,  398,  399,  267,  268,
  400,  401,  397,    0,  500,    0,    8,    0,  265,  398,
  399,  267,  268,  400,  401,  397,    0,  537,    0,    8,
    0,  265,  398,  399,  267,  268,  400,  401,  155,    0,
  550,    0,    8,    0,    0,  156,  157,   11,   12,  158,
  159,  155,    0,  558,    0,    8,    0,    0,  156,  157,
   11,   12,  158,  159,  155,    0,  352,    0,    8,    0,
    0,  156,  157,   11,   12,  158,  159,  155,    0,  380,
    0,    8,    0,    0,  156,  157,   11,   12,  158,  159,
  155,    0,  381,    0,    8,    0,    0,  156,  157,   11,
   12,  158,  159,  155,    0,  382,    0,    8,    0,    0,
  156,  157,   11,   12,  158,  159,  155,    0,  383,    0,
    8,    0,    0,  156,  157,   11,   12,  158,  159,  171,
    7,  418,    0,    0,    8,    0,  182,    7,   10,   11,
   12,    8,  172,    0,  461,   10,   11,   12,    0,  172,
  299,    7,    0,    0,    0,    8,    0,  173,    7,   10,
   11,   12,    8,  172,  183,    7,   10,   11,   12,    8,
  172,    0,    7,   10,   11,   12,    8,  172,  300,    0,
   10,   11,   12,    0,  172,    0,  242,    0,    0,    0,
    0,    0,    0,  243,    0,  397,    0,    0,    0,    8,
  332,  265,  398,  399,  267,  268,  400,  401,  397,    0,
    0,    0,    8,    0,  265,  398,  399,  267,  268,  400,
  401,  155,  527,    0,    0,    8,    0,    0,  156,  157,
   11,   12,  158,  159,  155,  548,    0,    0,    8,    0,
    0,  156,  157,   11,   12,  158,  159,    0,  356,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  416,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          6,
   45,   47,  256,  256,  125,  120,  274,  256,   38,   39,
   17,   41,    6,  173,  284,   70,  256,  457,  178,  179,
  278,  181,  182,  183,  292,  293,  390,  235,  256,  393,
  284,  284,  256,  229,  274,  236,   43,  256,  266,  267,
  289,  269,  256,  256,  256,  259,  260,   93,  269,  256,
  256,  269,  492,  277,  371,  101,  269,  102,  103,  278,
  276,  274,  274,  269,  278,  293,  273,    6,  296,  297,
  510,  269,  512,  288,  514,  283,  256,  235,  123,  256,
  293,   88,  276,  296,  297,  200,  141,  527,  118,  256,
  145,  287,  273,  273,  124,  293,  277,  293,  296,  297,
  277,  465,  262,  235,  256,  257,  256,  288,  548,  261,
  277,  156,  552,  265,  266,  267,  317,  269,  125,  436,
  269,  176,  129,  273,  320,  283,  322,  323,  256,  325,
  326,  327,  247,  285,  269,  129,  259,  345,  273,  256,
  300,  505,  277,  150,  293,  256,  274,  296,  297,  256,
  259,  283,  256,  288,  471,  256,  150,  274,  256,  189,
  356,  191,  192,  274,  256,  266,  267,  274,  269,  276,
  274,  216,  217,  180,  274,  290,  274,  269,  495,  186,
  295,  498,  390,  238,  256,  393,  256,  345,  274,  256,
  129,  312,  293,  256,  201,  296,  297,  256,  278,  516,
  207,  208,  274,  273,  211,  212,  213,  274,  273,  276,
  273,  150,  256,  345,  329,  274,    6,  258,  535,  420,
  416,  422,  273,  424,  266,  267,  233,  269,  235,  546,
  274,  256,  390,  274,  442,  393,  444,  445,  256,  233,
  269,  180,  438,  256,  273,  258,  256,  256,  277,  274,
  257,  293,  373,  260,  296,  297,  274,  465,  390,  288,
  306,  393,  201,  378,  274,  274,  260,  256,  207,  208,
  256,  269,  211,  212,  213,  305,  283,  307,  308,  256,
  310,  269,  256,  269,  442,  274,  444,  445,  489,  266,
  267,  256,  269,  277,  233,  302,  235,  505,  506,  414,
  274,  266,  267,  504,  269,  312,  258,  465,  269,  517,
  442,  258,  444,  445,  256,  277,  293,  258,  256,  296,
  297,  260,  274,  330,  266,  267,  288,  269,  293,  256,
  256,  296,  297,  465,  256,  273,  258,  256,  345,  129,
  266,  267,  372,  269,  283,  256,  273,  505,  506,  284,
  269,  293,  274,  398,  296,  297,  278,  273,  256,  517,
  150,  277,  273,  302,  371,  256,  373,  293,  256,  277,
  296,  297,  256,  505,  506,  273,  256,  256,  266,  267,
  288,  269,  273,  390,  284,  517,  393,  256,  257,  273,
  180,  330,  261,  273,  273,  256,  265,  266,  267,  429,
  269,  431,  432,  296,  297,  293,  345,  256,  296,  297,
  277,  201,  273,  284,  256,  256,  285,  207,  208,  256,
  427,  211,  212,  213,  273,  266,  267,  434,  269,  436,
    6,  273,  371,  270,  271,  442,  256,  444,  445,  256,
  256,  258,  256,  233,  260,  235,  266,  267,  256,  256,
  258,  390,  293,  284,  393,  296,  297,  274,  465,  266,
  267,  278,  269,  278,  471,  279,  280,  281,  282,  283,
  260,  277,  479,  480,  256,  269,  270,  271,  292,  293,
  274,  269,  270,  271,  266,  267,  293,  269,  495,  296,
  297,  498,  256,  283,  274,  434,  260,  436,  505,  506,
  256,  508,  258,  442,    6,  444,  445,  294,  295,  516,
  517,  293,  302,  278,  296,  297,  523,  293,  525,  526,
  296,  297,  292,  293,  256,  256,  465,  256,  535,  260,
  259,  260,  471,  540,  266,  267,  256,  269,  258,  546,
  330,  480,  257,  256,  120,  258,  261,  554,  284,  556,
  265,  266,  267,  129,  269,  345,  495,  269,  256,  498,
  277,  293,  260,  284,  296,  297,  505,  506,  256,  508,
  285,  259,  260,  256,  150,  258,  278,  516,  517,  256,
  256,  257,  259,  260,  523,  261,  525,  526,  264,  265,
  266,  267,  268,  269,  274,  256,  535,  258,  270,  271,
  390,  540,  257,  393,  180,  274,  261,  546,  278,  285,
  265,  266,  267,  273,  269,  554,  258,  556,  120,  195,
  256,  258,  258,  273,  200,  201,  284,  129,  292,  293,
  285,  207,  208,  256,  257,  211,  212,  213,  261,  278,
  263,  264,  265,  266,  267,  268,  269,  278,  150,  259,
  260,  284,  442,  274,  444,  445,  284,  233,  284,  256,
  257,  278,  285,  278,  261,  262,  263,  260,  265,  266,
  267,  247,  269,  270,  271,  465,  266,  267,  180,  259,
  260,  278,  258,  260,  260,  259,  260,  260,  285,  259,
  260,   99,  100,  195,  291,  104,  105,  258,  200,  201,
  284,  260,  274,  274,  273,  207,  208,  273,  273,  211,
  212,  213,  256,  257,  290,  505,  506,  261,  274,  295,
  264,  265,  266,  267,  268,  269,  302,  517,  257,  278,
  278,  233,  261,  278,  263,  264,  265,  266,  267,  268,
  269,  285,  318,  277,  274,  247,  260,  260,  324,  258,
  278,  259,  284,  329,  330,  284,  258,  257,  260,  274,
  278,  261,  262,  263,  260,  265,  266,  267,  278,  269,
  270,  271,  348,  278,  350,  351,  260,  353,  354,  355,
  260,  278,  260,  278,  260,  285,  260,    6,  290,    6,
    6,  291,   24,  295,  145,  400,  123,   -1,  256,  257,
  302,   -1,  378,  261,  262,  263,   -1,  265,  266,  267,
  386,  269,  270,  271,   -1,   -1,  318,   -1,   -1,   -1,
   -1,   -1,  324,   -1,   -1,   -1,  284,  329,  330,   -1,
  256,  257,   -1,  291,   -1,  261,   -1,   -1,  414,  265,
  266,  267,   -1,  269,   -1,   -1,  348,   -1,  350,  351,
   -1,  353,  354,  355,   -1,   -1,   -1,   -1,   -1,  285,
  256,  257,   -1,  259,  440,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,  378,   -1,  274,   -1,
  276,   -1,  278,  459,  386,   -1,   -1,   -1,   -1,  285,
   -1,  256,  257,  258,  259,  291,  261,  262,  263,  264,
  265,  266,  267,  268,  269,  270,  271,   -1,   -1,  274,
   -1,  276,  414,  278,  279,  280,  281,  282,  283,   -1,
  285,   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  294,
  295,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  440,   -1,
  256,  257,  258,  259,   -1,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  270,  271,   -1,  459,  274,   -1,
  276,   -1,  278,  279,  280,  281,  282,  283,   -1,  285,
   -1,   -1,   -1,   -1,   -1,  291,  292,  293,  256,  257,
  258,  259,   -1,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  270,  271,   -1,   -1,  274,   -1,  276,   -1,
  278,  279,  280,  281,  282,  283,   -1,  285,   -1,   -1,
   -1,   -1,   -1,  291,  292,  293,  256,  257,  258,  259,
   -1,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  270,  271,   -1,   -1,  274,   -1,  276,   -1,  278,  279,
  280,  281,  282,  283,   -1,  285,   -1,   -1,   -1,   -1,
   -1,  291,  292,  293,  256,  257,   -1,  259,   -1,  261,
  262,   -1,  264,  265,  266,  267,  268,  269,  270,  271,
   -1,   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,
   -1,   -1,   -1,  285,   -1,  256,  257,   -1,  259,  291,
  261,  262,   -1,  264,  265,  266,  267,  268,  269,  270,
  271,   -1,   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,
   -1,   -1,   -1,   -1,  285,   -1,  256,  257,   -1,  259,
  291,  261,  262,   -1,  264,  265,  266,  267,  268,  269,
  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,  278,   -1,
   -1,   -1,   -1,  256,  257,  285,   -1,   -1,  261,  262,
  263,  291,  265,  266,  267,   -1,  269,  270,  271,   -1,
   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,   -1,
  256,  257,  285,   -1,   -1,  261,  262,  263,  291,  265,
  266,  267,   -1,  269,  270,  271,   -1,   -1,   -1,   -1,
   -1,   -1,  278,   -1,   -1,   -1,   -1,  256,  257,  285,
   -1,   -1,  261,  262,  263,  291,  265,  266,  267,   -1,
  269,  270,  271,   -1,   -1,   -1,   -1,   -1,   -1,  278,
   -1,   -1,   -1,   -1,  256,  257,  285,   -1,   -1,  261,
  262,  263,  291,  265,  266,  267,   -1,  269,  270,  271,
   -1,   -1,   -1,   -1,   -1,   -1,  278,   -1,   -1,   -1,
   -1,  256,  257,  285,   -1,   -1,  261,  262,  263,  291,
  265,  266,  267,   -1,  269,  270,  271,   -1,  256,  257,
   -1,   -1,   -1,  261,  262,  263,   -1,  265,  266,  267,
  285,  269,  270,  271,  256,  257,  291,   -1,   -1,  261,
  262,  263,   -1,  265,  266,  267,  284,  269,  270,  271,
   -1,  256,  257,  291,   -1,   -1,  261,  262,  263,   -1,
  265,  266,  267,  285,  269,  270,  271,   -1,   -1,  291,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
  285,   -1,   -1,  261,  262,  263,  291,  265,  266,  267,
   -1,  269,  270,  271,   -1,  256,  257,   -1,   -1,   -1,
  261,  262,   -1,   -1,  265,  266,  267,  285,  269,  270,
  271,   -1,   -1,  291,   -1,   -1,   -1,  278,   -1,   -1,
   -1,   -1,  256,  257,  285,   -1,   -1,  261,  262,  263,
  291,  265,  266,  267,  257,  269,  270,  271,  261,  262,
  263,   -1,  265,  266,  267,   -1,  269,  270,  271,   -1,
   -1,  285,   -1,   -1,   -1,   -1,   -1,  291,   -1,   -1,
   -1,  257,  285,   -1,   -1,  261,  262,  263,  291,  265,
  266,  267,  257,  269,  270,  271,  261,  262,  263,   -1,
  265,  266,  267,   -1,  269,  270,  271,   -1,  257,  285,
   -1,   -1,  261,  262,  263,  291,  265,  266,  267,  284,
  269,  270,  271,   -1,   -1,  257,  291,   -1,   -1,  261,
  262,   -1,   -1,  265,  266,  267,  285,  269,  270,  271,
   -1,   -1,  291,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  257,  285,   -1,   -1,  261,  262,  263,  291,
  265,  266,  267,  257,  269,  270,  271,  261,  262,   -1,
   -1,  265,  266,  267,   -1,  269,  270,  271,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  291,   -1,   -1,   -1,
   -1,  285,   -1,  256,  257,   -1,   -1,  291,  261,   -1,
  263,  264,  265,  266,  267,  268,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,  268,
  269,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,  285,  263,  264,  265,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,  263,  264,  265,  266,  267,  268,  269,   -1,  285,
  257,   -1,   -1,   -1,  261,   -1,  256,  257,  265,  266,
  267,  261,  269,  285,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,  284,  264,  265,
  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  285,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
   -1,  285,  257,   -1,   -1,   -1,  261,   -1,  256,  257,
  265,  266,  267,  261,  269,  285,  264,  265,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  285,  265,  266,  267,   -1,  269,   -1,  285,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
  261,  285,  263,  264,  265,  266,  267,  268,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,
  267,  268,  269,  284,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,  261,  284,  263,  264,
  265,  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,  263,  264,  265,  266,  267,  268,  269,  284,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,  284,  263,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  284,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
  284,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,  284,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  284,
  264,  265,  266,  267,  268,  269,  257,   -1,   -1,   -1,
  261,   -1,  263,  264,  265,  266,  267,  268,  269,  257,
  284,   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,
  268,  269,  257,   -1,  285,   -1,  261,   -1,  263,  264,
  265,  266,  267,  268,  269,  257,   -1,  285,   -1,  261,
   -1,  263,  264,  265,  266,  267,  268,  269,  257,   -1,
  285,   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,
  269,  257,   -1,  285,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,  257,   -1,  285,   -1,  261,   -1,
   -1,  264,  265,  266,  267,  268,  269,  257,   -1,  285,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
  257,   -1,  285,   -1,  261,   -1,   -1,  264,  265,  266,
  267,  268,  269,  257,   -1,  285,   -1,  261,   -1,   -1,
  264,  265,  266,  267,  268,  269,  257,   -1,  285,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,  256,
  257,  285,   -1,   -1,  261,   -1,  256,  257,  265,  266,
  267,  261,  269,   -1,  285,  265,  266,  267,   -1,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,  284,  257,  265,
  266,  267,  261,  269,  284,  257,  265,  266,  267,  261,
  269,   -1,  257,  265,  266,  267,  261,  269,  284,   -1,
  265,  266,  267,   -1,  269,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,  285,   -1,  257,   -1,   -1,   -1,  261,
  285,  263,  264,  265,  266,  267,  268,  269,  257,   -1,
   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,  268,
  269,  257,  284,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,  257,  284,   -1,   -1,  261,   -1,
   -1,  264,  265,  266,  267,  268,  269,   -1,  284,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  284,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=297;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"IF","THEN","ELSE","END_IF","OUT","FUN","RETURN","BREAK","WHEN",
"WHILE","FOR","CONTINUE","ID","I32","F32","PUNTO","PARENT_A","PARENT_C",
"COMILLA","COMA","DOSPUNTOS","PUNTOCOMA","IGUAL","MAYOR","MENOR","MENORIGUAL",
"MAYORIGUAL","LLAVE_A","LLAVE_C","EXCL","DIST","ASIG","CADENA","COMENT","CONST",
"SUMA","RESTA","MULT","DIV","ENTERO","FLOAT",
};
final static String yyrule[] = {
"$accept : program",
"program : nombre_program LLAVE_A bloque_sentencias LLAVE_C",
"program : error",
"nombre_program : ID",
"bloque_sentencias :",
"bloque_sentencias : bloque_sentencias sentencia PUNTOCOMA",
"bloque_sentencias : bloque_sentencias sentencia",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_decl_datos",
"sentencia_declarativa : sentencia_decl_fun",
"sentencia_declarativa : lista_const",
"tipo : I32",
"tipo : F32",
"sentencia_decl_datos : tipo list_var",
"sentencia_decl_datos : ID list_var",
"list_var : list_var COMA ID",
"list_var : ID",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo LLAVE_A cuerpo_fun error",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo error",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS error",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C error",
"sentencia_decl_fun : FUN ID PARENT_A parametro COMA parametro error",
"sentencia_decl_fun : FUN ID PARENT_A parametro error",
"sentencia_decl_fun : FUN ID error",
"sentencia_decl_fun : FUN error",
"cuerpo_fun :",
"cuerpo_fun : cuerpo_fun sentencias_fun PUNTOCOMA",
"cuerpo_fun : cuerpo_fun sentencias_fun",
"sentencias_fun : sentencia_decl_datos",
"sentencias_fun : sentencia_decl_fun",
"sentencias_fun : lista_const",
"sentencias_fun : asignacion",
"sentencias_fun : llamado_func",
"sentencias_fun : sentencia_if_fun",
"sentencias_fun : sentencia_out",
"sentencias_fun : sentencia_when_fun",
"sentencias_fun : sentencia_for_fun",
"sentencias_fun : sentencia_while_fun",
"sentencias_fun : retorno",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_fun : IF PARENT_A condicion error",
"sentencia_if_fun : IF PARENT_A error",
"sentencia_if_fun : IF error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_fun : WHEN PARENT_A condicion error",
"sentencia_when_fun : WHEN PARENT_A error",
"sentencia_when_fun : WHEN error condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion error",
"sentencia_while_fun : WHILE PARENT_A error",
"sentencia_while_fun : WHILE error",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A encabezado_for PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : ID DOSPUNTOS FOR PARENT_A encabezado_for PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A encabezado_for PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A encabezado_for PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A encabezado_for PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A encabezado_for PARENT_C error",
"sentencia_for_fun : FOR PARENT_A encabezado_for error",
"sentencia_for_fun : FOR error",
"cuerpo_fun_break :",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break PUNTOCOMA",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break error",
"sentencias_fun_break : asignacion",
"sentencias_fun_break : sentencia_if_break_fun",
"sentencias_fun_break : sentencia_out",
"sentencias_fun_break : sentencia_when_break_fun",
"sentencias_fun_break : sentencia_while_fun",
"sentencias_fun_break : sentencia_for_fun",
"sentencias_fun_break : CONTINUE tag",
"sentencias_fun_break : BREAK",
"sentencias_fun_break : BREAK cte",
"sentencias_fun_break : retorno",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun_break",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_break_fun : WHEN PARENT_A condicion error",
"sentencia_when_break_fun : WHEN PARENT_A error",
"sentencia_when_break_fun : WHEN error condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break_fun : IF PARENT_A condicion error",
"sentencia_if_break_fun : IF PARENT_A error",
"sentencia_if_break_fun : IF error",
"retorno : RETURN PARENT_A expresion PARENT_C",
"parametro : tipo ID",
"parametro : ID ID",
"lista_const : CONST lista_asignacion",
"lista_asignacion : lista_asignacion COMA asignacion",
"lista_asignacion : asignacion",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : sentencia_if",
"sentencia_ejecutable : sentencia_out",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : sentencia_for",
"sentencia_ejecutable : sentencia_while",
"sentencia_ejecutable : llamado_func",
"asignacion : ID ASIG expresion",
"expresion : expresion SUMA termino",
"expresion : expresion RESTA termino",
"expresion : termino",
"expresion : llamado_func",
"expresion : sentencia_for ELSE cte",
"expresion : sentencia_while ELSE cte",
"termino : termino MULT factor",
"termino : termino DIV factor",
"termino : factor",
"factor : ID",
"factor : cte",
"cte : ENTERO",
"cte : FLOAT",
"cte : RESTA ENTERO",
"cte : RESTA FLOAT",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if : IF PARENT_A condicion PARENT_C error",
"sentencia_if : IF PARENT_A condicion error",
"sentencia_if : IF PARENT_A error",
"sentencia_if : IF error",
"condicion : expresion comparacion expresion",
"condicion : expresion comparacion error",
"condicion : expresion error expresion",
"comparacion : IGUAL",
"comparacion : MAYOR",
"comparacion : MENOR",
"comparacion : MENORIGUAL",
"comparacion : MAYORIGUAL",
"bloque_ejecutable :",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable PUNTOCOMA",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"sentencia_out : OUT PARENT_A CADENA PARENT_C",
"sentencia_out : OUT PARENT_A CADENA error",
"sentencia_out : OUT PARENT_A error",
"sentencia_out : OUT error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN sentencia_ejecutable",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN error bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C error LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A error PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN error condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C error",
"sentencia_while : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : ID DOSPUNTOS WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion error",
"sentencia_while : WHILE PARENT_A error",
"sentencia_while : WHILE error",
"bloque_break_continue :",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue PUNTOCOMA",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue",
"ejecutables_break_continue : asignacion",
"ejecutables_break_continue : sentencia_if_break",
"ejecutables_break_continue : sentencia_out",
"ejecutables_break_continue : sentencia_when_break",
"ejecutables_break_continue : sentencia_while",
"ejecutables_break_continue : sentencia_for",
"ejecutables_break_continue : CONTINUE tag",
"ejecutables_break_continue : BREAK",
"ejecutables_break_continue : BREAK cte",
"tag :",
"tag : DOSPUNTOS ID",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN ejecutables_break_continue",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN error bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C error LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A error PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN error condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion error",
"sentencia_if_break : IF PARENT_A error",
"sentencia_if_break : IF error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A encabezado_for PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A encabezado_for PARENT_C ejecutables_break_continue",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A encabezado_for PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A encabezado_for PARENT_C error",
"sentencia_for : ID DOSPUNTOS FOR PARENT_A encabezado_for error",
"sentencia_for : ID DOSPUNTOS error",
"sentencia_for : FOR PARENT_A encabezado_for PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A encabezado_for PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A encabezado_for PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A encabezado_for PARENT_C error",
"sentencia_for : FOR PARENT_A encabezado_for error",
"sentencia_for : FOR error",
"encabezado_for : asignacion PUNTOCOMA condicion PUNTOCOMA SUMA cte",
"encabezado_for : asignacion PUNTOCOMA condicion PUNTOCOMA RESTA cte",
"param_real : cte",
"param_real : ID",
"llamado_func : ID PARENT_A param_real COMA param_real PARENT_C",
"llamado_func : ID PARENT_A param_real PARENT_C",
"llamado_func : ID PARENT_A PARENT_C",
"llamado_func : ID PARENT_A param_real COMA param_real error",
"llamado_func : ID PARENT_A param_real error",
"llamado_func : ID PARENT_A error",
};

//#line 416 ".\gramatica.y"
private NodoControl raiz;
private String ambitoActual = "Global";

void yyerror(String mensaje){
        System.out.println("Linea"+ AnalizadorLexico.getLineaAct() +"| Error sintactico: " + mensaje);
}
void chequearRangoI32(String sval){
  String s = "2147483647";
  long l = Long.valueOf(s);
  if(Long.valueOf(sval) > l){
    yyerror("La constante esta fuera de rango");
  }
}

int yylex() throws IOException{
        Token t = AnalizadorLexico.getToken();
        this.yylval = new ParserVal(t.getLexema());
        //if(t.getId() != -1){
        //  System.out.println("Id: " + t.getId()+" Lexema: " + t.getLexema());
        //}else
        //  System.out.println("TERMINO LA EJECUCION");
        return t.getId();
}
public NodoControl getRaiz(){
	return raiz;
}
//#line 1155 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse() throws IOException
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 17 ".\gramatica.y"
{raiz = new NodoControl("PROGRAMA",(ArbolSintactico)val_peek(1));
                                                            System.out.println("Raiz---$$ : " + yyval + " $1 :" + val_peek(3));
                                                            System.out.println("Raiz : " + raiz);
                                                           }
break;
case 2:
//#line 21 ".\gramatica.y"
{yyerror("Hay un error sintactico en la entrada que arrastra errores");}
break;
case 4:
//#line 25 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 5:
//#line 26 ".\gramatica.y"
{
                                                        yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                                                        System.out.println("BloqueSentencia---$$ : " + yyval + " $1 :" + val_peek(2));
                                                        }
break;
case 6:
//#line 30 ".\gramatica.y"
{yyerror("Se esperaba ;");}
break;
case 7:
//#line 32 ".\gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa");}
break;
case 8:
//#line 33 ".\gramatica.y"
{yyval = val_peek(0);
                                System.out.println("Sentencia---$$ : " + yyval + " $1 :" + val_peek(0));
                                }
break;
case 12:
//#line 41 ".\gramatica.y"
{
            yyval = new NodoHoja("Entero");
            ((NodoHoja)yyval).setTipo("Entero");
           }
break;
case 13:
//#line 45 ".\gramatica.y"
{
            yyval = new NodoHoja("Float");
            ((NodoHoja)yyval).setTipo("Float");
           }
break;
case 14:
//#line 50 ".\gramatica.y"
{System.out.println("Declaracion de datos");
                                      for (String s : ((NodoTipos)val_peek(0)).getList()){
                                        TablaSimbolos.addAtributo(s,"Tipo",((ArbolSintactico) val_peek(1)).getTipo());
                                        TablaSimbolos.addAtributo(s,"Ambito",ambitoActual);
                                      }
                                     }
break;
case 15:
//#line 56 ".\gramatica.y"
{yyerror("No esta permitido el tipo declarado");}
break;
case 16:
//#line 58 ".\gramatica.y"
{
                            yyval=val_peek(2);
                            ((NodoTipos)yyval).add((String)val_peek(0).sval);
                            }
break;
case 17:
//#line 62 ".\gramatica.y"
{
               yyval=new NodoTipos((String)val_peek(0).sval);
              }
break;
case 18:
//#line 66 ".\gramatica.y"
{System.out.println("Declaracion de Funcion");}
break;
case 19:
//#line 67 ".\gramatica.y"
{System.out.println("Declaracion de Funcion");}
break;
case 20:
//#line 68 ".\gramatica.y"
{System.out.println("Declaracion de Funcion");}
break;
case 21:
//#line 69 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 22:
//#line 70 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 23:
//#line 71 ".\gramatica.y"
{yyerror("El tipo declarado no esta permitido");}
break;
case 24:
//#line 72 ".\gramatica.y"
{yyerror("Se esperaba :");}
break;
case 25:
//#line 73 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 26:
//#line 74 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 27:
//#line 75 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 28:
//#line 76 ".\gramatica.y"
{yyerror("Se esperaba un nombre de funcion");}
break;
case 31:
//#line 80 ".\gramatica.y"
{System.out.println("Se esperaba ;");}
break;
case 43:
//#line 94 ".\gramatica.y"
{System.out.println("Sentencia IF");}
break;
case 44:
//#line 95 ".\gramatica.y"
{System.out.println("Sentencia IF");}
break;
case 45:
//#line 96 ".\gramatica.y"
{System.out.println("Sentencia IF");}
break;
case 46:
//#line 97 ".\gramatica.y"
{System.out.println("Sentencia IF");}
break;
case 47:
//#line 98 ".\gramatica.y"
{System.out.println("Sentencia IF");}
break;
case 48:
//#line 99 ".\gramatica.y"
{System.out.println("Sentencia IF");}
break;
case 49:
//#line 100 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 50:
//#line 101 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 51:
//#line 102 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 52:
//#line 103 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 53:
//#line 104 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 54:
//#line 105 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 55:
//#line 106 ".\gramatica.y"
{yyerror("Se esperaba then ");}
break;
case 56:
//#line 107 ".\gramatica.y"
{yyerror("Se esperaba ) ");}
break;
case 57:
//#line 108 ".\gramatica.y"
{yyerror("Se esperaba una condicion ");}
break;
case 58:
//#line 109 ".\gramatica.y"
{yyerror("Se esperaba ( ");}
break;
case 59:
//#line 111 ".\gramatica.y"
{System.out.println("Sentencia WHEN");}
break;
case 60:
//#line 112 ".\gramatica.y"
{System.out.println("Sentencia WHEN");}
break;
case 61:
//#line 113 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 62:
//#line 114 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 63:
//#line 115 ".\gramatica.y"
{yyerror("Se esperaba then ");}
break;
case 64:
//#line 116 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 65:
//#line 117 ".\gramatica.y"
{yyerror("Se esperaba condicion");}
break;
case 66:
//#line 118 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 67:
//#line 120 ".\gramatica.y"
{System.out.println("Sentencia WHILE");}
break;
case 68:
//#line 121 ".\gramatica.y"
{System.out.println("Sentencia WHILE");}
break;
case 69:
//#line 122 ".\gramatica.y"
{System.out.println("Sentencia WHILE");}
break;
case 70:
//#line 123 ".\gramatica.y"
{System.out.println("Sentencia WHILE");}
break;
case 71:
//#line 124 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 72:
//#line 125 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 73:
//#line 126 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 74:
//#line 127 ".\gramatica.y"
{yyerror("Se esperaba una asignacion");}
break;
case 75:
//#line 128 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 76:
//#line 129 ".\gramatica.y"
{yyerror("Se esperaba :");}
break;
case 77:
//#line 130 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 78:
//#line 131 ".\gramatica.y"
{yyerror("Se esperaba una condicion");}
break;
case 79:
//#line 132 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 80:
//#line 134 ".\gramatica.y"
{System.out.println("Sentencia FOR");}
break;
case 81:
//#line 135 ".\gramatica.y"
{System.out.println("Sentencia FOR");}
break;
case 82:
//#line 136 ".\gramatica.y"
{System.out.println("Sentencia FOR");}
break;
case 83:
//#line 137 ".\gramatica.y"
{System.out.println("Sentencia FOR");}
break;
case 84:
//#line 138 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 85:
//#line 139 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 86:
//#line 140 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 87:
//#line 141 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 90:
//#line 145 ".\gramatica.y"
{yyerror("Se esperaba ;");}
break;
case 101:
//#line 159 ".\gramatica.y"
{System.out.println("Sentencia WHEN");}
break;
case 102:
//#line 160 ".\gramatica.y"
{System.out.println("Sentencia WHEN");}
break;
case 103:
//#line 161 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 104:
//#line 162 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 105:
//#line 163 ".\gramatica.y"
{yyerror("Se esperaba then ");}
break;
case 106:
//#line 164 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 107:
//#line 165 ".\gramatica.y"
{yyerror("Se esperaba condicion");}
break;
case 108:
//#line 166 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 109:
//#line 168 ".\gramatica.y"
{System.out.println("Sentencia IF");}
break;
case 110:
//#line 169 ".\gramatica.y"
{System.out.println("Sentencia IF");}
break;
case 111:
//#line 170 ".\gramatica.y"
{System.out.println("Sentencia IF");}
break;
case 112:
//#line 171 ".\gramatica.y"
{System.out.println("Sentencia IF");}
break;
case 113:
//#line 172 ".\gramatica.y"
{System.out.println("Sentencia IF");}
break;
case 114:
//#line 173 ".\gramatica.y"
{System.out.println("Sentencia IF");}
break;
case 115:
//#line 174 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 116:
//#line 175 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 117:
//#line 176 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 118:
//#line 177 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 119:
//#line 178 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 120:
//#line 179 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 121:
//#line 180 ".\gramatica.y"
{yyerror("Se esperaba then ");}
break;
case 122:
//#line 181 ".\gramatica.y"
{yyerror("Se esperaba ) ");}
break;
case 123:
//#line 182 ".\gramatica.y"
{yyerror("Se esperaba una condicion ");}
break;
case 124:
//#line 183 ".\gramatica.y"
{yyerror("Se esperaba ( ");}
break;
case 127:
//#line 188 ".\gramatica.y"
{yyerror("No esta permitido el tipo declarado");}
break;
case 128:
//#line 191 ".\gramatica.y"
{System.out.println("Declaracion de Constante/s");}
break;
case 131:
//#line 196 ".\gramatica.y"
{yyval = val_peek(0);
                                   System.out.println("SentenciaEjecutable---$$ : " + yyval + " $1 :" + val_peek(0));
                                  }
break;
case 132:
//#line 199 ".\gramatica.y"
{yyval = val_peek(0);
                                System.out.println("SentenciaEjecutable---$$ : " + yyval + " $1 :" + val_peek(0));}
break;
case 133:
//#line 201 ".\gramatica.y"
{yyval = val_peek(0);
                                System.out.println("SentenciaEjecutable---$$ : " + yyval + " $1 :" + val_peek(0));}
break;
case 134:
//#line 203 ".\gramatica.y"
{yyval = val_peek(0);
                                System.out.println("SentenciaEjecutable---$$ : " + yyval + " $1 :" + val_peek(0));}
break;
case 138:
//#line 209 ".\gramatica.y"
{
                                 System.out.println("Asignacion");
                                 yyval = new NodoComun(val_peek(1).sval,new NodoHoja(val_peek(2).sval), (ArbolSintactico) val_peek(0));
                                 System.out.println("Asignacino---$$ : " + yyval + " $1 :" + val_peek(2)+" $3 :" + val_peek(0));
                                }
break;
case 139:
//#line 215 ".\gramatica.y"
{
                                   yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                   System.out.println("ExpresionSuma---$$ : " + yyval + " $1 :" + val_peek(2)+" $3 :" + val_peek(0));
                                  }
break;
case 140:
//#line 219 ".\gramatica.y"
{
                                   yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                   System.out.println("ExpresionResta---$$ : " + yyval + " $1 :" + val_peek(2)+" $3 :" + val_peek(0));
                                  }
break;
case 141:
//#line 223 ".\gramatica.y"
{
                   yyval = val_peek(0);
                   System.out.println("ExpresionTermino---$$ : " + yyval + " $1 :" + val_peek(0));
                  }
break;
case 145:
//#line 232 ".\gramatica.y"
{
                                yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                System.out.println("TerminoMult---$$ : " + yyval + " $1 :" + val_peek(2)+" $3 :" + val_peek(0));
                                }
break;
case 146:
//#line 237 ".\gramatica.y"
{
                                 yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                 System.out.println("TerminoDiv---$$ : " + yyval + " $1 :" + val_peek(2)+" $3 :" + val_peek(0));
                                }
break;
case 147:
//#line 242 ".\gramatica.y"
{
                  yyval = val_peek(0);
                  System.out.println("TerminoFactor---$$ : " + yyval + " $1 :" + val_peek(0));
                 }
break;
case 148:
//#line 247 ".\gramatica.y"
{
            yyval = new NodoHoja(val_peek(0).sval);
            System.out.println("FactorID----$$ : " + yyval + " $1 :" + val_peek(0));                                                             
           }
break;
case 149:
//#line 251 ".\gramatica.y"
{
               yyval = new NodoHoja(val_peek(0).sval);
               System.out.println("factorCTE---$$ : " + yyval + " $1 :" + val_peek(0));
              }
break;
case 150:
//#line 256 ".\gramatica.y"
{  chequearRangoI32(val_peek(0).sval);}
break;
case 154:
//#line 262 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");}
break;
case 155:
//#line 265 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(9),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");}
break;
case 156:
//#line 268 ".\gramatica.y"
{yyval = new NodoComun("IF", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                                                                                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");}
break;
case 157:
//#line 270 ".\gramatica.y"
{yyval = new NodoComun("IF", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                                                                                        System.out.println("Sentencia IF sin corchetes y sin else");}
break;
case 158:
//#line 272 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", (ArbolSintactico) val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF con corchetes y else");}
break;
case 159:
//#line 275 ".\gramatica.y"
{
                                        yyval = new NodoComun("IF", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                                        System.out.println("Sentencia IF con corchetes y sin else");}
break;
case 160:
//#line 278 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 161:
//#line 279 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 162:
//#line 280 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 163:
//#line 281 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 164:
//#line 282 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 165:
//#line 283 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 166:
//#line 284 ".\gramatica.y"
{yyerror("Se esperaba then ");}
break;
case 167:
//#line 285 ".\gramatica.y"
{yyerror("Se esperaba ) ");}
break;
case 168:
//#line 286 ".\gramatica.y"
{yyerror("Se esperaba una condicion ");}
break;
case 169:
//#line 287 ".\gramatica.y"
{yyerror("Se esperaba ( ");}
break;
case 170:
//#line 291 ".\gramatica.y"
{yyval= new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));}
break;
case 171:
//#line 292 ".\gramatica.y"
{yyerror("Se esperaba otra expresion para comparar.");}
break;
case 172:
//#line 293 ".\gramatica.y"
{yyerror("Se esperaba un tipo de comparacion.");}
break;
case 173:
//#line 295 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 174:
//#line 296 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 175:
//#line 297 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 176:
//#line 298 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 177:
//#line 299 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 178:
//#line 301 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 179:
//#line 302 ".\gramatica.y"
{
                                                                yyval=new NodoComun("Bloque Ejecutable", (ArbolSintactico) val_peek(1), (ArbolSintactico) val_peek(2));
                                                                }
break;
case 180:
//#line 305 ".\gramatica.y"
{yyerror("Se esperaba ;");}
break;
case 181:
//#line 307 ".\gramatica.y"
{
                        yyval = new NodoControl(val_peek(3).sval, (ArbolSintactico) new NodoHoja(val_peek(1).sval));
                        System.out.println("Sentencia OUT");}
break;
case 182:
//#line 310 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 183:
//#line 311 ".\gramatica.y"
{yyerror("Se esperaba una CADENA");}
break;
case 184:
//#line 312 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 185:
//#line 314 ".\gramatica.y"
{
                        yyval = new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 186:
//#line 317 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 187:
//#line 320 ".\gramatica.y"
{yyerror("Se esperaba } en el when");}
break;
case 188:
//#line 321 ".\gramatica.y"
{yyerror("Se esperaba { en el when");}
break;
case 189:
//#line 322 ".\gramatica.y"
{yyerror("Se esperaba then en el when");}
break;
case 190:
//#line 323 ".\gramatica.y"
{yyerror("Se esperaba condicion en el when");}
break;
case 191:
//#line 324 ".\gramatica.y"
{yyerror("Se esperaba ( en el when");}
break;
case 192:
//#line 325 ".\gramatica.y"
{yyerror("Se esperaba ) en el when");}
break;
case 193:
//#line 326 ".\gramatica.y"
{yyerror("Se esperaba then en el when");}
break;
case 194:
//#line 328 ".\gramatica.y"
{System.out.println("Sentencia WHILE");}
break;
case 195:
//#line 329 ".\gramatica.y"
{System.out.println("Sentencia WHILE");}
break;
case 196:
//#line 330 ".\gramatica.y"
{System.out.println("Sentencia WHILE");}
break;
case 197:
//#line 331 ".\gramatica.y"
{System.out.println("Sentencia WHILE");}
break;
case 198:
//#line 332 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 199:
//#line 333 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 200:
//#line 334 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 201:
//#line 335 ".\gramatica.y"
{yyerror("Se esperaba una asignacion");}
break;
case 202:
//#line 336 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 203:
//#line 337 ".\gramatica.y"
{yyerror("Se esperaba :");}
break;
case 204:
//#line 338 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 205:
//#line 339 ".\gramatica.y"
{yyerror("Se esperaba una condicion");}
break;
case 206:
//#line 340 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 209:
//#line 344 ".\gramatica.y"
{yyerror("Se esperaba ;");}
break;
case 221:
//#line 360 ".\gramatica.y"
{System.out.println("Sentencia WHEN");}
break;
case 222:
//#line 361 ".\gramatica.y"
{System.out.println("Sentencia WHEN");}
break;
case 223:
//#line 362 ".\gramatica.y"
{yyerror("Se esperaba } en el when");}
break;
case 224:
//#line 363 ".\gramatica.y"
{yyerror("Se esperaba { en el when");}
break;
case 225:
//#line 364 ".\gramatica.y"
{yyerror("Se esperaba then en el when");}
break;
case 226:
//#line 365 ".\gramatica.y"
{yyerror("Se esperaba condicion en el when");}
break;
case 227:
//#line 366 ".\gramatica.y"
{yyerror("Se esperaba ( en el when");}
break;
case 228:
//#line 367 ".\gramatica.y"
{yyerror("Se esperaba ) en el when");}
break;
case 229:
//#line 368 ".\gramatica.y"
{yyerror("Se esperaba then en el when");}
break;
case 235:
//#line 375 ".\gramatica.y"
{System.out.println("Sentencia IF");}
break;
case 236:
//#line 376 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 237:
//#line 377 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 238:
//#line 378 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 239:
//#line 379 ".\gramatica.y"
{yyerror("Se esperaba end_if ");}
break;
case 240:
//#line 380 ".\gramatica.y"
{yyerror("Se esperaba } ");}
break;
case 241:
//#line 381 ".\gramatica.y"
{yyerror("Se esperaba { ");}
break;
case 242:
//#line 382 ".\gramatica.y"
{yyerror("Se esperaba then ");}
break;
case 243:
//#line 383 ".\gramatica.y"
{yyerror("Se esperaba ) ");}
break;
case 244:
//#line 384 ".\gramatica.y"
{yyerror("Se esperaba una condicion ");}
break;
case 245:
//#line 385 ".\gramatica.y"
{yyerror("Se esperaba ( ");}
break;
case 246:
//#line 388 ".\gramatica.y"
{System.out.println("Sentencia FOR");}
break;
case 247:
//#line 389 ".\gramatica.y"
{System.out.println("Sentencia FOR");}
break;
case 248:
//#line 390 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 249:
//#line 391 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 250:
//#line 392 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 251:
//#line 393 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 252:
//#line 394 ".\gramatica.y"
{System.out.println("Sentencia FOR");}
break;
case 253:
//#line 395 ".\gramatica.y"
{System.out.println("Sentencia FOR");}
break;
case 254:
//#line 396 ".\gramatica.y"
{yyerror("Se esperaba }");}
break;
case 255:
//#line 397 ".\gramatica.y"
{yyerror("Se esperaba {");}
break;
case 256:
//#line 398 ".\gramatica.y"
{yyerror("Se esperaba )");}
break;
case 257:
//#line 399 ".\gramatica.y"
{yyerror("Se esperaba (");}
break;
case 265:
//#line 411 ".\gramatica.y"
{System.out.println("Se esperaba )");}
break;
case 266:
//#line 412 ".\gramatica.y"
{System.out.println("Se esperaba )");}
break;
case 267:
//#line 413 ".\gramatica.y"
{System.out.println("Se esperaba )");}
break;
//#line 2179 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 * @throws IOException
 */
public void run() throws IOException
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
