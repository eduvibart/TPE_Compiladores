//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package Principal;
import java.io.IOException;
import AnalizadorLexico.AnalizadorLexico;
import AnalizadorLexico.Token;
import GeneracionCodigoIntermedio.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

//#line 28 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IF=257;
public final static short THEN=258;
public final static short ELSE=259;
public final static short END_IF=260;
public final static short OUT=261;
public final static short FUN=262;
public final static short RETURN=263;
public final static short BREAK=264;
public final static short WHEN=265;
public final static short WHILE=266;
public final static short FOR=267;
public final static short CONTINUE=268;
public final static short ID=269;
public final static short I32=270;
public final static short F32=271;
public final static short PUNTO=272;
public final static short PARENT_A=273;
public final static short PARENT_C=274;
public final static short COMILLA=275;
public final static short COMA=276;
public final static short DOSPUNTOS=277;
public final static short PUNTOCOMA=278;
public final static short IGUAL=279;
public final static short MAYOR=280;
public final static short MENOR=281;
public final static short MENORIGUAL=282;
public final static short MAYORIGUAL=283;
public final static short LLAVE_A=284;
public final static short LLAVE_C=285;
public final static short EXCL=286;
public final static short DIST=287;
public final static short ASIG=288;
public final static short CADENA=289;
public final static short COMENT=290;
public final static short CONST=291;
public final static short SUMA=292;
public final static short RESTA=293;
public final static short MULT=294;
public final static short DIV=295;
public final static short ENTERO=296;
public final static short FLOAT=297;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    1,    2,    2,    2,    3,    3,
    4,    4,    4,    9,    9,    6,    6,   10,   10,   11,
   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
   11,   11,   11,   11,    7,    7,    7,   13,   13,   13,
   14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
   14,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
   17,   17,   17,   17,   17,   17,   19,   19,   19,   19,
   19,   19,   19,   19,   24,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
   20,   25,   25,   25,   26,   26,   26,   26,   26,   26,
   26,   26,   26,   26,   31,   31,   31,   31,   31,   31,
   31,   31,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   22,   22,   22,
   22,   12,   12,    8,   33,   33,   34,   34,   34,    5,
    5,    5,    5,    5,    5,    5,   15,   15,   15,   28,
   28,   28,   28,   28,   28,   28,   28,   28,   39,   39,
   39,   39,   39,   42,   42,   42,   29,   29,   29,   29,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   40,   40,   40,   40,   40,   40,   40,   40,
   40,   40,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   45,   45,   45,   45,   45,   45,   45,
   45,   45,   45,   45,   45,   45,   45,   45,   45,   45,
   45,   45,   45,   45,   45,   45,   45,   45,   46,   46,
   46,   46,   46,   46,   46,   46,   43,   43,   44,   44,
   44,   44,   44,   44,   44,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   23,   23,   23,   27,   27,   27,   27,   27,   27,   47,
   47,   47,   18,   18,   18,   18,   36,   36,   36,   36,
   36,   36,   36,   36,   38,   38,   38,   38,   38,   38,
   38,   38,   38,   38,   38,   38,   38,   48,   48,   48,
   49,   49,   49,   49,   49,   49,   49,   49,   49,   32,
   32,   32,   51,   51,   51,   51,   51,   51,   51,   51,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
   50,   50,   50,   50,   50,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
   37,   37,   37,   37,   37,   37,   37,   37,   37,   52,
   52,   16,   16,   16,   16,   16,   16,   16,
};
final static short yylen[] = {                            2,
    4,    4,    4,    4,    1,    0,    3,    3,    1,    1,
    1,    1,    1,    1,    1,    2,    2,    3,    1,    9,
    7,    6,    9,    7,    6,    8,    6,    5,    7,    5,
    4,    6,    3,    2,    4,    4,    2,    0,    3,    3,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,   11,   13,   13,    8,   13,    9,   13,   12,   10,
    9,    8,   12,   11,    9,    8,    7,    6,    5,    4,
    3,    2,   11,   10,   12,   11,    8,    6,    8,    6,
    5,    4,    3,    2,    2,   12,   10,   11,    9,   12,
   10,    9,    8,    7,    6,    5,    4,    3,   11,    9,
    8,    7,    6,    5,    4,    3,    2,   17,   17,   15,
   15,   16,   16,   14,   14,   17,   15,   14,   17,   15,
   14,   13,   13,   12,   11,   10,    9,    8,    7,    6,
    5,    4,    3,   16,   14,   13,   16,   14,   13,   12,
   12,   11,   10,    9,    8,    7,    6,    5,    4,    3,
    2,    0,    3,    3,    1,    1,    1,    1,    1,    1,
    2,    1,    2,    1,    8,    6,    8,    6,    5,    4,
    3,    2,   11,   12,   12,    8,   13,    9,   13,   12,
   10,    9,    8,   12,   11,    9,    8,    7,   12,   11,
   11,   10,    6,    5,    4,    3,    2,    4,    4,    3,
    2,    2,    2,    2,    3,    1,    3,    3,    2,    1,
    1,    1,    1,    1,    1,    1,    3,    2,    3,    3,
    3,    1,    3,    3,    3,    3,    3,    3,    3,    3,
    1,    3,    3,    1,    1,    1,    1,    1,    2,    2,
   16,   16,   14,   14,   16,   14,   13,   16,   14,   13,
   12,   12,   11,   10,    9,    8,    7,    6,    5,    4,
    3,    2,   11,    9,   11,    9,    8,    7,    6,    5,
    4,    3,    2,   12,   12,   11,    8,   13,    9,   13,
   12,   10,    9,    8,   12,   11,    9,    8,    7,   11,
   10,   12,   11,    6,    5,    4,    3,    2,    8,    6,
    8,    6,    5,    4,    3,    2,    0,    3,    1,    1,
    1,    1,    1,    1,    2,   12,   12,   11,    8,   13,
    9,   13,   12,   10,    9,    8,   12,   11,    9,    8,
    7,   11,   10,   12,   11,    6,    5,    4,    3,    2,
    3,    3,    2,    1,    1,    1,    1,    1,    1,    0,
    3,    2,    4,    4,    3,    2,    8,    6,    8,    6,
    5,    4,    3,    2,   12,   10,   11,    9,   11,    9,
    8,    7,    6,    5,    4,    3,    2,    0,    3,    2,
    1,    1,    1,    1,    1,    1,    2,    1,    2,    0,
    2,    2,    8,    6,    8,    6,    5,    4,    3,    2,
   12,   12,   11,    8,   13,    9,   13,   12,   10,    9,
    8,   12,   11,    9,    8,    7,   11,   10,   12,   11,
    6,    5,    4,    3,    2,   17,   17,   15,   15,   16,
   16,   14,   14,   17,   15,   14,   17,   15,   14,   13,
   13,   12,   11,   10,    9,    8,    7,    6,    5,    4,
    3,   16,   14,   13,   16,   14,   13,   12,   12,   11,
   10,    9,    8,    7,    6,    5,    4,    3,    2,    1,
    1,    6,    4,    3,    6,    4,    3,    5,
};
final static short yydefred[] = {                         0,
    0,    5,    0,    0,    6,    6,    6,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   14,   15,    4,
    0,    0,    9,   10,   11,   12,   13,    0,    0,  210,
  216,  212,    0,  211,  213,  214,  215,    3,    2,    1,
  340,    0,  356,    0,   34,    0,  364,    0,  377,    0,
  469,    0,  218,    0,   85,    0,    0,    0,  206,    8,
    7,   17,   19,    0,   37,   38,    0,    0,  339,    0,
    0,    0,    0,  237,  238,  236,    0,    0,  235,    0,
    0,    0,  231,  355,    0,   33,    0,  363,    0,  376,
    0,  468,    0,  477,  471,  474,  470,    0,  219,    0,
  209,    0,    0,    0,    0,    0,  451,    0,  273,    0,
  262,    0,  239,  240,  338,    0,  343,  344,  345,  346,
  347,  348,  349,    0,    0,    0,    0,    0,    0,    0,
  354,  353,   31,    0,    0,    0,  362,    0,  375,    0,
  467,    0,  476,  473,    0,  208,  207,  205,   18,   36,
    0,    0,    0,    0,    0,   35,   41,   42,   43,    0,
   44,   45,   46,   47,   48,   49,   50,   51,    0,    0,
  450,    0,  272,    0,  261,    0,  337,    0,  225,    0,
  226,    0,  342,    0,  232,  229,  233,  230,  227,  223,
  228,  224,   28,    0,  203,  202,   30,    0,    0,  361,
    0,  374,    0,  466,    0,  478,    0,   72,    0,  201,
    0,   84,    0,  107,    0,  151,    0,   40,   39,    0,
    0,    0,  449,    0,  271,    0,  260,    0,  336,  350,
    0,   25,   22,   27,    0,   32,    0,  360,  350,  358,
  373,    0,  465,    0,  475,  472,   71,    0,  200,    0,
   83,    0,  106,    0,  150,    0,   98,    0,  133,    0,
    0,  448,    0,  270,    0,  259,    0,    0,  331,    0,
   24,   21,   29,    0,    0,  372,    0,    0,  464,    0,
   70,    0,  199,  198,   82,    0,  105,    0,  149,    0,
   97,    0,  132,    0,    0,  447,    0,  269,    0,  258,
    0,  326,    0,    0,  330,    0,  319,   26,    0,  359,
  357,  371,    0,  463,    0,   69,    0,   81,    0,  104,
    0,  148,    0,   96,    0,  131,    0,    0,  446,    0,
  268,    0,  257,    0,  325,    0,  321,  351,  329,  350,
    0,   23,   20,  370,    0,    0,    0,    0,    0,  378,
  381,  383,  386,  385,  368,  382,  384,  462,    0,   68,
   38,    0,   80,   38,   78,  103,    0,  147,    0,   95,
    0,  130,    0,    0,  445,    0,  267,    0,  256,    0,
  324,  350,    0,    0,  333,    0,  425,    0,  389,  400,
    0,    0,  387,    0,  461,    0,    0,   67,    0,    0,
  102,    0,  146,    0,   94,    0,  129,    0,  378,  366,
  444,    0,  266,    0,    0,    0,  307,  309,  311,  314,
  313,  264,  310,  312,  255,    0,    0,  335,    0,  328,
    0,  332,  318,  424,    0,  399,    0,  392,  391,  369,
  367,    0,  460,    0,    0,   62,    0,   66,    0,   55,
   79,   77,  101,    0,  145,    0,   93,    0,  128,    0,
    0,  443,    0,  298,    0,  315,  306,    0,    0,  254,
    0,  323,    0,  334,  317,  327,  316,  423,    0,  398,
    0,  379,  458,    0,  459,    0,   61,    0,   57,    0,
   65,   38,    0,  100,    0,    0,    0,    0,  152,  155,
  157,  160,  159,  164,   89,  156,  158,  144,    0,   92,
    0,  127,    0,  365,  442,    0,    0,  297,    0,  305,
    0,  265,  263,    0,  253,    0,    0,  322,  320,  422,
    0,  397,    0,  457,    0,  454,    0,   60,   38,    0,
    0,    0,   74,    0,  197,    0,  163,  172,    0,  161,
    0,  143,    0,   91,  152,   87,  126,    0,  440,    0,
  441,    0,  296,    0,  304,    0,  308,  251,    0,  252,
    0,  421,  378,    0,  396,  378,  394,  456,  378,  433,
  453,  378,  432,    0,   76,    0,    0,   64,    0,   73,
   52,  196,    0,  171,    0,   99,   88,    0,  142,    0,
    0,    0,  125,    0,  439,    0,  436,    0,  295,    0,
  303,    0,  250,    0,  247,    0,    0,  416,    0,    0,
    0,    0,   59,    0,   75,    0,   63,    0,  195,    0,
  170,    0,  154,  153,  140,    0,  141,    0,   90,   86,
  124,    0,    0,  438,  378,  428,  435,  378,  429,  294,
  307,    0,  302,  307,  300,  249,  307,  244,  246,  307,
  243,  411,    0,  415,    0,  404,  395,  393,  455,  430,
  452,  431,   58,   56,   53,   54,  194,    0,  169,    0,
  139,    0,  136,    0,  122,    0,  123,    0,    0,    0,
    0,  289,    0,    0,    0,    0,  410,    0,  406,  414,
  378,    0,  193,  152,    0,  168,  152,  166,  138,  152,
  115,  135,  152,  114,  121,    0,  118,    0,  437,  426,
  434,  427,  284,    0,  288,    0,  277,  301,  299,  248,
  241,  245,  242,  409,  378,    0,    0,  418,    0,    0,
  188,    0,    0,    0,    0,  120,  152,  110,  117,  152,
  111,  283,    0,  279,  287,  307,    0,    0,  420,    0,
  413,    0,  417,  403,  183,    0,  187,    0,  176,  167,
  165,  137,  112,  134,  113,    0,    0,  282,  307,    0,
    0,  291,    0,  408,    0,  419,  402,  412,  401,  182,
    0,  178,  186,  152,    0,  119,  108,  116,  109,    0,
  293,    0,  286,    0,  290,  276,  407,  405,  181,  152,
    0,    0,  192,    0,  281,    0,  292,  275,  285,  274,
    0,  190,    0,  185,    0,  191,  173,  280,  278,  180,
    0,  189,  174,  184,  175,  179,  177,
};
final static short yydgoto[] = {                          3,
    4,    8,   22,   23,  304,  157,  158,  159,   28,   64,
   29,  136,  105,  160,  351,   76,  163,  352,  165,  502,
  503,  504,   77,   33,  551,  598,  126,   78,   79,  506,
  507,  393,   58,   59,   34,   35,  353,  354,   80,   81,
   82,   83,  469,  524,  423,  424,  268,  394,  442,  356,
  357,   98,
};
final static short yysindex[] = {                       -59,
 -267,    0,    0, -122,    0,    0,    0,  989, 1016,  978,
  152,  288,  302,  434,  486,  502, -132,    0,    0,    0,
 -181, -114,    0,    0,    0,    0,    0,  428,  -54,    0,
    0,    0,  -18,    0,    0,    0,    0,    0,    0,    0,
    0, -232,    0, -182,    0,  543,    0, -210,    0, -167,
    0,  679,    0, -224,    0, -161, -209, -250,    0,    0,
    0,    0,    0, -236,    0,    0, -121,  568,    0,  570,
  609,  -72,   17,    0,    0,    0, -231,  419,    0,   80,
 -168,  -52,    0,    0,  -65,    0,  491,    0,   41,    0,
  228,    0, -196,    0,    0,    0,    0,   25,    0, 1062,
    0, -245, -181,   -1,  809, 1042,    0,  681,    0, -101,
    0,  791,    0,    0,    0, -160,    0,    0,    0,    0,
    0,    0,    0, -203,  -93,  -79,  -70,  -50, -215, -179,
    0,    0,    0, -129,  795,  223,    0,  473,    0, -110,
    0, -241,    0,    0,  -11,    0,    0,    0,    0,    0,
  633,  647,  649,  690,  702,    0,    0,    0,    0,  -41,
    0,    0,    0,    0,    0,    0,    0,    0, 1114,   30,
    0, -119,    0,  253,    0, -116,    0, 2099,    0,   80,
    0,   80,    0, 1062,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  778,    0,    0,    0,   71,  782,    0,
 2106,    0,  704,    0,   -5,    0,  312,    0,    9,    0,
  227,    0,  270,    0,  334,    0,  817,    0,    0,  715,
  716,   65,    0, -234,    0,  122,    0, -233,    0,    0,
    6,    0,    0,    0,  906,    0,  335,    0,    0,    0,
    0,  821,    0,  866,    0,    0,    0,  368,    0, -189,
    0,  384,    0,  422,    0,  -99,    0,  372,    0,  878,
   72,    0,   40,    0,  717,    0,   68, 1576,    0,  825,
    0,    0,    0,  146, 1583,    0,  -75,  448,    0,  874,
    0,  495,    0,    0,    0,  637,    0,  162,    0, -225,
    0,  460,    0,  -32,   81,    0,  883,    0,  942,    0,
  954,    0, 1056,  105,    0, 2120,    0,    0,  982,    0,
    0,    0, 1830,    0,  474,    0,  826,    0,  842,    0,
  728,    0,   99,    0,  193,    0, -212,  141,    0,  950,
    0,  472,    0,  985,    0, 2136,    0,    0,    0,    0,
  106,    0,    0,    0,  735, 1024,  740,  157, -155,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   15,    0,
    0,  117,    0,    0,    0,    0,  959,    0, 1001,    0,
  742,    0,  138, 2149,    0,  483,    0, 1984,    0,  488,
    0,    0,  226, 1597,    0, -102,    0,  521,    0,    0,
  542, 1006,    0, 1321,    0, -143,  858,    0, 1072,  875,
    0,  492,    0, 1023,    0, 1044,    0, 1058,    0,    0,
    0,  164,    0,  753, 1024,  754,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  222, 1614,    0,  291,    0,
  356,    0,    0,    0,  500,    0,  522,    0,    0,    0,
    0,  172,    0,  -85,  -27,    0,  -24,    0,  902,    0,
    0,    0,    0, 1651,    0,  556,    0,  526,    0, 1043,
 1995,    0,   75,    0,  564,    0,    0,  578, 1471,    0,
  134,    0,  449,    0,    0,    0,    0,    0,  860,    0,
  892,    0,    0,  541,    0,  545,    0,  918,    0,  206,
    0,    0,  234,    0,  755, 1024,  766,  157,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  286,    0,
 1665,    0,  603,    0,    0,   39,  116,    0,  547,    0,
  554,    0,    0,  210,    0,  155,  180,    0,    0,    0,
 1844,    0, 1865,    0, 1879,    0, 1900,    0,    0,  235,
 1027,  934,    0,  846,    0,  611,    0,    0,  617,    0,
 1107,    0,  333,    0,    0,    0,    0,  357,    0,  576,
    0,  584,    0,  936,    0,  968,    0,    0,  592,    0,
  607,    0,    0,  251,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  951,    0,  242,  296,    0,  279,    0,
    0,    0,  620,    0,  635,    0,    0,  297,    0,  225,
  276, 1121,    0,  362,    0, 1914,    0, 1935,    0, 2009,
    0, 2025,    0, 2039,    0, 2055, 1336,    0, 1077, 1351,
 1366, 1381,    0,  922,    0,  322,    0,  345,    0, 1246,
    0, 1249,    0,    0,    0,  641,    0,  656,    0,    0,
    0,  300,  314,    0,    0,    0,    0,    0,    0,    0,
    0,  299,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1100,    0, 1949,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1687,    0, 1701,
    0, 1723,    0, 1737,    0,  662,    0,  675, 1396, 1411,
 1486,    0, 1135, 1501, 1516, 1531,    0, 1970,    0,    0,
    0,  306,    0,    0,  339,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1759,    0, 1773,    0,    0,
    0,    0,    0, 1137,    0, 2069,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  342, 1426,    0, 1035, 1144,
    0, 1143, 1158, 1181, 1195,    0,    0,    0,    0,    0,
    0,    0, 2085,    0,    0,    0,  367, 1441,    0, 1086,
    0, 1101,    0,    0,    0, 1172,    0, 1795,    0,    0,
    0,    0,    0,    0,    0, 1218, 1232,    0,    0,  388,
 1546,    0, 1123,    0, 1160,    0,    0,    0,    0,    0,
 1809,    0,    0,    0,  395,    0,    0,    0,    0, 1561,
    0, 1174,    0, 1179,    0,    0,    0,    0,    0,    0,
  404, 1255,    0, 1180,    0, 1197,    0,    0,    0,    0,
 1269,    0, 1209,    0, 1211,    0,    0,    0,    0,    0,
 1212,    0,    0,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  407,    0,    0,
    0,    0,    0,  411,    0,    0,    0,    0,    0,    0,
    0,  660,    0,    0,    0,    0,    0,    0,    0,  700,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1084,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  738,
    0,  776,    0,  677,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1628,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1291,    0, 1306,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1456,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  425,    0,  436,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0, 1448,    0,    0,   20, 1357, 1468, 1482,  -84,    0,
    0,  438, -345, -310,   -8,    4,    0,  111,    0,  -78,
  -67,  -56,  -30,  -97, -430, -331, -276,  -51,   14,    0,
    0,  163,    0,  574,    0,    0,  165,  458, 1293, -357,
  -62, 1382, -618, -372,    0,    0, -229, -176, -243,    0,
    0,  548,
};
final static int YYTABLESIZE=2433;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         30,
   30,   30,  135,  315,  100,  422,  362,  169,  365,  275,
  146,   31,   31,   31,  204,  397,    5,   89,  400,   91,
  420,  262,  266,   69,  115,  103,  166,   24,   24,   24,
  322,   94,  691,   70,   71,  694,   72,  167,  695,  104,
  189,  696,  116,  372,   95,   88,  101,   73,  168,   96,
   74,   75,  179,  376,  205,   70,   71,  380,   72,  141,
   73,  263,  267,   74,   75,   72,  283,   97,   73,  355,
  323,   74,   75,   84,  184,  170,  191,   73,  102,  174,
   74,   75,   73,  373,  284,   74,   75,   57,   90,   73,
  129,  142,   74,   75,   99,  177,  161,  178,   70,   71,
   53,   72,  124,  125,   70,   71,   85,   72,  162,  233,
  384,  420,  443,   73,  135,  147,   74,   75,   32,   32,
   32,   55,  505,   53,  602,   73,  193,  456,   74,   75,
  410,   73,   56,    6,   74,   75,  223,  781,  493,  227,
   54,   60,  190,  192,   55,  202,  542,  194,  444,  445,
  272,  106,  427,  432,  173,   56,  289,  433,   97,  250,
  800,    7,  181,   61,   70,   71,  203,   72,  224,   30,
  483,  228,   36,   36,   36,   72,  183,  540,  248,  556,
   53,   31,  252,  513,  254,  185,   70,   71,  290,   72,
  131,   73,   30,  584,   74,   75,    1,  231,   72,   73,
   54,   65,   74,   75,   31,  187,  130,   73,  132,    2,
   74,   75,   56,   73,  218,  164,   74,   75,   72,  169,
  240,  169,   73,  326,  343,   74,   75,  292,  485,   66,
  587,  487,  461,  278,  488,  489,  219,  652,  166,  655,
  166,  658,   73,  661,  206,   74,   75,   67,   68,  167,
  243,  167,  420,  490,  420,  327,  420,   95,  420,   30,
  168,  269,  168,  359,  247,   73,   30,  149,   74,   75,
  395,   31,  244,  740,   70,   71,  743,   72,   31,  744,
  143,   73,  745,  270,   74,   75,  328,  574,   32,  577,
  332,  580,  396,  583,  559,  296,  137,   30,  144,  169,
  145,   73,  169,  222,   74,   75,  124,  125,  161,   31,
  161,   32,  113,  114,  138,  421,  776,  297,  166,  777,
  162,  166,  162,  300,  412,  341,  234,   30,  426,  167,
  515,   73,  167,  420,   74,   75,  420,  420,  420,   31,
  168,  261,   36,  168,  295,  301,  705,  235,  708,  277,
  711,  169,  714,  757,  368,  383,  169,  435,  402,  389,
  437,  385,  646,  812,  649,   36,  516,  517,  420,  418,
  166,  561,  398,  127,  128,   30,  369,  264,   32,  821,
  780,  167,  338,  386,  748,   32,  751,   31,  161,  525,
  169,  161,  168,  407,  399,  420,  617,  458,  265,  620,
  162,  308,  621,  162,  509,  622,  421,   41,   73,  166,
  568,   74,   75,  169,  374,  408,   32,  320,   30,  462,
  167,  702,  309,  420,   42,  526,  527,  164,  466,  164,
   31,  168,   36,  392,  519,  570,  795,  521,  321,   36,
  161,  463,  420,  169,  169,  500,   32,   73,  370,  482,
   74,   75,  162,  169,  736,  124,  125,  484,  486,  811,
  418,  558,  166,  166,  541,   37,   37,   37,  689,  371,
   36,  690,   73,  167,  167,   74,   75,  470,  197,  161,
  635,  428,  249,  139,  168,  168,  169,  567,  419,  543,
  585,  162,   70,   71,   32,   72,  198,  625,  199,  471,
   36,  140,  500,  429,  169,  166,  618,  164,  225,  547,
  164,  544,  586,  124,  125,  593,  167,   73,  595,   73,
   74,   75,   74,   75,  737,  251,  226,  168,  619,  560,
  562,  637,  161,  161,  627,   70,   71,   32,   72,  569,
  571,  552,  500,   43,  162,  162,  474,  421,   36,  421,
  475,  421,  633,  421,  692,  685,  628,   45,  758,  164,
   44,  738,   73,  553,  501,   74,   75,  245,   73,  687,
   46,   74,   75,  626,  634,  161,  693,  124,  125,  419,
  169,  675,  169,  739,  169,  246,  169,  162,  599,  253,
  273,   36,   73,  500,  741,   74,   75,  759,  164,   70,
   71,  418,   72,  418,  676,  418,   73,  418,  274,   74,
   75,  476,  603,  636,  638,  477,  742,  641,  169,  760,
  169,  501,  782,  281,  600,  601,   73,  291,  421,   74,
   75,  421,  421,  421,  604,   37,  237,   70,   71,  285,
   72,  282,  169,  801,  783,  169,  169,  169,  124,  125,
  813,  164,  164,  642,  643,  686,  688,  286,   37,  822,
  550,  501,  204,  421,   73,  802,   16,   74,   75,  500,
  169,  500,  814,  500,  117,  500,  148,  287,  169,  169,
  162,  823,  418,   62,  204,  418,  418,  418,   16,   47,
  421,  390,  207,  169,  164,  288,   63,  118,  119,  120,
  121,  122,  162,  312,  528,  123,   48,  500,  529,  500,
  124,  125,  501,  390,  169,  324,    0,  418,  421,    0,
  419,  313,  419,  169,  419,   37,  419,  377,  200,  358,
  201,  500,   37,  325,  500,  500,  500,  421,  411,   70,
   71,   49,   72,  425,  418,  378,  133,  453,   70,   71,
  316,   72,  317,   70,   71,  478,   72,   51,   50,  500,
   18,   19,    0,   37,  134,  454,   73,  500,  500,   74,
   75,    0,  418,  479,   52,   73,  434,  480,   74,   75,
   73,  510,  500,   74,   75,    0,   70,   71,  501,   72,
  501,  418,  501,   37,  501,  481,  534,  436,   86,  511,
  536,  419,  563,  500,  419,  419,  419,   70,   71,  565,
   72,  508,  500,   73,  535,   87,   74,   75,  537,  518,
  564,   70,   71,  107,   72,  109,  501,  566,  501,   70,
   71,  605,   72,  520,   73,    0,  419,   74,   75,  607,
  108,   37,  110,   70,   71,    0,   72,  613,   73,  606,
  501,   74,   75,  501,  501,  501,   73,  608,  557,   74,
   75,    0,  615,  419,  111,  614,  592,    0,   70,   71,
   73,   72,  594,   74,   75,  629,   70,   71,  501,   72,
  616,  112,   70,   71,   37,   72,  501,  501,  208,    0,
  631,  419,  318,  630,  319,   73,  681,    0,   74,   75,
    0,  501,  210,   73,  212,  209,   74,   75,  632,   73,
  419,  683,   74,   75,  682,  234,  234,  715,  234,  211,
  234,  213,  501,  234,  234,  234,  234,  234,  234,  684,
  717,  501,  341,  234,   92,  716,  171,  234,  234,  234,
  234,  234,  234,    0,  234,  214,  234,   93,  718,  172,
  341,  234,  234,  234,  234,  222,  222,  216,  222,  241,
  222,    0,  215,  222,  222,  222,  222,  222,  222,    0,
  257,  259,  298,  222,  217,    0,  242,  222,  222,  222,
  222,  222,  222,  366,  222,    0,  222,  258,  260,  299,
  387,  222,  222,  220,  220,  390,  220,  405,  220,    0,
  367,  220,  220,  220,  220,  220,  220,  388,  464,  467,
  545,  220,  391,    0,  406,  220,  220,  220,  220,  220,
  220,  548,  220,    0,  220,  465,  468,  546,    0,  220,
  220,  221,  221,  232,  221,    0,  221,  236,  549,  221,
  221,  221,  221,  221,  221,    0,  175,   18,   19,  221,
  195,   18,   19,  221,  221,  221,  221,  221,  221,  176,
  221,    0,  221,  196,  150,  151,    0,  221,  221,   12,
   13,  152,  255,  153,  154,  155,  276,   17,   18,   19,
  305,  360,  151,  306,  307,  256,   12,   13,  152,  277,
  153,  154,  155,  156,   17,   18,   19,  363,  151,   21,
    0,  590,   12,   13,  152,  591,  153,  154,  155,  361,
   17,   18,   19,  446,  151,  530,   21,  531,   12,   13,
  152,  279,  153,  154,  155,  364,   17,   18,   19,  314,
  451,  151,   21,  293,  280,   12,   13,  152,  329,  153,
  154,  155,  447,   17,   18,   19,  294,  532,   21,  533,
    0,  330,  118,  119,  120,  121,  122,  491,  151,  452,
  123,  271,   12,   13,  152,   21,  153,  154,  155,    0,
   17,   18,   19,  538,  151,   18,   19,  673,   12,   13,
  152,  674,  153,  154,  155,  492,   17,   18,   19,  588,
  151,  609,   21,  610,   12,   13,  152,  331,  153,  154,
  155,  539,   17,   18,   19,  375,  623,  151,   21,  333,
  277,   12,   13,  152,  401,  153,  154,  155,  589,   17,
   18,   19,  334,  611,   21,  612,    0,  277,  118,  119,
  120,  121,  122,   39,   11,  624,  123,  342,   12,   13,
  379,   21,   14,   15,   16,   11,   17,   18,   19,   12,
   13,   18,   19,   14,   15,   16,  403,   17,   18,   19,
    0,  438,   40,  118,  119,  120,  121,  122,   21,  404,
    0,  123,   11,   20,  439,    0,   12,   13,  455,   21,
   14,   15,   16,  151,   17,   18,   19,   12,   13,  152,
  763,  153,  154,  155,  764,   17,   18,   19,  512,  457,
   38,  118,  119,  120,  121,  122,   21,   70,   71,  123,
   72,  335,  277,  459,  336,  337,   73,   21,    0,   74,
   75,  118,  119,  120,  121,  122,  460,  448,    0,  123,
  449,  450,  664,    0,   73,  665,  666,   74,   75,  217,
  217,  786,  217,    0,  217,  787,    0,  217,  217,  217,
  217,  217,  217,  124,  125,  697,  788,  217,  698,  699,
  789,  217,  596,  495,   25,   25,   25,   12,  217,  152,
  496,  497,  154,  155,  498,  349,  639,  495,  805,  220,
  221,   12,  806,  152,  496,  497,  154,  155,  498,  349,
  725,  597,  752,  726,  727,  753,  754,    0,  767,  765,
  495,  768,  769,    0,   12,  640,  152,  496,  497,  154,
  155,  498,  349,  770,  495,  807,  180,  182,   12,  808,
  152,  496,  497,  154,  155,  498,  349,  790,  766,  817,
  791,  792,    0,  818,  819,  826,  772,  495,  820,  827,
    0,   12,  771,  152,  496,  497,  154,  155,  498,  349,
  774,  495,  828,    9,   10,   12,  829,  152,  496,  497,
  154,  155,  498,  349,  832,  773,  834,  836,  833,    0,
  835,  837,    0,  796,  495,   26,   26,   26,   12,  775,
  152,  496,  497,  154,  155,  498,  349,  798,  495,   27,
   27,   27,   12,    0,  152,  496,  497,  154,  155,  498,
  349,  677,  797,  678,  679,    0,  680,    0,  186,  188,
  824,  495,    0,    0,    0,   12,  799,  152,  496,  497,
  154,  155,  498,  349,  830,  495,    0,    0,    0,   12,
    0,  152,  496,  497,  154,  155,  498,  349,    0,  825,
    0,    0,    0,    0,    0,    0,  388,  388,    0,    0,
    0,  388,    0,  831,  388,  388,  388,  388,  388,  388,
    0,  390,  390,    0,    0,    0,  390,    0,  388,  390,
  390,  390,  390,  390,  390,  388,  440,  345,    0,    0,
    0,   12,    0,  390,  346,  347,   15,   16,  348,  349,
  390,  662,  345,    0,    0,    0,   12,    0,    0,  346,
  347,   15,   16,  348,  349,  441,  667,  345,    0,    0,
    0,   12,    0,    0,  346,  347,   15,   16,  348,  349,
  663,  669,  345,    0,    0,    0,   12,    0,    0,  346,
  347,   15,   16,  348,  349,  668,  671,  345,    0,    0,
    0,   12,    0,    0,  346,  347,   15,   16,  348,  349,
  670,  719,  345,    0,    0,    0,   12,    0,    0,  346,
  347,   15,   16,  348,  349,  672,  721,  345,    0,    0,
    0,   12,    0,    0,  346,  347,   15,   16,  348,  349,
  720,  761,  345,    0,    0,    0,   12,    0,    0,  346,
  347,   15,   16,  348,  349,  722,  784,  345,    0,    0,
    0,   12,    0,    0,  346,  347,   15,   16,  348,  349,
  762,  380,  380,    0,    0,    0,  380,    0,    0,  380,
  380,  380,  380,  380,  380,  785,  522,  414,    0,    0,
    0,   12,    0,    0,  415,  416,   70,   71,    0,  277,
  380,  723,  414,    0,    0,    0,   12,    0,    0,  415,
  416,   70,   71,    0,  277,  523,  728,  414,    0,    0,
    0,   12,    0,    0,  415,  416,   70,   71,    0,  277,
  724,  730,  414,    0,    0,    0,   12,    0,    0,  415,
  416,   70,   71,    0,  277,  729,  732,  414,    0,    0,
    0,   12,    0,    0,  415,  416,   70,   71,    0,  277,
  731,  803,  414,    0,    0,    0,   12,    0,    0,  415,
  416,   70,   71,    0,  277,  733,  815,  414,    0,    0,
    0,   12,    0,    0,  415,  416,   70,   71,    0,  277,
  804,  302,   11,    0,    0,    0,   12,    0,  310,   11,
   14,   15,   16,   12,   17,  816,    0,   14,   15,   16,
    0,   17,  430,   11,    0,    0,    0,   12,    0,    0,
  303,   14,   15,   16,    0,   17,    0,  311,    0,  472,
   11,    0,    0,    0,   12,    0,    0,    0,   14,   15,
   16,  431,   17,  352,  352,    0,    0,    0,  352,    0,
    0,    0,  352,  352,  352,    0,  352,    0,  473,    0,
    0,    0,    0,    0,    0,    0,  494,  495,    0,    0,
    0,   12,  352,  152,  496,  497,  154,  155,  498,  349,
  554,  495,    0,    0,    0,   12,    0,  152,  496,  497,
  154,  155,  498,  349,  499,    0,    0,    0,    0,    0,
    0,    0,  703,  495,    0,    0,    0,   12,  555,  152,
  496,  497,  154,  155,  498,  349,  706,  495,    0,    0,
    0,   12,    0,  152,  496,  497,  154,  155,  498,  349,
  704,    0,    0,    0,    0,    0,    0,    0,  709,  495,
    0,    0,    0,   12,  707,  152,  496,  497,  154,  155,
  498,  349,  712,  495,    0,    0,    0,   12,    0,  152,
  496,  497,  154,  155,  498,  349,  710,    0,    0,    0,
    0,    0,    0,    0,  746,  495,    0,    0,    0,   12,
  713,  152,  496,  497,  154,  155,  498,  349,  749,  495,
    0,    0,    0,   12,    0,  152,  496,  497,  154,  155,
  498,  349,  747,    0,    0,    0,    0,    0,    0,    0,
  793,  495,    0,    0,    0,   12,  750,  152,  496,  497,
  154,  155,  498,  349,  809,  495,    0,    0,    0,   12,
    0,  152,  496,  497,  154,  155,  498,  349,  794,    0,
    0,    0,    0,    0,    0,  344,  345,    0,    0,    0,
   12,    0,  810,  346,  347,   15,   16,  348,  349,  572,
  345,    0,    0,    0,   12,    0,    0,  346,  347,   15,
   16,  348,  349,  350,    0,    0,    0,    0,    0,    0,
  575,  345,    0,    0,    0,   12,    0,  573,  346,  347,
   15,   16,  348,  349,  578,  345,    0,    0,    0,   12,
    0,    0,  346,  347,   15,   16,  348,  349,  576,    0,
    0,    0,    0,    0,    0,  581,  345,    0,    0,    0,
   12,    0,  579,  346,  347,   15,   16,  348,  349,  644,
  345,    0,    0,    0,   12,    0,    0,  346,  347,   15,
   16,  348,  349,  582,    0,    0,    0,    0,    0,    0,
  647,  345,    0,    0,    0,   12,    0,  645,  346,  347,
   15,   16,  348,  349,  700,  345,    0,    0,    0,   12,
    0,    0,  346,  347,   15,   16,  348,  349,  648,    0,
    0,    0,    0,    0,    0,  734,  345,    0,    0,    0,
   12,    0,  701,  346,  347,   15,   16,  348,  349,  413,
  414,    0,    0,    0,   12,    0,    0,  415,  416,   70,
   71,  345,  277,  735,    0,   12,    0,    0,  346,  347,
   15,   16,  348,  349,  650,  414,    0,  417,    0,   12,
    0,    0,  415,  416,   70,   71,    0,  277,    0,  514,
  653,  414,    0,    0,    0,   12,    0,    0,  415,  416,
   70,   71,  651,  277,  656,  414,    0,    0,    0,   12,
    0,    0,  415,  416,   70,   71,    0,  277,  654,    0,
  659,  414,    0,    0,    0,   12,    0,    0,  415,  416,
   70,   71,  657,  277,  755,  414,    0,    0,    0,   12,
    0,    0,  415,  416,   70,   71,    0,  277,  660,    0,
  778,  414,    0,    0,    0,   12,    0,    0,  415,  416,
   70,   71,  756,  277,  229,   11,    0,    0,    0,   12,
    0,  238,   11,   14,   15,   16,   12,   17,  779,    0,
   14,   15,   16,    0,   17,  339,   11,    0,    0,    0,
   12,    0,  230,    0,   14,   15,   16,    0,   17,  239,
    0,  381,   11,    0,    0,    0,   12,    0,    0,    0,
   14,   15,   16,  340,   17,  345,    0,    0,    0,   12,
    0,    0,  346,  347,   15,   16,  348,  349,    0,  382,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  409,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          8,
    9,   10,   87,  280,   56,  378,  317,  105,  319,  239,
  256,    8,    9,   10,  256,  361,  284,   48,  364,   50,
  378,  256,  256,  256,  256,  276,  105,    8,    9,   10,
  256,  256,  651,  266,  267,  654,  269,  105,  657,  276,
  256,  660,  274,  256,  269,  256,  256,  293,  105,  274,
  296,  297,  256,  330,  296,  266,  267,  334,  269,  256,
  293,  296,  296,  296,  297,  269,  256,   54,  293,  313,
  296,  296,  297,  256,  126,  106,  256,  293,  288,  110,
  296,  297,  293,  296,  274,  296,  297,  269,  256,  293,
  259,  288,  296,  297,  256,  256,  105,  258,  266,  267,
  256,  269,  292,  293,  266,  267,  289,  269,  105,  194,
  340,  469,  256,  293,  199,  102,  296,  297,    8,    9,
   10,  277,  454,  256,  555,  293,  256,  404,  296,  297,
  374,  293,  288,  256,  296,  297,  256,  756,  449,  256,
  273,  256,  129,  130,  277,  256,  492,  277,  292,  293,
  235,  273,  382,  256,  256,  288,  256,  260,  145,  211,
  779,  284,  256,  278,  266,  267,  277,  269,  288,  178,
  256,  288,    8,    9,   10,  269,  256,  488,  209,  511,
  256,  178,  213,  460,  215,  256,  266,  267,  288,  269,
  256,  293,  201,  539,  296,  297,  256,  178,  269,  293,
  273,  256,  296,  297,  201,  256,  259,  293,  274,  269,
  296,  297,  288,  293,  256,  105,  296,  297,  269,  317,
  201,  319,  293,  256,  309,  296,  297,  258,  256,  284,
  541,  256,  409,  242,  259,  260,  278,  610,  317,  612,
  319,  614,  293,  616,  256,  296,  297,  266,  267,  317,
  256,  319,  610,  278,  612,  288,  614,  269,  616,  268,
  317,  256,  319,  315,  256,  293,  275,  269,  296,  297,
  256,  268,  278,  704,  266,  267,  707,  269,  275,  710,
  256,  293,  713,  278,  296,  297,  295,  531,  178,  533,
  299,  535,  278,  537,  256,  256,  256,  306,  274,  397,
  276,  293,  400,  274,  296,  297,  292,  293,  317,  306,
  319,  201,  296,  297,  274,  378,  747,  278,  397,  750,
  317,  400,  319,  256,  376,  306,  256,  336,  380,  397,
  256,  293,  400,  691,  296,  297,  694,  695,  696,  336,
  397,  277,  178,  400,  273,  278,  678,  277,  680,  269,
  682,  449,  684,  726,  256,  336,  454,  388,  367,  346,
  391,  256,  606,  794,  608,  201,  292,  293,  726,  378,
  449,  256,  256,  294,  295,  384,  278,  256,  268,  810,
  753,  449,  278,  278,  716,  275,  718,  384,  397,  256,
  488,  400,  449,  256,  278,  753,  573,  406,  277,  576,
  397,  256,  579,  400,  456,  582,  469,  256,  293,  488,
  256,  296,  297,  511,  274,  278,  306,  256,  427,  256,
  488,  665,  277,  781,  273,  292,  293,  317,  415,  319,
  427,  488,  268,  277,  465,  256,  768,  468,  277,  275,
  449,  278,  800,  541,  542,  454,  336,  293,  256,  278,
  296,  297,  449,  551,  698,  292,  293,  444,  445,  791,
  469,  513,  541,  542,  259,    8,    9,   10,  645,  277,
  306,  648,  293,  541,  542,  296,  297,  256,  256,  488,
  256,  256,  256,  256,  541,  542,  584,  278,  378,  256,
  256,  488,  266,  267,  384,  269,  274,  256,  276,  278,
  336,  274,  511,  278,  602,  584,  256,  397,  256,  496,
  400,  278,  278,  292,  293,  546,  584,  293,  549,  293,
  296,  297,  296,  297,  701,  256,  274,  584,  278,  516,
  517,  256,  541,  542,  256,  266,  267,  427,  269,  526,
  527,  256,  551,  256,  541,  542,  256,  610,  384,  612,
  260,  614,  256,  616,  256,  256,  278,  256,  735,  449,
  273,  256,  293,  278,  454,  296,  297,  256,  293,  256,
  269,  296,  297,  278,  278,  584,  278,  292,  293,  469,
  678,  260,  680,  278,  682,  274,  684,  584,  256,  256,
  256,  427,  293,  602,  256,  296,  297,  256,  488,  266,
  267,  610,  269,  612,  260,  614,  293,  616,  274,  296,
  297,  256,  256,  600,  601,  260,  278,  256,  716,  278,
  718,  511,  256,  256,  292,  293,  293,  256,  691,  296,
  297,  694,  695,  696,  278,  178,  199,  266,  267,  256,
  269,  274,  740,  256,  278,  743,  744,  745,  292,  293,
  256,  541,  542,  292,  293,  642,  643,  274,  201,  256,
  498,  551,  256,  726,  293,  278,  256,  296,  297,  678,
  768,  680,  278,  682,  256,  684,  103,  256,  776,  777,
  256,  278,  691,  256,  278,  694,  695,  696,  278,  256,
  753,  256,  145,  791,  584,  274,  269,  279,  280,  281,
  282,  283,  278,  256,  256,  287,  273,  716,  260,  718,
  292,  293,  602,  278,  812,  256,   -1,  726,  781,   -1,
  610,  274,  612,  821,  614,  268,  616,  256,  256,  256,
  258,  740,  275,  274,  743,  744,  745,  800,  256,  266,
  267,  256,  269,  256,  753,  274,  256,  256,  266,  267,
  256,  269,  258,  266,  267,  256,  269,  256,  273,  768,
  270,  271,   -1,  306,  274,  274,  293,  776,  777,  296,
  297,   -1,  781,  274,  273,  293,  256,  256,  296,  297,
  293,  256,  791,  296,  297,   -1,  266,  267,  678,  269,
  680,  800,  682,  336,  684,  274,  256,  256,  256,  274,
  256,  691,  256,  812,  694,  695,  696,  266,  267,  256,
  269,  256,  821,  293,  274,  273,  296,  297,  274,  256,
  274,  266,  267,  256,  269,  256,  716,  274,  718,  266,
  267,  256,  269,  256,  293,   -1,  726,  296,  297,  256,
  273,  384,  273,  266,  267,   -1,  269,  256,  293,  274,
  740,  296,  297,  743,  744,  745,  293,  274,  256,  296,
  297,   -1,  256,  753,  256,  274,  256,   -1,  266,  267,
  293,  269,  256,  296,  297,  256,  266,  267,  768,  269,
  274,  273,  266,  267,  427,  269,  776,  777,  256,   -1,
  256,  781,  256,  274,  258,  293,  256,   -1,  296,  297,
   -1,  791,  256,  293,  256,  273,  296,  297,  274,  293,
  800,  256,  296,  297,  274,  256,  257,  256,  259,  273,
  261,  273,  812,  264,  265,  266,  267,  268,  269,  274,
  256,  821,  256,  274,  256,  274,  256,  278,  279,  280,
  281,  282,  283,   -1,  285,  256,  287,  269,  274,  269,
  274,  292,  293,  294,  295,  256,  257,  256,  259,  256,
  261,   -1,  273,  264,  265,  266,  267,  268,  269,   -1,
  256,  256,  256,  274,  273,   -1,  273,  278,  279,  280,
  281,  282,  283,  256,  285,   -1,  287,  273,  273,  273,
  256,  292,  293,  256,  257,  256,  259,  256,  261,   -1,
  273,  264,  265,  266,  267,  268,  269,  273,  256,  256,
  256,  274,  273,   -1,  273,  278,  279,  280,  281,  282,
  283,  256,  285,   -1,  287,  273,  273,  273,   -1,  292,
  293,  256,  257,  256,  259,   -1,  261,  256,  273,  264,
  265,  266,  267,  268,  269,   -1,  256,  270,  271,  274,
  256,  270,  271,  278,  279,  280,  281,  282,  283,  269,
  285,   -1,  287,  269,  256,  257,   -1,  292,  293,  261,
  262,  263,  256,  265,  266,  267,  256,  269,  270,  271,
  256,  256,  257,  259,  260,  269,  261,  262,  263,  269,
  265,  266,  267,  285,  269,  270,  271,  256,  257,  291,
   -1,  256,  261,  262,  263,  260,  265,  266,  267,  284,
  269,  270,  271,  256,  257,  256,  291,  258,  261,  262,
  263,  256,  265,  266,  267,  284,  269,  270,  271,  256,
  256,  257,  291,  256,  269,  261,  262,  263,  256,  265,
  266,  267,  285,  269,  270,  271,  269,  256,  291,  258,
   -1,  269,  279,  280,  281,  282,  283,  256,  257,  285,
  287,  256,  261,  262,  263,  291,  265,  266,  267,   -1,
  269,  270,  271,  256,  257,  270,  271,  256,  261,  262,
  263,  260,  265,  266,  267,  284,  269,  270,  271,  256,
  257,  256,  291,  258,  261,  262,  263,  256,  265,  266,
  267,  284,  269,  270,  271,  256,  256,  257,  291,  256,
  269,  261,  262,  263,  256,  265,  266,  267,  285,  269,
  270,  271,  269,  256,  291,  258,   -1,  269,  279,  280,
  281,  282,  283,  256,  257,  285,  287,  256,  261,  262,
  256,  291,  265,  266,  267,  257,  269,  270,  271,  261,
  262,  270,  271,  265,  266,  267,  256,  269,  270,  271,
   -1,  256,  285,  279,  280,  281,  282,  283,  291,  269,
   -1,  287,  257,  285,  269,   -1,  261,  262,  256,  291,
  265,  266,  267,  257,  269,  270,  271,  261,  262,  263,
  256,  265,  266,  267,  260,  269,  270,  271,  256,  256,
  285,  279,  280,  281,  282,  283,  291,  266,  267,  287,
  269,  256,  269,  256,  259,  260,  293,  291,   -1,  296,
  297,  279,  280,  281,  282,  283,  269,  256,   -1,  287,
  259,  260,  256,   -1,  293,  259,  260,  296,  297,  256,
  257,  256,  259,   -1,  261,  260,   -1,  264,  265,  266,
  267,  268,  269,  292,  293,  256,  256,  274,  259,  260,
  260,  278,  256,  257,    8,    9,   10,  261,  285,  263,
  264,  265,  266,  267,  268,  269,  256,  257,  256,  266,
  267,  261,  260,  263,  264,  265,  266,  267,  268,  269,
  256,  285,  256,  259,  260,  259,  260,   -1,  256,  256,
  257,  259,  260,   -1,  261,  285,  263,  264,  265,  266,
  267,  268,  269,  256,  257,  256,  124,  125,  261,  260,
  263,  264,  265,  266,  267,  268,  269,  256,  285,  256,
  259,  260,   -1,  260,  256,  256,  256,  257,  260,  260,
   -1,  261,  285,  263,  264,  265,  266,  267,  268,  269,
  256,  257,  256,    6,    7,  261,  260,  263,  264,  265,
  266,  267,  268,  269,  256,  285,  256,  256,  260,   -1,
  260,  260,   -1,  256,  257,    8,    9,   10,  261,  285,
  263,  264,  265,  266,  267,  268,  269,  256,  257,    8,
    9,   10,  261,   -1,  263,  264,  265,  266,  267,  268,
  269,  256,  285,  258,  256,   -1,  258,   -1,  127,  128,
  256,  257,   -1,   -1,   -1,  261,  285,  263,  264,  265,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,  263,  264,  265,  266,  267,  268,  269,   -1,  285,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,   -1,  285,  264,  265,  266,  267,  268,  269,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  278,  264,
  265,  266,  267,  268,  269,  285,  256,  257,   -1,   -1,
   -1,  261,   -1,  278,  264,  265,  266,  267,  268,  269,
  285,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  285,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
  285,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  285,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
  285,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  285,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
  285,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  285,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,  268,  269,
  285,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,  268,  269,  285,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,   -1,  269,
  285,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,   -1,  269,  285,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,   -1,  269,
  285,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,   -1,  269,  285,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,   -1,  269,
  285,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
  265,  266,  267,   -1,  269,  285,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  265,  266,  267,   -1,  269,
  285,  256,  257,   -1,   -1,   -1,  261,   -1,  256,  257,
  265,  266,  267,  261,  269,  285,   -1,  265,  266,  267,
   -1,  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  285,  265,  266,  267,   -1,  269,   -1,  285,   -1,  256,
  257,   -1,   -1,   -1,  261,   -1,   -1,   -1,  265,  266,
  267,  285,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
   -1,   -1,  265,  266,  267,   -1,  269,   -1,  285,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,  285,  263,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,
  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,  284,  263,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,  263,  264,  265,  266,  267,  268,  269,
  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,  284,  263,  264,  265,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,  263,
  264,  265,  266,  267,  268,  269,  284,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
  284,  263,  264,  265,  266,  267,  268,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,
  268,  269,  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,  284,  263,  264,  265,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,  263,  264,  265,  266,  267,  268,  269,  284,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,  284,  264,  265,  266,  267,  268,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,  266,
  267,  268,  269,  284,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,   -1,  284,  264,  265,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,   -1,  264,  265,  266,  267,  268,  269,  284,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,  284,  264,  265,  266,  267,  268,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,  266,
  267,  268,  269,  284,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,   -1,  284,  264,  265,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,   -1,  264,  265,  266,  267,  268,  269,  284,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,  284,  264,  265,  266,  267,  268,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,  266,
  267,  257,  269,  284,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,  256,  257,   -1,  284,   -1,  261,
   -1,   -1,  264,  265,  266,  267,   -1,  269,   -1,  285,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  284,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,   -1,  264,  265,  266,  267,   -1,  269,  284,   -1,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  284,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,   -1,  264,  265,  266,  267,   -1,  269,  284,   -1,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  284,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,  256,  257,  265,  266,  267,  261,  269,  284,   -1,
  265,  266,  267,   -1,  269,  256,  257,   -1,   -1,   -1,
  261,   -1,  284,   -1,  265,  266,  267,   -1,  269,  284,
   -1,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,   -1,
  265,  266,  267,  284,  269,  257,   -1,   -1,   -1,  261,
   -1,   -1,  264,  265,  266,  267,  268,  269,   -1,  284,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  284,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=297;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"IF","THEN","ELSE","END_IF","OUT","FUN","RETURN","BREAK","WHEN",
"WHILE","FOR","CONTINUE","ID","I32","F32","PUNTO","PARENT_A","PARENT_C",
"COMILLA","COMA","DOSPUNTOS","PUNTOCOMA","IGUAL","MAYOR","MENOR","MENORIGUAL",
"MAYORIGUAL","LLAVE_A","LLAVE_C","EXCL","DIST","ASIG","CADENA","COMENT","CONST",
"SUMA","RESTA","MULT","DIV","ENTERO","FLOAT",
};
final static String yyrule[] = {
"$accept : program",
"program : nombre_program LLAVE_A bloque_sentencias LLAVE_C",
"program : nombre_program LLAVE_A bloque_sentencias error",
"program : nombre_program error bloque_sentencias LLAVE_C",
"program : error LLAVE_A bloque_sentencias LLAVE_C",
"nombre_program : ID",
"bloque_sentencias :",
"bloque_sentencias : bloque_sentencias sentencia PUNTOCOMA",
"bloque_sentencias : bloque_sentencias sentencia error",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_decl_datos",
"sentencia_declarativa : sentencia_decl_fun",
"sentencia_declarativa : lista_const",
"tipo : I32",
"tipo : F32",
"sentencia_decl_datos : tipo list_var",
"sentencia_decl_datos : tipo error",
"list_var : list_var COMA ID",
"list_var : ID",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro error",
"encabezado_fun : FUN ID PARENT_A parametro error",
"encabezado_fun : FUN ID PARENT_A error",
"encabezado_fun : FUN ID PARENT_A parametro COMA error",
"encabezado_fun : FUN ID error",
"encabezado_fun : FUN error",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun error",
"sentencia_decl_fun : encabezado_fun error",
"cuerpo_fun :",
"cuerpo_fun : cuerpo_fun sentencias_fun PUNTOCOMA",
"cuerpo_fun : cuerpo_fun sentencias_fun error",
"sentencias_fun : sentencia_decl_datos",
"sentencias_fun : sentencia_decl_fun",
"sentencias_fun : lista_const",
"sentencias_fun : asignacion",
"sentencias_fun : llamado_func",
"sentencias_fun : sentencia_if_fun",
"sentencias_fun : sentencia_out",
"sentencias_fun : sentencia_when_fun",
"sentencias_fun : sentencia_for_fun",
"sentencias_fun : sentencia_while_fun",
"sentencias_fun : retorno",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_fun : IF PARENT_A condicion error",
"sentencia_if_fun : IF PARENT_A error",
"sentencia_if_fun : IF error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE sentencias_fun error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_fun : WHEN PARENT_A condicion error",
"sentencia_when_fun : WHEN PARENT_A error",
"sentencia_when_fun : WHEN error",
"etiqueta : ID DOSPUNTOS",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion error",
"sentencia_while_fun : etiqueta WHILE PARENT_A error",
"sentencia_while_fun : etiqueta WHILE error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion error",
"sentencia_while_fun : WHILE PARENT_A error",
"sentencia_while_fun : WHILE error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C sentencias_fun_break",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG ENTERO error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID error",
"sentencia_for_fun : etiqueta FOR PARENT_A error",
"sentencia_for_fun : etiqueta FOR error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG ENTERO error",
"sentencia_for_fun : FOR PARENT_A ID ASIG error",
"sentencia_for_fun : FOR PARENT_A ID error",
"sentencia_for_fun : FOR PARENT_A error",
"sentencia_for_fun : FOR error",
"cuerpo_fun_break :",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break PUNTOCOMA",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break error",
"sentencias_fun_break : asignacion",
"sentencias_fun_break : sentencia_if_break_fun",
"sentencias_fun_break : sentencia_out",
"sentencias_fun_break : sentencia_when_break_fun",
"sentencias_fun_break : sentencia_while_fun",
"sentencias_fun_break : sentencia_for_fun",
"sentencias_fun_break : CONTINUE tag",
"sentencias_fun_break : BREAK",
"sentencias_fun_break : BREAK cte",
"sentencias_fun_break : retorno",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun_break",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_break_fun : WHEN PARENT_A condicion error",
"sentencia_when_break_fun : WHEN PARENT_A error",
"sentencia_when_break_fun : WHEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break_fun : IF PARENT_A condicion error",
"sentencia_if_break_fun : IF PARENT_A error",
"sentencia_if_break_fun : IF error",
"retorno : RETURN PARENT_A expresion PARENT_C",
"retorno : RETURN PARENT_A expresion error",
"retorno : RETURN PARENT_A error",
"retorno : RETURN error",
"parametro : tipo ID",
"parametro : tipo error",
"lista_const : CONST lista_asignacion",
"lista_asignacion : lista_asignacion COMA asignacion_const",
"lista_asignacion : asignacion_const",
"asignacion_const : ID ASIG cte",
"asignacion_const : ID ASIG error",
"asignacion_const : ID error",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : sentencia_if",
"sentencia_ejecutable : sentencia_out",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : sentencia_for",
"sentencia_ejecutable : sentencia_while",
"sentencia_ejecutable : llamado_func",
"asignacion : ID ASIG expresion",
"asignacion : ID error",
"asignacion : ID ASIG error",
"expresion : expresion SUMA termino",
"expresion : expresion RESTA termino",
"expresion : termino",
"expresion : sentencia_for_asig ELSE cte",
"expresion : sentencia_while_asig ELSE cte",
"expresion : expresion SUMA error",
"expresion : expresion RESTA error",
"expresion : sentencia_for_asig ELSE error",
"expresion : sentencia_while_asig ELSE error",
"termino : termino MULT factor",
"termino : termino DIV factor",
"termino : factor",
"termino : termino MULT error",
"termino : termino DIV error",
"factor : ID",
"factor : cte",
"factor : llamado_func",
"cte : ENTERO",
"cte : FLOAT",
"cte : RESTA ENTERO",
"cte : RESTA FLOAT",
"sentencia_for_asig : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_sent_eje_asig LLAVE_C",
"sentencia_for_asig : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_sent_eje_asig LLAVE_C",
"sentencia_for_asig : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C sent_eje_asig",
"sentencia_for_asig : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C sent_eje_asig",
"sentencia_for_asig : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_sent_eje_asig error",
"sentencia_for_asig : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for_asig : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte error",
"sentencia_for_asig : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_sent_eje_asig error",
"sentencia_for_asig : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for_asig : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte error",
"sentencia_for_asig : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for_asig : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for_asig : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for_asig : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion error",
"sentencia_for_asig : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion error",
"sentencia_for_asig : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID error",
"sentencia_for_asig : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA error",
"sentencia_for_asig : FOR PARENT_A ID ASIG ENTERO error",
"sentencia_for_asig : FOR PARENT_A ID ASIG error",
"sentencia_for_asig : FOR PARENT_A ID error",
"sentencia_for_asig : FOR PARENT_A error",
"sentencia_for_asig : FOR error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_sent_eje_asig LLAVE_C",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sent_eje_asig",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_sent_eje_asig error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_asig : WHILE PARENT_A condicion error",
"sentencia_while_asig : WHILE PARENT_A error",
"sentencia_while_asig : WHILE error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C error",
"sentencia_if_asig : IF PARENT_A condicion error",
"sentencia_if_asig : IF PARENT_A error",
"sentencia_if_asig : IF error",
"sentencia_when_asig : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C",
"sentencia_when_asig : WHEN PARENT_A condicion PARENT_C THEN sent_eje_asig",
"sentencia_when_asig : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig error",
"sentencia_when_asig : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_asig : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_asig : WHEN PARENT_A condicion error",
"sentencia_when_asig : WHEN PARENT_A error",
"sentencia_when_asig : WHEN error",
"bloque_sent_eje_asig :",
"bloque_sent_eje_asig : bloque_sent_eje_asig sent_eje_asig PUNTOCOMA",
"sent_eje_asig : asignacion",
"sent_eje_asig : sentencia_if_asig",
"sent_eje_asig : sentencia_out",
"sent_eje_asig : sentencia_when_asig",
"sent_eje_asig : sentencia_while_asig",
"sent_eje_asig : sentencia_for_asig",
"sent_eje_asig : BREAK cte",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if : IF PARENT_A condicion PARENT_C error",
"sentencia_if : IF PARENT_A condicion error",
"sentencia_if : IF PARENT_A error",
"sentencia_if : IF error",
"condicion : expresion comparacion expresion",
"condicion : expresion comparacion error",
"condicion : expresion error",
"comparacion : IGUAL",
"comparacion : MAYOR",
"comparacion : MENOR",
"comparacion : MENORIGUAL",
"comparacion : MAYORIGUAL",
"comparacion : DIST",
"bloque_ejecutable :",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable PUNTOCOMA",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"sentencia_out : OUT PARENT_A CADENA PARENT_C",
"sentencia_out : OUT PARENT_A CADENA error",
"sentencia_out : OUT PARENT_A error",
"sentencia_out : OUT error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN sentencia_ejecutable",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when : WHEN PARENT_A condicion error",
"sentencia_when : WHEN PARENT_A error",
"sentencia_when : WHEN error",
"sentencia_while : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion error",
"sentencia_while : WHILE PARENT_A error",
"sentencia_while : WHILE error",
"bloque_break_continue :",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue PUNTOCOMA",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue",
"ejecutables_break_continue : asignacion",
"ejecutables_break_continue : sentencia_if_break",
"ejecutables_break_continue : sentencia_out",
"ejecutables_break_continue : sentencia_when_break",
"ejecutables_break_continue : sentencia_while",
"ejecutables_break_continue : sentencia_for",
"ejecutables_break_continue : CONTINUE tag",
"ejecutables_break_continue : BREAK",
"ejecutables_break_continue : BREAK cte",
"tag :",
"tag : DOSPUNTOS ID",
"tag : DOSPUNTOS error",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN ejecutables_break_continue",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_break : WHEN PARENT_A condicion error",
"sentencia_when_break : WHEN PARENT_A error",
"sentencia_when_break : WHEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion error",
"sentencia_if_break : IF PARENT_A error",
"sentencia_if_break : IF error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C ejecutables_break_continue",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C ejecutables_break_continue",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO PUNTOCOMA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG ENTERO error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG error",
"sentencia_for : etiqueta FOR PARENT_A ID error",
"sentencia_for : etiqueta FOR PARENT_A error",
"sentencia_for : etiqueta FOR error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte PARENT_C error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA cte error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte PARENT_C error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA cte error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion expresion error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID comparacion error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA ID error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO PUNTOCOMA error",
"sentencia_for : FOR PARENT_A ID ASIG ENTERO error",
"sentencia_for : FOR PARENT_A ID ASIG error",
"sentencia_for : FOR PARENT_A ID error",
"sentencia_for : FOR PARENT_A error",
"sentencia_for : FOR error",
"param_real : cte",
"param_real : ID",
"llamado_func : ID PARENT_A param_real COMA param_real PARENT_C",
"llamado_func : ID PARENT_A param_real PARENT_C",
"llamado_func : ID PARENT_A PARENT_C",
"llamado_func : ID PARENT_A param_real COMA param_real error",
"llamado_func : ID PARENT_A param_real error",
"llamado_func : ID PARENT_A error",
"llamado_func : ID PARENT_A param_real COMA error",
};

//#line 2094 ".\gramatica.y"
private NodoControl raiz;
private Map<String,ArbolSintactico> funciones = new HashMap<String,ArbolSintactico>();
private static HashMap<Integer,ArrayList<String>> erroresSintacticos = new HashMap<Integer,ArrayList<String>>();
public String ambitoActual = "Global";
private List<String> tipoActual = new ArrayList<String>();
private boolean hayReturn = false;

void yyerror(String mensaje){
        if (erroresSintacticos.get(AnalizadorLexico.getLineaAct())== null){
                ArrayList<String> mnsj = new ArrayList<String>();
                mnsj.add(mensaje); 
                erroresSintacticos.put(AnalizadorLexico.getLineaAct(), mnsj);
        }
        else{
                erroresSintacticos.get(AnalizadorLexico.getLineaAct()).add(mensaje);
        }
}

static HashMap<Integer,ArrayList<String>> getErroresSintacticos(){
        return erroresSintacticos;
}
void chequearRangoI32(String sval){
  String s = "2147483647";
  long l = Long.valueOf(s);
  if(Long.valueOf(sval) > l){
    yyerror("La constante esta fuera de rango");
  }
}

void chequearRangoI32Neg(String sval){
       String s = "2147483648";
        long l = Long.valueOf(s);
        if(Long.valueOf(sval) > l){
                yyerror("La constante esta fuera de rango");
  } 
}

int yylex() throws IOException{
        Token t = AnalizadorLexico.getToken();
        this.yylval = new ParserVal(t.getLexema());
        //if(t.getId() != -1){
        //  System.out.println("Id: " + t.getId()+" Lexema: " + t.getLexema());
        //}else
        //  System.out.println("TERMINO LA EJECUCION");
        return t.getId();
}
public NodoControl getRaiz(){
	return raiz;
}
public Map<String,ArbolSintactico> getFuncion(){
        return funciones;
}

void actualizarAmbito(String lex, String amb){
        TablaSimbolos.addAtributo(lex,"Ambito",amb);
}
public String getTipoActual(){
        if(!this.tipoActual.isEmpty()){
                return (this.tipoActual.get(tipoActual.size()-1));
        }
        return null;
}
public void cambiarTipoActual(String f){
        tipoActual.add(f);
}
public void removeTipoActual(){
        if(!this.tipoActual.isEmpty()){
                this.tipoActual.remove(tipoActual.size()-1);
        }
}
public String buscarAmbito(String ambitoActual,String lexema){
        String ambito = ambitoActual;
        while(!TablaSimbolos.existeSimbolo(lexema+":"+ambito)){
                if(ambito.equals("Global")){
                        yyerror("La variable " + lexema + " no se encuentra declarada en el ambito " + ambitoActual);
                        ambito = "";
                        break;
                }else{
                        char [] a = ambito.toCharArray();
                        for (int i = a.length;i>=0;i--){
                                if(a[i-1] == ':'){
                                        ambito = ambito.substring(0,i-1);
                                        break;
                                }
                        }
                }
        }
        return ambito;
}
public String calcularFloat(String f){
        int i =0;
	char caracter=' ';
	String digito=""; //parte numerica
	String exponente=""; //parte exponencial	
	while (caracter != 'F') {
                if(i<f.length()){
                      caracter = f.charAt(i);
		        digito+= caracter;
		        i++; 
                }else{
                        return f;
                }
	}
        Double d = Double.parseDouble(digito);
	for (int j=i ; j < (f.length()); j++) {
		caracter = f.charAt(j);
		exponente += caracter;
	}
	Double e = Double.parseDouble(exponente);
	Double numero = Math.pow(d, e);
        return numero.toString();	

}
//#line 1635 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse() throws IOException
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 22 ".\gramatica.y"
{
                                                                raiz = new NodoControl("PROGRAMA",(ArbolSintactico)val_peek(1));  
                                                                TablaSimbolos.removeAtributo(val_peek(3).sval);
                                                        }
break;
case 2:
//#line 27 ".\gramatica.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba }");}
break;
case 3:
//#line 30 ".\gramatica.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba {");}
break;
case 4:
//#line 33 ".\gramatica.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba el nombre del programa");}
break;
case 6:
//#line 39 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 7:
//#line 40 ".\gramatica.y"
{
                                                        yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));
                                                        }
break;
case 8:
//#line 43 ".\gramatica.y"
{
                                yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba ;");
                        }
break;
case 9:
//#line 48 ".\gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa");}
break;
case 10:
//#line 49 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 12:
//#line 52 ".\gramatica.y"
{funciones.put((String)((ArbolSintactico)val_peek(0)).getLex(),(ArbolSintactico)val_peek(0));}
break;
case 14:
//#line 55 ".\gramatica.y"
{
            yyval = new NodoHoja("Entero");
            ((NodoHoja)yyval).setTipo("Entero");
           }
break;
case 15:
//#line 59 ".\gramatica.y"
{
            yyval = new NodoHoja("Float");
            ((NodoHoja)yyval).setTipo("Float");
           }
break;
case 16:
//#line 64 ".\gramatica.y"
{  System.out.println("Declaracion de datos");
                                        for (String s : ((NodoTipos)val_peek(0)).getList()){
                                                String ambito = ambitoActual;
                                                while(TablaSimbolos.existeSimbolo(s+":"+ambito)){
                                                        if(ambito.equals("Global")){
                                                                yyerror("La variable " + s + " ya se encuentra declarada en el ambito " + ambitoActual);
                                                                ambito = "";
                                                                break;
                                                        }else{
                                                                char [] a = ambito.toCharArray();
                                                                for (int i = a.length;i>=0;i--){
                                                                        if(a[i-1] == ':'){
                                                                        ambito = ambito.substring(0,i-1);
                                                                        break;
                                                                }
                                                        }
                                                }
                                        }  
                                        if(ambito.equals(ambitoActual)){
                                                TablaSimbolos.addNuevoSimbolo(s+":"+ambito);
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Id",TablaSimbolos.getAtributo(s,"Id"));
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Tipo",((ArbolSintactico) val_peek(1)).getTipo());
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Linea",AnalizadorLexico.getLineaAct());
                                                TablaSimbolos.addAtributo(s+":"+ambito,"Uso","Variable");
                                                TablaSimbolos.removeAtributo(s);
                                        }
                                        

                                        }
                                        yyval = val_peek(0);
                                }
break;
case 17:
//#line 95 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("se esperaba lista de identificadores entre comas");}
break;
case 18:
//#line 98 ".\gramatica.y"
{
                            yyval=val_peek(2);
                            ((NodoTipos)yyval).add((String)val_peek(0).sval);
                            }
break;
case 19:
//#line 102 ".\gramatica.y"
{
               yyval=new NodoTipos((String)val_peek(0).sval);
              }
break;
case 20:
//#line 106 ".\gramatica.y"
{       

                                if(!TablaSimbolos.existeSimbolo(val_peek(7).sval+ ":" + ambitoActual)){
                                        yyval = new ParserVal(val_peek(7).sval);
                                        TablaSimbolos.addNuevoSimbolo(val_peek(7).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(7).sval+ ":" + ambitoActual,"Uso","Funcion");
                                        TablaSimbolos.addAtributo(val_peek(7).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(7).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(7).sval);
                                        TablaSimbolos.addAtributo(val_peek(7).sval+":"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                        TablaSimbolos.addAtributo(val_peek(7).sval +":"+ambitoActual,"Parametro1",((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual +":"+ val_peek(7).sval);
                                        TablaSimbolos.addAtributo(val_peek(7).sval +":"+ambitoActual,"Parametro2",((ArbolSintactico)val_peek(3)).getLex()+ ":"+ ambitoActual +":"+ val_peek(7).sval);
                                        ambitoActual += ":"+val_peek(7).sval;
                                        cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                        /*Agrego los parametros en la tabla de simbolos*/
                                        TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual);
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(5)).getTipo());
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + ":"+ ambitoActual,"Uso","Variable");
                                        TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual);
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Uso","Variable");

                                }else{
                                        yyerror("La funcion " + val_peek(7).sval + " ya existe en el ambito " + ambitoActual);
                                        ambitoActual += ":"+val_peek(7).sval;
                                }
                        
                        }
break;
case 21:
//#line 133 ".\gramatica.y"
{
                        if(!TablaSimbolos.existeSimbolo(val_peek(5).sval+ ":" + ambitoActual)){
                                yyval = new ParserVal(val_peek(5).sval);
                                TablaSimbolos.addNuevoSimbolo(val_peek(5).sval+ ":" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(5).sval+ ":" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(5).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(5).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(5).sval);
                                TablaSimbolos.addAtributo(val_peek(5).sval+":"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addAtributo(val_peek(5).sval +":"+ambitoActual,"Parametro1", ((ArbolSintactico)val_peek(3)).getLex()+ ":"+ ambitoActual +":"+ val_peek(5).sval);
                                ambitoActual += ":"+val_peek(5).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                /*Agrego el parametro en la tabla de simbolos*/
                                TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual);
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + ":"+ ambitoActual,"Uso","Variable");

                        }else{
                                yyerror("La funcion " + val_peek(5).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += ":"+val_peek(5).sval;
                        }
                }
break;
case 22:
//#line 154 ".\gramatica.y"
{
                        if(!TablaSimbolos.existeSimbolo(val_peek(4).sval+ ":" + ambitoActual)){
                                yyval = new ParserVal(val_peek(4).sval);
                                TablaSimbolos.addNuevoSimbolo(val_peek(4).sval+ ":" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(4).sval+ ":" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(4).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(4).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(4).sval);
                                TablaSimbolos.addAtributo(val_peek(4).sval+":"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                ambitoActual += ":"+val_peek(4).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());

                        }else{
                                yyerror("La funcion " + val_peek(4).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += ":"+val_peek(4).sval;
                        }
                }
break;
case 23:
//#line 171 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 24:
//#line 174 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 25:
//#line 177 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 26:
//#line 180 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba :");}
break;
case 27:
//#line 183 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba :");}
break;
case 28:
//#line 186 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba :");}
break;
case 29:
//#line 189 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba )");}
break;
case 30:
//#line 192 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba )");}
break;
case 31:
//#line 195 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba )");}
break;
case 32:
//#line 198 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba otro parametro");}
break;
case 33:
//#line 201 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += ":"+"Error";
                        yyerror("Se esperaba (");}
break;
case 34:
//#line 204 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba un nombre de funcion");}
break;
case 35:
//#line 209 ".\gramatica.y"
{
                                System.out.println("Declaracion de Funcion");
                                yyval = new NodoControl("Funcion:"+val_peek(3).sval,(ArbolSintactico)val_peek(1));
                                char [] a = ambitoActual.toCharArray();
                                for (int i = a.length;i>=0;i--){
                                        if(a[i-1] == ':'){
                                                ambitoActual = ambitoActual.substring(0,i-1);
                                                break;
                                        }
                                }
                                removeTipoActual();
                        }
break;
case 36:
//#line 221 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 37:
//#line 223 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 38:
//#line 226 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 39:
//#line 227 ".\gramatica.y"
{yyval=new NodoComun("Sentencia_Funcion", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 40:
//#line 228 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 41:
//#line 231 ".\gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa Datos");}
break;
case 42:
//#line 232 ".\gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa Funcion");}
break;
case 43:
//#line 233 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 44:
//#line 234 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 45:
//#line 235 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 46:
//#line 236 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 47:
//#line 237 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 48:
//#line 238 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 49:
//#line 239 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 50:
//#line 240 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 51:
//#line 241 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 52:
//#line 243 ".\gramatica.y"
{System.out.println("Sentencia IF");
                                yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(8),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(5)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));
                        }
break;
case 53:
//#line 246 ".\gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(6)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));}
break;
case 54:
//#line 248 ".\gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(7)),new NodoControl("else fun", (ArbolSintactico)val_peek(3))));}
break;
case 55:
//#line 251 ".\gramatica.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF FUN", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        }
break;
case 56:
//#line 254 ".\gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(6)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));}
break;
case 57:
//#line 257 ".\gramatica.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF FUN", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );}
break;
case 58:
//#line 259 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 59:
//#line 261 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 60:
//#line 263 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 61:
//#line 265 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 62:
//#line 267 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 63:
//#line 269 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 64:
//#line 271 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 65:
//#line 273 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 66:
//#line 275 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 67:
//#line 277 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 68:
//#line 280 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 69:
//#line 282 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 70:
//#line 284 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 71:
//#line 286 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 72:
//#line 288 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 73:
//#line 291 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 74:
//#line 293 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 75:
//#line 296 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 76:
//#line 298 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 77:
//#line 303 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 78:
//#line 306 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 79:
//#line 309 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 80:
//#line 311 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 81:
//#line 313 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 82:
//#line 315 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 83:
//#line 317 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion");}
break;
case 84:
//#line 319 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 85:
//#line 322 ".\gramatica.y"
{
                                yyval = new ParserVal(val_peek(1).sval);
                                if(!TablaSimbolos.existeSimbolo(val_peek(1).sval+ ":" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(1).sval+ ":" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(1).sval+ ":" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(1).sval+ ":" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(1).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(1).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(1).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 86:
//#line 335 ".\gramatica.y"
{
                                yyval = new NodoComun("While con Etiqueta Funcion",new NodoControl("Etiqueta", new NodoHoja(val_peek(11).sval)) , new NodoComun("While", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                                System.out.println("Sentencia WHILE con etiqueta y con llaves");
                        
                                
                        }
break;
case 87:
//#line 342 ".\gramatica.y"
{
                                System.out.println("Sentencia WHILE con etiqueta y sin llaves");
                                yyval = new NodoComun("While con Etiqueta Funcion",new NodoControl("Etiqueta", new NodoHoja(val_peek(9).sval)) , new NodoComun("While", (ArbolSintactico) val_peek(6), new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );
                        
                        }
break;
case 88:
//#line 347 ".\gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 89:
//#line 350 ".\gramatica.y"
{
                    yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");
                }
break;
case 90:
//#line 354 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 91:
//#line 356 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 92:
//#line 358 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 93:
//#line 360 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 94:
//#line 362 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 95:
//#line 364 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 96:
//#line 366 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 97:
//#line 368 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 98:
//#line 370 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 99:
//#line 372 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 100:
//#line 374 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 101:
//#line 376 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 102:
//#line 378 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 103:
//#line 380 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 104:
//#line 382 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 105:
//#line 384 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 106:
//#line 386 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 107:
//#line 388 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 108:
//#line 393 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval, id1, new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2, (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)),asignacion ))) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(5).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 109:
//#line 429 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");                               
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval,id1, new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2, (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion ))) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(5).sval + "' debe ser de tipo entero");
                                }        
                        }
break;
case 110:
//#line 465 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,id1, new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2, (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion ))) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(3).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 111:
//#line 501 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable"); 
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,id1, new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2, (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)),asignacion ))) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(3).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 112:
//#line 538 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                System.out.println((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(4).sval + "' debe ser de tipo entero");
                                }
                }
break;
case 113:
//#line 575 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(4).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 114:
//#line 610 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(2).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 115:
//#line 645 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(2).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 116:
//#line 680 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 117:
//#line 682 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 118:
//#line 684 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 119:
//#line 687 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 120:
//#line 689 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 121:
//#line 691 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 122:
//#line 693 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 123:
//#line 695 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 124:
//#line 698 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 125:
//#line 700 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 126:
//#line 702 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 127:
//#line 704 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 128:
//#line 706 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 129:
//#line 708 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 130:
//#line 710 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 131:
//#line 712 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 132:
//#line 714 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 133:
//#line 716 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 134:
//#line 718 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 135:
//#line 720 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 136:
//#line 722 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 137:
//#line 725 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 138:
//#line 727 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 139:
//#line 729 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 140:
//#line 731 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 141:
//#line 733 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 142:
//#line 736 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 143:
//#line 738 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 144:
//#line 740 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 145:
//#line 742 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 146:
//#line 744 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 147:
//#line 746 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 148:
//#line 748 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 149:
//#line 750 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 150:
//#line 752 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 151:
//#line 754 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 152:
//#line 757 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 153:
//#line 758 ".\gramatica.y"
{yyval=new NodoComun("Sentencia_Funcion_Break", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 154:
//#line 759 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 155:
//#line 762 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 156:
//#line 763 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 157:
//#line 764 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 158:
//#line 765 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 159:
//#line 766 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 160:
//#line 767 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 161:
//#line 768 ".\gramatica.y"
{yyval = new NodoControl("Continue",(ArbolSintactico)val_peek(0));}
break;
case 162:
//#line 769 ".\gramatica.y"
{yyval = new NodoHoja("Break");}
break;
case 163:
//#line 770 ".\gramatica.y"
{yyval = new NodoControl("Break", new NodoHoja(val_peek(0).sval));}
break;
case 164:
//#line 771 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 165:
//#line 774 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 166:
//#line 777 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 167:
//#line 780 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 168:
//#line 782 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 169:
//#line 784 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 170:
//#line 786 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 171:
//#line 788 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion");}
break;
case 172:
//#line 790 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 173:
//#line 794 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 174:
//#line 799 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 175:
//#line 804 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 176:
//#line 809 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 177:
//#line 814 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 178:
//#line 819 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 179:
//#line 823 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 180:
//#line 825 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 181:
//#line 827 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 182:
//#line 829 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 183:
//#line 831 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 184:
//#line 834 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 185:
//#line 836 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 186:
//#line 838 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 187:
//#line 840 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 188:
//#line 842 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 189:
//#line 845 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 190:
//#line 847 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 191:
//#line 850 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 192:
//#line 852 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 193:
//#line 855 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 194:
//#line 857 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 195:
//#line 859 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 196:
//#line 861 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 197:
//#line 863 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 198:
//#line 866 ".\gramatica.y"
{yyval = new NodoControl("Retorno", (ArbolSintactico)val_peek(1));
                                                String tipoRet = ((ArbolSintactico)val_peek(1)).getTipo();
                                                if(!ambitoActual.equals("Global")){
                                                        String tipoFun = getTipoActual();
                                                        if(!tipoRet.equals(tipoFun)){
                                                                yyerror("El retorno debe ser del mismo tipo que el retorno de la funcion.");
                                                        }
                                                }else{
                                                        yyerror("El retorno puede estar solo dentro de una funcion.");
                                                }
                                        }
break;
case 199:
//#line 877 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba )");}
break;
case 200:
//#line 879 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion");}
break;
case 201:
//#line 881 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion entre ( )");}
break;
case 202:
//#line 885 ".\gramatica.y"
{    yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(1)).getTipo());
}
break;
case 203:
//#line 888 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba identificador");}
break;
case 204:
//#line 892 ".\gramatica.y"
{System.out.println("Declaracion de Constante/s");}
break;
case 207:
//#line 898 ".\gramatica.y"
{ 
                                if(TablaSimbolos.existeSimbolo(val_peek(2).sval+":"+ambitoActual)){
                                        yyerror("La variable " + val_peek(2).sval + " se encuentra declarada en el ambito " + ambitoActual);
                                }else{
                                        TablaSimbolos.addNuevoSimbolo(val_peek(2).sval+":"+ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(2).sval,"Id"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambitoActual,"Tipo",TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambitoActual,"Linea",AnalizadorLexico.getLineaAct());
                                        TablaSimbolos.addAtributo(val_peek(2).sval+":"+ambitoActual,"Uso","Constante");
                                }
                        }
break;
case 208:
//#line 909 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba una constante");}
break;
case 209:
//#line 911 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba una asignacion =:");}
break;
case 210:
//#line 914 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 211:
//#line 915 ".\gramatica.y"
{yyval = val_peek(0); }
break;
case 212:
//#line 916 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 213:
//#line 917 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 214:
//#line 918 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 215:
//#line 919 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 216:
//#line 920 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 217:
//#line 922 ".\gramatica.y"
{
                                        System.out.println("Asignacion");
                                        String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                                        NodoHoja hoja = new NodoHoja(val_peek(2).sval+":"+ambito);
                                        hoja.setUso((String)TablaSimbolos.getAtributo(val_peek(2).sval+":"+ambito, "Uso"));
                                        hoja.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval, hoja , (ArbolSintactico) val_peek(0));

                                        String tipoS1 = "";
                                        if(!ambito.equals("")){
                                                if(((String)TablaSimbolos.getAtributo(val_peek(2).sval+":"+ambito, "Uso")).equals("Variable")){
                                                        tipoS1 = (String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo");
                                                        ((ArbolSintactico)yyval).setTipo(tipoS1);
                                                }
                                                else {
                                                        yyerror(val_peek(2).sval+" no es una variable.");
                                                }
                                        }
                                        String tipoS3 = ((ArbolSintactico)val_peek(0)).getTipo();
                                        if(!(tipoS1.equals(tipoS3))){
                                                yyerror("No se puede realizar una asignacion con tipos diferentes.");
                                        }
                                        
                                }
break;
case 218:
//#line 946 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba =:");}
break;
case 219:
//#line 948 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion");}
break;
case 220:
//#line 951 ".\gramatica.y"
{     
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));

                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una suma con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                        
                                 }
break;
case 221:
//#line 961 ".\gramatica.y"
{
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una resta con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                 }
break;
case 222:
//#line 970 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 223:
//#line 971 ".\gramatica.y"
{
                                        NodoHoja cte = new NodoHoja(val_peek(0).sval);
                                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        yyval = new NodoComun("For como expresion",(ArbolSintactico)val_peek(2),cte);
                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));     
                                       
                                        }
break;
case 224:
//#line 978 ".\gramatica.y"
{
                                        NodoHoja cte = new NodoHoja(val_peek(0).sval);
                                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        yyval = new NodoComun("While como expresion",(ArbolSintactico)val_peek(2),cte);
                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo")); 
                                        
                                        }
break;
case 225:
//#line 985 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un termino");}
break;
case 226:
//#line 987 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un termino");}
break;
case 227:
//#line 989 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un constante");}
break;
case 228:
//#line 991 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un constante");}
break;
case 229:
//#line 995 ".\gramatica.y"
{ 
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una multiplicacion con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 230:
//#line 1004 ".\gramatica.y"
{
                                        yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una division con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 231:
//#line 1013 ".\gramatica.y"
{
                  yyval = val_peek(0);
                 }
break;
case 232:
//#line 1016 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un factor");}
break;
case 233:
//#line 1018 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un factor");}
break;
case 234:
//#line 1021 ".\gramatica.y"
{
                String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                if((!ambito.equals(""))){
                        if(((String)TablaSimbolos.getAtributo(val_peek(0).sval+":"+ambito, "Uso")).equals("Variable")
                        || ((String)TablaSimbolos.getAtributo(val_peek(0).sval+":"+ambito, "Uso")).equals("Constante")){
                                yyval = new NodoHoja(val_peek(0).sval+":"+ambito);
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +":"+ ambito,"Tipo"));
                                ((ArbolSintactico)yyval).setUso((String)TablaSimbolos.getAtributo(val_peek(0).sval+":"+ambito, "Uso"));
                        }
                        else{
                                yyerror(val_peek(0).sval+" no es una variable");
                        }
                }else{
                        yyval = new NodoHoja("Error");
                }
           }
break;
case 235:
//#line 1037 ".\gramatica.y"
{
                yyval = new NodoHoja(val_peek(0).sval);
                System.out.println("$1.sval:"+ val_peek(0).sval);
                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                if(TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo").equals("Float")){
                        ((ArbolSintactico)yyval).setLex(this.calcularFloat(val_peek(0).sval));
                }
                ((ArbolSintactico)yyval).setUso("Constante");
              }
break;
case 236:
//#line 1047 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 237:
//#line 1049 ".\gramatica.y"
{  chequearRangoI32(val_peek(0).sval);}
break;
case 238:
//#line 1050 ".\gramatica.y"
{  }
break;
case 241:
//#line 1055 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                System.out.println((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(4).sval + "' debe ser de tipo entero");
                                }
                }
break;
case 242:
//#line 1092 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(4).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 243:
//#line 1127 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(2).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 244:
//#line 1162 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(2).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 245:
//#line 1197 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 246:
//#line 1199 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 247:
//#line 1201 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 248:
//#line 1204 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 249:
//#line 1206 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 250:
//#line 1208 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 251:
//#line 1210 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 252:
//#line 1212 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 253:
//#line 1215 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 254:
//#line 1217 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 255:
//#line 1219 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 256:
//#line 1221 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 257:
//#line 1223 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 258:
//#line 1225 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 259:
//#line 1227 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 260:
//#line 1229 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 261:
//#line 1231 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 262:
//#line 1233 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 263:
//#line 1237 ".\gramatica.y"
{
                        yyval = new NodoComun("While Asignacion", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 264:
//#line 1240 ".\gramatica.y"
{
                        yyval = new NodoComun("While Asignacion", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");}
break;
case 265:
//#line 1243 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 266:
//#line 1245 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 267:
//#line 1247 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 268:
//#line 1249 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 269:
//#line 1251 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 270:
//#line 1253 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 271:
//#line 1255 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 272:
//#line 1257 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 273:
//#line 1259 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 274:
//#line 1262 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                                                                                                                                }
break;
case 275:
//#line 1266 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");}
break;
case 276:
//#line 1269 ".\gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                                                                                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");}
break;
case 277:
//#line 1271 ".\gramatica.y"
{yyval = new NodoComun("IF",new NodoControl("Condicion", (ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                                                                                        System.out.println("Sentencia IF sin corchetes y sin else");}
break;
case 278:
//#line 1273 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF con corchetes y else");}
break;
case 279:
//#line 1276 ".\gramatica.y"
{
                                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                                        System.out.println("Sentencia IF con corchetes y sin else");}
break;
case 280:
//#line 1279 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 281:
//#line 1281 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 282:
//#line 1283 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 283:
//#line 1285 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 284:
//#line 1287 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 285:
//#line 1290 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 286:
//#line 1292 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 287:
//#line 1294 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 288:
//#line 1296 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 289:
//#line 1298 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 290:
//#line 1301 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 291:
//#line 1303 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 292:
//#line 1306 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 293:
//#line 1308 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 294:
//#line 1311 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 295:
//#line 1313 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 296:
//#line 1315 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 297:
//#line 1317 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 298:
//#line 1319 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 299:
//#line 1322 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When Asignacion",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 300:
//#line 1325 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When Asignacion",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 301:
//#line 1328 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } en el when");}
break;
case 302:
//#line 1330 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { en el when");}
break;
case 303:
//#line 1332 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then en el when");}
break;
case 304:
//#line 1334 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) en el when");}
break;
case 305:
//#line 1336 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion en el when");}
break;
case 306:
//#line 1338 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( en el when");}
break;
case 307:
//#line 1341 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 308:
//#line 1342 ".\gramatica.y"
{yyval=new NodoComun("Bloque Ejecutable Asignacion", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 309:
//#line 1344 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 310:
//#line 1345 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 311:
//#line 1346 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 312:
//#line 1347 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 313:
//#line 1348 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 314:
//#line 1349 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 315:
//#line 1350 ".\gramatica.y"
{NodoHoja cte = new NodoHoja(val_peek(0).sval);
                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                        yyval = new NodoControl("Break", cte);}
break;
case 316:
//#line 1354 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                                                                                                                                }
break;
case 317:
//#line 1358 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");}
break;
case 318:
//#line 1361 ".\gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                                                                                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");}
break;
case 319:
//#line 1363 ".\gramatica.y"
{yyval = new NodoComun("IF",new NodoControl("Condicion", (ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                                                                                        System.out.println("Sentencia IF sin corchetes y sin else");}
break;
case 320:
//#line 1365 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF con corchetes y else");}
break;
case 321:
//#line 1368 ".\gramatica.y"
{
                                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                                        System.out.println("Sentencia IF con corchetes y sin else");}
break;
case 322:
//#line 1371 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 323:
//#line 1373 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 324:
//#line 1375 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 325:
//#line 1377 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 326:
//#line 1379 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 327:
//#line 1382 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 328:
//#line 1384 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 329:
//#line 1386 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 330:
//#line 1388 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 331:
//#line 1390 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 332:
//#line 1393 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 333:
//#line 1395 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 334:
//#line 1398 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 335:
//#line 1400 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 336:
//#line 1403 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 337:
//#line 1405 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 338:
//#line 1407 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 339:
//#line 1409 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 340:
//#line 1411 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 341:
//#line 1417 ".\gramatica.y"
{
                        yyval= new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                        ((ArbolSintactico)yyval).setUso("Condicion");
                        if (!((((ArbolSintactico)val_peek(2)).getTipo()).equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                               yyerror("error en la comparacion entre expresiones de distintos tipos");
                        }
                }
break;
case 342:
//#line 1425 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba otra expresion para comparar.");}
break;
case 343:
//#line 1427 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un tipo de comparacion.");}
break;
case 344:
//#line 1430 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 345:
//#line 1431 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 346:
//#line 1432 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 347:
//#line 1433 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 348:
//#line 1434 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 349:
//#line 1435 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 350:
//#line 1437 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 351:
//#line 1438 ".\gramatica.y"
{
                                                                yyval=new NodoComun("Bloque Ejecutable", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));
                                                                }
break;
case 352:
//#line 1441 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 353:
//#line 1444 ".\gramatica.y"
{
                        yyval = new NodoControl(val_peek(3).sval, (ArbolSintactico) new NodoHoja(val_peek(1).sval));
                        System.out.println("Sentencia OUT");}
break;
case 354:
//#line 1447 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 355:
//#line 1449 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una CADENA");}
break;
case 356:
//#line 1451 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 357:
//#line 1454 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 358:
//#line 1457 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 359:
//#line 1460 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } en el when");}
break;
case 360:
//#line 1462 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { en el when");}
break;
case 361:
//#line 1464 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then en el when");}
break;
case 362:
//#line 1466 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) en el when");}
break;
case 363:
//#line 1468 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion en el when");}
break;
case 364:
//#line 1470 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( en el when");}
break;
case 365:
//#line 1474 ".\gramatica.y"
{
                                yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(11).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                        
                        }
break;
case 366:
//#line 1478 ".\gramatica.y"
{
                        yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(9).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );
                        
                        }
break;
case 367:
//#line 1482 ".\gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 368:
//#line 1485 ".\gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");}
break;
case 369:
//#line 1488 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 370:
//#line 1490 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 371:
//#line 1492 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 372:
//#line 1494 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 373:
//#line 1496 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 374:
//#line 1498 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 375:
//#line 1500 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 376:
//#line 1502 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 377:
//#line 1504 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 378:
//#line 1507 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 379:
//#line 1508 ".\gramatica.y"
{
                yyval = new NodoComun("Bloque Break con Continue",(ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));
                }
break;
case 380:
//#line 1511 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba ;");}
break;
case 381:
//#line 1515 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 382:
//#line 1516 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 383:
//#line 1517 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 384:
//#line 1518 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 385:
//#line 1519 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 386:
//#line 1520 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 387:
//#line 1521 ".\gramatica.y"
{yyval = new NodoControl("Continue",(ArbolSintactico)val_peek(0));}
break;
case 388:
//#line 1522 ".\gramatica.y"
{yyval = new NodoControl("Break",(ArbolSintactico)new NodoHoja("Fin"));}
break;
case 389:
//#line 1523 ".\gramatica.y"
{yyval = new NodoControl("Break", new NodoHoja(val_peek(0).sval));}
break;
case 390:
//#line 1525 ".\gramatica.y"
{yyval = new NodoHoja("Fin");}
break;
case 391:
//#line 1526 ".\gramatica.y"
{String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        yyval = new NodoControl("Tag", new NodoHoja(val_peek(0).sval) );
                        if(!ambito.equals("")){
                                if(!TablaSimbolos.getAtributo(val_peek(0).sval +":"+ ambito,"Uso").equals("Etiqueta")){
                                        yyerror(val_peek(0).sval + " no es una etiqueta.");
                                }
                        }else{
                                yyerror("La etiqueta " + val_peek(0).sval + " no esta declarada.");
                        }
                        }
break;
case 392:
//#line 1536 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un identificador");}
break;
case 393:
//#line 1540 ".\gramatica.y"
{System.out.println("Sentencia WHEN");}
break;
case 394:
//#line 1541 ".\gramatica.y"
{System.out.println("Sentencia WHEN");}
break;
case 395:
//#line 1542 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } en el when");}
break;
case 396:
//#line 1544 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { en el when");}
break;
case 397:
//#line 1546 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then en el when");}
break;
case 398:
//#line 1548 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) en el when");}
break;
case 399:
//#line 1550 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion en el when");}
break;
case 400:
//#line 1552 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( en el when");}
break;
case 401:
//#line 1556 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 402:
//#line 1561 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 403:
//#line 1566 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 404:
//#line 1571 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 405:
//#line 1576 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 406:
//#line 1581 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 407:
//#line 1585 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 408:
//#line 1587 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 409:
//#line 1589 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 410:
//#line 1591 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 411:
//#line 1593 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 412:
//#line 1596 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 413:
//#line 1598 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 414:
//#line 1600 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 415:
//#line 1602 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 416:
//#line 1604 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 417:
//#line 1607 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 418:
//#line 1609 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 419:
//#line 1612 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 420:
//#line 1614 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 421:
//#line 1617 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 422:
//#line 1619 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 423:
//#line 1621 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 424:
//#line 1623 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 425:
//#line 1625 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 426:
//#line 1629 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval, id1, new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2, (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)),asignacion ))) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(5).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 427:
//#line 1665 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");                               
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval,id1, new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2, (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion ))) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(5).sval + "' debe ser de tipo entero");
                                }        
                        }
break;
case 428:
//#line 1701 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,id1, new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2, (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion ))) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(3).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 429:
//#line 1737 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable"); 
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,id1, new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2, (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)),asignacion ))) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(3).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 430:
//#line 1774 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                System.out.println((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(4).sval + "' debe ser de tipo entero");
                                }
                }
break;
case 431:
//#line 1811 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ ":" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(4).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(4).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 432:
//#line 1846 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(2).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 433:
//#line 1881 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+":"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+":"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +":"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+":"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +":"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ ":" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ ":" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                if (!TablaSimbolos.getAtributo(val_peek(2).sval,"Tipo").equals("Entero")){
                                        yyerror("La constante '" + val_peek(2).sval + "' debe ser de tipo entero");
                                }
                        }
break;
case 434:
//#line 1916 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 435:
//#line 1918 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 436:
//#line 1920 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 437:
//#line 1923 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 438:
//#line 1925 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 439:
//#line 1927 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 440:
//#line 1929 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 441:
//#line 1931 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 442:
//#line 1934 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 443:
//#line 1936 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 444:
//#line 1938 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 445:
//#line 1940 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 446:
//#line 1942 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 447:
//#line 1944 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 448:
//#line 1946 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 449:
//#line 1948 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 450:
//#line 1950 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 451:
//#line 1952 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 452:
//#line 1954 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 453:
//#line 1956 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 454:
//#line 1958 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 455:
//#line 1961 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 456:
//#line 1963 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 457:
//#line 1965 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 458:
//#line 1967 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 459:
//#line 1969 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 460:
//#line 1972 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 461:
//#line 1974 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 462:
//#line 1976 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 463:
//#line 1978 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 464:
//#line 1980 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 465:
//#line 1982 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 466:
//#line 1984 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 467:
//#line 1986 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 468:
//#line 1988 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 469:
//#line 1990 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 470:
//#line 1994 ".\gramatica.y"
{
                        yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                }
break;
case 471:
//#line 1999 ".\gramatica.y"
{yyval=new NodoHoja(val_peek(0).sval);
                        String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        if(!ambito.equals("")){
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +":"+ ambito,"Tipo"));
                        }
                     }
break;
case 472:
//#line 2006 ".\gramatica.y"
{
                                                        yyval=new NodoComun("llamado funcion",(ArbolSintactico)val_peek(3),(ArbolSintactico)val_peek(1));
                                                        String ambito = buscarAmbito(ambitoActual,val_peek(5).sval);
                                                        if (!ambito.equals("") ){
                                                                if( !TablaSimbolos.getAtributo(val_peek(5).sval+":"+ambito,"Uso").equals("Funcion") ){
                                                                        yyerror("La funcion "+val_peek(5).sval+" no fue declarada");
                                                                }else{
                                                                        String par1 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +":"+ ambito,"Parametro1");
                                                                        String par2 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +":"+ ambito,"Parametro2");
                                                                        if(par1 != null)
                                                                                if(par2 != null){
                                                                                        String tipoS3 = (String) ((ArbolSintactico) val_peek(3) ).getTipo();
                                                                                        if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") ) )){
                                                                                                String nombreS3 = ((ArbolSintactico) val_peek(3)).getLex();
                                                                                                yyerror("El tipo del parametro "+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                                                                        }
                                                                                        String tipoS5 = (String) ((ArbolSintactico) val_peek(1)).getTipo();
                                                                                        if( !(tipoS5.equals((String)TablaSimbolos.getAtributo(par2,"Tipo") ))){
                                                                                                String nombreS5 = ((ArbolSintactico) val_peek(1)).getLex();
                                                                                                yyerror("El tipo del parametro "+ nombreS5+" no coincide con el tipo declarado en la funcion.");
                                                                                        }
                                                                                }else{
                                                                                        yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                                }
                                                                        else{
                                                                                yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                        }
                                                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(5).sval +":"+ ambito,"Tipo"));
                                                                }
                                                        }
                                                }
break;
case 473:
//#line 2037 ".\gramatica.y"
{System.out.println("Llamado fun 1 parametro");
                yyval=new NodoComun("llamado funcion",(ArbolSintactico)val_peek(1),new NodoHoja("Un solo parametro"));
            String ambito = buscarAmbito(ambitoActual,val_peek(3).sval);
            if (!ambito.equals("")){
                if (!TablaSimbolos.getAtributo(val_peek(3).sval+":"+ambito,"Uso").equals("Funcion")){
                        yyerror("La funcion "+val_peek(3).sval+" no fue declarada");
                }else{
                        String par1 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +":"+ ambito,"Parametro1");
                        String par2 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +":"+ ambito,"Parametro2");
                        if(par2 ==null){
                                if(par1!=null){
                                        String tipoS3 = (String) ((ArbolSintactico) val_peek(1) ).getTipo();
                                        if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") )) ){
                                                String nombreS3 = ((ArbolSintactico) val_peek(1)).getLex();
                                                yyerror("El tipo del parametro "+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                        }
                                }else{
                                        yyerror("La funcion esta declarada sin parametros.");
                                }
                        }else{
                                yyerror("La funcion esta declarada con dos parametros.");
                        }
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(3).sval +":"+ ambito,"Tipo"));
                }
            }
        }
break;
case 474:
//#line 2063 ".\gramatica.y"
{yyval=new NodoHoja("llamado funcion sin parametros");
                String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                if (!ambito.equals("") ){
                        if (!TablaSimbolos.getAtributo(val_peek(2).sval+":"+ambito,"Uso").equals("Funcion")){
                                yyerror("La funcion "+val_peek(2).sval+" no fue declarada");
                                
                        }else{
                                String par1 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Parametro1");
                                String par2 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Parametro2");
                                if(par2 == null){
                                        if(par1 != null){
                                                yyerror("La funcion esta declarada con un parametro.");
                                        }
                                }else{
                                        yyerror("La funcion esta declarada con dos parametros.");
                                }
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +":"+ ambito,"Tipo"));
                        }
                }       
        }
break;
case 475:
//#line 2083 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 476:
//#line 2085 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 477:
//#line 2087 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 478:
//#line 2089 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba otro parametro");}
break;
//#line 5122 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 * @throws IOException
 */
public void run() throws IOException
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
