//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 ".\gramatica.y"
package Principal;
import java.io.IOException;
import AnalizadorLexico.AnalizadorLexico;
import AnalizadorLexico.Token;
import GeneracionCodigoIntermedio.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

//#line 28 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IF=257;
public final static short THEN=258;
public final static short ELSE=259;
public final static short END_IF=260;
public final static short OUT=261;
public final static short FUN=262;
public final static short RETURN=263;
public final static short BREAK=264;
public final static short WHEN=265;
public final static short WHILE=266;
public final static short FOR=267;
public final static short CONTINUE=268;
public final static short ID=269;
public final static short I32=270;
public final static short F32=271;
public final static short PUNTO=272;
public final static short PARENT_A=273;
public final static short PARENT_C=274;
public final static short COMILLA=275;
public final static short COMA=276;
public final static short DOSPUNTOS=277;
public final static short PUNTOCOMA=278;
public final static short IGUAL=279;
public final static short MAYOR=280;
public final static short MENOR=281;
public final static short MENORIGUAL=282;
public final static short MAYORIGUAL=283;
public final static short LLAVE_A=284;
public final static short LLAVE_C=285;
public final static short EXCL=286;
public final static short DIST=287;
public final static short ASIG=288;
public final static short CADENA=289;
public final static short COMENT=290;
public final static short CONST=291;
public final static short SUMA=292;
public final static short RESTA=293;
public final static short MULT=294;
public final static short DIV=295;
public final static short ENTERO=296;
public final static short FLOAT=297;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    1,    2,    2,    2,    3,    3,
    4,    4,    4,    9,    9,   10,   10,   10,    6,    6,
   11,   11,   12,   12,   12,   12,   12,   12,   12,   12,
   12,   12,   12,   12,   12,   12,   12,    7,    7,    7,
   14,   14,   14,   15,   15,   15,   15,   15,   15,   15,
   15,   15,   15,   15,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
   18,   18,   18,   18,   18,   18,   18,   18,   18,   20,
   20,   20,   20,   20,   20,   20,   20,   25,   22,   22,
   22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
   22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
   21,   21,   21,   21,   26,   26,   26,   27,   27,   27,
   27,   27,   27,   27,   27,   27,   27,   31,   31,   31,
   31,   31,   31,   31,   31,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
   23,   23,   23,   23,   13,   13,    8,   34,   34,   35,
   35,   35,    5,    5,    5,    5,    5,    5,    5,   16,
   16,   16,   29,   29,   29,   29,   29,   29,   29,   29,
   29,   40,   40,   40,   40,   40,   43,   43,   43,   33,
   33,   33,   33,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   42,   42,   42,   42,   42,
   42,   42,   42,   42,   42,   42,   46,   46,   46,   46,
   46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
   46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
   46,   47,   47,   47,   47,   47,   47,   47,   47,   44,
   44,   45,   45,   45,   45,   45,   45,   45,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   36,   36,   36,   36,   36,   36,   36,
   36,   36,   36,   24,   24,   24,   28,   28,   28,   28,
   28,   28,   48,   48,   48,   19,   19,   19,   19,   37,
   37,   37,   37,   37,   37,   37,   37,   39,   39,   39,
   39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
   49,   49,   49,   50,   50,   50,   50,   50,   50,   50,
   50,   32,   32,   32,   52,   52,   52,   52,   52,   52,
   52,   52,   51,   51,   51,   51,   51,   51,   51,   51,
   51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
   51,   51,   51,   51,   51,   51,   51,   38,   38,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
   38,   53,   53,   17,   17,   17,   17,   17,   17,   17,
};
final static short yylen[] = {                            2,
    4,    4,    4,    4,    1,    0,    3,    3,    1,    1,
    1,    1,    1,    1,    1,    1,    2,    1,    2,    2,
    3,    1,    9,    7,    6,    9,    7,    6,    8,    6,
    5,    7,    5,    4,    6,    3,    2,    4,    4,    2,
    0,    3,    3,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,   11,   13,   13,    8,   13,    9,
   13,   12,   10,    9,    8,   12,   11,    9,    8,    7,
    6,    5,    4,    3,    2,   11,   10,   12,   11,    8,
    6,    8,    6,    5,    4,    3,    2,    2,   12,   10,
   11,    9,   12,   10,    9,    8,    7,    6,    5,    4,
    3,   11,    9,    8,    7,    6,    5,    4,    3,    2,
   17,   17,   15,   15,   16,   16,   14,   14,   17,   15,
   14,   17,   15,   14,   13,   13,   12,   11,   10,    9,
    8,    7,    6,    5,    4,    3,   16,   14,   13,   16,
   14,   13,   12,   12,   11,   10,    9,    8,    7,    6,
    5,    4,    3,    2,    0,    3,    3,    1,    1,    1,
    1,    1,    1,    2,    1,    2,    1,    8,    6,    8,
    6,    5,    4,    3,    2,   11,   12,   12,    8,   13,
    9,   13,   12,   10,    9,    8,   12,   11,    9,    8,
    7,   12,   11,   11,   10,    6,    5,    4,    3,    2,
    4,    4,    3,    2,    2,    2,    2,    3,    1,    3,
    3,    2,    1,    1,    1,    1,    1,    1,    1,    3,
    2,    3,    3,    3,    1,    3,    3,    3,    3,    3,
    3,    3,    3,    1,    3,    3,    1,    1,    1,    1,
    1,    2,    2,   16,   16,   14,   14,   16,   14,   13,
   16,   14,   13,   12,   12,   11,   10,    9,    8,    7,
    6,    5,    4,    3,    2,   11,    9,   11,    9,    8,
    7,    6,    5,    4,    3,    2,   12,   12,   11,    8,
   13,    9,   13,   12,   10,    9,    8,   12,   11,    9,
    8,    7,   11,   10,   12,   11,    6,    5,    4,    3,
    2,    8,    6,    8,    6,    5,    4,    3,    2,    0,
    3,    1,    1,    1,    1,    1,    1,    2,   12,   12,
   11,    8,   13,    9,   13,   12,   10,    9,    8,   12,
   11,    9,    8,    7,   11,   10,   12,   11,    6,    5,
    4,    3,    2,    3,    3,    2,    1,    1,    1,    1,
    1,    1,    0,    3,    2,    4,    4,    3,    2,    8,
    6,    8,    6,    5,    4,    3,    2,   12,   10,   11,
    9,   11,    9,    8,    7,    6,    5,    4,    3,    2,
    0,    3,    2,    1,    1,    1,    1,    1,    1,    2,
    1,    0,    2,    2,    8,    6,    8,    6,    5,    4,
    3,    2,   12,   12,   11,    8,   13,    9,   13,   12,
   10,    9,    8,   12,   11,    9,    8,    7,   11,   10,
   12,   11,    6,    5,    4,    3,    2,   17,   17,   15,
   15,   16,   16,   14,   14,   17,   15,   14,   17,   15,
   14,   13,   13,   12,   11,   10,    9,    8,    7,    6,
    5,    4,    3,   16,   14,   13,   16,   14,   13,   12,
   12,   11,   10,    9,    8,    7,    6,    5,    4,    3,
    2,    1,    1,    6,    4,    3,    6,    4,    3,    5,
};
final static short yydefred[] = {                         0,
    0,    5,    0,    0,    6,    6,    6,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   14,   15,    4,
    0,    0,    9,   10,   11,   12,   13,    0,    0,  213,
  219,  215,    0,  214,  216,  217,  218,    3,    2,    1,
  343,    0,  359,    0,   37,    0,  367,    0,  380,    0,
  471,    0,  221,    0,   88,    0,    0,    0,  209,    8,
    7,   20,   22,    0,   40,   41,    0,    0,  342,    0,
    0,    0,    0,  240,  241,  239,    0,    0,  238,    0,
    0,    0,  234,  358,    0,   36,    0,  366,    0,  379,
    0,  470,    0,  479,  473,  476,  472,    0,  222,    0,
  212,    0,    0,    0,    0,    0,  453,    0,  276,    0,
  265,    0,  242,  243,  341,    0,  346,  347,  348,  349,
  350,  351,  352,    0,    0,    0,    0,    0,    0,    0,
  357,  356,   34,    0,    0,    0,  365,    0,  378,    0,
  469,    0,  478,  475,    0,  211,  210,  208,   21,   39,
    0,    0,    0,    0,    0,   38,   44,   45,   46,    0,
   47,   48,   49,   50,   51,   52,   53,   54,    0,    0,
  452,    0,  275,    0,  264,    0,  340,    0,  228,    0,
  229,    0,  345,    0,  235,  232,  236,  233,  230,  226,
  231,  227,   31,    0,  206,  205,   33,    0,    0,  364,
    0,  377,    0,  468,   18,    0,   16,    0,  480,    0,
   75,    0,  204,    0,   87,    0,  110,    0,  154,    0,
   43,   42,    0,    0,    0,  451,    0,  274,    0,  263,
    0,  339,  353,    0,   28,   25,   30,    0,   35,    0,
  363,  353,  361,  376,    0,   17,  467,    0,  477,  474,
   74,    0,  203,    0,   86,    0,  109,    0,  153,    0,
  101,    0,  136,    0,    0,  450,    0,  273,    0,  262,
    0,    0,  334,    0,   27,   24,   32,    0,    0,  375,
    0,    0,  466,    0,   73,    0,  202,  201,   85,    0,
  108,    0,  152,    0,  100,    0,  135,    0,    0,  449,
    0,  272,    0,  261,    0,  329,    0,    0,  333,    0,
  322,   29,    0,  362,  360,  374,    0,  465,    0,   72,
    0,   84,    0,  107,    0,  151,    0,   99,    0,  134,
    0,    0,  448,    0,  271,    0,  260,    0,  328,    0,
  324,  354,  332,  353,    0,   26,   23,  373,    0,  391,
    0,    0,    0,  381,  384,  386,  389,  388,  371,  385,
  387,  464,    0,   71,   41,    0,   83,   41,   81,  106,
    0,  150,    0,   98,    0,  133,    0,    0,  447,    0,
  270,    0,  259,    0,  327,  353,    0,    0,  336,    0,
  427,    0,  402,    0,    0,  390,    0,  463,    0,    0,
   70,    0,    0,  105,    0,  149,    0,   97,    0,  132,
    0,  381,  369,  446,    0,  269,    0,    0,    0,  310,
  312,  314,  317,  316,  267,  313,  315,  258,    0,    0,
  338,    0,  331,    0,  335,  321,  426,    0,  401,    0,
  394,  393,  372,  370,    0,  462,    0,    0,   65,    0,
   69,    0,   58,   82,   80,  104,    0,  148,    0,   96,
    0,  131,    0,    0,  445,    0,  301,    0,  318,  309,
    0,    0,  257,    0,  326,    0,  337,  320,  330,  319,
  425,    0,  400,    0,  382,  460,    0,  461,    0,   64,
    0,   60,    0,   68,   41,    0,  103,    0,    0,    0,
    0,  155,  158,  160,  163,  162,  167,   92,  159,  161,
  147,    0,   95,    0,  130,    0,  368,  444,    0,    0,
  300,    0,  308,    0,  268,  266,    0,  256,    0,    0,
  325,  323,  424,    0,  399,    0,  459,    0,  456,    0,
   63,   41,    0,    0,    0,   77,    0,  200,    0,  166,
  175,    0,  164,    0,  146,    0,   94,  155,   90,  129,
    0,  442,    0,  443,    0,  299,    0,  307,    0,  311,
  254,    0,  255,    0,  423,  381,    0,  398,  381,  396,
  458,  381,  435,  455,  381,  434,    0,   79,    0,    0,
   67,    0,   76,   55,  199,    0,  174,    0,  102,   91,
    0,  145,    0,    0,    0,  128,    0,  441,    0,  438,
    0,  298,    0,  306,    0,  253,    0,  250,    0,    0,
  418,    0,    0,    0,    0,   62,    0,   78,    0,   66,
    0,  198,    0,  173,    0,  157,  156,  143,    0,  144,
    0,   93,   89,  127,    0,    0,  440,  381,  430,  437,
  381,  431,  297,  310,    0,  305,  310,  303,  252,  310,
  247,  249,  310,  246,  413,    0,  417,    0,  406,  397,
  395,  457,  432,  454,  433,   61,   59,   56,   57,  197,
    0,  172,    0,  142,    0,  139,    0,  125,    0,  126,
    0,    0,    0,    0,  292,    0,    0,    0,    0,  412,
    0,  408,  416,  381,    0,  196,  155,    0,  171,  155,
  169,  141,  155,  118,  138,  155,  117,  124,    0,  121,
    0,  439,  428,  436,  429,  287,    0,  291,    0,  280,
  304,  302,  251,  244,  248,  245,  411,  381,    0,    0,
  420,    0,    0,  191,    0,    0,    0,    0,  123,  155,
  113,  120,  155,  114,  286,    0,  282,  290,  310,    0,
    0,  422,    0,  415,    0,  419,  405,  186,    0,  190,
    0,  179,  170,  168,  140,  115,  137,  116,    0,    0,
  285,  310,    0,    0,  294,    0,  410,    0,  421,  404,
  414,  403,  185,    0,  181,  189,  155,    0,  122,  111,
  119,  112,    0,  296,    0,  289,    0,  293,  279,  409,
  407,  184,  155,    0,    0,  195,    0,  284,    0,  295,
  278,  288,  277,    0,  193,    0,  188,    0,  194,  176,
  283,  281,  183,    0,  192,  177,  187,  178,  182,  180,
};
final static short yydgoto[] = {                          3,
    4,    8,   22,   23,  308,  157,  158,  159,   28,  208,
   64,   29,  136,  105,  160,  355,   76,  163,  356,  165,
  505,  506,  507,   77,   33,  554,  601,  126,   78,  509,
  510,  396,   79,   58,   59,   34,   35,  357,  358,   80,
   81,   82,   83,  472,  527,  426,  427,  272,  397,  445,
  360,  361,   98,
};
final static short yysindex[] = {                        83,
 -271,    0,    0, -253,    0,    0,    0, 1072, 1099, 1061,
 -240,  276,  229,  300,  354,  396,  -66,    0,    0,    0,
 -128, -204,    0,    0,    0,    0,    0,  392, -227,    0,
    0,    0,  -61,    0,    0,    0,    0,    0,    0,    0,
    0, -228,    0, -252,    0,  412,    0, -167,    0, -131,
    0,  403,    0, -203,    0,  -98, -238, -168,    0,    0,
    0,    0,    0, -125,    0,    0, -106,  456,    0,  533,
  547,  -53,  626,    0,    0,    0, -194,  486,    0,  965,
 -102,  -49,    0,    0, -122,    0,  476,    0,   -7,    0,
   36,    0, -216,    0,    0,    0,    0,   20,    0, 1052,
    0, -205, -128,  -93,  892,  426,    0,  535,    0,  254,
    0,  663,    0,    0,    0, -233,    0,    0,    0,    0,
    0,    0,    0, -147,   30,  337,  162,  238, -169, -149,
    0,    0,    0, -161,  718,  388,    0,  106,    0,   52,
    0, -116,    0,    0,  246,    0,    0,    0,    0,    0,
  652,  665,  710,  716,  717,    0,    0,    0,    0, -175,
    0,    0,    0,    0,    0,    0,    0,    0, 1116,  -40,
    0, -170,    0,   79,    0, -155,    0, 2123,    0,  965,
    0,  965,    0, 1052,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -224,    0,    0,    0,   77,  803,    0,
 2130,    0,  722,    0,    0,  -52,    0, -133,    0,  156,
    0,  370,    0,  391,    0,  440,    0,  448,    0,  737,
    0,    0,  728,  740,  -18,    0,  -96,    0,  102,    0,
  -54,    0,    0, -119,    0,    0,    0,  813,    0,  313,
    0,    0,    0,    0,  749,    0,    0,  836,    0,    0,
    0,  320,    0, -178,    0,  326,    0,  420,    0, -114,
    0,  521,    0,  840,   28,    0, -117,    0,  747,    0,
  -64, 1600,    0,  502,    0,    0,    0,  163, 1607,    0,
  -69,  446,    0,  546,    0,  155,    0,    0,    0,  382,
    0,  215,    0,  -39,    0,  469,    0,  -65,   24,    0,
  841,    0,  842,    0,  861,    0,  908,   70,    0, 2144,
    0,    0,  823,    0,    0,    0, 1854,    0,  555,    0,
  909,    0,  925,    0,  758,    0,  -28,    0,  228,    0,
  109,  153,    0,  957,    0,  475,    0, 1033,    0, 2160,
    0,    0,    0,    0,   -3,    0,    0,    0,  759,    0,
  760,   27,   23,    0,    0,    0,    0,    0,    0,    0,
    0,    0, -208,    0,    0,   -1,    0,    0,    0,    0,
  863,    0,  865,    0,  773,    0,    7, 2173,    0,  580,
    0, 2008,    0,  605,    0,    0,   53, 1621,    0, -200,
    0,  619,    0,  637,  866,    0, 1360,    0,  -60,  941,
    0,  974,  958,    0,  478,    0, 1068,    0,  887,    0,
  891,    0,    0,    0,  -84,    0,  785, 1013,  787,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   -5, 1638,
    0, -181,    0,   82,    0,    0,    0,  500,    0,  508,
    0,    0,    0,    0,  168,    0,  181,  207,    0,  137,
    0,  985,    0,    0,    0,    0, 1675,    0,  644,    0,
  519,    0, 1106, 2019,    0,  -31,    0,  651,    0,    0,
  683,  599,    0,  187,    0,  306,    0,    0,    0,    0,
    0,  452,    0,  587,    0,    0,  525,    0,  545,    0,
 1001,    0,  195,    0,    0,   66,    0,  798, 1013,  799,
   27,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   94,    0, 1689,    0,  689,    0,    0,  232,  271,
    0,  557,    0,  567,    0,    0,  208,    0,  296,  303,
    0,    0,    0, 1868,    0, 1889,    0, 1903,    0, 1924,
    0,    0,   68, 1110, 1017,    0,  321,    0,  695,    0,
    0,  701,    0, 1161,    0,  204,    0,    0,    0,    0,
  132,    0,  579,    0,  588,    0,  622,    0,  636,    0,
    0,  623,    0,  625,    0,    0,  125,    0,    0,    0,
    0,    0,    0,    0,    0,    0, 1034,    0,  233,  240,
    0,  126,    0,    0,    0,  653,    0,  672,    0,    0,
  129,    0,  305,  322, 1175,    0,  324,    0, 1938,    0,
 1959,    0, 2033,    0, 2049,    0, 2063,    0, 2079, 1375,
    0, 1154, 1390, 1405, 1420,    0,  627,    0,  273,    0,
  325,    0,  673,    0,  873,    0,    0,    0,  680,    0,
  686,    0,    0,    0,  339,  385,    0,    0,    0,    0,
    0,    0,    0,    0,  142,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1189,    0, 1973,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1711,    0, 1725,    0, 1747,    0, 1761,    0,  697,    0,
  703, 1435, 1450, 1510,    0, 1191, 1525, 1540, 1555,    0,
 1994,    0,    0,    0,  189,    0,    0,  197,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1783,    0,
 1797,    0,    0,    0,    0,    0, 1197,    0, 2093,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  231, 1465,
    0,  709, 1198,    0, 1226, 1212, 1235, 1249,    0,    0,
    0,    0,    0,    0,    0, 2109,    0,    0,    0,  235,
 1480,    0,  913,    0,  929,    0,    0,    0, 1228,    0,
 1819,    0,    0,    0,    0,    0,    0,    0, 1272, 1286,
    0,    0,  270, 1570,    0,  945,    0,  962,    0,    0,
    0,    0,    0, 1833,    0,    0,    0,  282,    0,    0,
    0,    0, 1585,    0,  975,    0, 1005,    0,    0,    0,
    0,    0,    0,  297, 1309,    0, 1021,    0, 1038,    0,
    0,    0,    0, 1323,    0, 1051,    0, 1080,    0,    0,
    0,    0,    0, 1098,    0,    0,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  364,    0,    0,
    0,    0,    0,  365,    0,    0,    0,    0,    0,    0,
    0,  743,    0,    0,    0,    0,    0,    0,    0,  783,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1138,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  821,
    0,  859,    0,  707,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1652,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1345,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1495,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  367,    0,
  375,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0, 1385,    0,    0,   96, 1411, 1425, 1462,  -82,   25,
    0,    0,  331, -341, -309,   -8,   26,    0,  111,    0,
  -83,  -75,  -63,  -33,  -97, -532, -403, -275,  -50,    0,
    0,   56,  -47,    0,  511,    0,    0,   11,   35, 1284,
   86,  140, 1362, -596, -372,    0,    0, -231, -209, -268,
    0,    0,  474,
};
final static int YYTABLESIZE=2457;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         30,
   30,   30,    6,   84,  135,  100,   97,  169,  319,  425,
  279,  366,    5,  369,   89,   41,   91,  101,   36,   36,
   36,  166,  177,  400,  178,  605,  403,   69,   65,  167,
    7,  235,   42,   31,   31,   31,   85,   70,   71,  141,
   72,  168,   37,   37,   37,   18,   19,  398,  359,  102,
  146,   60,   94,  508,  147,  435,   66,  694,  380,  436,
  697,  115,  384,  698,   73,   95,  699,   74,   75,  399,
   96,  142,  170,   61,  477,  184,  174,  287,  478,  116,
  221,  190,  192,  124,  125,  226,  189,   73,   88,   73,
   74,   75,   74,   75,  193,  288,  161,   97,   70,   71,
  230,   72,  222,   24,   24,   24,  191,  103,  179,  413,
  559,  236,  388,  124,  125,  194,  135,  227,   32,   32,
   32,   72,  247,   73,   90,   73,   74,   75,   74,   75,
  162,  459,  231,  131,   70,   71,  273,   72,  300,  204,
   57,  293,  496,   73,  248,   73,   74,   75,   74,   75,
  104,  132,  205,  545,  430,  276,  129,   99,  274,  266,
  301,   73,  784,  254,   74,   75,  106,   70,   71,   30,
   72,  465,  205,  294,  743,  149,  206,  746,  252,  207,
  747,  543,  256,  748,  258,  803,   53,  516,   36,   53,
  330,  304,   30,  466,   73,  446,  206,   74,   75,  207,
  587,  270,  464,   31,   67,   68,   54,  124,  125,  130,
   55,   36,   37,  305,  205,  164,  326,  779,   56,   54,
  780,   56,  331,  169,  518,  169,   31,  372,  296,  205,
  347,  447,  448,  225,  590,   37,  282,  166,  206,  166,
  655,  207,  658,  246,  661,  167,  664,  167,  137,  373,
  473,  267,  389,  206,  401,  271,  207,  168,  265,  168,
  519,  520,  410,   30,  815,  577,  138,  580,  363,  583,
   30,  586,  474,  234,  390,  143,  402,  708,   53,  711,
  824,  714,   36,  717,  411,  181,  124,  125,   32,   36,
  332,  139,  281,  144,  336,  145,  243,   31,   72,   55,
  299,   30,  169,  395,   31,  169,   37,  202,  431,  140,
   56,   32,  161,   37,  161,  751,  166,  754,  327,  166,
   36,  546,   73,  588,  167,   74,   75,  167,  203,  415,
  432,   30,  237,  429,  228,   31,  168,  479,    1,  168,
  649,  480,  652,  547,   37,  589,  162,  342,  162,  555,
   36,    2,  229,  238,  169,  377,  760,  268,  438,  169,
  440,  200,  405,  201,  376,   31,  620,  798,  166,  623,
  469,  556,  624,  421,   37,  625,  167,  205,  269,   30,
  621,  630,   32,  783,  636,  124,  125,  606,  168,   32,
  814,  161,  490,  169,  161,  491,  492,  695,   36,  705,
  461,  206,  622,  631,  207,  345,  637,  166,  512,  607,
  320,  249,  321,   31,  493,  167,  169,  185,  312,  696,
   32,   30,   37,  124,  125,  162,  378,  168,  162,  250,
   72,  164,  739,  164,  522,  387,  486,  524,  692,  313,
   36,  693,  528,  161,  741,  485,  169,  169,  503,  205,
   32,  550,  744,  544,   73,   31,  169,   74,   75,  602,
  166,  166,  488,  421,   37,  561,  742,  423,  167,  167,
  324,  487,  489,  206,  745,  205,  207,  162,  529,  530,
  168,  168,  161,  374,   45,  570,  762,  562,  628,  169,
  785,  325,  422,  187,  740,  603,  604,   46,   32,  206,
  205,  209,  207,  166,  375,  503,   72,  169,  763,  173,
  164,  167,  786,  164,   95,  596,  162,  629,  598,   70,
   71,  424,   72,  168,  206,  804,  564,  207,  761,  240,
   73,   43,  678,   74,   75,  161,  161,  816,   73,  205,
   32,   74,   75,  563,  565,  503,   73,  805,   44,   74,
   75,  571,  825,  572,  574,   47,  553,  423,  573,  817,
  638,  531,  164,  206,  205,  532,  207,  504,  277,  162,
  162,  205,   48,  205,  826,  285,  593,  640,  161,  644,
  594,  289,  422,  169,  679,  169,  278,  169,  206,  169,
  205,  207,  183,  286,  688,  206,  503,  206,  207,  290,
  207,  164,   70,   71,  421,   72,  421,  205,  421,   49,
  421,  424,  162,  148,  206,  645,  646,  207,  210,  207,
   19,  169,  165,  169,  504,  251,   50,  639,  641,   73,
  392,  206,   74,   75,  207,   70,   71,  322,   72,  323,
  690,  207,   19,  197,  165,  169,  253,   62,  169,  169,
  169,   51,  392,  205,  164,  164,   70,   71,   92,   72,
   63,  198,   73,  199,  504,   74,   75,   86,   52,  689,
  691,   93,  503,  169,  503,  291,  503,  206,  503,    0,
  207,  169,  169,   73,   87,  421,   74,   75,  421,  421,
  421,   70,   71,  292,   72,  255,  169,  164,  423,    0,
  423,  316,  423,  257,  423,   70,   71,  533,   72,  534,
  503,  107,  503,   70,   71,  504,   72,  169,   73,  317,
  421,   74,   75,  422,  328,  422,  169,  422,  108,  422,
  381,  133,   73,  456,  503,   74,   75,  503,  503,  503,
   73,  117,  329,   74,   75,   18,   19,  421,  382,  134,
    0,  457,  424,    0,  424,  481,  424,  309,  424,    0,
  310,  311,  503,  483,  118,  119,  120,  121,  122,    0,
  503,  503,  123,  482,  513,  421,  295,  124,  125,  423,
  537,  484,  423,  423,  423,  503,   70,   71,  109,   72,
  171,  504,  514,  504,  421,  504,    0,  504,  538,    0,
  539,  318,  111,  172,  422,  110,  503,  422,  422,  422,
  362,    0,  566,   73,  423,  503,   74,   75,  540,  112,
   70,   71,  568,   72,  118,  119,  120,  121,  122,  504,
  567,  504,  123,  424,  608,  414,  424,  424,  424,  422,
  569,  423,  535,  610,  536,   70,   71,   73,   72,    0,
   74,   75,  609,  504,  525,  417,  504,  504,  504,   12,
  428,  611,  418,  419,   70,   71,  422,  281,  424,  423,
   70,   71,   73,   72,  437,   74,   75,  612,  616,  613,
  618,  504,  676,  526,   70,   71,  677,   72,  423,  504,
  504,  614,  439,  615,  422,  424,  617,   73,  619,  511,
   74,   75,   70,   71,  504,   72,  521,  211,  632,   70,
   71,   73,   72,  422,   74,   75,   70,   71,  175,   72,
  213,  113,  114,  424,  212,  504,  633,  634,  680,   73,
  681,  176,   74,   75,  504,  684,   73,  214,  523,   74,
   75,  686,  424,   73,  560,  635,   74,   75,   70,   71,
  595,   72,  718,  685,   70,   71,  597,   72,  720,  687,
   70,   71,  344,   72,  766,  215,   70,   71,  767,   72,
  719,  217,  219,  195,    0,   73,  721,  244,   74,   75,
  344,   73,  216,  261,   74,   75,  196,   73,  218,  220,
   74,   75,  259,   73,  245,  263,   74,   75,  237,  237,
  262,  237,  302,  237,  280,  260,  237,  237,  237,  237,
  237,  237,  264,  370,  391,  393,  237,  281,    0,  303,
  237,  237,  237,  237,  237,  237,    0,  237,  408,  237,
  371,  392,  394,    0,  237,  237,  237,  237,  225,  225,
  467,  225,  470,  225,    0,  409,  225,  225,  225,  225,
  225,  225,    0,  548,  551,    0,  225,  468,  239,  471,
  225,  225,  225,  225,  225,  225,    0,  225,  275,  225,
  549,  552,   18,   19,  225,  225,  223,  223,  346,  223,
    0,  223,   18,   19,  223,  223,  223,  223,  223,  223,
    0,  283,   18,   19,  223,  297,  333,  335,  223,  223,
  223,  223,  223,  223,  284,  223,    0,  223,  298,  334,
  281,    0,  223,  223,  224,  224,  337,  224,  404,  224,
  406,  441,  224,  224,  224,  224,  224,  224,  682,  338,
  683,  281,  224,  407,  442,    0,  224,  224,  224,  224,
  224,  224,  460,  224,    0,  224,  462,  150,  151,    0,
  224,  224,   12,   13,  152,  281,  153,  154,  155,  463,
   17,   18,   19,  339,  364,  151,  340,  341,  789,   12,
   13,  152,  790,  153,  154,  155,  156,   17,   18,   19,
  367,  151,   21,    0,  791,   12,   13,  152,  792,  153,
  154,  155,  365,   17,   18,   19,  449,  151,    0,   21,
  808,   12,   13,  152,  809,  153,  154,  155,  368,   17,
   18,   19,  379,  454,  151,   21,    0,  810,   12,   13,
  152,  811,  153,  154,  155,  450,   17,   18,   19,  451,
  820,   21,  452,  453,  821,  118,  119,  120,  121,  122,
  494,  151,  455,  123,    0,   12,   13,  152,   21,  153,
  154,  155,    0,   17,   18,   19,  541,  151,  127,  128,
  822,   12,   13,  152,  823,  153,  154,  155,  495,   17,
   18,   19,  591,  151,    0,   21,  829,   12,   13,  152,
  830,  153,  154,  155,  542,   17,   18,   19,  383,  626,
  151,   21,    0,  831,   12,   13,  152,  832,  153,  154,
  155,  592,   17,   18,   19,   73,  835,   21,   74,   75,
  836,  118,  119,  120,  121,  122,   39,   11,  627,  123,
    0,   12,   13,  458,   21,   14,   15,   16,   11,   17,
   18,   19,   12,   13,    0,  837,   14,   15,   16,  838,
   17,   18,   19,  124,  125,   40,  118,  119,  120,  121,
  122,   21,    0,  839,  123,   11,   20,  840,    0,   12,
   13,  515,   21,   14,   15,   16,  151,   17,   18,   19,
   12,   13,  152,    0,  153,  154,  155,    0,   17,   18,
   19,  223,  224,   38,  118,  119,  120,  121,  122,   21,
    9,   10,  123,  220,  220,    0,  220,    0,  220,    0,
   21,  220,  220,  220,  220,  220,  220,  180,  182,  667,
    0,  220,  668,  669,    0,  220,  599,  498,   25,   25,
   25,   12,  220,  152,  499,  500,  154,  155,  501,  353,
  642,  498,   26,   26,   26,   12,    0,  152,  499,  500,
  154,  155,  501,  353,  700,  600,  728,  701,  702,  729,
  730,    0,  755,  768,  498,  756,  757,    0,   12,  643,
  152,  499,  500,  154,  155,  501,  353,  773,  498,   27,
   27,   27,   12,    0,  152,  499,  500,  154,  155,  501,
  353,  770,  769,  793,  771,  772,  794,  795,  186,  188,
  775,  498,    0,    0,    0,   12,  774,  152,  499,  500,
  154,  155,  501,  353,  777,  498,    0,    0,    0,   12,
    0,  152,  499,  500,  154,  155,  501,  353,    0,  776,
    0,    0,    0,    0,    0,    0,    0,  799,  498,    0,
    0,    0,   12,  778,  152,  499,  500,  154,  155,  501,
  353,  801,  498,    0,    0,    0,   12,    0,  152,  499,
  500,  154,  155,  501,  353,    0,  800,    0,    0,    0,
    0,    0,    0,    0,  827,  498,    0,    0,    0,   12,
  802,  152,  499,  500,  154,  155,  501,  353,  833,  498,
    0,    0,    0,   12,    0,  152,  499,  500,  154,  155,
  501,  353,    0,  828,    0,    0,    0,    0,    0,    0,
  392,  392,    0,    0,    0,  392,    0,  834,  392,  392,
  392,  392,  392,  392,    0,  443,  349,    0,    0,    0,
   12,    0,  392,  350,  351,   15,   16,  352,  353,  392,
  665,  349,    0,    0,    0,   12,    0,    0,  350,  351,
   15,   16,  352,  353,  444,  670,  349,    0,    0,    0,
   12,    0,    0,  350,  351,   15,   16,  352,  353,  666,
  672,  349,    0,    0,    0,   12,    0,    0,  350,  351,
   15,   16,  352,  353,  671,  674,  349,    0,    0,    0,
   12,    0,    0,  350,  351,   15,   16,  352,  353,  673,
  722,  349,    0,    0,    0,   12,    0,    0,  350,  351,
   15,   16,  352,  353,  675,  724,  349,    0,    0,    0,
   12,    0,    0,  350,  351,   15,   16,  352,  353,  723,
  764,  349,    0,    0,    0,   12,    0,    0,  350,  351,
   15,   16,  352,  353,  725,  787,  349,    0,    0,    0,
   12,    0,    0,  350,  351,   15,   16,  352,  353,  765,
  383,  383,    0,    0,    0,  383,    0,    0,  383,  383,
  383,  383,  383,  383,  788,  726,  417,    0,    0,    0,
   12,    0,    0,  418,  419,   70,   71,    0,  281,  383,
  731,  417,    0,    0,    0,   12,    0,    0,  418,  419,
   70,   71,    0,  281,  727,  733,  417,    0,    0,    0,
   12,    0,    0,  418,  419,   70,   71,    0,  281,  732,
  735,  417,    0,    0,    0,   12,    0,    0,  418,  419,
   70,   71,    0,  281,  734,  806,  417,    0,    0,    0,
   12,    0,    0,  418,  419,   70,   71,    0,  281,  736,
  818,  417,    0,    0,    0,   12,    0,    0,  418,  419,
   70,   71,    0,  281,  807,  306,   11,    0,    0,    0,
   12,    0,  314,   11,   14,   15,   16,   12,   17,  819,
    0,   14,   15,   16,    0,   17,  433,   11,    0,    0,
    0,   12,    0,    0,  307,   14,   15,   16,    0,   17,
    0,  315,    0,  475,   11,    0,    0,    0,   12,    0,
    0,    0,   14,   15,   16,  434,   17,  355,  355,    0,
    0,    0,  355,    0,    0,    0,  355,  355,  355,    0,
  355,    0,  476,    0,    0,    0,    0,    0,    0,    0,
  497,  498,    0,    0,    0,   12,  355,  152,  499,  500,
  154,  155,  501,  353,  557,  498,    0,    0,    0,   12,
    0,  152,  499,  500,  154,  155,  501,  353,  502,    0,
    0,    0,    0,    0,    0,    0,  706,  498,    0,    0,
    0,   12,  558,  152,  499,  500,  154,  155,  501,  353,
  709,  498,    0,    0,    0,   12,    0,  152,  499,  500,
  154,  155,  501,  353,  707,    0,    0,    0,    0,    0,
    0,    0,  712,  498,    0,    0,    0,   12,  710,  152,
  499,  500,  154,  155,  501,  353,  715,  498,    0,    0,
    0,   12,    0,  152,  499,  500,  154,  155,  501,  353,
  713,    0,    0,    0,    0,    0,    0,    0,  749,  498,
    0,    0,    0,   12,  716,  152,  499,  500,  154,  155,
  501,  353,  752,  498,    0,    0,    0,   12,    0,  152,
  499,  500,  154,  155,  501,  353,  750,    0,    0,    0,
    0,    0,    0,    0,  796,  498,    0,    0,    0,   12,
  753,  152,  499,  500,  154,  155,  501,  353,  812,  498,
    0,    0,    0,   12,    0,  152,  499,  500,  154,  155,
  501,  353,  797,    0,    0,    0,    0,    0,    0,  348,
  349,    0,    0,    0,   12,    0,  813,  350,  351,   15,
   16,  352,  353,  575,  349,    0,    0,    0,   12,    0,
    0,  350,  351,   15,   16,  352,  353,  354,    0,    0,
    0,    0,    0,    0,  578,  349,    0,    0,    0,   12,
    0,  576,  350,  351,   15,   16,  352,  353,  581,  349,
    0,    0,    0,   12,    0,    0,  350,  351,   15,   16,
  352,  353,  579,    0,    0,    0,    0,    0,    0,  584,
  349,    0,    0,    0,   12,    0,  582,  350,  351,   15,
   16,  352,  353,  647,  349,    0,    0,    0,   12,    0,
    0,  350,  351,   15,   16,  352,  353,  585,    0,    0,
    0,    0,    0,    0,  650,  349,    0,    0,    0,   12,
    0,  648,  350,  351,   15,   16,  352,  353,  703,  349,
    0,    0,    0,   12,    0,    0,  350,  351,   15,   16,
  352,  353,  651,    0,    0,    0,    0,    0,    0,  737,
  349,    0,    0,    0,   12,    0,  704,  350,  351,   15,
   16,  352,  353,  416,  417,    0,    0,    0,   12,    0,
    0,  418,  419,   70,   71,  349,  281,  738,    0,   12,
    0,    0,  350,  351,   15,   16,  352,  353,  653,  417,
    0,  420,    0,   12,    0,    0,  418,  419,   70,   71,
    0,  281,    0,  517,  656,  417,    0,    0,    0,   12,
    0,    0,  418,  419,   70,   71,  654,  281,  659,  417,
    0,    0,    0,   12,    0,    0,  418,  419,   70,   71,
    0,  281,  657,    0,  662,  417,    0,    0,    0,   12,
    0,    0,  418,  419,   70,   71,  660,  281,  758,  417,
    0,    0,    0,   12,    0,    0,  418,  419,   70,   71,
    0,  281,  663,    0,  781,  417,    0,    0,    0,   12,
    0,    0,  418,  419,   70,   71,  759,  281,  232,   11,
    0,    0,    0,   12,    0,  241,   11,   14,   15,   16,
   12,   17,  782,    0,   14,   15,   16,    0,   17,  343,
   11,    0,    0,    0,   12,    0,  233,    0,   14,   15,
   16,    0,   17,  242,    0,  385,   11,    0,    0,    0,
   12,    0,    0,    0,   14,   15,   16,  344,   17,  349,
    0,    0,    0,   12,    0,    0,  350,  351,   15,   16,
  352,  353,    0,  386,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  412,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          8,
    9,   10,  256,  256,   87,   56,   54,  105,  284,  382,
  242,  321,  284,  323,   48,  256,   50,  256,    8,    9,
   10,  105,  256,  365,  258,  558,  368,  256,  256,  105,
  284,  256,  273,    8,    9,   10,  289,  266,  267,  256,
  269,  105,    8,    9,   10,  270,  271,  256,  317,  288,
  256,  256,  256,  457,  102,  256,  284,  654,  334,  260,
  657,  256,  338,  660,  293,  269,  663,  296,  297,  278,
  274,  288,  106,  278,  256,  126,  110,  256,  260,  274,
  256,  129,  130,  292,  293,  256,  256,  293,  256,  293,
  296,  297,  296,  297,  256,  274,  105,  145,  266,  267,
  256,  269,  278,    8,    9,   10,  256,  276,  256,  378,
  514,  194,  344,  292,  293,  277,  199,  288,    8,    9,
   10,  269,  256,  293,  256,  293,  296,  297,  296,  297,
  105,  407,  288,  256,  266,  267,  256,  269,  256,  256,
  269,  256,  452,  293,  278,  293,  296,  297,  296,  297,
  276,  274,  269,  495,  386,  238,  259,  256,  278,  256,
  278,  293,  759,  214,  296,  297,  273,  266,  267,  178,
  269,  256,  269,  288,  707,  269,  293,  710,  212,  296,
  713,  491,  216,  716,  218,  782,  256,  463,  178,  256,
  256,  256,  201,  278,  293,  256,  293,  296,  297,  296,
  542,  256,  412,  178,  266,  267,  273,  292,  293,  259,
  277,  201,  178,  278,  269,  105,  256,  750,  288,  273,
  753,  288,  288,  321,  256,  323,  201,  256,  262,  269,
  313,  292,  293,  274,  544,  201,  245,  321,  293,  323,
  613,  296,  615,  296,  617,  321,  619,  323,  256,  278,
  256,  227,  256,  293,  256,  231,  296,  321,  277,  323,
  292,  293,  256,  272,  797,  534,  274,  536,  319,  538,
  279,  540,  278,  178,  278,  256,  278,  681,  256,  683,
  813,  685,  272,  687,  278,  256,  292,  293,  178,  279,
  299,  256,  269,  274,  303,  276,  201,  272,  269,  277,
  273,  310,  400,  277,  279,  403,  272,  256,  256,  274,
  288,  201,  321,  279,  323,  719,  400,  721,  294,  403,
  310,  256,  293,  256,  400,  296,  297,  403,  277,  380,
  278,  340,  256,  384,  256,  310,  400,  256,  256,  403,
  609,  260,  611,  278,  310,  278,  321,  278,  323,  256,
  340,  269,  274,  277,  452,  331,  729,  256,  392,  457,
  394,  256,  371,  258,  256,  340,  576,  771,  452,  579,
  418,  278,  582,  382,  340,  585,  452,  269,  277,  388,
  256,  256,  272,  756,  256,  292,  293,  256,  452,  279,
  794,  400,  256,  491,  403,  259,  260,  256,  388,  668,
  409,  293,  278,  278,  296,  310,  278,  491,  459,  278,
  256,  256,  258,  388,  278,  491,  514,  256,  256,  278,
  310,  430,  388,  292,  293,  400,  274,  491,  403,  274,
  269,  321,  701,  323,  468,  340,  256,  471,  648,  277,
  430,  651,  256,  452,  256,  278,  544,  545,  457,  269,
  340,  499,  256,  259,  293,  430,  554,  296,  297,  256,
  544,  545,  256,  472,  430,  516,  278,  382,  544,  545,
  256,  447,  448,  293,  278,  269,  296,  452,  292,  293,
  544,  545,  491,  256,  256,  278,  256,  256,  256,  587,
  256,  277,  382,  256,  704,  292,  293,  269,  388,  293,
  269,  256,  296,  587,  277,  514,  269,  605,  278,  256,
  400,  587,  278,  403,  269,  549,  491,  278,  552,  266,
  267,  382,  269,  587,  293,  256,  256,  296,  738,  199,
  293,  256,  260,  296,  297,  544,  545,  256,  293,  269,
  430,  296,  297,  519,  520,  554,  293,  278,  273,  296,
  297,  256,  256,  529,  530,  256,  501,  472,  256,  278,
  256,  256,  452,  293,  269,  260,  296,  457,  256,  544,
  545,  269,  273,  269,  278,  256,  256,  256,  587,  256,
  260,  256,  472,  681,  260,  683,  274,  685,  293,  687,
  269,  296,  256,  274,  256,  293,  605,  293,  296,  274,
  296,  491,  266,  267,  613,  269,  615,  269,  617,  256,
  619,  472,  587,  103,  293,  292,  293,  296,  145,  256,
  256,  719,  256,  721,  514,  256,  273,  603,  604,  293,
  256,  293,  296,  297,  296,  266,  267,  256,  269,  258,
  256,  278,  278,  256,  278,  743,  256,  256,  746,  747,
  748,  256,  278,  269,  544,  545,  266,  267,  256,  269,
  269,  274,  293,  276,  554,  296,  297,  256,  273,  645,
  646,  269,  681,  771,  683,  256,  685,  293,  687,   -1,
  296,  779,  780,  293,  273,  694,  296,  297,  697,  698,
  699,  266,  267,  274,  269,  256,  794,  587,  613,   -1,
  615,  256,  617,  256,  619,  266,  267,  256,  269,  258,
  719,  256,  721,  266,  267,  605,  269,  815,  293,  274,
  729,  296,  297,  613,  256,  615,  824,  617,  273,  619,
  256,  256,  293,  256,  743,  296,  297,  746,  747,  748,
  293,  256,  274,  296,  297,  270,  271,  756,  274,  274,
   -1,  274,  613,   -1,  615,  256,  617,  256,  619,   -1,
  259,  260,  771,  256,  279,  280,  281,  282,  283,   -1,
  779,  780,  287,  274,  256,  784,  256,  292,  293,  694,
  256,  274,  697,  698,  699,  794,  266,  267,  256,  269,
  256,  681,  274,  683,  803,  685,   -1,  687,  274,   -1,
  256,  256,  256,  269,  694,  273,  815,  697,  698,  699,
  256,   -1,  256,  293,  729,  824,  296,  297,  274,  273,
  266,  267,  256,  269,  279,  280,  281,  282,  283,  719,
  274,  721,  287,  694,  256,  256,  697,  698,  699,  729,
  274,  756,  256,  256,  258,  266,  267,  293,  269,   -1,
  296,  297,  274,  743,  256,  257,  746,  747,  748,  261,
  256,  274,  264,  265,  266,  267,  756,  269,  729,  784,
  266,  267,  293,  269,  256,  296,  297,  256,  256,  258,
  256,  771,  256,  285,  266,  267,  260,  269,  803,  779,
  780,  256,  256,  258,  784,  756,  274,  293,  274,  256,
  296,  297,  266,  267,  794,  269,  256,  256,  256,  266,
  267,  293,  269,  803,  296,  297,  266,  267,  256,  269,
  256,  296,  297,  784,  273,  815,  274,  256,  256,  293,
  258,  269,  296,  297,  824,  256,  293,  273,  256,  296,
  297,  256,  803,  293,  256,  274,  296,  297,  266,  267,
  256,  269,  256,  274,  266,  267,  256,  269,  256,  274,
  266,  267,  256,  269,  256,  256,  266,  267,  260,  269,
  274,  256,  256,  256,   -1,  293,  274,  256,  296,  297,
  274,  293,  273,  256,  296,  297,  269,  293,  273,  273,
  296,  297,  256,  293,  273,  256,  296,  297,  256,  257,
  273,  259,  256,  261,  256,  269,  264,  265,  266,  267,
  268,  269,  273,  256,  256,  256,  274,  269,   -1,  273,
  278,  279,  280,  281,  282,  283,   -1,  285,  256,  287,
  273,  273,  273,   -1,  292,  293,  294,  295,  256,  257,
  256,  259,  256,  261,   -1,  273,  264,  265,  266,  267,
  268,  269,   -1,  256,  256,   -1,  274,  273,  256,  273,
  278,  279,  280,  281,  282,  283,   -1,  285,  256,  287,
  273,  273,  270,  271,  292,  293,  256,  257,  256,  259,
   -1,  261,  270,  271,  264,  265,  266,  267,  268,  269,
   -1,  256,  270,  271,  274,  256,  256,  256,  278,  279,
  280,  281,  282,  283,  269,  285,   -1,  287,  269,  269,
  269,   -1,  292,  293,  256,  257,  256,  259,  256,  261,
  256,  256,  264,  265,  266,  267,  268,  269,  256,  269,
  258,  269,  274,  269,  269,   -1,  278,  279,  280,  281,
  282,  283,  256,  285,   -1,  287,  256,  256,  257,   -1,
  292,  293,  261,  262,  263,  269,  265,  266,  267,  269,
  269,  270,  271,  256,  256,  257,  259,  260,  256,  261,
  262,  263,  260,  265,  266,  267,  285,  269,  270,  271,
  256,  257,  291,   -1,  256,  261,  262,  263,  260,  265,
  266,  267,  284,  269,  270,  271,  256,  257,   -1,  291,
  256,  261,  262,  263,  260,  265,  266,  267,  284,  269,
  270,  271,  256,  256,  257,  291,   -1,  256,  261,  262,
  263,  260,  265,  266,  267,  285,  269,  270,  271,  256,
  256,  291,  259,  260,  260,  279,  280,  281,  282,  283,
  256,  257,  285,  287,   -1,  261,  262,  263,  291,  265,
  266,  267,   -1,  269,  270,  271,  256,  257,  294,  295,
  256,  261,  262,  263,  260,  265,  266,  267,  284,  269,
  270,  271,  256,  257,   -1,  291,  256,  261,  262,  263,
  260,  265,  266,  267,  284,  269,  270,  271,  256,  256,
  257,  291,   -1,  256,  261,  262,  263,  260,  265,  266,
  267,  285,  269,  270,  271,  293,  256,  291,  296,  297,
  260,  279,  280,  281,  282,  283,  256,  257,  285,  287,
   -1,  261,  262,  256,  291,  265,  266,  267,  257,  269,
  270,  271,  261,  262,   -1,  256,  265,  266,  267,  260,
  269,  270,  271,  292,  293,  285,  279,  280,  281,  282,
  283,  291,   -1,  256,  287,  257,  285,  260,   -1,  261,
  262,  256,  291,  265,  266,  267,  257,  269,  270,  271,
  261,  262,  263,   -1,  265,  266,  267,   -1,  269,  270,
  271,  266,  267,  285,  279,  280,  281,  282,  283,  291,
    6,    7,  287,  256,  257,   -1,  259,   -1,  261,   -1,
  291,  264,  265,  266,  267,  268,  269,  124,  125,  256,
   -1,  274,  259,  260,   -1,  278,  256,  257,    8,    9,
   10,  261,  285,  263,  264,  265,  266,  267,  268,  269,
  256,  257,    8,    9,   10,  261,   -1,  263,  264,  265,
  266,  267,  268,  269,  256,  285,  256,  259,  260,  259,
  260,   -1,  256,  256,  257,  259,  260,   -1,  261,  285,
  263,  264,  265,  266,  267,  268,  269,  256,  257,    8,
    9,   10,  261,   -1,  263,  264,  265,  266,  267,  268,
  269,  256,  285,  256,  259,  260,  259,  260,  127,  128,
  256,  257,   -1,   -1,   -1,  261,  285,  263,  264,  265,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,  263,  264,  265,  266,  267,  268,  269,   -1,  285,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,  285,  263,  264,  265,  266,  267,  268,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,
  265,  266,  267,  268,  269,   -1,  285,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
  285,  263,  264,  265,  266,  267,  268,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,
  268,  269,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,   -1,  285,  264,  265,
  266,  267,  268,  269,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,  278,  264,  265,  266,  267,  268,  269,  285,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,  285,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,  285,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,  285,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,  285,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,  285,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,  285,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,  285,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,  265,  266,  267,  268,  269,  285,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,  268,  269,  285,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,  265,  266,  267,   -1,  269,  285,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,   -1,  269,  285,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,  265,  266,  267,   -1,  269,  285,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,   -1,  269,  285,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,  264,  265,  266,  267,   -1,  269,  285,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  265,
  266,  267,   -1,  269,  285,  256,  257,   -1,   -1,   -1,
  261,   -1,  256,  257,  265,  266,  267,  261,  269,  285,
   -1,  265,  266,  267,   -1,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  285,  265,  266,  267,   -1,  269,
   -1,  285,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,
   -1,   -1,  265,  266,  267,  285,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,   -1,  265,  266,  267,   -1,
  269,   -1,  285,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,  261,  285,  263,  264,  265,
  266,  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,  263,  264,  265,  266,  267,  268,  269,  284,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,  284,  263,  264,  265,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,  263,  264,  265,
  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,  261,  284,  263,
  264,  265,  266,  267,  268,  269,  256,  257,   -1,   -1,
   -1,  261,   -1,  263,  264,  265,  266,  267,  268,  269,
  284,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,  284,  263,  264,  265,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,  263,
  264,  265,  266,  267,  268,  269,  284,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
  284,  263,  264,  265,  266,  267,  268,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,  263,  264,  265,  266,  267,
  268,  269,  284,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  257,   -1,   -1,   -1,  261,   -1,  284,  264,  265,  266,
  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
   -1,  264,  265,  266,  267,  268,  269,  284,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
   -1,  284,  264,  265,  266,  267,  268,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,   -1,  264,  265,  266,  267,
  268,  269,  284,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  257,   -1,   -1,   -1,  261,   -1,  284,  264,  265,  266,
  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
   -1,  264,  265,  266,  267,  268,  269,  284,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,
   -1,  284,  264,  265,  266,  267,  268,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,   -1,  264,  265,  266,  267,
  268,  269,  284,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  257,   -1,   -1,   -1,  261,   -1,  284,  264,  265,  266,
  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
   -1,  264,  265,  266,  267,  257,  269,  284,   -1,  261,
   -1,   -1,  264,  265,  266,  267,  268,  269,  256,  257,
   -1,  284,   -1,  261,   -1,   -1,  264,  265,  266,  267,
   -1,  269,   -1,  285,  256,  257,   -1,   -1,   -1,  261,
   -1,   -1,  264,  265,  266,  267,  284,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,   -1,  264,  265,  266,  267,
   -1,  269,  284,   -1,  256,  257,   -1,   -1,   -1,  261,
   -1,   -1,  264,  265,  266,  267,  284,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,   -1,  264,  265,  266,  267,
   -1,  269,  284,   -1,  256,  257,   -1,   -1,   -1,  261,
   -1,   -1,  264,  265,  266,  267,  284,  269,  256,  257,
   -1,   -1,   -1,  261,   -1,  256,  257,  265,  266,  267,
  261,  269,  284,   -1,  265,  266,  267,   -1,  269,  256,
  257,   -1,   -1,   -1,  261,   -1,  284,   -1,  265,  266,
  267,   -1,  269,  284,   -1,  256,  257,   -1,   -1,   -1,
  261,   -1,   -1,   -1,  265,  266,  267,  284,  269,  257,
   -1,   -1,   -1,  261,   -1,   -1,  264,  265,  266,  267,
  268,  269,   -1,  284,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  284,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=297;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"IF","THEN","ELSE","END_IF","OUT","FUN","RETURN","BREAK","WHEN",
"WHILE","FOR","CONTINUE","ID","I32","F32","PUNTO","PARENT_A","PARENT_C",
"COMILLA","COMA","DOSPUNTOS","PUNTOCOMA","IGUAL","MAYOR","MENOR","MENORIGUAL",
"MAYORIGUAL","LLAVE_A","LLAVE_C","EXCL","DIST","ASIG","CADENA","COMENT","CONST",
"SUMA","RESTA","MULT","DIV","ENTERO","FLOAT",
};
final static String yyrule[] = {
"$accept : program",
"program : nombre_program LLAVE_A bloque_sentencias LLAVE_C",
"program : nombre_program LLAVE_A bloque_sentencias error",
"program : nombre_program error bloque_sentencias LLAVE_C",
"program : error LLAVE_A bloque_sentencias LLAVE_C",
"nombre_program : ID",
"bloque_sentencias :",
"bloque_sentencias : bloque_sentencias sentencia PUNTOCOMA",
"bloque_sentencias : bloque_sentencias sentencia error",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_decl_datos",
"sentencia_declarativa : sentencia_decl_fun",
"sentencia_declarativa : lista_const",
"tipo : I32",
"tipo : F32",
"constante_for : ENTERO",
"constante_for : RESTA ENTERO",
"constante_for : ID",
"sentencia_decl_datos : tipo list_var",
"sentencia_decl_datos : tipo error",
"list_var : list_var COMA ID",
"list_var : ID",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro error",
"encabezado_fun : FUN ID PARENT_A parametro error",
"encabezado_fun : FUN ID PARENT_A error",
"encabezado_fun : FUN ID PARENT_A parametro COMA error",
"encabezado_fun : FUN ID error",
"encabezado_fun : FUN error",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun error",
"sentencia_decl_fun : encabezado_fun error",
"cuerpo_fun :",
"cuerpo_fun : cuerpo_fun sentencias_fun PUNTOCOMA",
"cuerpo_fun : cuerpo_fun sentencias_fun error",
"sentencias_fun : sentencia_decl_datos",
"sentencias_fun : sentencia_decl_fun",
"sentencias_fun : lista_const",
"sentencias_fun : asignacion",
"sentencias_fun : llamado_func",
"sentencias_fun : sentencia_if_fun",
"sentencias_fun : sentencia_out",
"sentencias_fun : sentencia_when_fun",
"sentencias_fun : sentencia_for_fun",
"sentencias_fun : sentencia_while_fun",
"sentencias_fun : retorno",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_fun : IF PARENT_A condicion error",
"sentencia_if_fun : IF PARENT_A error",
"sentencia_if_fun : IF error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE sentencias_fun error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_fun : WHEN PARENT_A condicion error",
"sentencia_when_fun : WHEN PARENT_A error",
"sentencia_when_fun : WHEN error",
"etiqueta : ID DOSPUNTOS",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sentencias_fun_break",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_fun : etiqueta WHILE PARENT_A condicion error",
"sentencia_while_fun : etiqueta WHILE PARENT_A error",
"sentencia_while_fun : etiqueta WHILE error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_fun : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_fun : WHILE PARENT_A condicion error",
"sentencia_while_fun : WHILE PARENT_A error",
"sentencia_while_fun : WHILE error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C sentencias_fun_break",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C sentencias_fun_break",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C sentencias_fun_break",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG constante_for error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID ASIG error",
"sentencia_for_fun : etiqueta FOR PARENT_A ID error",
"sentencia_for_fun : etiqueta FOR PARENT_A error",
"sentencia_for_fun : etiqueta FOR error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for PUNTOCOMA error",
"sentencia_for_fun : FOR PARENT_A ID ASIG constante_for error",
"sentencia_for_fun : FOR PARENT_A ID ASIG error",
"sentencia_for_fun : FOR PARENT_A ID error",
"sentencia_for_fun : FOR PARENT_A error",
"sentencia_for_fun : FOR error",
"cuerpo_fun_break :",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break PUNTOCOMA",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break error",
"sentencias_fun_break : asignacion",
"sentencias_fun_break : sentencia_if_break_fun",
"sentencias_fun_break : sentencia_out",
"sentencias_fun_break : sentencia_when_break_fun",
"sentencias_fun_break : sentencia_while_fun",
"sentencias_fun_break : sentencia_for_fun",
"sentencias_fun_break : CONTINUE tag",
"sentencias_fun_break : BREAK",
"sentencias_fun_break : BREAK cte",
"sentencias_fun_break : retorno",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN sentencias_fun_break",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_break_fun : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_break_fun : WHEN PARENT_A condicion error",
"sentencia_when_break_fun : WHEN PARENT_A error",
"sentencia_when_break_fun : WHEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break_fun : IF PARENT_A condicion error",
"sentencia_if_break_fun : IF PARENT_A error",
"sentencia_if_break_fun : IF error",
"retorno : RETURN PARENT_A expresion PARENT_C",
"retorno : RETURN PARENT_A expresion error",
"retorno : RETURN PARENT_A error",
"retorno : RETURN error",
"parametro : tipo ID",
"parametro : tipo error",
"lista_const : CONST lista_asignacion",
"lista_asignacion : lista_asignacion COMA asignacion_const",
"lista_asignacion : asignacion_const",
"asignacion_const : ID ASIG cte",
"asignacion_const : ID ASIG error",
"asignacion_const : ID error",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : sentencia_if",
"sentencia_ejecutable : sentencia_out",
"sentencia_ejecutable : sentencia_when",
"sentencia_ejecutable : sentencia_for",
"sentencia_ejecutable : sentencia_while",
"sentencia_ejecutable : llamado_func",
"asignacion : ID ASIG expresion",
"asignacion : ID error",
"asignacion : ID ASIG error",
"expresion : expresion SUMA termino",
"expresion : expresion RESTA termino",
"expresion : termino",
"expresion : sentencia_for_asig ELSE cte",
"expresion : sentencia_while_asig ELSE cte",
"expresion : expresion SUMA error",
"expresion : expresion RESTA error",
"expresion : sentencia_for_asig ELSE error",
"expresion : sentencia_while_asig ELSE error",
"termino : termino MULT factor",
"termino : termino DIV factor",
"termino : factor",
"termino : termino MULT error",
"termino : termino DIV error",
"factor : ID",
"factor : cte",
"factor : llamado_func",
"cte : ENTERO",
"cte : FLOAT",
"cte : RESTA ENTERO",
"cte : RESTA FLOAT",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A bloque_sent_eje_asig LLAVE_C",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A bloque_sent_eje_asig LLAVE_C",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C sent_eje_asig",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C sent_eje_asig",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A bloque_sent_eje_asig error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A bloque_sent_eje_asig error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for PUNTOCOMA error",
"sentencia_for_asig : FOR PARENT_A ID ASIG constante_for error",
"sentencia_for_asig : FOR PARENT_A ID ASIG error",
"sentencia_for_asig : FOR PARENT_A ID error",
"sentencia_for_asig : FOR PARENT_A error",
"sentencia_for_asig : FOR error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_sent_eje_asig LLAVE_C",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C sent_eje_asig",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_sent_eje_asig error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while_asig : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while_asig : WHILE PARENT_A condicion error",
"sentencia_while_asig : WHILE PARENT_A error",
"sentencia_while_asig : WHILE error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C error",
"sentencia_if_asig : IF PARENT_A condicion error",
"sentencia_if_asig : IF PARENT_A error",
"sentencia_if_asig : IF error",
"sentencia_when_asig : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C",
"sentencia_when_asig : WHEN PARENT_A condicion PARENT_C THEN sent_eje_asig",
"sentencia_when_asig : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig error",
"sentencia_when_asig : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_asig : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_asig : WHEN PARENT_A condicion error",
"sentencia_when_asig : WHEN PARENT_A error",
"sentencia_when_asig : WHEN error",
"bloque_sent_eje_asig :",
"bloque_sent_eje_asig : bloque_sent_eje_asig sent_eje_asig PUNTOCOMA",
"sent_eje_asig : asignacion",
"sent_eje_asig : sentencia_if_asig",
"sent_eje_asig : sentencia_out",
"sent_eje_asig : sentencia_when_asig",
"sent_eje_asig : sentencia_while_asig",
"sent_eje_asig : sentencia_for_asig",
"sent_eje_asig : BREAK cte",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if : IF PARENT_A condicion PARENT_C error",
"sentencia_if : IF PARENT_A condicion error",
"sentencia_if : IF PARENT_A error",
"sentencia_if : IF error",
"condicion : expresion comparacion expresion",
"condicion : expresion comparacion error",
"condicion : expresion error",
"comparacion : IGUAL",
"comparacion : MAYOR",
"comparacion : MENOR",
"comparacion : MENORIGUAL",
"comparacion : MAYORIGUAL",
"comparacion : DIST",
"bloque_ejecutable :",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable PUNTOCOMA",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"sentencia_out : OUT PARENT_A CADENA PARENT_C",
"sentencia_out : OUT PARENT_A CADENA error",
"sentencia_out : OUT PARENT_A error",
"sentencia_out : OUT error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN sentencia_ejecutable",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when : WHEN PARENT_A condicion error",
"sentencia_when : WHEN PARENT_A error",
"sentencia_when : WHEN error",
"sentencia_while : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C ejecutables_break_continue",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"sentencia_while : WHILE PARENT_A condicion PARENT_C error",
"sentencia_while : WHILE PARENT_A condicion error",
"sentencia_while : WHILE PARENT_A error",
"sentencia_while : WHILE error",
"bloque_break_continue :",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue PUNTOCOMA",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue",
"ejecutables_break_continue : asignacion",
"ejecutables_break_continue : sentencia_if_break",
"ejecutables_break_continue : sentencia_out",
"ejecutables_break_continue : sentencia_when_break",
"ejecutables_break_continue : sentencia_while",
"ejecutables_break_continue : sentencia_for",
"ejecutables_break_continue : CONTINUE tag",
"ejecutables_break_continue : BREAK",
"tag :",
"tag : DOSPUNTOS ID",
"tag : DOSPUNTOS error",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN ejecutables_break_continue",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C THEN error",
"sentencia_when_break : WHEN PARENT_A condicion PARENT_C error",
"sentencia_when_break : WHEN PARENT_A condicion error",
"sentencia_when_break : WHEN PARENT_A error",
"sentencia_when_break : WHEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion error",
"sentencia_if_break : IF PARENT_A error",
"sentencia_if_break : IF error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C ejecutables_break_continue",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C ejecutables_break_continue",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C ejecutables_break_continue",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG constante_for error",
"sentencia_for : etiqueta FOR PARENT_A ID ASIG error",
"sentencia_for : etiqueta FOR PARENT_A ID error",
"sentencia_for : etiqueta FOR PARENT_A error",
"sentencia_for : etiqueta FOR error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C LLAVE_A bloque_break_continue error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA error",
"sentencia_for : FOR PARENT_A ID ASIG constante_for error",
"sentencia_for : FOR PARENT_A ID ASIG error",
"sentencia_for : FOR PARENT_A ID error",
"sentencia_for : FOR PARENT_A error",
"sentencia_for : FOR error",
"param_real : cte",
"param_real : ID",
"llamado_func : ID PARENT_A param_real COMA param_real PARENT_C",
"llamado_func : ID PARENT_A param_real PARENT_C",
"llamado_func : ID PARENT_A PARENT_C",
"llamado_func : ID PARENT_A param_real COMA param_real error",
"llamado_func : ID PARENT_A param_real error",
"llamado_func : ID PARENT_A error",
"llamado_func : ID PARENT_A param_real COMA error",
};

//#line 2088 ".\gramatica.y"
private NodoControl raiz;
private Map<String,ArbolSintactico> funciones = new HashMap<String,ArbolSintactico>();
private static HashMap<Integer,ArrayList<String>> erroresSintacticos = new HashMap<Integer,ArrayList<String>>();
public String ambitoActual = "Global";
private List<String> tipoActual = new ArrayList<String>();
private boolean hayReturn = false;

void yyerror(String mensaje){
        if (erroresSintacticos.get(AnalizadorLexico.getLineaAct())== null){
                ArrayList<String> mnsj = new ArrayList<String>();
                mnsj.add(mensaje); 
                erroresSintacticos.put(AnalizadorLexico.getLineaAct(), mnsj);
        }
        else{
                erroresSintacticos.get(AnalizadorLexico.getLineaAct()).add(mensaje);
        }
}

static HashMap<Integer,ArrayList<String>> getErroresSintacticos(){
        return erroresSintacticos;
}
void chequearRangoI32(String sval){
  String s = "2147483647";
  long l = Long.valueOf(s);
  if(Long.valueOf(sval) > l){
    yyerror("La constante esta fuera de rango");
  }
}

void chequearRangoI32Neg(String sval){
       String s = "2147483648";
        long l = Long.valueOf(s);
        if(Long.valueOf(sval) > l){
                yyerror("La constante esta fuera de rango");
  } 
}

int yylex() throws IOException{
        Token t = AnalizadorLexico.getToken();
        this.yylval = new ParserVal(t.getLexema());
        //if(t.getId() != -1){
        //  System.out.println("Id: " + t.getId()+" Lexema: " + t.getLexema());
        //}else
        //  System.out.println("TERMINO LA EJECUCION");
        return t.getId();
}
public NodoControl getRaiz(){
	return raiz;
}
public Map<String,ArbolSintactico> getFuncion(){
        return funciones;
}

void actualizarAmbito(String lex, String amb){
        TablaSimbolos.addAtributo(lex,"Ambito",amb);
}
public String getTipoActual(){
        if(!this.tipoActual.isEmpty()){
                return (this.tipoActual.get(tipoActual.size()-1));
        }
        return null;
}
public void cambiarTipoActual(String f){
        tipoActual.add(f);
}
public void removeTipoActual(){
        if(!this.tipoActual.isEmpty()){
                this.tipoActual.remove(tipoActual.size()-1);
        }
}
public String buscarAmbito(String ambitoActual,String lexema){
        String ambito = ambitoActual;
        while(!TablaSimbolos.existeSimbolo(lexema+"@"+ambito)){
                if(ambito.equals("Global")){
                        yyerror("La variable " + lexema + " no se encuentra declarada en el ambito " + ambitoActual);
                        ambito = "";
                        break;
                }else{
                        char [] a = ambito.toCharArray();
                        for (int i = a.length;i>=0;i--){
                                if(a[i-1] == '@'){
                                        ambito = ambito.substring(0,i-1);
                                        break;
                                }
                        }
                }
        }
        return ambito;
}
public String calcularFloat(String f){
        int i =0;
	char caracter=' ';
	String digito=""; //parte numerica
	String exponente=""; //parte exponencial	
	while (caracter != 'F') {
                if(i<f.length()){
                      caracter = f.charAt(i);
		        digito+= caracter;
		        i++; 
                }else{
                        return f;
                }
	}
        Double d = Double.parseDouble(digito);
	for (int j=i ; j < (f.length()); j++) {
		caracter = f.charAt(j);
		exponente += caracter;
	}
	Double e = Double.parseDouble(exponente);
	Double numero = Math.pow(d, e);
        return numero.toString();	

}
//#line 1641 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse() throws IOException
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 22 ".\gramatica.y"
{
                                                                raiz = new NodoControl("PROGRAMA",(ArbolSintactico)val_peek(1));  
                                                                TablaSimbolos.removeAtributo(val_peek(3).sval);
                                                        }
break;
case 2:
//#line 27 ".\gramatica.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba }");}
break;
case 3:
//#line 30 ".\gramatica.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba {");}
break;
case 4:
//#line 33 ".\gramatica.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba el nombre del programa");}
break;
case 6:
//#line 39 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 7:
//#line 40 ".\gramatica.y"
{
                                                        yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));
                                                        }
break;
case 8:
//#line 43 ".\gramatica.y"
{
                                yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba ;");
                        }
break;
case 9:
//#line 48 ".\gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa");}
break;
case 10:
//#line 49 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 12:
//#line 52 ".\gramatica.y"
{funciones.put((String)((ArbolSintactico)val_peek(0)).getLex(),(ArbolSintactico)val_peek(0));}
break;
case 14:
//#line 55 ".\gramatica.y"
{
            yyval = new NodoHoja("Entero");
            ((NodoHoja)yyval).setTipo("Entero");
           }
break;
case 15:
//#line 59 ".\gramatica.y"
{
            yyval = new NodoHoja("Float");
            ((NodoHoja)yyval).setTipo("Float");
           }
break;
case 18:
//#line 66 ".\gramatica.y"
{
                        String ambito=buscarAmbito(ambitoActual, val_peek(0).sval);
                        if (!TablaSimbolos.existeSimbolo(val_peek(0).sval+ "@" + ambito)){
                                yyerror("La constante '" + val_peek(0).sval + "' no fue declarada");
                        }
                        else{ 
                                if(!((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso")).equals("Constante")){
                                        yyerror(val_peek(0).sval+" debe ser una constante");
                                }
                                if(!((String)TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Tipo")).equals("Entero")){
                                        yyerror(val_peek(0).sval+" debe ser de tipo entero");
                                }   
                        }
                }
break;
case 19:
//#line 81 ".\gramatica.y"
{  System.out.println("Declaracion de datos");
                                        for (String s : ((NodoTipos)val_peek(0)).getList()){
                                                String ambito = ambitoActual;
                                                while(TablaSimbolos.existeSimbolo(s+"@"+ambito)){
                                                        if(ambito.equals("Global")){
                                                                yyerror("La variable " + s + " ya se encuentra declarada en el ambito " + ambitoActual);
                                                                ambito = "";
                                                                break;
                                                        }else{
                                                                char [] a = ambito.toCharArray();
                                                                for (int i = a.length;i>=0;i--){
                                                                        if(a[i-1] == ':'){
                                                                        ambito = ambito.substring(0,i-1);
                                                                        break;
                                                                }
                                                        }
                                                }
                                        }  
                                        if(ambito.equals(ambitoActual)){
                                                TablaSimbolos.addNuevoSimbolo(s+"@"+ambito);
                                                TablaSimbolos.addAtributo(s+"@"+ambito,"Id",TablaSimbolos.getAtributo(s,"Id"));
                                                TablaSimbolos.addAtributo(s+"@"+ambito,"Tipo",((ArbolSintactico) val_peek(1)).getTipo());
                                                TablaSimbolos.addAtributo(s+"@"+ambito,"Linea",AnalizadorLexico.getLineaAct());
                                                TablaSimbolos.addAtributo(s+"@"+ambito,"Uso","Variable");
                                                TablaSimbolos.removeAtributo(s);
                                        }
                                        

                                        }
                                        yyval = val_peek(0);
                                }
break;
case 20:
//#line 112 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("se esperaba lista de identificadores entre comas");}
break;
case 21:
//#line 115 ".\gramatica.y"
{
                            yyval=val_peek(2);
                            ((NodoTipos)yyval).add((String)val_peek(0).sval);
                            }
break;
case 22:
//#line 119 ".\gramatica.y"
{
               yyval=new NodoTipos((String)val_peek(0).sval);
              }
break;
case 23:
//#line 123 ".\gramatica.y"
{       

                                if(!TablaSimbolos.existeSimbolo(val_peek(7).sval+ "@" + ambitoActual)){
                                        yyval = new ParserVal(val_peek(7).sval);
                                        TablaSimbolos.addNuevoSimbolo(val_peek(7).sval+ "@" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(7).sval+ "@" + ambitoActual,"Uso","Funcion");
                                        TablaSimbolos.addAtributo(val_peek(7).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(7).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(7).sval);
                                        TablaSimbolos.addAtributo(val_peek(7).sval+"@"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                        TablaSimbolos.addAtributo(val_peek(7).sval +"@"+ambitoActual,"Parametro1",((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual +"@"+ val_peek(7).sval);
                                        TablaSimbolos.addAtributo(val_peek(7).sval +"@"+ambitoActual,"Parametro2",((ArbolSintactico)val_peek(3)).getLex()+ "@"+ ambitoActual +"@"+ val_peek(7).sval);
                                        ambitoActual += "@"+val_peek(7).sval;
                                        cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                        /*Agrego los parametros en la tabla de simbolos*/
                                        TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual);
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(5)).getTipo());
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual,"Uso","Variable");
                                        TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual);
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Uso","Variable");

                                }else{
                                        yyerror("La funcion " + val_peek(7).sval + " ya existe en el ambito " + ambitoActual);
                                        ambitoActual += "@"+val_peek(7).sval;
                                }
                        
                        }
break;
case 24:
//#line 150 ".\gramatica.y"
{
                        if(!TablaSimbolos.existeSimbolo(val_peek(5).sval+ "@" + ambitoActual)){
                                yyval = new ParserVal(val_peek(5).sval);
                                TablaSimbolos.addNuevoSimbolo(val_peek(5).sval+ "@" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(5).sval+ "@" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(5).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(5).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(5).sval);
                                TablaSimbolos.addAtributo(val_peek(5).sval+"@"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addAtributo(val_peek(5).sval +"@"+ambitoActual,"Parametro1", ((ArbolSintactico)val_peek(3)).getLex()+ "@"+ ambitoActual +"@"+ val_peek(5).sval);
                                ambitoActual += "@"+val_peek(5).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                /*Agrego el parametro en la tabla de simbolos*/
                                TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual);
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Uso","Variable");

                        }else{
                                yyerror("La funcion " + val_peek(5).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += "@"+val_peek(5).sval;
                        }
                }
break;
case 25:
//#line 171 ".\gramatica.y"
{
                        if(!TablaSimbolos.existeSimbolo(val_peek(4).sval+ "@" + ambitoActual)){
                                yyval = new ParserVal(val_peek(4).sval);
                                TablaSimbolos.addNuevoSimbolo(val_peek(4).sval+ "@" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(4).sval+ "@" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(4).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(4).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(4).sval);
                                TablaSimbolos.addAtributo(val_peek(4).sval+"@"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                ambitoActual += "@"+val_peek(4).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());

                        }else{
                                yyerror("La funcion " + val_peek(4).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += "@"+val_peek(4).sval;
                        }
                }
break;
case 26:
//#line 188 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 27:
//#line 191 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 28:
//#line 194 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 29:
//#line 197 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba :");}
break;
case 30:
//#line 200 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba :");}
break;
case 31:
//#line 203 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba :");}
break;
case 32:
//#line 206 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba )");}
break;
case 33:
//#line 209 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba )");}
break;
case 34:
//#line 212 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba )");}
break;
case 35:
//#line 215 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba otro parametro");}
break;
case 36:
//#line 218 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba (");}
break;
case 37:
//#line 221 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba un nombre de funcion");}
break;
case 38:
//#line 226 ".\gramatica.y"
{
                                System.out.println("Declaracion de Funcion");
                                yyval = new NodoControl("Funcion@"+val_peek(3).sval,(ArbolSintactico)val_peek(1));
                                char [] a = ambitoActual.toCharArray();
                                for (int i = a.length;i>=0;i--){
                                        if(a[i-1] == '@'){
                                                ambitoActual = ambitoActual.substring(0,i-1);
                                                break;
                                        }
                                }
                                removeTipoActual();
                        }
break;
case 39:
//#line 238 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 40:
//#line 240 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 41:
//#line 243 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 42:
//#line 244 ".\gramatica.y"
{yyval=new NodoComun("Sentencia_Funcion", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 43:
//#line 245 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 44:
//#line 248 ".\gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa Datos");}
break;
case 45:
//#line 249 ".\gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa Funcion");}
break;
case 46:
//#line 250 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 47:
//#line 251 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 48:
//#line 252 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 49:
//#line 253 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 50:
//#line 254 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 51:
//#line 255 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 52:
//#line 256 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 53:
//#line 257 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 54:
//#line 258 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 55:
//#line 260 ".\gramatica.y"
{System.out.println("Sentencia IF");
                                yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(8),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(5)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));
                        }
break;
case 56:
//#line 263 ".\gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(6)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));}
break;
case 57:
//#line 265 ".\gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(7)),new NodoControl("else fun", (ArbolSintactico)val_peek(3))));}
break;
case 58:
//#line 268 ".\gramatica.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF FUN", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        }
break;
case 59:
//#line 271 ".\gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF_FUN",(ArbolSintactico)val_peek(10),(ArbolSintactico) new NodoComun("Cuerpo if fun",new NodoControl("Then fun",(ArbolSintactico) val_peek(6)),new NodoControl("else fun", (ArbolSintactico)val_peek(2))));}
break;
case 60:
//#line 274 ".\gramatica.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF FUN", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );}
break;
case 61:
//#line 276 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 62:
//#line 278 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 63:
//#line 280 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 64:
//#line 282 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 65:
//#line 284 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 66:
//#line 286 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 67:
//#line 288 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 68:
//#line 290 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 69:
//#line 292 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 70:
//#line 294 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 71:
//#line 297 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 72:
//#line 299 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 73:
//#line 301 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 74:
//#line 303 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 75:
//#line 305 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 76:
//#line 308 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 77:
//#line 310 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 78:
//#line 313 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 79:
//#line 315 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 80:
//#line 320 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 81:
//#line 323 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 82:
//#line 326 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 83:
//#line 328 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 84:
//#line 330 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 85:
//#line 332 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 86:
//#line 334 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion");}
break;
case 87:
//#line 336 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 88:
//#line 339 ".\gramatica.y"
{
                                yyval = new ParserVal(val_peek(1).sval);
                                if(!TablaSimbolos.existeSimbolo(val_peek(1).sval+ "@" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(1).sval+ "@" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(1).sval+ "@" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(1).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(1).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(1).sval);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(1).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 89:
//#line 352 ".\gramatica.y"
{
                                yyval = new NodoComun("While con Etiqueta Funcion",new NodoControl("Etiqueta", new NodoHoja(val_peek(11).sval)) , new NodoComun("While", (ArbolSintactico) val_peek(8), new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                                System.out.println("Sentencia WHILE con etiqueta y con llaves");
                        
                                
                        }
break;
case 90:
//#line 359 ".\gramatica.y"
{
                                System.out.println("Sentencia WHILE con etiqueta y sin llaves");
                                yyval = new NodoComun("While con Etiqueta Funcion",new NodoControl("Etiqueta", new NodoHoja(val_peek(9).sval)) , new NodoComun("While", (ArbolSintactico) val_peek(6), new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );
                        
                        }
break;
case 91:
//#line 364 ".\gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 92:
//#line 367 ".\gramatica.y"
{
                    yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");
                }
break;
case 93:
//#line 371 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 94:
//#line 373 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 95:
//#line 375 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 96:
//#line 377 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 97:
//#line 379 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 98:
//#line 381 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 99:
//#line 383 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 100:
//#line 385 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 101:
//#line 387 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 102:
//#line 389 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 103:
//#line 391 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 104:
//#line 393 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 105:
//#line 395 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 106:
//#line 397 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 107:
//#line 399 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 108:
//#line 401 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 109:
//#line 403 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 110:
//#line 405 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 111:
//#line 410 ".\gramatica.y"
{
                               String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval, id1, new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2, (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)),asignacion ))) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
        
                        }
break;
case 112:
//#line 445 ".\gramatica.y"
{
						String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");                               
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval,id1, new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2, (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion ))) );
                                
                                if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                               
                        }
break;
case 113:
//#line 480 ".\gramatica.y"
{
						String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,id1, new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2, (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion ))) );
                                
						if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                               
                        }
break;
case 114:
//#line 515 ".\gramatica.y"
{
					String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable"); 
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,id1, new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2, (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)),asignacion ))) );
                                
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 115:
//#line 551 ".\gramatica.y"
{
                               String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                System.out.println((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                }
break;
case 116:
//#line 587 ".\gramatica.y"
{
                               String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                 
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 117:
//#line 621 ".\gramatica.y"
{
                               String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 118:
//#line 655 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 119:
//#line 689 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 120:
//#line 691 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 121:
//#line 693 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 122:
//#line 696 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 123:
//#line 698 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 124:
//#line 700 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 125:
//#line 702 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 126:
//#line 704 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 127:
//#line 707 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 128:
//#line 709 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 129:
//#line 711 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 130:
//#line 713 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 131:
//#line 715 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 132:
//#line 717 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 133:
//#line 719 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 134:
//#line 721 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 135:
//#line 723 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 136:
//#line 725 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 137:
//#line 727 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 138:
//#line 729 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 139:
//#line 731 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 140:
//#line 734 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 141:
//#line 736 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 142:
//#line 738 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 143:
//#line 740 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 144:
//#line 742 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 145:
//#line 745 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 146:
//#line 747 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 147:
//#line 749 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 148:
//#line 751 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 149:
//#line 753 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 150:
//#line 755 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 151:
//#line 757 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 152:
//#line 759 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 153:
//#line 761 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 154:
//#line 763 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 155:
//#line 766 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 156:
//#line 767 ".\gramatica.y"
{yyval=new NodoComun("Sentencia_Funcion_Break", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 157:
//#line 768 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 158:
//#line 771 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 159:
//#line 772 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 160:
//#line 773 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 161:
//#line 774 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 162:
//#line 775 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 163:
//#line 776 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 164:
//#line 777 ".\gramatica.y"
{yyval = new NodoControl("Continue",(ArbolSintactico)val_peek(0));}
break;
case 165:
//#line 778 ".\gramatica.y"
{yyval = new NodoHoja("Break");}
break;
case 166:
//#line 779 ".\gramatica.y"
{yyval = new NodoControl("Break", new NodoHoja(val_peek(0).sval));}
break;
case 167:
//#line 780 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 168:
//#line 783 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 169:
//#line 786 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 170:
//#line 789 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 171:
//#line 791 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 172:
//#line 793 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 173:
//#line 795 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 174:
//#line 797 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion");}
break;
case 175:
//#line 799 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 176:
//#line 803 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 177:
//#line 808 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 178:
//#line 813 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 179:
//#line 818 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 180:
//#line 823 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 181:
//#line 828 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 182:
//#line 832 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 183:
//#line 834 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 184:
//#line 836 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 185:
//#line 838 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 186:
//#line 840 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 187:
//#line 843 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 188:
//#line 845 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 189:
//#line 847 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 190:
//#line 849 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 191:
//#line 851 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 192:
//#line 854 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 193:
//#line 856 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 194:
//#line 859 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 195:
//#line 861 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 196:
//#line 864 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 197:
//#line 866 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 198:
//#line 868 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 199:
//#line 870 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 200:
//#line 872 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 201:
//#line 875 ".\gramatica.y"
{yyval = new NodoControl("Retorno", (ArbolSintactico)val_peek(1));
                                                String tipoRet = ((ArbolSintactico)val_peek(1)).getTipo();
                                                if(!ambitoActual.equals("Global")){
                                                        String tipoFun = getTipoActual();
                                                        if(!tipoRet.equals(tipoFun)){
                                                                yyerror("El retorno debe ser del mismo tipo que el retorno de la funcion.");
                                                        }
                                                }else{
                                                        yyerror("El retorno puede estar solo dentro de una funcion.");
                                                }
                                        }
break;
case 202:
//#line 886 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba )");}
break;
case 203:
//#line 888 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion");}
break;
case 204:
//#line 890 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion entre ( )");}
break;
case 205:
//#line 894 ".\gramatica.y"
{    yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(1)).getTipo());
}
break;
case 206:
//#line 897 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba identificador");}
break;
case 207:
//#line 901 ".\gramatica.y"
{System.out.println("Declaracion de Constante/s");}
break;
case 210:
//#line 907 ".\gramatica.y"
{ 
                                if(TablaSimbolos.existeSimbolo(val_peek(2).sval+"@"+ambitoActual)){
                                        yyerror("La variable " + val_peek(2).sval + " se encuentra declarada en el ambito " + ambitoActual);
                                }else{
                                        TablaSimbolos.addNuevoSimbolo(val_peek(2).sval+"@"+ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(2).sval,"Id"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Tipo",TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Linea",AnalizadorLexico.getLineaAct());
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Uso","Constante");
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Valor", val_peek(0));
                                }
                        }
break;
case 211:
//#line 919 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba una constante");}
break;
case 212:
//#line 921 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba una asignacion =:");}
break;
case 213:
//#line 924 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 214:
//#line 925 ".\gramatica.y"
{yyval = val_peek(0); }
break;
case 215:
//#line 926 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 216:
//#line 927 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 217:
//#line 928 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 218:
//#line 929 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 219:
//#line 930 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 220:
//#line 932 ".\gramatica.y"
{
                                        System.out.println("Asignacion");
                                        String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                                        NodoHoja hoja = new NodoHoja(val_peek(2).sval+"@"+ambito);
                                        hoja.setUso((String)TablaSimbolos.getAtributo(val_peek(2).sval+"@"+ambito, "Uso"));
                                        hoja.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval, hoja , (ArbolSintactico) val_peek(0));

                                        String tipoS1 = "";
                                        if(!ambito.equals("")){
                                                if(((String)TablaSimbolos.getAtributo(val_peek(2).sval+"@"+ambito, "Uso")).equals("Variable")){
                                                        tipoS1 = (String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo");
                                                        ((ArbolSintactico)yyval).setTipo(tipoS1);
                                                }
                                                else {
                                                        yyerror(val_peek(2).sval+" no es una variable.");
                                                }
                                        }
                                        String tipoS3 = ((ArbolSintactico)val_peek(0)).getTipo();
                                        if(!(tipoS1.equals(tipoS3))){
                                                yyerror("No se puede realizar una asignacion con tipos diferentes.");
                                        }
                                        
                                }
break;
case 221:
//#line 956 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba =:");}
break;
case 222:
//#line 958 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion");}
break;
case 223:
//#line 961 ".\gramatica.y"
{     
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));

                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una suma con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                        
                                 }
break;
case 224:
//#line 971 ".\gramatica.y"
{
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una resta con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                 }
break;
case 225:
//#line 980 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 226:
//#line 981 ".\gramatica.y"
{
                                        NodoHoja cte = new NodoHoja(val_peek(0).sval);
                                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        yyval = new NodoComun("For como expresion",(ArbolSintactico)val_peek(2),cte);
                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));     
                                       
                                        }
break;
case 227:
//#line 988 ".\gramatica.y"
{
                                        NodoHoja cte = new NodoHoja(val_peek(0).sval);
                                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        yyval = new NodoComun("While como expresion",(ArbolSintactico)val_peek(2),cte);
                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo")); 
                                        
                                        }
break;
case 228:
//#line 995 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un termino");}
break;
case 229:
//#line 997 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un termino");}
break;
case 230:
//#line 999 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un constante");}
break;
case 231:
//#line 1001 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un constante");}
break;
case 232:
//#line 1005 ".\gramatica.y"
{ 
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una multiplicacion con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 233:
//#line 1014 ".\gramatica.y"
{
                                        yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una division con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 234:
//#line 1023 ".\gramatica.y"
{
                  yyval = val_peek(0);
                 }
break;
case 235:
//#line 1026 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un factor");}
break;
case 236:
//#line 1028 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un factor");}
break;
case 237:
//#line 1031 ".\gramatica.y"
{
                String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                if((!ambito.equals(""))){
                        if(((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso")).equals("Variable")
                        || ((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso")).equals("Constante")){
                                yyval = new NodoHoja(val_peek(0).sval+"@"+ambito);
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Tipo"));
                                ((ArbolSintactico)yyval).setUso((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso"));
                        }
                        else{
                                yyerror(val_peek(0).sval+" no es una variable");
                        }
                }else{
                        yyval = new NodoHoja("Error");
                }
           }
break;
case 238:
//#line 1047 ".\gramatica.y"
{
                yyval = new NodoHoja(val_peek(0).sval);
                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                ((ArbolSintactico)yyval).setUso("Constante");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Uso","Constante");
              }
break;
case 239:
//#line 1054 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 240:
//#line 1056 ".\gramatica.y"
{  chequearRangoI32(val_peek(0).sval);}
break;
case 241:
//#line 1057 ".\gramatica.y"
{  }
break;
case 244:
//#line 1062 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                System.out.println((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For en asignacion",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }

                }
break;
case 245:
//#line 1098 ".\gramatica.y"
{
                               String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For en asignacion",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }

                        }
break;
case 246:
//#line 1132 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For en asignacion",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                
if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }

                        }
break;
case 247:
//#line 1166 ".\gramatica.y"
{
					String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For en asignacion",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                
                               if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }

                        }
break;
case 248:
//#line 1200 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 249:
//#line 1202 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 250:
//#line 1204 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 251:
//#line 1207 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 252:
//#line 1209 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 253:
//#line 1211 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 254:
//#line 1213 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 255:
//#line 1215 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 256:
//#line 1218 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 257:
//#line 1220 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 258:
//#line 1222 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 259:
//#line 1224 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 260:
//#line 1226 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 261:
//#line 1228 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 262:
//#line 1230 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 263:
//#line 1232 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 264:
//#line 1234 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 265:
//#line 1236 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 266:
//#line 1240 ".\gramatica.y"
{
                        yyval = new NodoComun("While Asignacion", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 267:
//#line 1243 ".\gramatica.y"
{
                        yyval = new NodoComun("While Asignacion", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");}
break;
case 268:
//#line 1246 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 269:
//#line 1248 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 270:
//#line 1250 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 271:
//#line 1252 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 272:
//#line 1254 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 273:
//#line 1256 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 274:
//#line 1258 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 275:
//#line 1260 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 276:
//#line 1262 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 277:
//#line 1265 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                                                                                                                                }
break;
case 278:
//#line 1269 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");}
break;
case 279:
//#line 1272 ".\gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                                                                                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");}
break;
case 280:
//#line 1274 ".\gramatica.y"
{yyval = new NodoComun("IF",new NodoControl("Condicion", (ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                                                                                        System.out.println("Sentencia IF sin corchetes y sin else");}
break;
case 281:
//#line 1276 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF con corchetes y else");}
break;
case 282:
//#line 1279 ".\gramatica.y"
{
                                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                                        System.out.println("Sentencia IF con corchetes y sin else");}
break;
case 283:
//#line 1282 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 284:
//#line 1284 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 285:
//#line 1286 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 286:
//#line 1288 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 287:
//#line 1290 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 288:
//#line 1293 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 289:
//#line 1295 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 290:
//#line 1297 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 291:
//#line 1299 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 292:
//#line 1301 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 293:
//#line 1304 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 294:
//#line 1306 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 295:
//#line 1309 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 296:
//#line 1311 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 297:
//#line 1314 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 298:
//#line 1316 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 299:
//#line 1318 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 300:
//#line 1320 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 301:
//#line 1322 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 302:
//#line 1325 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When Asignacion",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 303:
//#line 1328 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When Asignacion",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 304:
//#line 1331 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } en el when");}
break;
case 305:
//#line 1333 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { en el when");}
break;
case 306:
//#line 1335 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then en el when");}
break;
case 307:
//#line 1337 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) en el when");}
break;
case 308:
//#line 1339 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion en el when");}
break;
case 309:
//#line 1341 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( en el when");}
break;
case 310:
//#line 1344 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 311:
//#line 1345 ".\gramatica.y"
{yyval=new NodoComun("Bloque Ejecutable Asignacion", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 312:
//#line 1347 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 313:
//#line 1348 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 314:
//#line 1349 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 315:
//#line 1350 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 316:
//#line 1351 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 317:
//#line 1352 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 318:
//#line 1353 ".\gramatica.y"
{NodoHoja cte = new NodoHoja(val_peek(0).sval);
                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                        yyval = new NodoControl("Break", cte);}
break;
case 319:
//#line 1357 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                                                                                                                                }
break;
case 320:
//#line 1361 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");}
break;
case 321:
//#line 1364 ".\gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                                                                                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");}
break;
case 322:
//#line 1366 ".\gramatica.y"
{yyval = new NodoComun("IF",new NodoControl("Condicion", (ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                                                                                        System.out.println("Sentencia IF sin corchetes y sin else");}
break;
case 323:
//#line 1368 ".\gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF con corchetes y else");}
break;
case 324:
//#line 1371 ".\gramatica.y"
{
                                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                                        System.out.println("Sentencia IF con corchetes y sin else");}
break;
case 325:
//#line 1374 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 326:
//#line 1376 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 327:
//#line 1378 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 328:
//#line 1380 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 329:
//#line 1382 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 330:
//#line 1385 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 331:
//#line 1387 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 332:
//#line 1389 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 333:
//#line 1391 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 334:
//#line 1393 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 335:
//#line 1396 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 336:
//#line 1398 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 337:
//#line 1401 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 338:
//#line 1403 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 339:
//#line 1406 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 340:
//#line 1408 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 341:
//#line 1410 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 342:
//#line 1412 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 343:
//#line 1414 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 344:
//#line 1420 ".\gramatica.y"
{
                        yyval= new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                        ((ArbolSintactico)yyval).setUso("Condicion");
                        if (!((((ArbolSintactico)val_peek(2)).getTipo()).equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                               yyerror("error en la comparacion entre expresiones de distintos tipos");
                        }
                }
break;
case 345:
//#line 1428 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba otra expresion para comparar.");}
break;
case 346:
//#line 1430 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un tipo de comparacion.");}
break;
case 347:
//#line 1433 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 348:
//#line 1434 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 349:
//#line 1435 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 350:
//#line 1436 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 351:
//#line 1437 ".\gramatica.y"
{yyval= val_peek(0);}
break;
case 352:
//#line 1438 ".\gramatica.y"
{yyval=val_peek(0);}
break;
case 353:
//#line 1440 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 354:
//#line 1441 ".\gramatica.y"
{
                                                                yyval=new NodoComun("Bloque Ejecutable", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));
                                                                }
break;
case 355:
//#line 1444 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 356:
//#line 1447 ".\gramatica.y"
{
                        yyval = new NodoControl(val_peek(3).sval, (ArbolSintactico) new NodoHoja(val_peek(1).sval));
                        System.out.println("Sentencia OUT");}
break;
case 357:
//#line 1450 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 358:
//#line 1452 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una CADENA");}
break;
case 359:
//#line 1454 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 360:
//#line 1457 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(5), (ArbolSintactico) val_peek(1));
                        System.out.println("Sentencia WHEN con llaves");}
break;
case 361:
//#line 1460 ".\gramatica.y"
{
                        yyval = (ArbolSintactico) new NodoComun("When",(ArbolSintactico) val_peek(3), (ArbolSintactico) val_peek(0));
                        System.out.println("Sentencia WHEN sin llaves");}
break;
case 362:
//#line 1463 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } en el when");}
break;
case 363:
//#line 1465 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { en el when");}
break;
case 364:
//#line 1467 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then en el when");}
break;
case 365:
//#line 1469 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) en el when");}
break;
case 366:
//#line 1471 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion en el when");}
break;
case 367:
//#line 1473 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( en el when");}
break;
case 368:
//#line 1477 ".\gramatica.y"
{
                                yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(11).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4))) );
                        
                        }
break;
case 369:
//#line 1481 ".\gramatica.y"
{
                        yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(9).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2))) );
                        
                        }
break;
case 370:
//#line 1485 ".\gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(8), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(1) , (ArbolSintactico) val_peek(4)) );
                        System.out.println("Sentencia WHILE con llaves");}
break;
case 371:
//#line 1488 ".\gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(6), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", (ArbolSintactico) val_peek(0) , (ArbolSintactico) val_peek(2)) );
                        System.out.println("Sentencia WHILE sin llaves");}
break;
case 372:
//#line 1491 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 373:
//#line 1493 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 374:
//#line 1495 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 375:
//#line 1497 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 376:
//#line 1499 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 377:
//#line 1501 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 378:
//#line 1503 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 379:
//#line 1505 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 380:
//#line 1507 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 381:
//#line 1510 ".\gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 382:
//#line 1511 ".\gramatica.y"
{
                yyval = new NodoComun("Bloque Break con Continue",(ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));
                }
break;
case 383:
//#line 1514 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba ;");}
break;
case 384:
//#line 1518 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 385:
//#line 1519 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 386:
//#line 1520 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 387:
//#line 1521 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 388:
//#line 1522 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 389:
//#line 1523 ".\gramatica.y"
{yyval = val_peek(0);}
break;
case 390:
//#line 1524 ".\gramatica.y"
{yyval = new NodoControl("Continue",(ArbolSintactico)val_peek(0));}
break;
case 391:
//#line 1525 ".\gramatica.y"
{yyval = new NodoControl("Break",(ArbolSintactico)new NodoHoja("Fin"));}
break;
case 392:
//#line 1527 ".\gramatica.y"
{yyval = new NodoHoja("Fin");}
break;
case 393:
//#line 1528 ".\gramatica.y"
{String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        yyval = new NodoControl("Tag", new NodoHoja(val_peek(0).sval) );
                        if(!ambito.equals("")){
                                if(!TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Uso").equals("Etiqueta")){
                                        yyerror(val_peek(0).sval + " no es una etiqueta.");
                                }
                        }else{
                                yyerror("La etiqueta " + val_peek(0).sval + " no esta declarada.");
                        }
                        }
break;
case 394:
//#line 1538 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un identificador");}
break;
case 395:
//#line 1542 ".\gramatica.y"
{System.out.println("Sentencia WHEN");}
break;
case 396:
//#line 1543 ".\gramatica.y"
{System.out.println("Sentencia WHEN");}
break;
case 397:
//#line 1544 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } en el when");}
break;
case 398:
//#line 1546 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { en el when");}
break;
case 399:
//#line 1548 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then en el when");}
break;
case 400:
//#line 1550 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) en el when");}
break;
case 401:
//#line 1552 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion en el when");}
break;
case 402:
//#line 1554 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( en el when");}
break;
case 403:
//#line 1558 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 404:
//#line 1563 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 405:
//#line 1568 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 406:
//#line 1573 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 407:
//#line 1578 ".\gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 408:
//#line 1583 ".\gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 409:
//#line 1587 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 410:
//#line 1589 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 411:
//#line 1591 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 412:
//#line 1593 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 413:
//#line 1595 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 414:
//#line 1598 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 415:
//#line 1600 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 416:
//#line 1602 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 417:
//#line 1604 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 418:
//#line 1606 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 419:
//#line 1609 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 420:
//#line 1611 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 421:
//#line 1614 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 422:
//#line 1616 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 423:
//#line 1619 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 424:
//#line 1621 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 425:
//#line 1623 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 426:
//#line 1625 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 427:
//#line 1627 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 428:
//#line 1631 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval, id1, new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2, (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)),asignacion ))) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 429:
//#line 1666 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");                               
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(16).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(12).sval,id1, new NodoHoja(val_peek(11).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2, (ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion ))) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                     
                        }
break;
case 430:
//#line 1701 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,id1, new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2, (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion ))) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 431:
//#line 1736 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable"); 
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(14).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(10).sval,id1, new NodoHoja(val_peek(9).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2, (ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)),asignacion ))) );
                            
					if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 432:
//#line 1772 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                System.out.println((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }

                }
break;
case 433:
//#line 1808 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(13).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(4).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(4).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(5).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(13).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(13).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(9).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(9).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(12).sval,id1,new NodoHoja(val_peek(11).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(8).sval,id2,(ArbolSintactico)val_peek(7))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(1)), asignacion )) );
                                
						if (!TablaSimbolos.existeSimbolo(val_peek(13).sval+ "@" + buscarAmbito(ambitoActual, val_peek(13).sval))){
                                        yyerror("La variable '" + val_peek(13).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(13).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(13).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(9).sval.equals(val_peek(13).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 434:
//#line 1842 ".\gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 435:
//#line 1876 ".\gramatica.y"
{
						String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", (ArbolSintactico)val_peek(0)), asignacion)) );
                                
                                if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + ambitoActual,"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                
                        }
break;
case 436:
//#line 1910 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 437:
//#line 1912 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 438:
//#line 1914 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 439:
//#line 1917 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 440:
//#line 1919 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 441:
//#line 1921 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 442:
//#line 1923 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 443:
//#line 1925 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 444:
//#line 1928 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 445:
//#line 1930 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 446:
//#line 1932 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 447:
//#line 1934 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 448:
//#line 1936 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 449:
//#line 1938 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 450:
//#line 1940 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 451:
//#line 1942 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 452:
//#line 1944 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 453:
//#line 1946 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 454:
//#line 1948 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 455:
//#line 1950 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 456:
//#line 1952 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 457:
//#line 1955 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 458:
//#line 1957 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 459:
//#line 1959 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 460:
//#line 1961 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 461:
//#line 1963 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 462:
//#line 1966 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 463:
//#line 1968 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 464:
//#line 1970 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 465:
//#line 1972 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 466:
//#line 1974 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 467:
//#line 1976 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 468:
//#line 1978 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 469:
//#line 1980 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 470:
//#line 1982 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 471:
//#line 1984 ".\gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 472:
//#line 1988 ".\gramatica.y"
{
                        yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                }
break;
case 473:
//#line 1993 ".\gramatica.y"
{yyval=new NodoHoja(val_peek(0).sval);
                        String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        if(!ambito.equals("")){
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Tipo"));
                        }
                     }
break;
case 474:
//#line 2000 ".\gramatica.y"
{
                                                        yyval=new NodoComun("llamado funcion",(ArbolSintactico)val_peek(3),(ArbolSintactico)val_peek(1));
                                                        String ambito = buscarAmbito(ambitoActual,val_peek(5).sval);
                                                        if (!ambito.equals("") ){
                                                                if( !TablaSimbolos.getAtributo(val_peek(5).sval+"@"+ambito,"Uso").equals("Funcion") ){
                                                                        yyerror("La funcion "+val_peek(5).sval+" no fue declarada");
                                                                }else{
                                                                        String par1 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +"@"+ ambito,"Parametro1");
                                                                        String par2 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +"@"+ ambito,"Parametro2");
                                                                        if(par1 != null)
                                                                                if(par2 != null){
                                                                                        String tipoS3 = (String) ((ArbolSintactico) val_peek(3) ).getTipo();
                                                                                        if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") ) )){
                                                                                                String nombreS3 = ((ArbolSintactico) val_peek(3)).getLex();
                                                                                                yyerror("El tipo del parametro "+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                                                                        }
                                                                                        String tipoS5 = (String) ((ArbolSintactico) val_peek(1)).getTipo();
                                                                                        if( !(tipoS5.equals((String)TablaSimbolos.getAtributo(par2,"Tipo") ))){
                                                                                                String nombreS5 = ((ArbolSintactico) val_peek(1)).getLex();
                                                                                                yyerror("El tipo del parametro "+ nombreS5+" no coincide con el tipo declarado en la funcion.");
                                                                                        }
                                                                                }else{
                                                                                        yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                                }
                                                                        else{
                                                                                yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                        }
                                                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(5).sval +"@"+ ambito,"Tipo"));
                                                                }
                                                        }
                                                }
break;
case 475:
//#line 2031 ".\gramatica.y"
{System.out.println("Llamado fun 1 parametro");
                yyval=new NodoComun("llamado funcion",(ArbolSintactico)val_peek(1),new NodoHoja("Un solo parametro"));
            String ambito = buscarAmbito(ambitoActual,val_peek(3).sval);
            if (!ambito.equals("")){
                if (!TablaSimbolos.getAtributo(val_peek(3).sval+"@"+ambito,"Uso").equals("Funcion")){
                        yyerror("La funcion "+val_peek(3).sval+" no fue declarada");
                }else{
                        String par1 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +"@"+ ambito,"Parametro1");
                        String par2 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +"@"+ ambito,"Parametro2");
                        if(par2 ==null){
                                if(par1!=null){
                                        String tipoS3 = (String) ((ArbolSintactico) val_peek(1) ).getTipo();
                                        if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") )) ){
                                                String nombreS3 = ((ArbolSintactico) val_peek(1)).getLex();
                                                yyerror("El tipo del parametro "+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                        }
                                }else{
                                        yyerror("La funcion esta declarada sin parametros.");
                                }
                        }else{
                                yyerror("La funcion esta declarada con dos parametros.");
                        }
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(3).sval +"@"+ ambito,"Tipo"));
                }
            }
        }
break;
case 476:
//#line 2057 ".\gramatica.y"
{yyval=new NodoHoja("llamado funcion sin parametros");
                String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                if (!ambito.equals("") ){
                        if (!TablaSimbolos.getAtributo(val_peek(2).sval+"@"+ambito,"Uso").equals("Funcion")){
                                yyerror("La funcion "+val_peek(2).sval+" no fue declarada");
                                
                        }else{
                                String par1 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Parametro1");
                                String par2 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Parametro2");
                                if(par2 == null){
                                        if(par1 != null){
                                                yyerror("La funcion esta declarada con un parametro.");
                                        }
                                }else{
                                        yyerror("La funcion esta declarada con dos parametros.");
                                }
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                        }
                }       
        }
break;
case 477:
//#line 2077 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 478:
//#line 2079 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 479:
//#line 2081 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 480:
//#line 2083 ".\gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba otro parametro");}
break;
//#line 5119 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 * @throws IOException
 */
public void run() throws IOException
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
