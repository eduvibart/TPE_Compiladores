//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package Principal;
import java.io.IOException;
import AnalizadorLexico.AnalizadorLexico;
import AnalizadorLexico.Token;
import GeneracionCodigoIntermedio.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Stack;

//#line 28 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short IF=257;
public final static short THEN=258;
public final static short ELSE=259;
public final static short END_IF=260;
public final static short OUT=261;
public final static short FUN=262;
public final static short RETURN=263;
public final static short BREAK=264;
public final static short WHEN=265;
public final static short WHILE=266;
public final static short FOR=267;
public final static short CONTINUE=268;
public final static short ID=269;
public final static short I32=270;
public final static short F32=271;
public final static short PUNTO=272;
public final static short PARENT_A=273;
public final static short PARENT_C=274;
public final static short COMILLA=275;
public final static short COMA=276;
public final static short DOSPUNTOS=277;
public final static short PUNTOCOMA=278;
public final static short IGUAL=279;
public final static short MAYOR=280;
public final static short MENOR=281;
public final static short MENORIGUAL=282;
public final static short MAYORIGUAL=283;
public final static short LLAVE_A=284;
public final static short LLAVE_C=285;
public final static short EXCL=286;
public final static short DIST=287;
public final static short ASIG=288;
public final static short CADENA=289;
public final static short COMENT=290;
public final static short CONST=291;
public final static short SUMA=292;
public final static short RESTA=293;
public final static short MULT=294;
public final static short DIV=295;
public final static short ENTERO=296;
public final static short FLOAT=297;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    0,    0,    1,    2,    2,    2,    3,    3,
    4,    4,    4,    4,   10,   10,   11,   11,   11,    6,
    6,   12,   12,   13,   13,   13,   13,   13,   13,   13,
   13,   13,   13,   13,   13,   13,   13,   13,    7,    7,
    7,   15,   15,   15,   16,   16,   16,   16,   16,   16,
   16,   16,   16,   16,   16,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
   21,   21,   21,   21,   21,   21,   21,   21,   28,   23,
   23,   23,   23,   22,   22,   22,   22,   22,   22,   30,
   30,   30,   31,   31,   31,   31,   31,   31,   31,   31,
   31,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
   35,   35,   35,   35,   35,   35,   24,   24,   24,   24,
   14,   14,    8,   39,   39,   40,   40,   40,    5,    5,
    5,    5,    5,    5,   17,   17,   17,   38,   38,   38,
   38,   38,   38,   38,   38,   38,   44,   44,   44,   44,
   44,   26,   26,   26,   37,   37,   37,   37,   45,   45,
   45,   46,   46,   46,   49,   49,   49,   49,   49,   49,
   49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
   49,   49,   49,   49,   49,   49,   49,   49,   49,   47,
   47,   48,   48,   48,   48,   48,   48,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   41,   41,   41,   41,   41,   41,   41,   41,
   41,   41,   25,   25,   25,   27,   27,   27,   27,   27,
   27,   50,   50,   50,   20,   20,   20,   20,    9,    9,
    9,    9,    9,    9,    9,    9,   29,   29,   29,   29,
   29,   29,   29,   29,   32,   32,   32,   32,   32,   32,
   32,   32,   43,   43,   43,   43,   43,   43,   51,   51,
   51,   52,   52,   52,   52,   52,   52,   52,   36,   36,
   36,   53,   53,   53,   53,   53,   53,   53,   53,   53,
   53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
   53,   53,   53,   53,   53,   53,   33,   33,   33,   33,
   33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
   33,   33,   34,   34,   34,   34,   34,   34,   34,   34,
   34,   34,   34,   34,   34,   34,   34,   34,   42,   42,
   42,   42,   42,   42,   42,   42,   54,   54,   18,   18,
   18,   18,   18,   18,   18,
};
final static short yylen[] = {                            2,
    4,    4,    4,    4,    1,    0,    3,    3,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    2,    1,    2,
    2,    3,    1,    9,    7,    6,    9,    7,    6,    8,
    6,    5,    7,    5,    4,    6,    3,    2,    4,    4,
    2,    0,    3,    3,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,   11,   13,   13,    8,   13,
    9,   13,   12,   10,    9,    8,   12,   11,    9,    8,
    7,    6,    5,    4,    3,    2,   11,   10,   12,   11,
   10,    8,   10,    8,    7,    6,    3,    2,    2,    4,
    2,    4,    2,    4,    2,    4,    2,    4,    4,    0,
    3,    3,    1,    1,    1,    1,    1,    2,    1,    2,
    1,   11,   12,   12,    8,   13,    9,   13,   12,   10,
    9,    8,   12,   11,    9,    8,    7,   12,   11,   11,
   10,    6,    5,    4,    3,    2,    4,    4,    3,    2,
    2,    2,    2,    3,    1,    3,    3,    2,    1,    1,
    1,    1,    1,    1,    3,    2,    3,    3,    3,    1,
    3,    3,    3,    3,    3,    3,    3,    3,    1,    3,
    3,    1,    1,    1,    1,    1,    2,    2,    4,    2,
    4,    4,    2,    4,   12,   12,   11,    8,   13,    9,
   13,   12,   10,    9,    8,   12,   11,    9,    8,    7,
   11,   10,   12,   11,    6,    5,    4,    3,    2,    0,
    3,    1,    1,    1,    1,    1,    2,   12,   12,   11,
    8,   13,    9,   13,   12,   10,    9,    8,   12,   11,
    9,    8,    7,   11,   10,   12,   11,    6,    5,    4,
    3,    2,    3,    3,    2,    1,    1,    1,    1,    1,
    1,    0,    3,    2,    4,    4,    3,    2,   10,    8,
   10,    8,    7,    6,    3,    2,    9,    9,    8,    7,
    6,    5,    4,    3,    8,    8,    7,    6,    5,    4,
    3,    2,    4,    2,    4,    2,    4,    2,    0,    3,
    2,    1,    1,    1,    1,    1,    2,    1,    0,    2,
    2,   12,   12,   11,    8,   13,    9,   13,   12,   10,
    9,    8,   12,   11,    9,    8,    7,   11,   10,   12,
   11,    6,    5,    4,    3,    2,   14,   14,   14,   14,
   13,   13,   12,   11,   10,    9,    8,    7,    6,    5,
    4,    3,   13,   13,   13,   13,   12,   12,   11,   10,
    9,    8,    7,    6,    5,    4,    3,    2,    4,    2,
    4,    2,    4,    2,    4,    2,    1,    1,    6,    4,
    3,    6,    4,    3,    5,
};
final static short yydefred[] = {                         0,
    0,    5,    0,    0,    6,    6,    6,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   15,   16,    4,
    0,    0,    9,   10,   11,   12,   13,   14,    0,    0,
  149,  154,  151,    0,    0,    0,    0,    0,  150,  152,
  153,    3,    2,    1,  242,    0,  258,    0,   38,    0,
  266,    0,  282,    0,  358,    0,  156,    0,   89,    0,
    0,    0,  145,    8,    7,   21,   23,    0,   41,   42,
    0,    0,    0,  298,    0,    0,  289,  292,  294,  296,
  295,  284,  293,  288,  289,  286,  364,  289,  360,  366,
  289,  362,  241,    0,    0,  175,  176,  174,    0,  169,
    0,    0,  173,    0,    0,    0,    0,  257,    0,   37,
    0,  265,    0,  281,    0,  357,    0,  374,  368,  371,
  367,    0,  157,    0,  148,    0,    0,    0,    0,  274,
    0,  342,    0,  326,    0,    0,  297,    0,    0,    0,
    0,  177,  178,  240,    0,    0,    0,    0,  210,  212,
  214,  216,  215,  183,  213,  210,  180,  245,  246,  247,
  248,  249,  250,  251,    0,    0,    0,    0,    0,    0,
    0,  256,  255,   35,    0,    0,    0,    0,  280,    0,
  356,    0,  373,  370,    0,  147,  146,  144,   22,   40,
    0,    0,    0,   39,   45,   46,   47,    0,   48,   49,
   50,   51,   52,   53,   54,   55,    0,    0,    0,    0,
  273,    0,  341,    0,  325,    0,  301,  300,  283,    0,
  287,  285,  363,  359,  365,  361,  239,    0,  209,    0,
  217,    0,    0,  163,    0,  164,    0,  244,    0,  170,
  167,  171,  168,  165,  161,  166,  162,   32,    0,  142,
  141,   34,    0,    0,    0,  279,    0,  355,   19,    0,
   17,    0,  375,    0,   76,    0,  140,    0,   88,    0,
   44,   43,    0,    0,    0,  100,  103,  105,  107,  106,
  111,   91,  104,  100,   93,  100,   95,  100,   97,  272,
    0,  340,    0,  324,    0,  290,  238,  252,    0,  208,
    0,  184,  182,    0,  181,  179,   29,   26,   31,    0,
   36,    0,  264,    0,  278,    0,   18,  354,    0,  372,
  369,   75,    0,  139,    0,   87,    0,  136,    0,  110,
  108,    0,    0,    0,    0,  271,    0,  339,    0,  323,
    0,    0,  233,    0,  207,    0,  211,   28,   25,   33,
    0,  263,    0,  277,    0,  353,    0,   74,    0,  138,
  137,    0,  135,    0,   90,    0,   92,   98,   94,   99,
   96,  270,    0,  338,    0,  322,  289,    0,  228,    0,
    0,  232,    0,  221,  206,    0,   30,    0,  262,    6,
  260,  276,  275,  352,    0,   73,    0,    0,  134,    0,
  102,  101,  269,    0,  337,    0,    0,  317,    0,  227,
    0,  223,  253,  231,  252,    0,  205,  210,    0,   27,
   24,    0,  351,    0,   72,   42,    0,   86,    0,  133,
    0,  268,  267,  336,    0,  312,    0,  316,    0,  305,
  226,  252,    0,    0,  235,    0,    0,  200,    0,  261,
  259,  350,    0,    0,   71,    0,   85,    0,  132,  100,
    0,  335,    0,  311,    0,  307,  315,  289,    0,    0,
  237,    0,  230,    0,  234,  220,  195,    0,  199,    0,
  188,  349,    0,    0,   66,    0,   70,    0,   59,   84,
   42,   82,    0,  127,    0,  334,    0,  310,  289,    0,
    0,  319,    0,  225,    0,  236,  219,  229,  218,  194,
    0,  190,  198,  210,    0,  347,    0,  348,    0,   65,
    0,   61,    0,   69,   42,    0,    0,  122,    0,  126,
    0,  115,  333,    0,    0,    0,  321,    0,  314,    0,
  318,  304,  224,  222,  193,  210,    0,    0,  202,    0,
  346,  343,  345,  344,   64,   42,    0,    0,    0,   78,
    0,   83,   81,  121,    0,  117,  125,  100,    0,  331,
    0,  332,    0,  309,    0,  320,  303,  313,  302,    0,
  204,    0,  197,    0,  201,  187,    0,   80,    0,    0,
   68,    0,   77,   56,  120,  100,    0,    0,  131,    0,
  330,  327,  329,  328,  308,  306,  192,    0,  203,  186,
  196,  185,   63,    0,   79,    0,   67,    0,    0,  129,
    0,  124,    0,  130,  112,  191,  189,   62,   60,   57,
   58,  119,    0,  128,  113,  123,  114,  118,  116,
};
final static short yydgoto[] = {                          3,
    4,    8,   22,   23,   24,  195,  196,  197,   28,   29,
  262,   68,   30,  177,  129,  198,   78,   98,  201,   79,
  203,  279,  280,  281,   99,  100,  167,   34,   35,  332,
  366,   36,   37,   38,  283,  137,  103,  104,   62,   63,
   39,   80,   81,  105,  106,  107,  232,  304,  155,  342,
  138,  220,   83,  122,
};
final static short yysindex[] = {                       -21,
 -252,    0,    0, -225,    0,    0,    0, 1126, 1153,  494,
  -63,  -50,  259,   73,   81,  155,   67,    0,    0,    0,
 -208, -199,    0,    0,    0,    0,    0,    0,  410, -147,
    0,    0,    0,  119, 1808, 1541, 1555, 1574,    0,    0,
    0,    0,    0,    0,    0, -194,    0, -231,    0,  195,
    0,   18,    0, -189,    0,  454,    0,  -60,    0, -140,
 -182, -200,    0,    0,    0,    0,    0, -186,    0,    0,
  293,  350,  366,    0, -190, -222,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, -177,  349,    0,    0,    0, -105,    0,
 1821, 1832,    0,  465,  700, -149, -119,    0,  -77,    0,
  303,    0,  752,    0,   -5,    0, -158,    0,    0,    0,
    0,  302,    0,  718,    0, -205, -208, -110,  538,    0,
  -89,    0,  515,    0,  -75,  524,    0, 1661,  670, 1287,
 1302,    0,    0,    0,  512,  409,  439, -144,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  102,  186,    4,  215,  291, -196,
 -107,    0,    0,    0, -117,  561,  324,  -39,    0,  -74,
    0, -141,    0,    0,  298,    0,    0,    0,    0,    0,
  449,  453,  456,    0,    0,    0,    0, -106,    0,    0,
    0,    0,    0,    0,    0,    0, 1750, 1769, 1782, 1795,
    0,   56,    0, -123,    0,   82,    0,    0,    0, -114,
    0,    0,    0,    0,    0,    0,    0, 1722,    0,   24,
    0,  740, 1377,    0,  700,    0,  700,    0,  718,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   32,    0,
    0,    0,  117,  506,  288,    0,  460,    0,    0, -130,
    0,  -10,    0,  327,    0,   66,    0,  240,    0,  312,
    0,    0,  481,  439, -190,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  187,    0,  -98,    0,  530,    0,    0,    0,   -6,    0,
  356,    0,    0, -103,    0,    0,    0,    0,    0,  511,
    0,  357,    0,  665,    0,  562,    0,    0,  571,    0,
    0,    0,  359,    0, -161,    0,  752,    0,  371,    0,
    0, 1587, 1600, 1184, 1204,    0,  510,    0,   -1,    0,
 1614, 1437,    0,  633,    0,  666,    0,    0,    0,    0,
  241,    0,  811,    0,  387,    0,  598,    0,  744,    0,
    0,  -39,    0,  395,    0,   28,    0,    0,    0,    0,
    0,    0,  583,    0,  605,    0,    0,   63,    0,  650,
  -38,    0, 1736,    0,    0, 1676,    0,  540,    0,    0,
    0,    0,    0,    0,  422,    0, 1007,  402,    0,  805,
    0,    0,    0,  403,    0,  703, 1317,    0,  706,    0,
 1743,    0,    0,    0,    0,   72,    0,    0,   75,    0,
    0, 1115,    0, -173,    0,    0,  123,    0,  813,    0,
 1489,    0,    0,    0,  434,    0,  714,    0, 1633,    0,
    0,    0,  128, 1444,    0,  -73, 1392,    0,  733,    0,
    0,    0, -211,  634,    0,  756,    0, 1023,    0,    0,
  144,    0, -108,    0, 1647,    0,    0,    0,  156, 1458,
    0,  -22,    0,  149,    0,    0,    0,  763,    0, 1692,
    0,    0,  -37,  -17,    0,   92,    0, 1039,    0,    0,
    0,    0, 1218,    0,  788,    0,  -11,    0,    0,  159,
 1332,    0,  184,    0,  214,    0,    0,    0,    0,    0,
 1706,    0,    0,    0,  176,    0,  418,    0,  424,    0,
 1055,    0,   39,    0,    0,  179,  687,    0,  797,    0,
 1508,    0,    0,  333,  348, 1347,    0,  245,    0,  415,
    0,    0,    0,    0,    0,    0,  197, 1407,    0,  478,
    0,    0,    0,    0,    0,    0,  213, 1164, 1071,    0,
  542,    0,    0,    0, 1522,    0,    0,    0,  246,    0,
  425,    0,  430,    0,  568,    0,    0,    0,    0, 1422,
    0,  593,    0,  616,    0,    0, 1088,    0,   22,   11,
    0,  254,    0,    0,    0,    0,  260, 1238,    0,  626,
    0,    0,    0,    0,    0,    0,    0,  652,    0,    0,
    0,    0,    0,  686,    0,   53,    0,   79, 1252,    0,
  768,    0,  781,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  795,    0,    0,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  261,    0,    0,    0,    0,    0,  265,    0,    0,
    0,    0,    0,    0, 1272,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  892,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  577,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  858,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0, 1362,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  936,    0,  974,    0,  446,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  270,  275,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1475,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
    0,   14,   -4,    0, -195,   27,   30,   38,    0,  -81,
 -271,    0,    0,  120, -402, -347,   -8,   76,    0,   34,
    0, -111,   98,  166,  -13,  -44,  -96,    0,  487, -232,
 -139,  440,  533,  582,    0,  150,   -9,  -53,    0,  340,
    0,   19,   55,  877,  -90,  -87, -133,  -92,    0, -389,
  -72,  -32,    0,  344,
};
final static int YYTABLESIZE=2116;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         31,
   31,   31,   82,   86,   89,   92,  124,  113,  154,  157,
  152,  152,  139,  153,  153,  140,  178,  204,  141,    9,
   10,  339,  233,  454,  108,  444,   40,   40,   40,  176,
    6,    5,  299,   57,   25,   25,   25,   26,   26,   26,
  115,   33,   33,   33,  482,   27,   27,   27,  121,  427,
  186,  333,  470,  334,   59,  335,   64,  109,    7,  244,
   61,   93,   41,   41,   41,   60,  114,  282,  285,  287,
  289,   15,   16,  125,   94,  127,   15,   16,   65,   94,
  483,  484,  452,   32,   32,   32,  136,   95,  527,  128,
   96,   97,  150,  150,  360,   58,   95,  181,   95,   96,
   97,   96,   97,   95,  453,  126,   96,   97,   69,  170,
  492,   57,  361,  239,  258,  123,  187,  212,  165,  166,
  199,  216,  559,  241,  243,   15,   16,  259,   94,  182,
  165,  166,  292,  255,  151,  151,   70,  231,  248,  171,
  526,  152,  152,   60,  153,  153,  381,  496,  246,  271,
  144,  260,   95,  587,  261,   96,   97,  338,  189,  249,
  245,  247,  202,  296,  293,  317,  211,  308,  145,  497,
  259,  272,  176,  557,  347,  121,   15,   16,  172,   94,
  215,  256,  475,  165,  166,   95,  476,  416,   96,   97,
   15,   16,   45,   94,  260,  118,  173,  261,  277,  277,
  277,  277,  257,   95,  200,   47,   96,   97,  119,   46,
  590,  517,  519,  120,  325,  443,  301,   95,  516,   31,
   96,   97,   48,  150,  150,  327,  205,  493,  349,   94,
  362,  259,   95,  506,    1,   96,   97,  507,  518,  413,
  278,  278,  278,  278,  533,  318,   40,    2,  381,  343,
  179,  259,  323,   95,  374,  260,   96,   97,  261,  238,
  395,   33,  571,  573,  330,  151,  151,  319,  180,   15,
   16,  344,   94,  112,  381,  260,  375,  615,  261,  300,
  534,  535,   41,  401,  447,  204,   94,  307,  616,   15,
   16,  461,   94,  419,  206,  152,   95,  558,  153,   96,
   97,   18,   19,   32,  407,  402,  421,  355,  378,  435,
   95,  290,  630,   96,   97,  364,   95,  398,  408,   96,
   97,  322,   57,  277,  277,  277,  277,  445,   51,  291,
  448,   15,   16,   31,   94,  598,   53,  294,  631,   58,
  409,  424,  204,   59,   31,   52,  204,  520,  391,  446,
  521,  522,  449,   54,   60,  295,  152,  234,   95,  153,
   40,   96,   97,  619,  404,  278,  278,  278,  278,  523,
   94,   40,  309,  312,   31,   33,  204,  150,  455,   25,
  548,  463,   26,  471,   71,   72,   33,  515,  199,  152,
   27,  569,  153,  310,   95,  501,   41,   96,   97,  494,
  456,   40,   31,  422,  508,  472,  469,   41,  509,  204,
   55,  502,  580,   31,  537,  204,   33,   32,  547,  151,
  152,  495,  277,  153,  331,  597,  536,   56,   32,   40,
  202,  549,  500,  503,  560,   31,  538,   41,  150,  541,
   40,  236,  336,  542,   33,  199,  204,  204,   25,  199,
  110,   26,  581,  550,   94,   33,  561,  152,   32,   27,
  153,   31,   40,  337,  278,   41,  188,  111,  588,  543,
  240,  150,  200,  544,  582,  204,   41,   33,   95,  199,
  151,   96,   97,   94,  277,  101,   32,  202,   40,  152,
  589,  202,  153,  101,  205,  324,  387,   32,   41,  101,
  576,  599,  150,   33,  577,   15,   16,   95,   94,  617,
   96,   97,  199,  151,   49,  620,  143,  388,  199,   32,
   20,  202,  277,  600,   41,  109,  278,   50,  264,  200,
  299,  618,   95,  200,    0,   96,   97,  621,  143,  150,
  101,  101,   20,  313,  151,   32,  242,  109,  130,  199,
  199,  205,  299,  263,  202,  205,  277,  183,  174,   94,
  202,  314,  206,  200,  278,  131,  119,  326,  208,    0,
  101,  150,   18,   19,  101,  184,  175,  185,  199,  252,
   94,  151,  320,   95,    0,  205,   96,   97,  570,  277,
   95,  202,  202,   96,   97,    0,  200,  253,  278,  254,
  321,  259,  200,  572,   95,  132,  101,   96,   97,    0,
  277,  345,  350,  151,  358,  207,  259,    0,  205,  206,
  202,  134,  133,  206,  205,  260,  363,  102,  261,  346,
  351,  278,  359,  200,  200,  102,   15,   16,  135,   94,
  260,  102,  392,  261,  142,  143,  208,  208,  208,  208,
  399,    0,  278,  206,    0,  205,  205,  428,  432,    0,
  393,  209,  200,   95,  229,   66,   96,   97,  400,  101,
  578,  101,  101,  551,  579,  429,  433,  423,   67,  553,
  601,  230,  102,  102,  205,  603,  206,   15,   16,  462,
   94,  552,  206,  207,  207,  207,  207,  554,  602,   15,
   16,  243,   94,  604,  265,  101,    0,  101,  267,  116,
  210,  269,  102,    0,   95,  315,  102,   96,   97,  243,
  158,  266,  117,  206,  206,  268,   95,    0,  270,   96,
   97,   95,  316,  585,   96,   97,  328,  586,    0,  209,
  209,  209,  209,  159,  160,  161,  162,  163,  102,   43,
   11,  164,  206,  329,   12,   13,  165,  166,   14,   15,
   16,  311,   17,   18,   19,  372,  348,  227,  101,  228,
  213,  208,  208,  208,  208,   18,   19,    0,   44,  217,
   18,   19,  373,  214,   21,  340,    0,  341,  210,  210,
  210,  210,  218,  190,  191,  420,    0,  593,   12,   13,
  192,  594,  193,   15,   16,    0,   17,   18,   19,   18,
   19,  102,    0,  102,  102,    0,  250,  354,  207,  207,
  207,  207,  194,  605,    0,  101,  356,  606,   21,  251,
  148,    0,  160,  160,  101,  160,  208,  160,  403,  357,
  160,    0,  160,  160,  160,  160,    0,  102,  609,  102,
  160,  148,  610,  394,  160,  160,  160,  160,  160,  160,
  405,  160,    0,  160,  209,  209,  209,  209,  160,  160,
  208,  611,    0,  406,  101,  612,  159,  160,  161,  162,
  163,  624,    0,  207,  164,  625,  101,    0,  382,  485,
  191,  383,  384,  208,   12,   13,  192,  208,  193,   15,
   16,    0,   17,   18,   19,  410,    0,  626,  411,  412,
  102,  627,    0,  210,  210,  210,  210,  207,  486,  101,
  352,  385,  353,  386,   21,  221,   73,  208,    0,  209,
   12,    0,  208,   74,    0,   15,   16,   75,   76,    0,
  207,  628,  562,  191,  207,  629,    0,   12,   13,  192,
  101,  193,   15,   16,  222,   17,   18,   19,  434,    0,
  208,  438,    0,  209,  439,  440,  208,  102,    0,  464,
  208,  563,  465,  466,  207,    0,  102,   21,  210,  207,
    0,  159,  160,  161,  162,  163,  209,  101,  479,  164,
  209,  480,  481,  168,  169,  302,  146,  208,  208,  396,
   12,  397,    0,  147,  208,   15,   16,  207,  148,  165,
  166,  487,  210,  207,  488,  489,  102,  207,  510,  101,
  209,  511,  512,  634,  303,  209,  208,  635,  102,    0,
  159,  160,  161,  162,  163,  210,  636,  208,  164,  210,
  637,  235,  237,  530,  207,  207,  531,  532,    0,    0,
  638,  207,  564,  209,  639,  565,  566,    0,  208,  209,
  430,  102,  431,  209,    0,    0,  389,   11,  457,  210,
  458,   12,   13,  207,  210,   14,   15,   16,    0,   17,
   18,   19,    0,    0,  207,    0,    0,    0,    0,    0,
  209,  209,  102,    0,  390,    0,    0,  209,    0,    0,
    0,   21,  210,    0,    0,  207,    0,    0,  210,    0,
    0,    0,  210,  155,  155,    0,  155,    0,  155,  209,
    0,  155,    0,  155,  155,  155,  155,    0,    0,  102,
  209,  155,    0,    0,    0,  155,    0,    0,    0,  210,
  210,    0,  155,    0,    0,    0,  210,  172,  172,    0,
  172,  209,  172,    0,    0,  172,    0,  172,  172,  172,
  172,  102,    0,    0,    0,  172,    0,    0,  210,  172,
  172,  172,  172,  172,  172,    0,  172,    0,  172,  210,
    0,    0,    0,  172,  172,  172,  172,    0,    0,    0,
    0,  158,  158,    0,  158,    0,  158,    0,    0,  158,
  210,  158,  158,  158,  158,    0,    0,    0,    0,  158,
    0,    0,    0,  158,  158,  158,  158,  158,  158,    0,
  158,    0,  158,    0,    0,    0,    0,  158,  158,  159,
  159,    0,  159,    0,  159,    0,    0,  159,    0,  159,
  159,  159,  159,    0,    0,    0,    0,  159,    0,    0,
    0,  159,  159,  159,  159,  159,  159,    0,  159,    0,
  159,    0,  425,  191,    0,  159,  159,   12,   13,  192,
    0,  193,   15,   16,    0,   17,   18,   19,  490,  191,
    0,    0,    0,   12,   13,  192,    0,  193,   15,   16,
  426,   17,   18,   19,  524,  191,    0,   21,    0,   12,
   13,  192,    0,  193,   15,   16,  491,   17,   18,   19,
  555,  191,    0,   21,    0,   12,   13,  192,    0,  193,
   15,   16,  525,   17,   18,   19,  591,  191,    0,   21,
    0,   12,   13,  192,    0,  193,   15,   16,  556,   17,
   18,   19,    0,  613,  191,   21,    0,    0,   12,   13,
  192,    0,  193,   15,   16,  592,   17,   18,   19,    0,
    0,   21,    0,    0,    0,    0,    0,    0,    0,    0,
  450,   11,  614,    0,    0,   12,   13,    0,   21,   14,
   15,   16,   11,   17,   18,   19,   12,   13,    0,    0,
   14,   15,   16,    0,   17,   18,   19,    0,    0,  451,
    0,    0,    0,    0,    0,   21,    0,    0,    0,   11,
   20,    0,    0,   12,   13,    0,   21,   14,   15,   16,
  191,   17,   18,   19,   12,   13,  192,    0,  193,   15,
   16,    0,   17,   18,   19,    0,    0,   42,    0,  368,
  273,    0,    0,   21,   12,    0,  192,  274,    0,   15,
   16,  275,   76,    0,   21,    0,    0,    0,    0,  370,
  273,    0,    0,    0,   12,    0,  192,  274,  369,   15,
   16,  275,   76,  528,  273,    0,    0,    0,   12,    0,
  192,  274,    0,   15,   16,  275,   76,    0,  371,    0,
    0,    0,    0,  622,  273,    0,    0,    0,   12,    0,
  192,  274,  529,   15,   16,  275,   76,  632,  273,    0,
    0,    0,   12,    0,  192,  274,    0,   15,   16,  275,
   76,    0,  623,    0,    0,    0,    0,  299,  299,    0,
    0,    0,  299,    0,    0,  299,  633,  299,  299,  299,
  299,    0,  223,   73,    0,    0,    0,   12,    0,  299,
   74,    0,   15,   16,   75,   76,  299,  225,   73,    0,
    0,    0,   12,    0,    0,   74,    0,   15,   16,   75,
   76,  224,  436,   73,    0,    0,    0,   12,    0,    0,
   74,    0,   15,   16,   75,   76,  226,  539,   73,    0,
    0,    0,   12,    0,    0,   74,    0,   15,   16,   75,
   76,  437,  574,   73,    0,    0,    0,   12,    0,    0,
   74,    0,   15,   16,   75,   76,  540,  291,  291,    0,
    0,    0,  291,    0,    0,  291,    0,  291,  291,  291,
  291,  575,  305,  146,    0,    0,    0,   12,    0,    0,
  147,    0,   15,   16,    0,  148,  291,  477,  146,    0,
    0,    0,   12,    0,    0,  147,    0,   15,   16,    0,
  148,  306,  583,  146,    0,    0,    0,   12,    0,    0,
  147,    0,   15,   16,    0,  148,  478,  607,  146,    0,
    0,    0,   12,    0,    0,  147,    0,   15,   16,    0,
  148,  584,  379,   11,    0,    0,    0,   12,    0,  473,
   11,    0,   15,   16,   12,   17,  608,    0,    0,   15,
   16,    0,   17,  504,   11,    0,    0,    0,   12,    0,
    0,  380,    0,   15,   16,    0,   17,    0,  474,    0,
  254,  254,    0,    0,    0,  254,    0,    0,    0,    0,
  254,  254,  505,  254,  459,  273,    0,    0,    0,   12,
    0,  192,  274,    0,   15,   16,  275,   76,    0,  254,
    0,    0,    0,  567,  273,    0,    0,    0,   12,    0,
  192,  274,  460,   15,   16,  275,   76,  595,  273,    0,
    0,    0,   12,    0,  192,  274,    0,   15,   16,  275,
   76,  568,    0,    0,    0,    0,   84,   73,    0,    0,
    0,   12,    0,    0,   74,  596,   15,   16,   75,   76,
   87,   73,    0,    0,    0,   12,    0,    0,   74,    0,
   15,   16,   75,   76,   85,    0,    0,    0,    0,   90,
   73,    0,    0,    0,   12,    0,    0,   74,   88,   15,
   16,   75,   76,  273,    0,    0,    0,   12,    0,  192,
  274,    0,   15,   16,  275,   76,  273,   91,    0,    0,
   12,    0,  192,  274,    0,   15,   16,  275,   76,  376,
   73,  365,    0,    0,   12,    0,    0,   74,    0,   15,
   16,   75,   76,    0,  367,    0,    0,    0,  467,   73,
    0,    0,    0,   12,    0,    0,   74,  377,   15,   16,
   75,   76,  498,   73,    0,    0,    0,   12,    0,    0,
   74,    0,   15,   16,   75,   76,  468,   73,    0,    0,
    0,   12,    0,    0,   74,    0,   15,   16,   75,   76,
  499,  417,  146,    0,    0,    0,   12,    0,    0,  147,
    0,   15,   16,    0,  148,  219,    0,  513,  146,    0,
    0,    0,   12,    0,    0,  147,    0,   15,   16,  418,
  148,  545,  146,    0,    0,    0,   12,    0,    0,  147,
    0,   15,   16,    0,  148,  514,    0,  297,   11,    0,
    0,    0,   12,    0,    0,    0,    0,   15,   16,  546,
   17,  414,   11,    0,    0,    0,   12,    0,  441,   11,
    0,   15,   16,   12,   17,  298,  273,    0,   15,   16,
   12,   17,  192,  274,    0,   15,   16,  275,   76,  415,
    0,    0,    0,    0,    0,  273,  442,    0,    0,   12,
    0,  192,  274,  276,   15,   16,  275,   76,  273,    0,
    0,    0,   12,    0,  192,  274,    0,   15,   16,  275,
   76,  273,  284,    0,    0,   12,    0,  192,  274,    0,
   15,   16,  275,   76,   73,  286,    0,    0,   12,    0,
    0,   74,    0,   15,   16,   75,   76,  146,  288,    0,
    0,   12,    0,    0,  147,    0,   15,   16,  146,  148,
    0,   77,   12,    0,    0,  147,    0,   15,   16,    0,
  148,    0,    0,    0,  149,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  156,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          8,
    9,   10,   35,   36,   37,   38,   60,   52,  101,  102,
  101,  102,   85,  101,  102,   88,  113,  129,   91,    6,
    7,  293,  156,  426,  256,  415,    8,    9,   10,  111,
  256,  284,  228,  256,    8,    9,   10,    8,    9,   10,
   54,    8,    9,   10,  256,    8,    9,   10,   58,  397,
  256,  284,  442,  286,  277,  288,  256,  289,  284,  256,
  269,  256,    8,    9,   10,  288,  256,  207,  208,  209,
  210,  266,  267,  256,  269,  276,  266,  267,  278,  269,
  292,  293,  256,    8,    9,   10,  277,  293,  491,  276,
  296,  297,  101,  102,  256,  273,  293,  256,  293,  296,
  297,  296,  297,  293,  278,  288,  296,  297,  256,  259,
  458,  256,  274,  167,  256,  256,  126,  131,  292,  293,
  129,  135,  525,  168,  169,  266,  267,  269,  269,  288,
  292,  293,  256,  178,  101,  102,  284,  147,  256,  259,
  488,  232,  233,  288,  232,  233,  342,  256,  256,  256,
  256,  293,  293,  556,  296,  296,  297,  256,  269,  277,
  170,  171,  129,  278,  288,  296,  256,  249,  274,  278,
  269,  278,  254,  521,  278,  185,  266,  267,  256,  269,
  256,  256,  256,  292,  293,  293,  260,  383,  296,  297,
  266,  267,  256,  269,  293,  256,  274,  296,  207,  208,
  209,  210,  277,  293,  129,  256,  296,  297,  269,  273,
  558,  483,  484,  274,  268,  411,  230,  293,  256,  228,
  296,  297,  273,  232,  233,  270,  129,  460,  310,  269,
  327,  269,  293,  256,  256,  296,  297,  260,  256,  278,
  207,  208,  209,  210,  256,  256,  228,  269,  444,  256,
  256,  269,  266,  293,  256,  293,  296,  297,  296,  256,
  357,  228,  534,  535,  274,  232,  233,  278,  274,  266,
  267,  278,  269,  256,  470,  293,  278,  256,  296,  256,
  292,  293,  228,  256,  418,  397,  269,  256,  278,  266,
  267,  431,  269,  386,  129,  386,  293,  259,  386,  296,
  297,  270,  271,  228,  377,  278,  388,  316,  341,  406,
  293,  256,  260,  296,  297,  329,  293,  362,  256,  296,
  297,  256,  256,  332,  333,  334,  335,  256,  256,  274,
  256,  266,  267,  342,  269,  568,  256,  256,  260,  273,
  278,  395,  454,  277,  353,  273,  458,  256,  353,  278,
  259,  260,  278,  273,  288,  274,  447,  256,  293,  447,
  342,  296,  297,  596,  373,  332,  333,  334,  335,  278,
  269,  353,  256,  254,  383,  342,  488,  386,  256,  353,
  514,  435,  353,  256,  266,  267,  353,  480,  397,  480,
  353,  531,  480,  277,  293,  468,  342,  296,  297,  256,
  278,  383,  411,  390,  256,  278,  439,  353,  260,  521,
  256,  256,  546,  422,  256,  527,  383,  342,  511,  386,
  511,  278,  431,  511,  275,  565,  499,  273,  353,  411,
  397,  256,  465,  278,  256,  444,  278,  383,  447,  256,
  422,  256,  256,  260,  411,  454,  558,  559,  422,  458,
  256,  422,  256,  278,  269,  422,  278,  548,  383,  422,
  548,  470,  444,  277,  431,  411,  127,  273,  256,  256,
  256,  480,  397,  260,  278,  587,  422,  444,  293,  488,
  447,  296,  297,  269,  493,   46,  411,  454,  470,  580,
  278,  458,  580,   54,  397,  256,  256,  422,  444,   60,
  256,  256,  511,  470,  260,  266,  267,  293,  269,  256,
  296,  297,  521,  480,  256,  256,  256,  277,  527,  444,
  256,  488,  531,  278,  470,  256,  493,  269,  185,  454,
  256,  278,  293,  458,   -1,  296,  297,  278,  278,  548,
  101,  102,  278,  256,  511,  470,  256,  278,  256,  558,
  559,  454,  278,  256,  521,  458,  565,  256,  256,  269,
  527,  274,  397,  488,  531,  273,  269,  256,  129,   -1,
  131,  580,  270,  271,  135,  274,  274,  276,  587,  256,
  269,  548,  256,  293,   -1,  488,  296,  297,  256,  598,
  293,  558,  559,  296,  297,   -1,  521,  274,  565,  276,
  274,  269,  527,  256,  293,  256,  167,  296,  297,   -1,
  619,  256,  256,  580,  256,  129,  269,   -1,  521,  454,
  587,  256,  273,  458,  527,  293,  256,   46,  296,  274,
  274,  598,  274,  558,  559,   54,  266,  267,  273,  269,
  293,   60,  256,  296,  296,  297,  207,  208,  209,  210,
  256,   -1,  619,  488,   -1,  558,  559,  256,  256,   -1,
  274,  129,  587,  293,  256,  256,  296,  297,  274,  230,
  256,  232,  233,  256,  260,  274,  274,  256,  269,  256,
  256,  273,  101,  102,  587,  256,  521,  266,  267,  256,
  269,  274,  527,  207,  208,  209,  210,  274,  274,  266,
  267,  256,  269,  274,  256,  266,   -1,  268,  256,  256,
  129,  256,  131,   -1,  293,  256,  135,  296,  297,  274,
  256,  273,  269,  558,  559,  273,  293,   -1,  273,  296,
  297,  293,  273,  256,  296,  297,  256,  260,   -1,  207,
  208,  209,  210,  279,  280,  281,  282,  283,  167,  256,
  257,  287,  587,  273,  261,  262,  292,  293,  265,  266,
  267,  256,  269,  270,  271,  256,  256,  256,  329,  258,
  256,  332,  333,  334,  335,  270,  271,   -1,  285,  256,
  270,  271,  273,  269,  291,  256,   -1,  258,  207,  208,
  209,  210,  269,  256,  257,  256,   -1,  256,  261,  262,
  263,  260,  265,  266,  267,   -1,  269,  270,  271,  270,
  271,  230,   -1,  232,  233,   -1,  256,  256,  332,  333,
  334,  335,  285,  256,   -1,  386,  256,  260,  291,  269,
  269,   -1,  256,  257,  395,  259,  397,  261,  256,  269,
  264,   -1,  266,  267,  268,  269,   -1,  266,  256,  268,
  274,  269,  260,  256,  278,  279,  280,  281,  282,  283,
  256,  285,   -1,  287,  332,  333,  334,  335,  292,  293,
  431,  256,   -1,  269,  435,  260,  279,  280,  281,  282,
  283,  256,   -1,  397,  287,  260,  447,   -1,  256,  256,
  257,  259,  260,  454,  261,  262,  263,  458,  265,  266,
  267,   -1,  269,  270,  271,  256,   -1,  256,  259,  260,
  329,  260,   -1,  332,  333,  334,  335,  431,  285,  480,
  256,  256,  258,  258,  291,  256,  257,  488,   -1,  397,
  261,   -1,  493,  264,   -1,  266,  267,  268,  269,   -1,
  454,  256,  256,  257,  458,  260,   -1,  261,  262,  263,
  511,  265,  266,  267,  285,  269,  270,  271,  256,   -1,
  521,  256,   -1,  431,  259,  260,  527,  386,   -1,  256,
  531,  285,  259,  260,  488,   -1,  395,  291,  397,  493,
   -1,  279,  280,  281,  282,  283,  454,  548,  256,  287,
  458,  259,  260,  294,  295,  256,  257,  558,  559,  256,
  261,  258,   -1,  264,  565,  266,  267,  521,  269,  292,
  293,  256,  431,  527,  259,  260,  435,  531,  256,  580,
  488,  259,  260,  256,  285,  493,  587,  260,  447,   -1,
  279,  280,  281,  282,  283,  454,  256,  598,  287,  458,
  260,  165,  166,  256,  558,  559,  259,  260,   -1,   -1,
  256,  565,  256,  521,  260,  259,  260,   -1,  619,  527,
  256,  480,  258,  531,   -1,   -1,  256,  257,  256,  488,
  258,  261,  262,  587,  493,  265,  266,  267,   -1,  269,
  270,  271,   -1,   -1,  598,   -1,   -1,   -1,   -1,   -1,
  558,  559,  511,   -1,  284,   -1,   -1,  565,   -1,   -1,
   -1,  291,  521,   -1,   -1,  619,   -1,   -1,  527,   -1,
   -1,   -1,  531,  256,  257,   -1,  259,   -1,  261,  587,
   -1,  264,   -1,  266,  267,  268,  269,   -1,   -1,  548,
  598,  274,   -1,   -1,   -1,  278,   -1,   -1,   -1,  558,
  559,   -1,  285,   -1,   -1,   -1,  565,  256,  257,   -1,
  259,  619,  261,   -1,   -1,  264,   -1,  266,  267,  268,
  269,  580,   -1,   -1,   -1,  274,   -1,   -1,  587,  278,
  279,  280,  281,  282,  283,   -1,  285,   -1,  287,  598,
   -1,   -1,   -1,  292,  293,  294,  295,   -1,   -1,   -1,
   -1,  256,  257,   -1,  259,   -1,  261,   -1,   -1,  264,
  619,  266,  267,  268,  269,   -1,   -1,   -1,   -1,  274,
   -1,   -1,   -1,  278,  279,  280,  281,  282,  283,   -1,
  285,   -1,  287,   -1,   -1,   -1,   -1,  292,  293,  256,
  257,   -1,  259,   -1,  261,   -1,   -1,  264,   -1,  266,
  267,  268,  269,   -1,   -1,   -1,   -1,  274,   -1,   -1,
   -1,  278,  279,  280,  281,  282,  283,   -1,  285,   -1,
  287,   -1,  256,  257,   -1,  292,  293,  261,  262,  263,
   -1,  265,  266,  267,   -1,  269,  270,  271,  256,  257,
   -1,   -1,   -1,  261,  262,  263,   -1,  265,  266,  267,
  284,  269,  270,  271,  256,  257,   -1,  291,   -1,  261,
  262,  263,   -1,  265,  266,  267,  284,  269,  270,  271,
  256,  257,   -1,  291,   -1,  261,  262,  263,   -1,  265,
  266,  267,  284,  269,  270,  271,  256,  257,   -1,  291,
   -1,  261,  262,  263,   -1,  265,  266,  267,  284,  269,
  270,  271,   -1,  256,  257,  291,   -1,   -1,  261,  262,
  263,   -1,  265,  266,  267,  285,  269,  270,  271,   -1,
   -1,  291,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,  285,   -1,   -1,  261,  262,   -1,  291,  265,
  266,  267,  257,  269,  270,  271,  261,  262,   -1,   -1,
  265,  266,  267,   -1,  269,  270,  271,   -1,   -1,  285,
   -1,   -1,   -1,   -1,   -1,  291,   -1,   -1,   -1,  257,
  285,   -1,   -1,  261,  262,   -1,  291,  265,  266,  267,
  257,  269,  270,  271,  261,  262,  263,   -1,  265,  266,
  267,   -1,  269,  270,  271,   -1,   -1,  285,   -1,  256,
  257,   -1,   -1,  291,  261,   -1,  263,  264,   -1,  266,
  267,  268,  269,   -1,  291,   -1,   -1,   -1,   -1,  256,
  257,   -1,   -1,   -1,  261,   -1,  263,  264,  285,  266,
  267,  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
  263,  264,   -1,  266,  267,  268,  269,   -1,  285,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,
  263,  264,  285,  266,  267,  268,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,  263,  264,   -1,  266,  267,  268,
  269,   -1,  285,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,  264,  285,  266,  267,  268,
  269,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,  278,
  264,   -1,  266,  267,  268,  269,  285,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,  264,   -1,  266,  267,  268,
  269,  285,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  264,   -1,  266,  267,  268,  269,  285,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,  264,   -1,  266,  267,  268,
  269,  285,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  264,   -1,  266,  267,  268,  269,  285,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,  264,   -1,  266,  267,  268,
  269,  285,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  264,   -1,  266,  267,   -1,  269,  285,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,  264,   -1,  266,  267,   -1,
  269,  285,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  264,   -1,  266,  267,   -1,  269,  285,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,  264,   -1,  266,  267,   -1,
  269,  285,  256,  257,   -1,   -1,   -1,  261,   -1,  256,
  257,   -1,  266,  267,  261,  269,  285,   -1,   -1,  266,
  267,   -1,  269,  256,  257,   -1,   -1,   -1,  261,   -1,
   -1,  285,   -1,  266,  267,   -1,  269,   -1,  285,   -1,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,   -1,   -1,
  266,  267,  285,  269,  256,  257,   -1,   -1,   -1,  261,
   -1,  263,  264,   -1,  266,  267,  268,  269,   -1,  285,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,  261,   -1,
  263,  264,  284,  266,  267,  268,  269,  256,  257,   -1,
   -1,   -1,  261,   -1,  263,  264,   -1,  266,  267,  268,
  269,  284,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,  284,  266,  267,  268,  269,
  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,   -1,
  266,  267,  268,  269,  284,   -1,   -1,   -1,   -1,  256,
  257,   -1,   -1,   -1,  261,   -1,   -1,  264,  284,  266,
  267,  268,  269,  257,   -1,   -1,   -1,  261,   -1,  263,
  264,   -1,  266,  267,  268,  269,  257,  284,   -1,   -1,
  261,   -1,  263,  264,   -1,  266,  267,  268,  269,  256,
  257,  285,   -1,   -1,  261,   -1,   -1,  264,   -1,  266,
  267,  268,  269,   -1,  285,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,  261,   -1,   -1,  264,  284,  266,  267,
  268,  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,
  264,   -1,  266,  267,  268,  269,  284,  257,   -1,   -1,
   -1,  261,   -1,   -1,  264,   -1,  266,  267,  268,  269,
  284,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
   -1,  266,  267,   -1,  269,  285,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,  264,   -1,  266,  267,  284,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,   -1,  264,
   -1,  266,  267,   -1,  269,  284,   -1,  256,  257,   -1,
   -1,   -1,  261,   -1,   -1,   -1,   -1,  266,  267,  284,
  269,  256,  257,   -1,   -1,   -1,  261,   -1,  256,  257,
   -1,  266,  267,  261,  269,  284,  257,   -1,  266,  267,
  261,  269,  263,  264,   -1,  266,  267,  268,  269,  284,
   -1,   -1,   -1,   -1,   -1,  257,  284,   -1,   -1,  261,
   -1,  263,  264,  284,  266,  267,  268,  269,  257,   -1,
   -1,   -1,  261,   -1,  263,  264,   -1,  266,  267,  268,
  269,  257,  284,   -1,   -1,  261,   -1,  263,  264,   -1,
  266,  267,  268,  269,  257,  284,   -1,   -1,  261,   -1,
   -1,  264,   -1,  266,  267,  268,  269,  257,  284,   -1,
   -1,  261,   -1,   -1,  264,   -1,  266,  267,  257,  269,
   -1,  284,  261,   -1,   -1,  264,   -1,  266,  267,   -1,
  269,   -1,   -1,   -1,  284,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  284,
};
}
final static short YYFINAL=3;
final static short YYMAXTOKEN=297;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,"IF","THEN","ELSE","END_IF","OUT","FUN","RETURN","BREAK","WHEN",
"WHILE","FOR","CONTINUE","ID","I32","F32","PUNTO","PARENT_A","PARENT_C",
"COMILLA","COMA","DOSPUNTOS","PUNTOCOMA","IGUAL","MAYOR","MENOR","MENORIGUAL",
"MAYORIGUAL","LLAVE_A","LLAVE_C","EXCL","DIST","ASIG","CADENA","COMENT","CONST",
"SUMA","RESTA","MULT","DIV","ENTERO","FLOAT",
};
final static String yyrule[] = {
"$accept : program",
"program : nombre_program LLAVE_A bloque_sentencias LLAVE_C",
"program : nombre_program LLAVE_A bloque_sentencias error",
"program : nombre_program error bloque_sentencias LLAVE_C",
"program : error LLAVE_A bloque_sentencias LLAVE_C",
"nombre_program : ID",
"bloque_sentencias :",
"bloque_sentencias : bloque_sentencias sentencia PUNTOCOMA",
"bloque_sentencias : bloque_sentencias sentencia error",
"sentencia : sentencia_declarativa",
"sentencia : sentencia_ejecutable",
"sentencia_declarativa : sentencia_decl_datos",
"sentencia_declarativa : sentencia_decl_fun",
"sentencia_declarativa : lista_const",
"sentencia_declarativa : sentencia_when",
"tipo : I32",
"tipo : F32",
"constante_for : ENTERO",
"constante_for : RESTA ENTERO",
"constante_for : ID",
"sentencia_decl_datos : tipo list_var",
"sentencia_decl_datos : tipo error",
"list_var : list_var COMA ID",
"list_var : ID",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS tipo",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A PARENT_C DOSPUNTOS error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro PARENT_C error",
"encabezado_fun : FUN ID PARENT_A PARENT_C error",
"encabezado_fun : FUN ID PARENT_A parametro COMA parametro error",
"encabezado_fun : FUN ID PARENT_A parametro error",
"encabezado_fun : FUN ID PARENT_A error",
"encabezado_fun : FUN ID PARENT_A parametro COMA error",
"encabezado_fun : FUN ID error",
"encabezado_fun : FUN error",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_decl_fun : encabezado_fun LLAVE_A cuerpo_fun error",
"sentencia_decl_fun : encabezado_fun error",
"cuerpo_fun :",
"cuerpo_fun : cuerpo_fun sentencias_fun PUNTOCOMA",
"cuerpo_fun : cuerpo_fun sentencias_fun error",
"sentencias_fun : sentencia_decl_datos",
"sentencias_fun : sentencia_decl_fun",
"sentencias_fun : lista_const",
"sentencias_fun : asignacion",
"sentencias_fun : llamado_func",
"sentencias_fun : sentencia_if_fun",
"sentencias_fun : sentencia_out",
"sentencias_fun : sentencia_when_fun",
"sentencias_fun : sentencia_for_fun",
"sentencias_fun : sentencia_while_fun",
"sentencias_fun : retorno",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA ELSE sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C END_IF",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun LLAVE_C error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE LLAVE_A cuerpo_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_fun : IF PARENT_A condicion error",
"sentencia_if_fun : IF PARENT_A error",
"sentencia_if_fun : IF error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun PUNTOCOMA ELSE sentencias_fun error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE sentencias_fun PUNTOCOMA error",
"sentencia_if_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C ELSE sentencias_fun error",
"sentencia_when_fun : WHEN PARENT_A factor comparacion factor PARENT_C THEN LLAVE_A cuerpo_fun LLAVE_C",
"sentencia_when_fun : WHEN PARENT_A factor comparacion factor PARENT_C THEN sentencias_fun",
"sentencia_when_fun : WHEN PARENT_A factor comparacion factor PARENT_C THEN LLAVE_A cuerpo_fun error",
"sentencia_when_fun : WHEN PARENT_A factor comparacion factor PARENT_C THEN error",
"sentencia_when_fun : WHEN PARENT_A factor comparacion factor PARENT_C error",
"sentencia_when_fun : WHEN PARENT_A factor comparacion factor error",
"sentencia_when_fun : WHEN PARENT_A error",
"sentencia_when_fun : WHEN error",
"etiqueta : ID DOSPUNTOS",
"sentencia_while_fun : encabezado_while_etiqueta LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : encabezado_while_etiqueta sentencias_fun_break",
"sentencia_while_fun : encabezado_while LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_while_fun : encabezado_while sentencias_fun_break",
"sentencia_for_fun : encabezado_for_etiqueta LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : encabezado_for_etiqueta sentencias_fun_break",
"sentencia_for_fun : encabezado_for LLAVE_A cuerpo_fun_break LLAVE_C",
"sentencia_for_fun : encabezado_for sentencias_fun_break",
"sentencia_for_fun : encabezado_for_etiqueta LLAVE_A cuerpo_fun_break error",
"sentencia_for_fun : encabezado_for LLAVE_A cuerpo_fun_break error",
"cuerpo_fun_break :",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break PUNTOCOMA",
"cuerpo_fun_break : cuerpo_fun_break sentencias_fun_break error",
"sentencias_fun_break : asignacion",
"sentencias_fun_break : sentencia_if_break_fun",
"sentencias_fun_break : sentencia_out",
"sentencias_fun_break : sentencia_while_fun",
"sentencias_fun_break : sentencia_for_fun",
"sentencias_fun_break : CONTINUE tag",
"sentencias_fun_break : BREAK",
"sentencias_fun_break : BREAK cte",
"sentencias_fun_break : retorno",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C END_IF",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break LLAVE_C error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE LLAVE_A cuerpo_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN LLAVE_A cuerpo_fun_break LLAVE_C ELSE sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break PUNTOCOMA error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN sentencias_fun_break PUNTOCOMA ELSE sentencias_fun_break error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break_fun : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break_fun : IF PARENT_A condicion error",
"sentencia_if_break_fun : IF PARENT_A error",
"sentencia_if_break_fun : IF error",
"retorno : RETURN PARENT_A expresion PARENT_C",
"retorno : RETURN PARENT_A expresion error",
"retorno : RETURN PARENT_A error",
"retorno : RETURN error",
"parametro : tipo ID",
"parametro : tipo error",
"lista_const : CONST lista_asignacion",
"lista_asignacion : lista_asignacion COMA asignacion_const",
"lista_asignacion : asignacion_const",
"asignacion_const : ID ASIG cte",
"asignacion_const : ID ASIG error",
"asignacion_const : ID error",
"sentencia_ejecutable : asignacion",
"sentencia_ejecutable : sentencia_if",
"sentencia_ejecutable : sentencia_out",
"sentencia_ejecutable : sentencia_for",
"sentencia_ejecutable : sentencia_while",
"sentencia_ejecutable : llamado_func",
"asignacion : ID ASIG expresion",
"asignacion : ID error",
"asignacion : ID ASIG error",
"expresion : expresion SUMA termino",
"expresion : expresion RESTA termino",
"expresion : termino",
"expresion : sentencia_for_asig ELSE cte",
"expresion : sentencia_while_asig ELSE cte",
"expresion : expresion SUMA error",
"expresion : expresion RESTA error",
"expresion : sentencia_for_asig ELSE error",
"expresion : sentencia_while_asig ELSE error",
"termino : termino MULT factor",
"termino : termino DIV factor",
"termino : factor",
"termino : termino MULT error",
"termino : termino DIV error",
"factor : ID",
"factor : cte",
"factor : llamado_func",
"cte : ENTERO",
"cte : FLOAT",
"cte : RESTA ENTERO",
"cte : RESTA FLOAT",
"sentencia_for_asig : encabezado_for LLAVE_A bloque_sent_eje_asig LLAVE_C",
"sentencia_for_asig : encabezado_for sent_eje_asig",
"sentencia_for_asig : encabezado_for LLAVE_A bloque_sent_eje_asig error",
"sentencia_while_asig : encabezado_while LLAVE_A bloque_sent_eje_asig LLAVE_C",
"sentencia_while_asig : encabezado_while sent_eje_asig",
"sentencia_while_asig : encabezado_while LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C END_IF",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig LLAVE_C error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE LLAVE_A bloque_sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN sent_eje_asig PUNTOCOMA ELSE sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig PUNTOCOMA error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_sent_eje_asig LLAVE_C ELSE sent_eje_asig error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_asig : IF PARENT_A condicion PARENT_C error",
"sentencia_if_asig : IF PARENT_A condicion error",
"sentencia_if_asig : IF PARENT_A error",
"sentencia_if_asig : IF error",
"bloque_sent_eje_asig :",
"bloque_sent_eje_asig : bloque_sent_eje_asig sent_eje_asig PUNTOCOMA",
"sent_eje_asig : asignacion",
"sent_eje_asig : sentencia_if_asig",
"sent_eje_asig : sentencia_out",
"sent_eje_asig : sentencia_while_asig",
"sent_eje_asig : sentencia_for_asig",
"sent_eje_asig : BREAK cte",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C END_IF",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable LLAVE_C error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE LLAVE_A bloque_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN sentencia_ejecutable PUNTOCOMA ELSE sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable PUNTOCOMA error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_ejecutable LLAVE_C ELSE sentencia_ejecutable error",
"sentencia_if : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if : IF PARENT_A condicion PARENT_C error",
"sentencia_if : IF PARENT_A condicion error",
"sentencia_if : IF PARENT_A error",
"sentencia_if : IF error",
"condicion : expresion comparacion expresion",
"condicion : expresion comparacion error",
"condicion : expresion error",
"comparacion : IGUAL",
"comparacion : MAYOR",
"comparacion : MENOR",
"comparacion : MENORIGUAL",
"comparacion : MAYORIGUAL",
"comparacion : DIST",
"bloque_ejecutable :",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable PUNTOCOMA",
"bloque_ejecutable : bloque_ejecutable sentencia_ejecutable",
"sentencia_out : OUT PARENT_A CADENA PARENT_C",
"sentencia_out : OUT PARENT_A CADENA error",
"sentencia_out : OUT PARENT_A error",
"sentencia_out : OUT error",
"sentencia_when : WHEN PARENT_A factor comparacion factor PARENT_C THEN LLAVE_A bloque_sentencias LLAVE_C",
"sentencia_when : WHEN PARENT_A factor comparacion factor PARENT_C THEN sentencia",
"sentencia_when : WHEN PARENT_A factor comparacion factor PARENT_C THEN LLAVE_A bloque_sentencias error",
"sentencia_when : WHEN PARENT_A factor comparacion factor PARENT_C THEN error",
"sentencia_when : WHEN PARENT_A factor comparacion factor PARENT_C error",
"sentencia_when : WHEN PARENT_A factor comparacion factor error",
"sentencia_when : WHEN PARENT_A error",
"sentencia_when : WHEN error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion PARENT_C error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A condicion error",
"encabezado_while_etiqueta : etiqueta WHILE PARENT_A error",
"encabezado_while_etiqueta : etiqueta WHILE error",
"encabezado_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion PARENT_C",
"encabezado_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A asignacion error",
"encabezado_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS PARENT_A error",
"encabezado_while : WHILE PARENT_A condicion PARENT_C DOSPUNTOS error",
"encabezado_while : WHILE PARENT_A condicion PARENT_C error",
"encabezado_while : WHILE PARENT_A condicion error",
"encabezado_while : WHILE PARENT_A error",
"encabezado_while : WHILE error",
"sentencia_while : encabezado_while_etiqueta LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : encabezado_while_etiqueta ejecutables_break_continue",
"sentencia_while : encabezado_while LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_while : encabezado_while ejecutables_break_continue",
"sentencia_while : encabezado_while LLAVE_A bloque_break_continue error",
"sentencia_while : encabezado_while error",
"bloque_break_continue :",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue PUNTOCOMA",
"bloque_break_continue : bloque_break_continue ejecutables_break_continue",
"ejecutables_break_continue : asignacion",
"ejecutables_break_continue : sentencia_if_break",
"ejecutables_break_continue : sentencia_out",
"ejecutables_break_continue : sentencia_while",
"ejecutables_break_continue : sentencia_for",
"ejecutables_break_continue : CONTINUE tag",
"ejecutables_break_continue : BREAK",
"tag :",
"tag : DOSPUNTOS ID",
"tag : DOSPUNTOS error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C END_IF",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue LLAVE_C error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE LLAVE_A bloque_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN ejecutables_break_continue PUNTOCOMA ELSE ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue PUNTOCOMA error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN LLAVE_A bloque_break_continue LLAVE_C ELSE ejecutables_break_continue error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C THEN error",
"sentencia_if_break : IF PARENT_A condicion PARENT_C error",
"sentencia_if_break : IF PARENT_A condicion error",
"sentencia_if_break : IF PARENT_A error",
"sentencia_if_break : IF error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for PUNTOCOMA error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG constante_for error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID ASIG error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A ID error",
"encabezado_for_etiqueta : etiqueta FOR PARENT_A error",
"encabezado_for_etiqueta : etiqueta FOR error",
"encabezado_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for PARENT_C",
"encabezado_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for PARENT_C",
"encabezado_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA constante_for error",
"encabezado_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA constante_for error",
"encabezado_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA SUMA error",
"encabezado_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA RESTA error",
"encabezado_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion PUNTOCOMA error",
"encabezado_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion expresion error",
"encabezado_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID comparacion error",
"encabezado_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA ID error",
"encabezado_for : FOR PARENT_A ID ASIG constante_for PUNTOCOMA error",
"encabezado_for : FOR PARENT_A ID ASIG constante_for error",
"encabezado_for : FOR PARENT_A ID ASIG error",
"encabezado_for : FOR PARENT_A ID error",
"encabezado_for : FOR PARENT_A error",
"encabezado_for : FOR error",
"sentencia_for : encabezado_for_etiqueta LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : encabezado_for_etiqueta ejecutables_break_continue",
"sentencia_for : encabezado_for LLAVE_A bloque_break_continue LLAVE_C",
"sentencia_for : encabezado_for ejecutables_break_continue",
"sentencia_for : encabezado_for_etiqueta LLAVE_A bloque_break_continue error",
"sentencia_for : encabezado_for_etiqueta error",
"sentencia_for : encabezado_for LLAVE_A bloque_break_continue error",
"sentencia_for : encabezado_for error",
"param_real : cte",
"param_real : ID",
"llamado_func : ID PARENT_A param_real COMA param_real PARENT_C",
"llamado_func : ID PARENT_A param_real PARENT_C",
"llamado_func : ID PARENT_A PARENT_C",
"llamado_func : ID PARENT_A param_real COMA param_real error",
"llamado_func : ID PARENT_A param_real error",
"llamado_func : ID PARENT_A error",
"llamado_func : ID PARENT_A param_real COMA error",
};

//#line 1885 "gramatica.y"
private NodoControl raiz;
private List<ArbolSintactico> funciones = new ArrayList<ArbolSintactico>();
private static HashMap<Integer,ArrayList<String>> erroresSintacticos = new HashMap<Integer,ArrayList<String>>();
public String ambitoActual = "Global";
private List<String> tipoActual = new ArrayList<String>();
private List<String> etiquetasAct = new ArrayList<String>();
private Stack<Boolean> hayReturn = new Stack<Boolean>();
private Stack<List<ArbolSintactico>> stackContinue = new Stack<List<ArbolSintactico>>();

void yyerror(String mensaje){
        if (erroresSintacticos.get(AnalizadorLexico.getLineaAct())== null){
                ArrayList<String> mnsj = new ArrayList<String>();
                mnsj.add(mensaje); 
                erroresSintacticos.put(AnalizadorLexico.getLineaAct(), mnsj);
        }
        else{
                erroresSintacticos.get(AnalizadorLexico.getLineaAct()).add(mensaje);
        }
}
void yyerror(String mensaje,int linea){
        if (erroresSintacticos.get(linea)== null){
                ArrayList<String> mnsj = new ArrayList<String>();
                mnsj.add(mensaje); 
                erroresSintacticos.put(linea, mnsj);
        }
        else{
                erroresSintacticos.get(linea).add(mensaje);
        }
}
static HashMap<Integer,ArrayList<String>> getErroresSintacticos(){
        return erroresSintacticos;
}
void chequearRangoI32(String sval){
  String s = "2147483647";
  long l = Long.valueOf(s);
  if(Long.valueOf(sval) > l){
    yyerror("La constante esta fuera de rango");
  }
}

void chequearRangoI32Neg(String sval){
       String s = "2147483648";
        long l = Long.valueOf(s);
        if(Long.valueOf(sval) > l){
                yyerror("La constante esta fuera de rango");
  } 
}

int yylex() throws IOException{
        Token t = AnalizadorLexico.getToken();
        this.yylval = new ParserVal(t.getLexema());
        //if(t.getId() != -1){
        //  System.out.println("Id: " + t.getId()+" Lexema: " + t.getLexema());
        //}else
        //  System.out.println("TERMINO LA EJECUCION");
        return t.getId();
}
public NodoControl getRaiz(){
	return raiz;
}
public List<ArbolSintactico> getFuncion(){
        return funciones;
}

void actualizarAmbito(String lex, String amb){
        TablaSimbolos.addAtributo(lex,"Ambito",amb);
}
public String getTipoActual(){
        if(!this.tipoActual.isEmpty()){
                return (this.tipoActual.get(tipoActual.size()-1));
        }
        return null;
}
public void cambiarTipoActual(String f){
        tipoActual.add(f);
}
public void removeTipoActual(){
        if(!this.tipoActual.isEmpty()){
                this.tipoActual.remove(tipoActual.size()-1);
        }
}
public String buscarAmbito(String ambitoActual,String lexema){
        String ambito = ambitoActual;
        while(!TablaSimbolos.existeSimbolo(lexema+"@"+ambito)){
                if(ambito.equals("Global")){
                        //yyerror("La variable " + lexema + " no se encuentra declarada en el ambito " + ambitoActual);
                        ambito = "";
                        break;
                }else{
                        char [] a = ambito.toCharArray();
                        for (int i = a.length;i>=0;i--){
                                if(a[i-1] == '@'){
                                        ambito = ambito.substring(0,i-1);
                                        break;
                                }
                        }
                }
        }

        return ambito;
}
public String calcularFloat(String f){
        int i =0;
	char caracter=' ';
	String digito=""; //parte numerica
	String exponente=""; //parte exponencial	
	while (caracter != 'F') {
                if(i<f.length()){
                      caracter = f.charAt(i);
		        digito+= caracter;
		        i++; 
                }else{
                        return f;
                }
	}
        Double d = Double.parseDouble(digito);
	for (int j=i ; j < (f.length()); j++) {
		caracter = f.charAt(j);
		exponente += caracter;
	}
	Double e = Double.parseDouble(exponente);
	Double numero = Math.pow(d, e);
        return numero.toString();	

}
//#line 1400 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse() throws IOException
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 22 "gramatica.y"
{
                                                                raiz = new NodoControl("PROGRAMA",(ArbolSintactico)val_peek(1));  
                                                                TablaSimbolos.removeAtributo(val_peek(3).sval);
                                                        }
break;
case 2:
//#line 27 "gramatica.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba }");}
break;
case 3:
//#line 30 "gramatica.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba {");}
break;
case 4:
//#line 33 "gramatica.y"
{
                yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba el nombre del programa");}
break;
case 6:
//#line 39 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 7:
//#line 40 "gramatica.y"
{
                                                        yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));
                                                        }
break;
case 8:
//#line 43 "gramatica.y"
{
                                yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba ;");
                        }
break;
case 9:
//#line 48 "gramatica.y"
{yyval=val_peek(0);}
break;
case 10:
//#line 49 "gramatica.y"
{yyval = val_peek(0);}
break;
case 11:
//#line 51 "gramatica.y"
{yyval= new NodoHoja("Sentencia Declarativa");}
break;
case 12:
//#line 52 "gramatica.y"
{
                                yyval= new NodoHoja("Sentencia Declarativa");
                                }
break;
case 13:
//#line 55 "gramatica.y"
{yyval= new NodoHoja("Sentencia Declarativa");}
break;
case 14:
//#line 56 "gramatica.y"
{yyval=val_peek(0);}
break;
case 15:
//#line 58 "gramatica.y"
{
            yyval = new NodoHoja("Entero");
            ((NodoHoja)yyval).setTipo("Entero");
           }
break;
case 16:
//#line 62 "gramatica.y"
{
            yyval = new NodoHoja("Float");
            ((NodoHoja)yyval).setTipo("Float");
           }
break;
case 19:
//#line 69 "gramatica.y"
{
                        String ambito=buscarAmbito(ambitoActual, val_peek(0).sval);
                        if (!TablaSimbolos.existeSimbolo(val_peek(0).sval+ "@" + ambito)){
                                yyerror("La constante '" + val_peek(0).sval + "' no fue declarada");
                        }
                        else{ 
                                if(!((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso")).equals("Constante")){
                                        yyerror(val_peek(0).sval+" debe ser una constante");
                                }
                                if(!((String)TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Tipo")).equals("Entero")){
                                        yyerror(val_peek(0).sval+" debe ser de tipo entero");
                                }   
                        }
                }
break;
case 20:
//#line 84 "gramatica.y"
{  System.out.println("Declaracion de datos");
                                        for (String s : ((NodoTipos)val_peek(0)).getList()){
                                                String ambito = ambitoActual;
                                                while(TablaSimbolos.existeSimbolo(s+"@"+ambito)){
                                                        if(ambito.equals("Global")){
                                                                yyerror("La variable " + s + " ya se encuentra declarada en el ambito " + ambitoActual);
                                                                ambito = "";
                                                                break;
                                                        }else{
                                                                char [] a = ambito.toCharArray();
                                                                for (int i = a.length;i>=0;i--){
                                                                        if(a[i-1] == ':'){
                                                                        ambito = ambito.substring(0,i-1);
                                                                        break;
                                                                }
                                                        }
                                                }
                                        }  
                                        if(ambito.equals(ambitoActual)){
                                                TablaSimbolos.addNuevoSimbolo(s+"@"+ambito);
                                                TablaSimbolos.addAtributo(s+"@"+ambito,"Id",TablaSimbolos.getAtributo(s,"Id"));
                                                TablaSimbolos.addAtributo(s+"@"+ambito,"Tipo",((ArbolSintactico) val_peek(1)).getTipo());
                                                TablaSimbolos.addAtributo(s+"@"+ambito,"Linea",AnalizadorLexico.getLineaAct());
                                                TablaSimbolos.addAtributo(s+"@"+ambito,"Uso","Variable");
                                                TablaSimbolos.removeAtributo(s);
                                        }
                                        

                                        }
                                        yyval = val_peek(0);
                                }
break;
case 21:
//#line 115 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("se esperaba lista de identificadores entre comas");}
break;
case 22:
//#line 118 "gramatica.y"
{
                            yyval=val_peek(2);
                            ((NodoTipos)yyval).add((String)val_peek(0).sval);
                            }
break;
case 23:
//#line 122 "gramatica.y"
{
               yyval=new NodoTipos((String)val_peek(0).sval);
              }
break;
case 24:
//#line 126 "gramatica.y"
{       

                                if(!TablaSimbolos.existeSimbolo(val_peek(7).sval+ "@" + ambitoActual)){
                                        yyval = new NodoHoja(val_peek(7).sval);
                                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(0)).getTipo());
                                        TablaSimbolos.addNuevoSimbolo(val_peek(7).sval+ "@" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(7).sval+ "@" + ambitoActual,"Uso","Funcion");
                                        TablaSimbolos.addAtributo(val_peek(7).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(7).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(7).sval);
                                        TablaSimbolos.addAtributo(val_peek(7).sval+"@"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                        TablaSimbolos.addAtributo(val_peek(7).sval +"@"+ambitoActual,"Parametro1",((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual +"@"+ val_peek(7).sval);
                                        TablaSimbolos.addAtributo(val_peek(7).sval +"@"+ambitoActual,"Parametro2",((ArbolSintactico)val_peek(3)).getLex()+ "@"+ ambitoActual +"@"+ val_peek(7).sval);
                                        ambitoActual += "@"+val_peek(7).sval;
                                        cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                        /*Agrego los parametros en la tabla de simbolos*/
                                        TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual);
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(5)).getTipo());
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(5)).getLex() + "@"+ ambitoActual,"Uso","Variable");
                                        TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual);
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                        TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Uso","Variable");
                                        hayReturn.push(false);

                                }else{
                                        yyerror("La funcion " + val_peek(7).sval + " ya existe en el ambito " + ambitoActual);
                                        yyval= new NodoHoja("Ya existe un identificador con el nombre de la funcion");
                                        ambitoActual += "@"+val_peek(7).sval;
                                }
                        
                        }
break;
case 25:
//#line 156 "gramatica.y"
{
                        if(!TablaSimbolos.existeSimbolo(val_peek(5).sval+ "@" + ambitoActual)){
                                yyval = new NodoHoja(val_peek(5).sval);
                                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addNuevoSimbolo(val_peek(5).sval+ "@" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(5).sval+ "@" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(5).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(5).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(5).sval);
                                TablaSimbolos.addAtributo(val_peek(5).sval+"@"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addAtributo(val_peek(5).sval +"@"+ambitoActual,"Parametro1", ((ArbolSintactico)val_peek(3)).getLex()+ "@"+ ambitoActual +"@"+ val_peek(5).sval);
                                ambitoActual += "@"+val_peek(5).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                /*Agrego el parametro en la tabla de simbolos*/
                                TablaSimbolos.addNuevoSimbolo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual);
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Tipo",((ArbolSintactico)val_peek(3)).getTipo());
                                TablaSimbolos.addAtributo(((ArbolSintactico)val_peek(3)).getLex() + "@"+ ambitoActual,"Uso","Variable");
                                hayReturn.push(false);

                        }else{
                                yyerror("La funcion " + val_peek(5).sval + " ya existe en el ambito " + ambitoActual);
                                yyval= new NodoHoja("Ya existe un identificador con el nombre de la funcion");
                                ambitoActual += "@"+val_peek(5).sval;
                        }
                }
break;
case 26:
//#line 180 "gramatica.y"
{
                        if(!TablaSimbolos.existeSimbolo(val_peek(4).sval+ "@" + ambitoActual)){
                                yyval = new NodoHoja(val_peek(4).sval);
                                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(0)).getTipo());
                                TablaSimbolos.addNuevoSimbolo(val_peek(4).sval+ "@" + ambitoActual);
                                TablaSimbolos.addAtributo(val_peek(4).sval+ "@" + ambitoActual,"Uso","Funcion");
                                TablaSimbolos.addAtributo(val_peek(4).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(4).sval,"Id"));
                                TablaSimbolos.removeAtributo(val_peek(4).sval);
                                TablaSimbolos.addAtributo(val_peek(4).sval+"@"+ambitoActual,"Tipo",((ArbolSintactico)val_peek(0)).getTipo());
                                ambitoActual += "@"+val_peek(4).sval;
                                cambiarTipoActual(((ArbolSintactico)val_peek(0)).getTipo());
                                hayReturn.push(false);

                        }else{
                                yyerror("La funcion " + val_peek(4).sval + " ya existe en el ambito " + ambitoActual);
                                ambitoActual += "@"+val_peek(4).sval;
                                yyval= new NodoHoja("Ya existe un identificador con el nombre de la funcion");

                        }
                }
break;
case 27:
//#line 201 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 28:
//#line 204 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 29:
//#line 207 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("El tipo declarado no esta permitido");}
break;
case 30:
//#line 210 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba :");}
break;
case 31:
//#line 213 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba :");}
break;
case 32:
//#line 216 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba :");}
break;
case 33:
//#line 219 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba )");}
break;
case 34:
//#line 222 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba )");}
break;
case 35:
//#line 225 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba )");}
break;
case 36:
//#line 228 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba otro parametro");}
break;
case 37:
//#line 231 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        ambitoActual += "@"+"Error";
                        yyerror("Se esperaba (");}
break;
case 38:
//#line 234 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba un nombre de funcion");}
break;
case 39:
//#line 239 "gramatica.y"
{
                                System.out.println("Declaracion de Funcion");
                                if(hayReturn.pop() == true){
                                        char [] a = ambitoActual.toCharArray();
                                        for (int i = a.length;i>=0;i--){
                                                if(a[i-1] == '@'){
                                                        ambitoActual = ambitoActual.substring(0,i-1);
                                                        break;
                                                }
                                        }
                                        NodoControl n = new NodoControl(((ArbolSintactico)val_peek(3)).getLex()+"@"+ambitoActual,(ArbolSintactico)val_peek(1));
                                        n.setTipo(((ArbolSintactico)val_peek(3)).getTipo());
                                        yyval = new NodoControl("Funcion",n);
                                        removeTipoActual();
                                        funciones.add((ArbolSintactico)yyval);
                                        NodoHoja varAux = (new NodoHoja("@aux@"+((ArbolSintactico)val_peek(3)).getLex()+"@"+ambitoActual));
                                        varAux.setTipo(n.getTipo());
                                        varAux.setUso("variableAuxiliar");
                                }else{
                                        yyerror("La funcion " + ((ArbolSintactico)val_peek(3)).getLex() + " no cuenta con ningun retorno." );
                                }
}
break;
case 40:
//#line 261 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 41:
//#line 263 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 42:
//#line 266 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 43:
//#line 267 "gramatica.y"
{yyval=new NodoComun("Sentencia", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 44:
//#line 268 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 45:
//#line 271 "gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa Datos");}
break;
case 46:
//#line 272 "gramatica.y"
{yyval=new NodoHoja("Sentencia Declarativa Funcion");}
break;
case 47:
//#line 273 "gramatica.y"
{yyval = val_peek(0);}
break;
case 48:
//#line 274 "gramatica.y"
{yyval = val_peek(0);}
break;
case 49:
//#line 275 "gramatica.y"
{yyval=val_peek(0);}
break;
case 50:
//#line 276 "gramatica.y"
{yyval=val_peek(0);}
break;
case 51:
//#line 277 "gramatica.y"
{yyval = val_peek(0);}
break;
case 52:
//#line 278 "gramatica.y"
{yyval = val_peek(0);}
break;
case 53:
//#line 279 "gramatica.y"
{yyval=val_peek(0);}
break;
case 54:
//#line 280 "gramatica.y"
{yyval=val_peek(0);}
break;
case 55:
//#line 281 "gramatica.y"
{yyval=val_peek(0);}
break;
case 56:
//#line 284 "gramatica.y"
{System.out.println("Sentencia IF");
                                yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(8)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(5)),new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        }
break;
case 57:
//#line 287 "gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(6)),new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                }
break;
case 58:
//#line 290 "gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(7)),new NodoControl("Else", (ArbolSintactico)val_peek(3))));
                }
break;
case 59:
//#line 293 "gramatica.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                }
break;
case 60:
//#line 296 "gramatica.y"
{System.out.println("Sentencia IF");
                        yyval= new NodoComun("IF",new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then",(ArbolSintactico) val_peek(6)),new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                }
break;
case 61:
//#line 299 "gramatica.y"
{System.out.println("Sentencia IF");
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                }
break;
case 62:
//#line 302 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 63:
//#line 304 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 64:
//#line 306 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 65:
//#line 308 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 66:
//#line 310 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 67:
//#line 312 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 68:
//#line 314 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 69:
//#line 316 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 70:
//#line 318 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 71:
//#line 320 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 72:
//#line 323 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 73:
//#line 325 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 74:
//#line 327 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 75:
//#line 329 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 76:
//#line 331 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 77:
//#line 334 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 78:
//#line 336 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 79:
//#line 339 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if");}
break;
case 80:
//#line 341 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 81:
//#line 346 "gramatica.y"
{
                String atributoIzq=((ArbolSintactico)val_peek(7)).getLexemaWhen();
                String atributoDer=((ArbolSintactico)val_peek(5)).getLexemaWhen();
                if (!TablaSimbolos.getAtributo(atributoIzq, "Uso" ).equals("Constante")){
                        yyerror(atributoIzq+" no es una constante");
                        yyval = new NodoHoja("Error en el when");

                }else if (!TablaSimbolos.getAtributo(atributoDer, "Uso" ).equals("Constante")){
                        yyerror(atributoDer+" no es una constante");
                        yyval = new NodoHoja("Error en el when");
                }
                else if (!TablaSimbolos.getAtributo(atributoIzq, "Tipo" ).equals(TablaSimbolos.getAtributo(atributoDer, "Tipo" ))){
                        yyerror("Los valores de la condicion del when son de tipos diferentes");
                        yyval = new NodoHoja("Error en el when");
                }else{
                        String s1 =TablaSimbolos.getAtributo(atributoIzq, "Valor")+"";
                        String s2 =TablaSimbolos.getAtributo(atributoDer, "Valor")+"";
                        double valorIzq = Double.parseDouble(s1);
                        double valorDer = Double.parseDouble(s2);
                        switch (val_peek(6).sval){
                                case "=":
                                        if (valorIzq==valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "<":
                                        if (valorIzq < valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case ">":
                                        if (valorIzq > valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "=!":
                                        if (valorIzq != valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "<=":
                                        if (valorIzq <= valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case ">=":
                                        if (valorIzq >= valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                        } 
                }
        }
break;
case 82:
//#line 406 "gramatica.y"
{
                String atributoIzq=((ArbolSintactico)val_peek(5)).getLexemaWhen();
                String atributoDer=((ArbolSintactico)val_peek(3)).getLexemaWhen();
                if (!TablaSimbolos.getAtributo(atributoIzq, "Uso" ).equals("Constante")){
                        yyerror(atributoIzq+" no es una constante");
                        yyval = new NodoHoja("Error en el when");

                }else if (!TablaSimbolos.getAtributo(atributoDer, "Uso" ).equals("Constante")){
                        yyerror(atributoDer+" no es una constante");
                        yyval = new NodoHoja("Error en el when");
                }
                else if (!TablaSimbolos.getAtributo(atributoIzq, "Tipo" ).equals(TablaSimbolos.getAtributo(atributoDer, "Tipo" ))){
                        yyerror("Los valores de la condicion del when son de tipos diferentes");
                        yyval = new NodoHoja("Error en el when");
                }else{
                        String s1 =TablaSimbolos.getAtributo(atributoIzq, "Valor")+"";
                        String s2 =TablaSimbolos.getAtributo(atributoDer, "Valor")+"";
                        double valorIzq = Double.parseDouble(s1);
                        double valorDer = Double.parseDouble(s2);
                        switch (val_peek(4).sval){
                                case "=":
                                        if (valorIzq==valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "<":
                                        if (valorIzq < valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case ">":
                                        if (valorIzq > valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "=!":
                                        if (valorIzq != valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "<=":
                                        if (valorIzq <= valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case ">=":
                                        if (valorIzq >= valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                        } 
                }
        }
break;
case 83:
//#line 467 "gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");
                }
break;
case 84:
//#line 471 "gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");
                }
break;
case 85:
//#line 475 "gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then");
                }
break;
case 86:
//#line 479 "gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");
                }
break;
case 87:
//#line 483 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion en el when");}
break;
case 88:
//#line 485 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( en el when");}
break;
case 89:
//#line 488 "gramatica.y"
{
                                yyval = new ParserVal(val_peek(1).sval);
                                if(!TablaSimbolos.existeSimbolo(val_peek(1).sval+ "@" + ambitoActual)){
                                        TablaSimbolos.addNuevoSimbolo(val_peek(1).sval+ "@" + ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(1).sval+ "@" + ambitoActual,"Uso","Etiqueta");
                                        TablaSimbolos.addAtributo(val_peek(1).sval+ "@" + ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(1).sval,"Id"));
                                        TablaSimbolos.removeAtributo(val_peek(1).sval);
                                        System.out.println("Se agrego la etiqueta: "+val_peek(1).sval + "@" + ambitoActual );
                                        etiquetasAct.add(val_peek(1).sval + "@" + ambitoActual);
                                }else{
                                        yyerror("La etiqueta '" + val_peek(1).sval + "' ya existe en el ambito " + ambitoActual);
                                }
                        }
break;
case 90:
//#line 503 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().setIzq((ArbolSintactico)val_peek(1));
                                List<ArbolSintactico> l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer());
                                }
                                etiquetasAct.remove(((ArbolSintactico)val_peek(3)).getDer().getIzq().getLex());
                                yyval=val_peek(3);
                        }else{
                                yyval = val_peek(3);
                        }
                }
break;
case 91:
//#line 516 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().setIzq((ArbolSintactico)val_peek(0));
                                List<ArbolSintactico> l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer());
                                }
                                etiquetasAct.remove(((ArbolSintactico)val_peek(1)).getDer().getIzq().getLex());
                                yyval=val_peek(1);
                        }else{
                                yyval = val_peek(1);
                        }
                }
break;
case 92:
//#line 529 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().setIzq((ArbolSintactico)val_peek(1));
                                List<ArbolSintactico> l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer());
                                }
                                yyval = val_peek(3);
                        }else{
                                yyval = val_peek(3);
                        }
                }
break;
case 93:
//#line 541 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().setIzq((ArbolSintactico)val_peek(0));
                                List<ArbolSintactico> l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer());
                                }
                                yyval = val_peek(1);
                        }else{
                                yyval = val_peek(1);
                        }
                }
break;
case 94:
//#line 555 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(1));
                                List<ArbolSintactico> l= stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer().getDer());
                                }
                                etiquetasAct.remove(((ArbolSintactico)val_peek(3)).getIzq().getIzq().getLex());
                        }
                        yyval = val_peek(3);
                }
break;
case 95:
//#line 566 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(0));
                                List<ArbolSintactico> l= stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer().getDer());
                                }
                                etiquetasAct.remove(((ArbolSintactico)val_peek(1)).getIzq().getIzq().getLex());
                        }
                        yyval = val_peek(1);
                }
break;
case 96:
//#line 577 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(1));
                                List<ArbolSintactico> l= stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer());
                                }
                        }
                        yyval = val_peek(3);
                }
break;
case 97:
//#line 587 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(0));
                                List<ArbolSintactico> l= stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer());
                                }
                        }
                        yyval = val_peek(1);
                }
break;
case 98:
//#line 597 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 99:
//#line 599 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 100:
//#line 602 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 101:
//#line 603 "gramatica.y"
{yyval=new NodoComun("Sentencia_Break", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 102:
//#line 604 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 103:
//#line 607 "gramatica.y"
{yyval = val_peek(0);}
break;
case 104:
//#line 608 "gramatica.y"
{yyval = val_peek(0);}
break;
case 105:
//#line 609 "gramatica.y"
{yyval = val_peek(0);}
break;
case 106:
//#line 610 "gramatica.y"
{yyval = val_peek(0);}
break;
case 107:
//#line 611 "gramatica.y"
{yyval = val_peek(0);}
break;
case 108:
//#line 612 "gramatica.y"
{        boolean b = false;
                                        if(((ArbolSintactico)val_peek(0)).getIzq()!=null){
                                                String tag = ((ArbolSintactico)val_peek(0)).getIzq().getLex() + "@" + ambitoActual;
                                                for(String s : etiquetasAct){
                                                        if( tag.equals(s)){
                                                                b = true;
                                                                break;
                                                        }
                                                }
                                                if(!b){
                                                        yyerror("No se puede saltar al tag " + ((ArbolSintactico)val_peek(0)).getIzq().getLex());
                                                        yyval = new NodoHoja("Error");
                                                }else{
                                                        yyval = new NodoComun("Continue",new NodoHoja("Fin"),(ArbolSintactico)val_peek(0));
                                                        stackContinue.peek().add((ArbolSintactico)yyval);
                                                }
                                        }else{
                                                yyval = new NodoComun("Continue",null,(ArbolSintactico)val_peek(0));
                                        }
                                }
break;
case 109:
//#line 632 "gramatica.y"
{yyval = new NodoHoja("Break");}
break;
case 110:
//#line 633 "gramatica.y"
{yyval = new NodoControl("Break", new NodoHoja(val_peek(0).sval));}
break;
case 111:
//#line 634 "gramatica.y"
{yyval=val_peek(0);}
break;
case 112:
//#line 639 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 113:
//#line 644 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 114:
//#line 649 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 115:
//#line 654 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 116:
//#line 659 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 117:
//#line 664 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 118:
//#line 668 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 119:
//#line 670 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 120:
//#line 672 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 121:
//#line 674 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 122:
//#line 676 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 123:
//#line 679 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 124:
//#line 681 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 125:
//#line 683 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 126:
//#line 685 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 127:
//#line 687 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 128:
//#line 690 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 129:
//#line 692 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 130:
//#line 695 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 131:
//#line 697 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 132:
//#line 700 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 133:
//#line 702 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 134:
//#line 704 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 135:
//#line 706 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 136:
//#line 708 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 137:
//#line 711 "gramatica.y"
{yyval = new NodoControl("Retorno", (ArbolSintactico)val_peek(1));
                                                String tipoRet = ((ArbolSintactico)val_peek(1)).getTipo();
                                                if(!ambitoActual.equals("Global")){
                                                        String tipoFun = getTipoActual();
                                                        if(!tipoRet.equals(tipoFun)){
                                                                yyerror("El retorno debe ser del mismo tipo que el retorno de la funcion.");
                                                        }else{
                                                                hayReturn.pop();
                                                                hayReturn.push(true);
                                                        }

                                                }else{
                                                        yyerror("El retorno puede estar solo dentro de una funcion.");
                                                }
                                        }
break;
case 138:
//#line 726 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba )");}
break;
case 139:
//#line 728 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion");}
break;
case 140:
//#line 730 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion entre ( )");}
break;
case 141:
//#line 734 "gramatica.y"
{    yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(1)).getTipo());
}
break;
case 142:
//#line 737 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba identificador");}
break;
case 143:
//#line 741 "gramatica.y"
{System.out.println("Declaracion de Constante/s");}
break;
case 146:
//#line 747 "gramatica.y"
{ 
                                if(TablaSimbolos.existeSimbolo(val_peek(2).sval+"@"+ambitoActual)){
                                        yyerror("La variable " + val_peek(2).sval + " se encuentra declarada en el ambito " + ambitoActual);
                                }else{
                                        TablaSimbolos.addNuevoSimbolo(val_peek(2).sval+"@"+ambitoActual);
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Id",TablaSimbolos.getAtributo(val_peek(2).sval,"Id"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Tipo",TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Linea",AnalizadorLexico.getLineaAct());
                                        TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Uso","Constante");
                                        if (TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo").equals("Entero")){
                                                TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Valor", Long.valueOf(val_peek(0).sval));
                                        }else{
                                                TablaSimbolos.addAtributo(val_peek(2).sval+"@"+ambitoActual,"Valor", Double.parseDouble(val_peek(0).sval));
                                        }
                                }
                        }
break;
case 147:
//#line 763 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba una constante");}
break;
case 148:
//#line 765 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba una asignacion =:");}
break;
case 149:
//#line 768 "gramatica.y"
{yyval = val_peek(0);}
break;
case 150:
//#line 769 "gramatica.y"
{yyval = val_peek(0); }
break;
case 151:
//#line 770 "gramatica.y"
{yyval = val_peek(0);}
break;
case 152:
//#line 771 "gramatica.y"
{yyval = val_peek(0);}
break;
case 153:
//#line 772 "gramatica.y"
{yyval = val_peek(0);}
break;
case 154:
//#line 773 "gramatica.y"
{yyval=val_peek(0);}
break;
case 155:
//#line 775 "gramatica.y"
{
                                        System.out.println("Asignacion");
                                        String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                                        NodoHoja hoja = new NodoHoja(val_peek(2).sval+"@"+ambito);
                                       
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval, hoja , (ArbolSintactico) val_peek(0));

                                        String tipoS1 = "";
                                        if(!ambito.equals("")){
                                                if(((String)TablaSimbolos.getAtributo(val_peek(2).sval+"@"+ambito, "Uso")).equals("Variable")){
                                                        tipoS1 = (String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo");
                                                        ((ArbolSintactico)yyval).setTipo(tipoS1);
                                                        hoja.setUso((String)TablaSimbolos.getAtributo(val_peek(2).sval+"@"+ambito, "Uso"));
                                                        hoja.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                                }
                                                else {
                                                        yyerror(val_peek(2).sval+" no es una variable.");
                                                }
                                        }
                                        String tipoS3 = ((ArbolSintactico)val_peek(0)).getTipo();
                                        if(!(tipoS1.equals(tipoS3))){
                                                yyerror("No se puede realizar una asignacion con tipos diferentes.");
                                        }
                                        
                                }
break;
case 156:
//#line 800 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba =:");}
break;
case 157:
//#line 802 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                                yyerror("Se esperaba expresion");}
break;
case 158:
//#line 805 "gramatica.y"
{     
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));

                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una suma con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                        
                                 }
break;
case 159:
//#line 815 "gramatica.y"
{
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una resta con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                 }
break;
case 160:
//#line 824 "gramatica.y"
{yyval = val_peek(0);}
break;
case 161:
//#line 825 "gramatica.y"
{
                                        NodoHoja cte = new NodoHoja(val_peek(0).sval);
                                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        yyval = new NodoComun("For como expresion",(ArbolSintactico)val_peek(2),cte);
                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));     
                                       
                                        }
break;
case 162:
//#line 832 "gramatica.y"
{
                                        NodoHoja cte = new NodoHoja(val_peek(0).sval);
                                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                                        yyval = new NodoComun("While como expresion",(ArbolSintactico)val_peek(2),cte);
                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo")); 
                                        
                                        }
break;
case 163:
//#line 839 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un termino");}
break;
case 164:
//#line 841 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un termino");}
break;
case 165:
//#line 843 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un constante");}
break;
case 166:
//#line 845 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un constante");}
break;
case 167:
//#line 849 "gramatica.y"
{ 
                                        yyval = (ArbolSintactico) new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una multiplicacion con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 168:
//#line 858 "gramatica.y"
{
                                        yyval = new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                                        if(!(((ArbolSintactico)val_peek(2)).getTipo().equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                                                yyerror("No se puede realizar una division con diferentes tipos.");
                                        }else{
                                                ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                                        }
                                }
break;
case 169:
//#line 867 "gramatica.y"
{
                  yyval = val_peek(0);
                 }
break;
case 170:
//#line 870 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un factor");}
break;
case 171:
//#line 872 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un factor");}
break;
case 172:
//#line 875 "gramatica.y"
{
                String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                if((!ambito.equals(""))){
                        if(((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso")).equals("Variable")
                        || ((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso")).equals("Constante")){
                                yyval = new NodoHoja(val_peek(0).sval+"@"+ambito);
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Tipo"));
                                ((ArbolSintactico)yyval).setUso((String)TablaSimbolos.getAtributo(val_peek(0).sval+"@"+ambito, "Uso"));
                        }
                        else{
                                yyerror(val_peek(0).sval+" no es una variable");
                        }
                }else{
                        yyval = new NodoHoja("Error");
                }
           }
break;
case 173:
//#line 891 "gramatica.y"
{
                yyval = new NodoHoja(val_peek(0).sval);
                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                ((ArbolSintactico)yyval).setUso("Constante");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Uso","Constante");
              }
break;
case 174:
//#line 898 "gramatica.y"
{yyval=val_peek(0);}
break;
case 175:
//#line 900 "gramatica.y"
{  
                chequearRangoI32(val_peek(0).sval);
                TablaSimbolos.addNuevoSimbolo((String)val_peek(0).sval);
                TablaSimbolos.addAtributo(val_peek(0).sval, "Uso", "Constante");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Tipo", "Entero");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Valor", (String)val_peek(0).sval);
                }
break;
case 176:
//#line 907 "gramatica.y"
{  
                TablaSimbolos.addNuevoSimbolo((String)val_peek(0).sval);
                TablaSimbolos.addAtributo(val_peek(0).sval, "Uso", "Constante");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Tipo", "Float");
                TablaSimbolos.addAtributo(val_peek(0).sval, "Valor", (String)val_peek(0).sval);}
break;
case 177:
//#line 912 "gramatica.y"
{
                yyval=new ParserVal(val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addNuevoSimbolo((String)val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Uso", "Constante");
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Tipo", "Entero");
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Valor", (String)val_peek(1).sval+val_peek(0).sval);
        }
break;
case 178:
//#line 919 "gramatica.y"
{
                yyval=new ParserVal(val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addNuevoSimbolo((String)val_peek(1).sval+val_peek(0).sval);
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Uso", "Constante");
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Tipo", "Float");
                TablaSimbolos.addAtributo(val_peek(1).sval+val_peek(0).sval, "Valor", (String)val_peek(1).sval+val_peek(0).sval);
        }
break;
case 179:
//#line 927 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(1));
                                stackContinue.pop();
                        }
                        yyval = val_peek(3);
                }
break;
case 180:
//#line 934 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(0));
                                stackContinue.pop();
                        }
                        yyval = val_peek(1);
                }
break;
case 181:
//#line 941 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 182:
//#line 944 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().setIzq((ArbolSintactico)val_peek(1));
                                stackContinue.pop();
                        }
                        yyval=val_peek(3);
                }
break;
case 183:
//#line 951 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().setIzq((ArbolSintactico)val_peek(0));
                                stackContinue.pop();
                        }
                        yyval=val_peek(1);

                }
break;
case 184:
//#line 959 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 185:
//#line 962 "gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                                                                                                                                }
break;
case 186:
//#line 966 "gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");}
break;
case 187:
//#line 969 "gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                                                                                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");}
break;
case 188:
//#line 971 "gramatica.y"
{yyval = new NodoComun("IF",new NodoControl("Condicion", (ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                                                                                        System.out.println("Sentencia IF sin corchetes y sin else");}
break;
case 189:
//#line 973 "gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF con corchetes y else");}
break;
case 190:
//#line 976 "gramatica.y"
{
                                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                                        System.out.println("Sentencia IF con corchetes y sin else");}
break;
case 191:
//#line 979 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 192:
//#line 981 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 193:
//#line 983 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 194:
//#line 985 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 195:
//#line 987 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 196:
//#line 990 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 197:
//#line 992 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 198:
//#line 994 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 199:
//#line 996 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 200:
//#line 998 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 201:
//#line 1001 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 202:
//#line 1003 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 203:
//#line 1006 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 204:
//#line 1008 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 205:
//#line 1011 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 206:
//#line 1013 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 207:
//#line 1015 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 208:
//#line 1017 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 209:
//#line 1019 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 210:
//#line 1022 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 211:
//#line 1023 "gramatica.y"
{yyval=new NodoComun("Bloque Ejecutable Asignacion", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));}
break;
case 212:
//#line 1025 "gramatica.y"
{yyval = val_peek(0);}
break;
case 213:
//#line 1026 "gramatica.y"
{yyval = val_peek(0);}
break;
case 214:
//#line 1027 "gramatica.y"
{yyval = val_peek(0);}
break;
case 215:
//#line 1028 "gramatica.y"
{yyval = val_peek(0);}
break;
case 216:
//#line 1029 "gramatica.y"
{yyval = val_peek(0);}
break;
case 217:
//#line 1030 "gramatica.y"
{NodoHoja cte = new NodoHoja(val_peek(0).sval);
                        cte.setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                        yyval = new NodoControl("Break", cte);}
break;
case 218:
//#line 1034 "gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                                                                                                                                }
break;
case 219:
//#line 1038 "gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");}
break;
case 220:
//#line 1041 "gramatica.y"
{yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                                                                                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");}
break;
case 221:
//#line 1043 "gramatica.y"
{yyval = new NodoComun("IF",new NodoControl("Condicion", (ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                                                                                        System.out.println("Sentencia IF sin corchetes y sin else");}
break;
case 222:
//#line 1045 "gramatica.y"
{
                                                                                                                                yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                                                                                                                                System.out.println("Sentencia IF con corchetes y else");}
break;
case 223:
//#line 1048 "gramatica.y"
{
                                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                                        System.out.println("Sentencia IF con corchetes y sin else");}
break;
case 224:
//#line 1051 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 225:
//#line 1053 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 226:
//#line 1055 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 227:
//#line 1057 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 228:
//#line 1059 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 229:
//#line 1062 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 230:
//#line 1064 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 231:
//#line 1066 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 232:
//#line 1068 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 233:
//#line 1070 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 234:
//#line 1073 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 235:
//#line 1075 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 236:
//#line 1078 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 237:
//#line 1080 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 238:
//#line 1083 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 239:
//#line 1085 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 240:
//#line 1087 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 241:
//#line 1089 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 242:
//#line 1091 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 243:
//#line 1097 "gramatica.y"
{
                        yyval= new NodoComun(val_peek(1).sval,(ArbolSintactico)val_peek(2),(ArbolSintactico)val_peek(0));
                        ((ArbolSintactico)yyval).setTipo(((ArbolSintactico)val_peek(2)).getTipo());
                        ((ArbolSintactico)yyval).setUso("Condicion");
                        if (!((((ArbolSintactico)val_peek(2)).getTipo()).equals(((ArbolSintactico)val_peek(0)).getTipo()))){
                               yyerror("error en la comparacion entre expresiones de distintos tipos");
                        }
                }
break;
case 244:
//#line 1105 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba otra expresion para comparar.");}
break;
case 245:
//#line 1107 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un tipo de comparacion.");}
break;
case 246:
//#line 1110 "gramatica.y"
{yyval= val_peek(0);}
break;
case 247:
//#line 1111 "gramatica.y"
{yyval= val_peek(0);}
break;
case 248:
//#line 1112 "gramatica.y"
{yyval= val_peek(0);}
break;
case 249:
//#line 1113 "gramatica.y"
{yyval= val_peek(0);}
break;
case 250:
//#line 1114 "gramatica.y"
{yyval= val_peek(0);}
break;
case 251:
//#line 1115 "gramatica.y"
{yyval=val_peek(0);}
break;
case 252:
//#line 1117 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 253:
//#line 1118 "gramatica.y"
{
                                                                yyval=new NodoComun("Bloque Ejecutable", (ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));
                                                                }
break;
case 254:
//#line 1121 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ;");}
break;
case 255:
//#line 1124 "gramatica.y"
{
                        yyval = new NodoControl(val_peek(3).sval, (ArbolSintactico) new NodoHoja(val_peek(1).sval));
                        System.out.println("Sentencia OUT");}
break;
case 256:
//#line 1127 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 257:
//#line 1129 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una CADENA");}
break;
case 258:
//#line 1131 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 259:
//#line 1134 "gramatica.y"
{
                String atributoIzq=((ArbolSintactico)val_peek(7)).getLexemaWhen();
                String atributoDer=((ArbolSintactico)val_peek(5)).getLexemaWhen();
                if (!TablaSimbolos.getAtributo(atributoIzq, "Uso" ).equals("Constante")){
                        yyerror(atributoIzq+" no es una constante");
                        yyval = new NodoHoja("Error en el when");

                }else if (!TablaSimbolos.getAtributo(atributoDer, "Uso" ).equals("Constante")){
                        yyerror(atributoDer+" no es una constante");
                        yyval = new NodoHoja("Error en el when");
                }
                else if (!TablaSimbolos.getAtributo(atributoIzq, "Tipo" ).equals(TablaSimbolos.getAtributo(atributoDer, "Tipo" ))){
                        yyerror("Los valores de la condicion del when son de tipos diferentes");
                        yyval = new NodoHoja("Error en el when");
                }else{
                        String s1 =TablaSimbolos.getAtributo(atributoIzq, "Valor")+"";
                        String s2 =TablaSimbolos.getAtributo(atributoDer, "Valor")+"";
                        double valorIzq = Double.parseDouble(s1);
                        double valorDer = Double.parseDouble(s2);
                        switch (val_peek(6).sval){
                                case "=":
                                        if (valorIzq==valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "<":
                                        if (valorIzq < valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case ">":
                                        if (valorIzq > valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "=!":
                                        if (valorIzq != valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "<=":
                                        if (valorIzq <= valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case ">=":
                                        if (valorIzq >= valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(1));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                        } 
                }
        }
break;
case 260:
//#line 1194 "gramatica.y"
{
                String atributoIzq=((ArbolSintactico)val_peek(5)).getLexemaWhen();
                String atributoDer=((ArbolSintactico)val_peek(3)).getLexemaWhen();
                if (!TablaSimbolos.getAtributo(atributoIzq, "Uso" ).equals("Constante")){
                        yyerror(atributoIzq+" no es una constante");
                        yyval = new NodoHoja("Error en el when");

                }else if (!TablaSimbolos.getAtributo(atributoDer, "Uso" ).equals("Constante")){
                        yyerror(atributoDer+" no es una constante");
                        yyval = new NodoHoja("Error en el when");
                }
                else if (!TablaSimbolos.getAtributo(atributoIzq, "Tipo" ).equals(TablaSimbolos.getAtributo(atributoDer, "Tipo" ))){
                        yyerror("Los valores de la condicion del when son de tipos diferentes");
                        yyval = new NodoHoja("Error en el when");
                }else{
                        String s1 =TablaSimbolos.getAtributo(atributoIzq, "Valor")+"";
                        String s2 =TablaSimbolos.getAtributo(atributoDer, "Valor")+"";
                        double valorIzq = Double.parseDouble(s1);
                        double valorDer = Double.parseDouble(s2);
                        switch (val_peek(4).sval){
                                case "=":
                                        if (valorIzq==valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "<":
                                        if (valorIzq < valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case ">":
                                        if (valorIzq > valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "=!":
                                        if (valorIzq != valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case "<=":
                                        if (valorIzq <= valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                                case ">=":
                                        if (valorIzq >= valorDer){
                                                yyval = (ArbolSintactico) new NodoControl("Sentencias When", (ArbolSintactico) val_peek(0));
                                        }else
                                               yyval = new NodoHoja("No se cumple la condicion del when"); 
                                        break;
                        } 
                }
        }
break;
case 261:
//#line 1254 "gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");
                }
break;
case 262:
//#line 1258 "gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");
                }
break;
case 263:
//#line 1262 "gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then");
                }
break;
case 264:
//#line 1266 "gramatica.y"
{
                        yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");
                }
break;
case 265:
//#line 1270 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba condicion en el when");}
break;
case 266:
//#line 1272 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( en el when");}
break;
case 267:
//#line 1275 "gramatica.y"
{ 
                        yyval = new NodoComun("While con Etiqueta",(ArbolSintactico) new NodoControl("Etiqueta", (ArbolSintactico) new NodoHoja(val_peek(8).sval)) , (ArbolSintactico) new NodoComun("While", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", null, (ArbolSintactico) val_peek(1))) );
                        
                        List<ArbolSintactico> l = new ArrayList<ArbolSintactico>();
                        stackContinue.push(l);
                        }
break;
case 268:
//#line 1281 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 269:
//#line 1283 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 270:
//#line 1285 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 271:
//#line 1287 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 272:
//#line 1289 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 273:
//#line 1291 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 274:
//#line 1293 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 275:
//#line 1296 "gramatica.y"
{
                        yyval = new NodoComun("While", (ArbolSintactico) val_peek(5), (ArbolSintactico) new NodoComun("Cuerpo - Asignacion", null, (ArbolSintactico) val_peek(1)) ); 
                        List<ArbolSintactico> l = new ArrayList<ArbolSintactico>();
                        stackContinue.push(l);      
                        }
break;
case 276:
//#line 1301 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 277:
//#line 1303 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una asignacion");}
break;
case 278:
//#line 1305 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 279:
//#line 1307 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba :");}
break;
case 280:
//#line 1309 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 281:
//#line 1311 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion");}
break;
case 282:
//#line 1313 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 283:
//#line 1316 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().setIzq((ArbolSintactico)val_peek(1));
                                List<ArbolSintactico> l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer());
                                }
                                etiquetasAct.remove(((ArbolSintactico)val_peek(3)).getIzq().getIzq().getLex());
                        }
                        yyval=val_peek(3);
                }
break;
case 284:
//#line 1327 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().setIzq((ArbolSintactico)val_peek(0));
                                List<ArbolSintactico> l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer());
                                }
                                etiquetasAct.remove(((ArbolSintactico)val_peek(1)).getIzq().getIzq().getLex());
                        }
                        yyval = val_peek(1);
                }
break;
case 285:
//#line 1338 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().setIzq((ArbolSintactico)val_peek(1));
                                List<ArbolSintactico> l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer());
                                }
                        }
                        yyval = val_peek(3);
                }
break;
case 286:
//#line 1348 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().setIzq((ArbolSintactico)val_peek(0));
                                List<ArbolSintactico> l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer());
                                }
                        }
                        yyval = val_peek(1);
                }
break;
case 287:
//#line 1358 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 288:
//#line 1360 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 289:
//#line 1364 "gramatica.y"
{yyval=new NodoHoja("Fin");}
break;
case 290:
//#line 1365 "gramatica.y"
{
                yyval = new NodoComun("Bloque Break con Continue",(ArbolSintactico) val_peek(2), (ArbolSintactico) val_peek(1));
                }
break;
case 291:
//#line 1368 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba ;");}
break;
case 292:
//#line 1372 "gramatica.y"
{yyval = val_peek(0);}
break;
case 293:
//#line 1373 "gramatica.y"
{yyval = val_peek(0);}
break;
case 294:
//#line 1374 "gramatica.y"
{yyval = val_peek(0);}
break;
case 295:
//#line 1375 "gramatica.y"
{yyval = val_peek(0);}
break;
case 296:
//#line 1376 "gramatica.y"
{yyval = val_peek(0);}
break;
case 297:
//#line 1377 "gramatica.y"
{boolean b = false;
                                        if(((ArbolSintactico)val_peek(0)).getIzq()!=null){
                                                String tag = ((ArbolSintactico)val_peek(0)).getIzq().getLex() + "@" + ambitoActual;
                                                for(String s : etiquetasAct){
                                                        if(tag.equals(s)){
                                                                b = true;
                                                                break;
                                                        }
                                                }
                                                if(!b){
                                                        yyerror("No se puede saltar al tag " + ((ArbolSintactico)val_peek(0)).getIzq().getLex());
                                                        yyval = new NodoHoja("Error");
                                                }else{
                                                        yyval = new NodoComun("Continue",new NodoHoja("Fin"),(ArbolSintactico)val_peek(0));
                                                        stackContinue.peek().add((ArbolSintactico)yyval);

                                                }
                                        }else{
                                                yyval = new NodoComun("Continue",new NodoHoja("Fin"),(ArbolSintactico)val_peek(0));
                                        }
                                }
break;
case 298:
//#line 1398 "gramatica.y"
{yyval = new NodoControl("Break",(ArbolSintactico)new NodoHoja("Fin"));}
break;
case 299:
//#line 1400 "gramatica.y"
{yyval = new NodoHoja("Fin");}
break;
case 300:
//#line 1401 "gramatica.y"
{String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        yyval = new NodoControl("Tag", new NodoHoja(val_peek(0).sval) );
                        if(!ambito.equals("")){
                                if(!TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Uso").equals("Etiqueta")){
                                        yyerror(val_peek(0).sval + " no es una etiqueta.");
                                }
                        }else{
                                yyerror("La etiqueta " + val_peek(0).sval + " no esta declarada.");
                        }
                        }
break;
case 301:
//#line 1411 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba un identificador");}
break;
case 302:
//#line 1416 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then sin corchetes y else con corchetes");
                        }
break;
case 303:
//#line 1421 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(9)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(5)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF -> then con corchetes y else sin corchetes");
                        }
break;
case 304:
//#line 1426 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(8)), new NodoComun("Cuerpo_IF",(ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(5)), (ArbolSintactico) new NodoControl("Else", (ArbolSintactico)val_peek(2))));
                        System.out.println("Sentencia IF sin corchetes y con else sin corchetes");
                        }
break;
case 305:
//#line 1431 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(5)), (ArbolSintactico) new NodoControl("Then",(ArbolSintactico)val_peek(2)) );
                        System.out.println("Sentencia IF sin corchetes y sin else");
                        }
break;
case 306:
//#line 1436 "gramatica.y"
{
                        yyval= new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(10)),(ArbolSintactico) new NodoComun("Cuerpo_IF",new NodoControl("Then", (ArbolSintactico) val_peek(6)), new NodoControl("Else",(ArbolSintactico) val_peek(2)))); 
                        System.out.println("Sentencia IF con corchetes y else");
                        }
break;
case 307:
//#line 1441 "gramatica.y"
{
                        yyval = new NodoComun("IF", new NodoControl("Condicion",(ArbolSintactico) val_peek(6)), (ArbolSintactico) new NodoControl("Then", (ArbolSintactico)val_peek(2)));
                        System.out.println("Sentencia IF con corchetes y sin else");
                        }
break;
case 308:
//#line 1445 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 309:
//#line 1447 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 310:
//#line 1449 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 311:
//#line 1451 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 312:
//#line 1453 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 313:
//#line 1456 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 314:
//#line 1458 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba } ");}
break;
case 315:
//#line 1460 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 316:
//#line 1462 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 317:
//#line 1464 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 318:
//#line 1467 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 319:
//#line 1469 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 320:
//#line 1472 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba end_if ");}
break;
case 321:
//#line 1474 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la sentencia");}
break;
case 322:
//#line 1477 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba { ");}
break;
case 323:
//#line 1479 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba then ");}
break;
case 324:
//#line 1481 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ) ");}
break;
case 325:
//#line 1483 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba una condicion ");}
break;
case 326:
//#line 1485 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ( ");}
break;
case 327:
//#line 1488 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(10).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(1).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(1).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(2).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                iterador.setUso("Variable");
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(6).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(6).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("For con Etiqueta", new NodoControl("Etiqueta",new NodoHoja(val_peek(13).sval)), new NodoComun("FOR",new NodoComun("Asignacion FOR", new NodoComun(val_peek(9).sval, id1, new NodoHoja(val_peek(8).sval)),null) ,new NodoComun("Condicion-Cuerpo", new NodoControl("Condicion",new NodoComun(val_peek(5).sval,id2, (ArbolSintactico)val_peek(4))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", null),asignacion ))) );
                                
				if (!TablaSimbolos.existeSimbolo(val_peek(10).sval+ "@" + buscarAmbito(ambitoActual, val_peek(10).sval))){
                                        yyerror("La variable '" + val_peek(10).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(10).sval+ "@" + buscarAmbito(ambitoActual, val_peek(10).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(10).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(6).sval.equals(val_peek(10).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                List<ArbolSintactico> l= new ArrayList<ArbolSintactico>();
                                stackContinue.add(l);
                        }
break;
case 328:
//#line 1524 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(11).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(2).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(3).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                iterador.setUso("Variable");
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(11).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(11).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(7).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(7).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(10).sval,id1,new NodoHoja(val_peek(9).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(6).sval,id2,(ArbolSintactico)val_peek(5))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", null ), asignacion )) );
                                
						if (!TablaSimbolos.existeSimbolo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(11).sval))){
                                        yyerror("La variable '" + val_peek(11).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(11).sval+ "@" + buscarAmbito(ambitoActual, val_peek(10).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(11).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(7).sval.equals(val_peek(11).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                List<ArbolSintactico> l = new ArrayList<ArbolSintactico>();
                                stackContinue.add(l);
                        }
break;
case 329:
//#line 1560 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 330:
//#line 1562 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 331:
//#line 1564 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 332:
//#line 1566 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 333:
//#line 1569 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 334:
//#line 1571 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 335:
//#line 1573 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 336:
//#line 1575 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 337:
//#line 1577 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 338:
//#line 1579 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 339:
//#line 1581 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 340:
//#line 1583 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 341:
//#line 1585 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 342:
//#line 1587 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 343:
//#line 1590 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(10).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                System.out.println((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(1).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(1).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(2).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                iterador.setUso("Variable");
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(6).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(6).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(9).sval,id1,new NodoHoja(val_peek(8).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(5).sval,id2,(ArbolSintactico)val_peek(4))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", null), asignacion )) );
                                
					if (!TablaSimbolos.existeSimbolo(val_peek(10).sval+ "@" + buscarAmbito(ambitoActual, val_peek(10).sval))){
                                        yyerror("La variable '" + val_peek(10).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(10).sval+ "@" + buscarAmbito(ambitoActual, val_peek(9).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(10).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(6).sval.equals(val_peek(10).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                List<ArbolSintactico> l = new ArrayList<ArbolSintactico>();
                                stackContinue.add(l);
                }
break;
case 344:
//#line 1627 "gramatica.y"
{
                                String ambito = buscarAmbito(ambitoActual,val_peek(10).sval);
                                NodoHoja operando1 = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                operando1.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                NodoHoja operando2 = new NodoHoja(val_peek(1).sval);
                                operando2.setTipo((String)TablaSimbolos.getAtributo(val_peek(1).sval +"@"+ ambito,"Tipo"));
                                operando1.setUso("Variable");
                                operando2.setUso("Variable");
                                NodoComun iteracion = new NodoComun(val_peek(2).sval,operando1,operando2);
                                iteracion.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                NodoHoja iterador = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                iterador.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                iterador.setUso("Variable");
                                NodoComun asignacion = new NodoComun("=:",iterador, iteracion);
                                asignacion.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                asignacion.setUso("Entero");
                                NodoHoja id1 = new NodoHoja(val_peek(10).sval+"@"+ambito);
                                id1.setUso("Variable");
                                id1.setTipo((String)TablaSimbolos.getAtributo(val_peek(10).sval +"@"+ ambito,"Tipo"));
                                NodoHoja id2 = new NodoHoja(val_peek(6).sval+"@"+ambito);
                                id2.setUso("Variable");
                                id2.setTipo((String)TablaSimbolos.getAtributo(val_peek(6).sval +"@"+ ambito,"Tipo"));
                                yyval = new NodoComun("FOR",new NodoComun("Asignacion FOR",new NodoComun(val_peek(9).sval,id1,new NodoHoja(val_peek(8).sval)),null),new NodoComun("Condicion-Cuerpo",new NodoControl("Condicion",new NodoComun(val_peek(5).sval,id2,(ArbolSintactico)val_peek(4))),new NodoComun("Cuerpo", new NodoControl("Cuerpo For", null), asignacion )) );
                                
						if (!TablaSimbolos.existeSimbolo(val_peek(10).sval+ "@" + buscarAmbito(ambitoActual, val_peek(10).sval))){
                                        yyerror("La variable '" + val_peek(10).sval + "' no fue declarada");
                                }
                                else if (!TablaSimbolos.getAtributo(val_peek(10).sval+ "@" + buscarAmbito(ambitoActual, val_peek(9).sval),"Tipo").equals("Entero")){
                                        yyerror("La variable '" + val_peek(10).sval + "' debe ser de tipo entero");
                                }
                                if (!val_peek(6).sval.equals(val_peek(10).sval)){
                                        yyerror("La variable de la condicion del for debe ser la misma que la variable de la asignacion del for");
                                }
                                List<ArbolSintactico> l = new ArrayList<ArbolSintactico>();
                                stackContinue.add(l);
                }
break;
case 345:
//#line 1663 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 346:
//#line 1665 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba )");}
break;
case 347:
//#line 1667 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 348:
//#line 1669 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba constante");}
break;
case 349:
//#line 1672 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador + o -");}
break;
case 350:
//#line 1674 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la comparacion");}
break;
case 351:
//#line 1676 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba expresion para comparar");}
break;
case 352:
//#line 1678 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba operador de comparacion");}
break;
case 353:
//#line 1680 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 354:
//#line 1682 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba ; luego de la asignacion");}
break;
case 355:
//#line 1684 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba numero entero para asignar");}
break;
case 356:
//#line 1686 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba =:");}
break;
case 357:
//#line 1688 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba nombre de variable");}
break;
case 358:
//#line 1690 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba (");}
break;
case 359:
//#line 1693 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(1));
                                List<ArbolSintactico> l= stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer().getDer());
                                }
                                etiquetasAct.remove(((ArbolSintactico)val_peek(3)).getIzq().getIzq().getLex());
                        }
                        yyval = val_peek(3);
                        }
break;
case 360:
//#line 1704 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(0));
                                List<ArbolSintactico> l= stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer().getDer());
                                }
                        }
                        yyval = val_peek(1);
                }
break;
case 361:
//#line 1714 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(3)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(3)).getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(1));
                                List<ArbolSintactico> l= stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(3)).getDer().getDer().getDer());
                                }
                        }
                        yyval = val_peek(3);
                        
                }
break;
case 362:
//#line 1725 "gramatica.y"
{
                        if(!((ArbolSintactico)val_peek(1)).getLex().equals("Error sintactico")){
                                ((ArbolSintactico)val_peek(1)).getDer().getDer().getIzq().setIzq((ArbolSintactico)val_peek(0));
                                List<ArbolSintactico> l = stackContinue.pop();
                                for(int i=0;i<l.size();i++){
                                        ((List<ArbolSintactico>)l).get(i).setIzq(((ArbolSintactico)val_peek(1)).getDer().getDer().getDer());
                                }
                        }
                        yyval = val_peek(1);          
                        }
break;
case 363:
//#line 1735 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 364:
//#line 1737 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 365:
//#line 1739 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba }");}
break;
case 366:
//#line 1741 "gramatica.y"
{ yyval=new NodoHoja("Error sintactico");
                        yyerror("Se esperaba {");}
break;
case 367:
//#line 1745 "gramatica.y"
{
                        yyval = new NodoHoja(val_peek(0).sval);
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval,"Tipo"));
                        ((ArbolSintactico)yyval).setUso("Variable");
                }
break;
case 368:
//#line 1751 "gramatica.y"
{
                        String ambito = buscarAmbito(ambitoActual,val_peek(0).sval);
                        if(!ambito.equals("")){
                                yyval=new NodoHoja(val_peek(0).sval+"@"+ambito);
                                ((ArbolSintactico)yyval).setUso("Variable");
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(0).sval +"@"+ ambito,"Tipo"));
                        }else{
                                yyval=new NodoHoja("Error");
                                yyerror("El parametro "+ val_peek(0).sval +" no se encuentra declarado en el ambito "+ambitoActual);
                        }
                     }
break;
case 369:
//#line 1763 "gramatica.y"
{
                                                        
                                                        String ambito = buscarAmbito(ambitoActual,val_peek(5).sval);
                                                        NodoComun parametro1=null;
                                                        NodoComun parametro2=null;
                                                        if (!ambito.equals("") ){
                                                                if( !TablaSimbolos.getAtributo(val_peek(5).sval+"@"+ambito,"Uso").equals("Funcion") ){
                                                                        yyerror("La funcion "+val_peek(5).sval+" no fue declarada");
                                                                }else{
                                                                        String par1 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +"@"+ ambito,"Parametro1");
                                                                        String par2 = (String) TablaSimbolos.getAtributo(val_peek(5).sval +"@"+ ambito,"Parametro2");
                                                                        if(par1 != null)
                                                                                if(par2 != null){
                                                                                        String tipoS3 = (String) ((ArbolSintactico) val_peek(3) ).getTipo();
                                                                                        if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") ) )){
                                                                                                String nombreS3 = ((ArbolSintactico) val_peek(3)).getLex();
                                                                                                yyerror("El tipo del parametro "+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                                                                                break;
                                                                                        }else{
                                                                                                NodoHoja n =new NodoHoja(par1);
                                                                                                n.setTipo(tipoS3);
                                                                                                n.setUso("Variable");
                                                                                                parametro1 = new NodoComun("=:",n , (ArbolSintactico)val_peek(3));
                                                                                        }
                                                                                        String tipoS5 = (String) ((ArbolSintactico) val_peek(1)).getTipo();
                                                                                        if( !(tipoS5.equals((String)TablaSimbolos.getAtributo(par2,"Tipo") ))){
                                                                                                String nombreS5 = ((ArbolSintactico) val_peek(1)).getLex();
                                                                                                yyerror("El tipo del parametro "+ nombreS5+" no coincide con el tipo declarado en la funcion.");
                                                                                                break;
                                                                                        }else{
                                                                                                NodoHoja n =new NodoHoja(par2);
                                                                                                n.setTipo(tipoS5);
                                                                                                n.setUso("Variable");
                                                                                                parametro2 = new NodoComun("=:",n, (ArbolSintactico)val_peek(1));
                                                                                        }
                                                                                }else{
                                                                                        yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                                }
                                                                        else{
                                                                                yyerror("La declaracion de la funcion no cuenta con dos parametros.");
                                                                        }
                                                                        yyval=new NodoControl("Llamado Funcion" ,new NodoComun(val_peek(5).sval+"@"+ambito,(ArbolSintactico)parametro1,(ArbolSintactico)parametro2));
                                                                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(5).sval +"@"+ ambito,"Tipo"));
                                                                }
                                                        }else{
                                                                yyerror("La funcion " + val_peek(5).sval + " no se encuentra declarada");
                                                                yyval = new NodoHoja("Error sintactico");
                                                        }
                                                }
break;
case 370:
//#line 1812 "gramatica.y"
{
                
            String ambito = buscarAmbito(ambitoActual,val_peek(3).sval);
            NodoComun parametro1=null;
            if (!ambito.equals("")){
                if (!TablaSimbolos.getAtributo(val_peek(3).sval+"@"+ambito,"Uso").equals("Funcion")){
                        yyerror("La funcion "+val_peek(3).sval+" no fue declarada");
                }else{
                        String par1 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +"@"+ ambito,"Parametro1");
                        String par2 = (String) TablaSimbolos.getAtributo(val_peek(3).sval +"@"+ ambito,"Parametro2");
                        if(par2 ==null){
                                if(par1!=null){
                                        String tipoS3 = (String) ((ArbolSintactico) val_peek(1) ).getTipo();
                                        if( !(tipoS3.equals((String)TablaSimbolos.getAtributo(par1,"Tipo") )) ){
                                                String nombreS3 = ((ArbolSintactico) val_peek(1)).getLex();
                                                yyerror("El tipo del parametro "+ nombreS3+" no coincide con el tipo declarado en la funcion.");
                                        }else{
                                                NodoHoja n =new NodoHoja(par1);
                                                n.setTipo(tipoS3);
                                                n.setUso("Variable");
                                                parametro1 = new NodoComun("=:",n , (ArbolSintactico)val_peek(1));
                                        }
                                }else{
                                        yyerror("La funcion esta declarada sin parametros.");
                                }
                        }else{
                                yyerror("La funcion esta declarada con dos parametros.");
                        }
                        yyval=new NodoControl("Llamado Funcion" ,new NodoComun(val_peek(3).sval+"@"+ambito,(ArbolSintactico)parametro1,new NodoHoja("Un solo parametro")));
                        ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(3).sval +"@"+ ambito,"Tipo"));
                }
            }else{
                        yyerror("La funcion " + val_peek(3).sval + " no se encuentra declarada");
                        yyval = new NodoHoja("Error sintactico");
            }

        }
break;
case 371:
//#line 1849 "gramatica.y"
{
                String ambito = buscarAmbito(ambitoActual,val_peek(2).sval);
                if (!ambito.equals("") ){
                        if (!TablaSimbolos.getAtributo(val_peek(2).sval+"@"+ambito,"Uso").equals("Funcion")){
                                yyerror("La funcion "+val_peek(2).sval+" no fue declarada");
                                
                        }else{
                                String par1 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Parametro1");
                                String par2 = (String) TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Parametro2");
                                if(par2 == null){
                                        if(par1 != null){
                                                yyerror("La funcion esta declarada con un parametro.");
                                        }
                                }else{
                                        yyerror("La funcion esta declarada con dos parametros.");
                                }
                                yyval=new NodoControl("Llamado Funcion", new NodoComun(val_peek(2).sval+"@"+ambito,new NodoHoja("Fin"),new NodoHoja("Fin")));
                                ((ArbolSintactico)yyval).setTipo((String)TablaSimbolos.getAtributo(val_peek(2).sval +"@"+ ambito,"Tipo"));
                        }
                }else{
                        yyerror("La funcion " + val_peek(2).sval + " no se encuentra declarada");
                        yyval = new NodoHoja("Error sintactico");
                }
                
    
        }
break;
case 372:
//#line 1875 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 373:
//#line 1877 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 374:
//#line 1879 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba )");}
break;
case 375:
//#line 1881 "gramatica.y"
{yyval=new NodoHoja("Error sintactico");
                yyerror("Se esperaba otro parametro");}
break;
//#line 4397 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 * @throws IOException
 */
public void run() throws IOException
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
